package sharding.sphere.demo.mapper;import org.apache.ibatis.annotations.Insert;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Result;import org.apache.ibatis.annotations.Results;import org.apache.ibatis.annotations.Select;import sharding.sphere.demo.entity.BinaryUser;import sharding.sphere.demo.entity.User;import java.util.List;@Mapperpublic interface BinaryUserMapper {    @Insert(            "INSERT IGNORE INTO t_user_binary(user_name, phone_number, id_number, encrypted_user_name, encrypted_phone_number, encrypted_id_number) "                    + "VALUES (#{user.userName}, #{user.phoneNumber}, #{user.idNumber}, #{user.binaryUserName}, #{user.binaryPhoneNumber}, #{user.binaryIdNumber})")    int insertUser(@Param("user") BinaryUser user);    @Insert("DELETE FROM t_user_binary WHERE ${fieldName} = #{fieldValue}")    int deleteUser(@Param("fieldName") String fieldName, @Param("fieldValue") String fieldValue);    @Select("SELECT * FROM t_user_binary WHERE ${fieldName} = #{fieldValue}")    @Results({        @Result(property = "userName", column = "user_name"),        @Result(property = "phoneNumber", column = "phone_number"),        @Result(property = "idNumber", column = "id_number"),        @Result(property = "id", column = "id")    })    List<User> findUser(            @Param("fieldName") String fieldName, @Param("fieldValue") String fieldValue);    @Select(            "SELECT * FROM t_user_binary WHERE ${fieldName} >= #{startValue} AND ${fieldName} <= #{endValue}")    @Results({        @Result(property = "userName", column = "user_name"),        @Result(property = "phoneNumber", column = "phone_number"),        @Result(property = "idNumber", column = "id_number"),        @Result(property = "id", column = "id")    })    List<User> findUserByRange(            @Param("fieldName") String fieldName,            @Param("startValue") String startValue,            @Param("endValue") String endValue);    @Select("SELECT * FROM t_user_binary WHERE ${fieldName} LIKE #{likeValue}")    @Results({        @Result(property = "userName", column = "user_name"),        @Result(property = "phoneNumber", column = "phone_number"),        @Result(property = "idNumber", column = "id_number"),        @Result(property = "id", column = "id")    })    List<User> findUserByLike(            @Param("fieldName") String fieldName, @Param("likeValue") String likeValue);}