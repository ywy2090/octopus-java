// Generated from /Users/octopus/octo/code/my-first-java/src/main/resources/g4/hive/v3/HiveParser.g4
// by ANTLR 4.13.1
package octopus.antlr.codegen.hive.v3;

import java.util.List;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class HiveParser extends Parser {
    static {
        RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION);
    }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    public static final int KW_TRUE = 1,
            KW_FALSE = 2,
            KW_ALL = 3,
            KW_NONE = 4,
            KW_AND = 5,
            KW_OR = 6,
            KW_NOT = 7,
            KW_LIKE = 8,
            KW_ANY = 9,
            KW_IF = 10,
            KW_EXISTS = 11,
            KW_ASC = 12,
            KW_DESC = 13,
            KW_NULLS = 14,
            KW_LAST = 15,
            KW_ORDER = 16,
            KW_GROUP = 17,
            KW_BY = 18,
            KW_HAVING = 19,
            KW_WHERE = 20,
            KW_FROM = 21,
            KW_AS = 22,
            KW_SELECT = 23,
            KW_DISTINCT = 24,
            KW_INSERT = 25,
            KW_OVERWRITE = 26,
            KW_OUTER = 27,
            KW_UNIQUEJOIN = 28,
            KW_PRESERVE = 29,
            KW_JOIN = 30,
            KW_LEFT = 31,
            KW_RIGHT = 32,
            KW_FULL = 33,
            KW_ON = 34,
            KW_PARTITION = 35,
            KW_PARTITIONS = 36,
            KW_TABLE = 37,
            KW_TABLES = 38,
            KW_COLUMNS = 39,
            KW_INDEX = 40,
            KW_INDEXES = 41,
            KW_REBUILD = 42,
            KW_FUNCTIONS = 43,
            KW_SHOW = 44,
            KW_MSCK = 45,
            KW_REPAIR = 46,
            KW_DIRECTORY = 47,
            KW_LOCAL = 48,
            KW_TRANSFORM = 49,
            KW_USING = 50,
            KW_CLUSTER = 51,
            KW_DISTRIBUTE = 52,
            KW_SORT = 53,
            KW_UNION = 54,
            KW_EXCEPT = 55,
            KW_LOAD = 56,
            KW_EXPORT = 57,
            KW_IMPORT = 58,
            KW_REPLICATION = 59,
            KW_METADATA = 60,
            KW_DATA = 61,
            KW_INPATH = 62,
            KW_IS = 63,
            KW_NULL = 64,
            KW_CREATE = 65,
            KW_EXTERNAL = 66,
            KW_ALTER = 67,
            KW_CHANGE = 68,
            KW_COLUMN = 69,
            KW_FIRST = 70,
            KW_AFTER = 71,
            KW_DESCRIBE = 72,
            KW_DROP = 73,
            KW_RENAME = 74,
            KW_TO = 75,
            KW_COMMENT = 76,
            KW_BOOLEAN = 77,
            KW_TINYINT = 78,
            KW_SMALLINT = 79,
            KW_INT = 80,
            KW_BIGINT = 81,
            KW_FLOAT = 82,
            KW_DOUBLE = 83,
            KW_PRECISION = 84,
            KW_DATE = 85,
            KW_DATETIME = 86,
            KW_TIMESTAMP = 87,
            KW_TIMESTAMPLOCALTZ = 88,
            KW_TIME = 89,
            KW_ZONE = 90,
            KW_INTERVAL = 91,
            KW_DECIMAL = 92,
            KW_STRING = 93,
            KW_CHAR = 94,
            KW_VARCHAR = 95,
            KW_ARRAY = 96,
            KW_STRUCT = 97,
            KW_MAP = 98,
            KW_UNIONTYPE = 99,
            KW_REDUCE = 100,
            KW_PARTITIONED = 101,
            KW_CLUSTERED = 102,
            KW_SORTED = 103,
            KW_INTO = 104,
            KW_BUCKETS = 105,
            KW_ROW = 106,
            KW_ROWS = 107,
            KW_FORMAT = 108,
            KW_DELIMITED = 109,
            KW_FIELDS = 110,
            KW_TERMINATED = 111,
            KW_ESCAPED = 112,
            KW_COLLECTION = 113,
            KW_ITEMS = 114,
            KW_KEYS = 115,
            KW_KEY_TYPE = 116,
            KW_KILL = 117,
            KW_LINES = 118,
            KW_STORED = 119,
            KW_FILEFORMAT = 120,
            KW_INPUTFORMAT = 121,
            KW_OUTPUTFORMAT = 122,
            KW_INPUTDRIVER = 123,
            KW_OUTPUTDRIVER = 124,
            KW_ENABLE = 125,
            KW_DISABLE = 126,
            KW_LOCATION = 127,
            KW_TABLESAMPLE = 128,
            KW_BUCKET = 129,
            KW_OUT = 130,
            KW_OF = 131,
            KW_PERCENT = 132,
            KW_CAST = 133,
            KW_ADD = 134,
            KW_REPLACE = 135,
            KW_RLIKE = 136,
            KW_REGEXP = 137,
            KW_TEMPORARY = 138,
            KW_FUNCTION = 139,
            KW_MACRO = 140,
            KW_FILE = 141,
            KW_JAR = 142,
            KW_EXPLAIN = 143,
            KW_EXTENDED = 144,
            KW_FORMATTED = 145,
            KW_DEPENDENCY = 146,
            KW_LOGICAL = 147,
            KW_SERDE = 148,
            KW_WITH = 149,
            KW_DEFERRED = 150,
            KW_SERDEPROPERTIES = 151,
            KW_DBPROPERTIES = 152,
            KW_LIMIT = 153,
            KW_OFFSET = 154,
            KW_SET = 155,
            KW_UNSET = 156,
            KW_TBLPROPERTIES = 157,
            KW_IDXPROPERTIES = 158,
            KW_VALUE_TYPE = 159,
            KW_ELEM_TYPE = 160,
            KW_DEFINED = 161,
            KW_CASE = 162,
            KW_WHEN = 163,
            KW_THEN = 164,
            KW_ELSE = 165,
            KW_END = 166,
            KW_MAPJOIN = 167,
            KW_STREAMTABLE = 168,
            KW_CLUSTERSTATUS = 169,
            KW_UTC = 170,
            KW_UTCTIMESTAMP = 171,
            KW_LONG = 172,
            KW_DELETE = 173,
            KW_PLUS = 174,
            KW_MINUS = 175,
            KW_FETCH = 176,
            KW_INTERSECT = 177,
            KW_VIEW = 178,
            KW_VIEWS = 179,
            KW_IN = 180,
            KW_DATABASE = 181,
            KW_DATABASES = 182,
            KW_MATERIALIZED = 183,
            KW_SCHEMA = 184,
            KW_SCHEMAS = 185,
            KW_GRANT = 186,
            KW_REVOKE = 187,
            KW_SSL = 188,
            KW_UNDO = 189,
            KW_LOCK = 190,
            KW_LOCKS = 191,
            KW_UNLOCK = 192,
            KW_SHARED = 193,
            KW_EXCLUSIVE = 194,
            KW_PROCEDURE = 195,
            KW_UNSIGNED = 196,
            KW_WHILE = 197,
            KW_READ = 198,
            KW_READS = 199,
            KW_PURGE = 200,
            KW_RANGE = 201,
            KW_ANALYZE = 202,
            KW_BEFORE = 203,
            KW_BETWEEN = 204,
            KW_BOTH = 205,
            KW_BINARY = 206,
            KW_CROSS = 207,
            KW_CONTINUE = 208,
            KW_CURSOR = 209,
            KW_TRIGGER = 210,
            KW_RECORDREADER = 211,
            KW_RECORDWRITER = 212,
            KW_SEMI = 213,
            KW_LATERAL = 214,
            KW_TOUCH = 215,
            KW_ARCHIVE = 216,
            KW_UNARCHIVE = 217,
            KW_COMPUTE = 218,
            KW_STATISTICS = 219,
            KW_USE = 220,
            KW_OPTION = 221,
            KW_CONCATENATE = 222,
            KW_SHOW_DATABASE = 223,
            KW_UPDATE = 224,
            KW_RESTRICT = 225,
            KW_CASCADE = 226,
            KW_SKEWED = 227,
            KW_ROLLUP = 228,
            KW_CUBE = 229,
            KW_DIRECTORIES = 230,
            KW_FOR = 231,
            KW_WINDOW = 232,
            KW_UNBOUNDED = 233,
            KW_PRECEDING = 234,
            KW_FOLLOWING = 235,
            KW_CURRENT = 236,
            KW_CURRENT_DATE = 237,
            KW_CURRENT_TIMESTAMP = 238,
            KW_LESS = 239,
            KW_MORE = 240,
            KW_OVER = 241,
            KW_GROUPING = 242,
            KW_SETS = 243,
            KW_TRUNCATE = 244,
            KW_NOSCAN = 245,
            KW_USER = 246,
            KW_ROLE = 247,
            KW_ROLES = 248,
            KW_INNER = 249,
            KW_EXCHANGE = 250,
            KW_URI = 251,
            KW_SERVER = 252,
            KW_ADMIN = 253,
            KW_OWNER = 254,
            KW_PRINCIPALS = 255,
            KW_COMPACT = 256,
            KW_COMPACTIONS = 257,
            KW_TRANSACTIONS = 258,
            KW_REWRITE = 259,
            KW_AUTHORIZATION = 260,
            KW_REOPTIMIZATION = 261,
            KW_CONF = 262,
            KW_VALUES = 263,
            KW_RELOAD = 264,
            KW_YEAR = 265,
            KW_QUERY = 266,
            KW_QUARTER = 267,
            KW_MONTH = 268,
            KW_WEEK = 269,
            KW_DAY = 270,
            KW_DOW = 271,
            KW_HOUR = 272,
            KW_MINUTE = 273,
            KW_SECOND = 274,
            KW_START = 275,
            KW_TRANSACTION = 276,
            KW_COMMIT = 277,
            KW_ROLLBACK = 278,
            KW_WORK = 279,
            KW_ONLY = 280,
            KW_WRITE = 281,
            KW_ISOLATION = 282,
            KW_LEVEL = 283,
            KW_SNAPSHOT = 284,
            KW_AUTOCOMMIT = 285,
            KW_CACHE = 286,
            KW_PRIMARY = 287,
            KW_FOREIGN = 288,
            KW_REFERENCES = 289,
            KW_CONSTRAINT = 290,
            KW_ENFORCED = 291,
            KW_VALIDATE = 292,
            KW_NOVALIDATE = 293,
            KW_RELY = 294,
            KW_NORELY = 295,
            KW_UNIQUE = 296,
            KW_KEY = 297,
            KW_ABORT = 298,
            KW_EXTRACT = 299,
            KW_FLOOR = 300,
            KW_MERGE = 301,
            KW_MATCHED = 302,
            KW_REPL = 303,
            KW_DUMP = 304,
            KW_STATUS = 305,
            KW_VECTORIZATION = 306,
            KW_SUMMARY = 307,
            KW_OPERATOR = 308,
            KW_EXPRESSION = 309,
            KW_DETAIL = 310,
            KW_WAIT = 311,
            KW_RESOURCE = 312,
            KW_PLAN = 313,
            KW_QUERY_PARALLELISM = 314,
            KW_PLANS = 315,
            KW_ACTIVATE = 316,
            KW_DEFAULT = 317,
            KW_CHECK = 318,
            KW_POOL = 319,
            KW_MOVE = 320,
            KW_DO = 321,
            KW_ALLOC_FRACTION = 322,
            KW_SCHEDULING_POLICY = 323,
            KW_PATH = 324,
            KW_MAPPING = 325,
            KW_WORKLOAD = 326,
            KW_MANAGEMENT = 327,
            KW_ACTIVE = 328,
            KW_UNMANAGED = 329,
            KW_APPLICATION = 330,
            KW_SYNC = 331,
            DOT = 332,
            COLON = 333,
            COMMA = 334,
            SEMICOLON = 335,
            LPAREN = 336,
            RPAREN = 337,
            LSQUARE = 338,
            RSQUARE = 339,
            LCURLY = 340,
            RCURLY = 341,
            EQUAL = 342,
            EQUAL_NS = 343,
            NOTEQUAL = 344,
            LESSTHANOREQUALTO = 345,
            LESSTHAN = 346,
            GREATERTHANOREQUALTO = 347,
            GREATERTHAN = 348,
            DIVIDE = 349,
            PLUS = 350,
            MINUS = 351,
            STAR = 352,
            MOD = 353,
            DIV = 354,
            AMPERSAND = 355,
            TILDE = 356,
            BITWISEOR = 357,
            CONCATENATE = 358,
            BITWISEXOR = 359,
            QUESTION = 360,
            DOLLAR = 361,
            StringLiteral = 362,
            CharSetLiteral = 363,
            IntegralLiteral = 364,
            NumberLiteral = 365,
            ByteLengthLiteral = 366,
            Number = 367,
            Identifier = 368,
            QuotedIdentifier = 369,
            CharSetName = 370,
            WS = 371,
            LINE_COMMENT = 372,
            QUERY_HINT = 373,
            SHOW_HINT = 374,
            HIDDEN_HINT = 375;
    public static final int RULE_statements = 0,
            RULE_statementSeparator = 1,
            RULE_statement = 2,
            RULE_explainStatement = 3,
            RULE_explainOption = 4,
            RULE_vectorizationOnly = 5,
            RULE_vectorizatonDetail = 6,
            RULE_execStatement = 7,
            RULE_loadStatement = 8,
            RULE_replicationClause = 9,
            RULE_exportStatement = 10,
            RULE_importStatement = 11,
            RULE_replDumpStatement = 12,
            RULE_replLoadStatement = 13,
            RULE_replConfigs = 14,
            RULE_replConfigsList = 15,
            RULE_replStatusStatement = 16,
            RULE_ddlStatement = 17,
            RULE_ifExists = 18,
            RULE_restrictOrCascade = 19,
            RULE_ifNotExists = 20,
            RULE_rewriteEnabled = 21,
            RULE_rewriteDisabled = 22,
            RULE_storedAsDirs = 23,
            RULE_orReplace = 24,
            RULE_createDatabaseStatement = 25,
            RULE_dbLocation = 26,
            RULE_dbProperties = 27,
            RULE_dbPropertiesList = 28,
            RULE_switchDatabaseStatement = 29,
            RULE_dropDatabaseStatement = 30,
            RULE_databaseComment = 31,
            RULE_createTableStatement = 32,
            RULE_truncateTableStatement = 33,
            RULE_dropTableStatement = 34,
            RULE_alterStatement = 35,
            RULE_alterTableStatementSuffix = 36,
            RULE_alterTblPartitionStatementSuffix = 37,
            RULE_alterStatementPartitionKeyType = 38,
            RULE_alterViewStatementSuffix = 39,
            RULE_alterMaterializedViewStatementSuffix = 40,
            RULE_alterDatabaseStatementSuffix = 41,
            RULE_alterDatabaseSuffixProperties = 42,
            RULE_alterDatabaseSuffixSetOwner = 43,
            RULE_alterDatabaseSuffixSetLocation = 44,
            RULE_alterStatementSuffixRename = 45,
            RULE_alterStatementSuffixAddCol = 46,
            RULE_alterStatementSuffixAddConstraint = 47,
            RULE_alterStatementSuffixDropConstraint = 48,
            RULE_alterStatementSuffixRenameCol = 49,
            RULE_alterStatementSuffixUpdateStatsCol = 50,
            RULE_alterStatementSuffixUpdateStats = 51,
            RULE_alterStatementChangeColPosition = 52,
            RULE_alterStatementSuffixAddPartitions = 53,
            RULE_alterStatementSuffixAddPartitionsElement = 54,
            RULE_alterStatementSuffixTouch = 55,
            RULE_alterStatementSuffixArchive = 56,
            RULE_alterStatementSuffixUnArchive = 57,
            RULE_partitionLocation = 58,
            RULE_alterStatementSuffixDropPartitions = 59,
            RULE_alterStatementSuffixProperties = 60,
            RULE_alterViewSuffixProperties = 61,
            RULE_alterMaterializedViewSuffixRewrite = 62,
            RULE_alterMaterializedViewSuffixRebuild = 63,
            RULE_alterStatementSuffixSerdeProperties = 64,
            RULE_alterIndexStatementSuffix = 65,
            RULE_alterStatementSuffixFileFormat = 66,
            RULE_alterStatementSuffixClusterbySortby = 67,
            RULE_alterTblPartitionStatementSuffixSkewedLocation = 68,
            RULE_skewedLocations = 69,
            RULE_skewedLocationsList = 70,
            RULE_skewedLocationMap = 71,
            RULE_alterStatementSuffixLocation = 72,
            RULE_alterStatementSuffixSkewedby = 73,
            RULE_alterStatementSuffixExchangePartition = 74,
            RULE_alterStatementSuffixRenamePart = 75,
            RULE_alterStatementSuffixStatsPart = 76,
            RULE_alterStatementSuffixMergeFiles = 77,
            RULE_alterStatementSuffixBucketNum = 78,
            RULE_createIndexStatement = 79,
            RULE_locationPath = 80,
            RULE_dropIndexStatement = 81,
            RULE_tablePartitionPrefix = 82,
            RULE_blocking = 83,
            RULE_alterStatementSuffixCompact = 84,
            RULE_alterStatementSuffixSetOwner = 85,
            RULE_fileFormat = 86,
            RULE_inputFileFormat = 87,
            RULE_tabTypeExpr = 88,
            RULE_partTypeExpr = 89,
            RULE_tabPartColTypeExpr = 90,
            RULE_descStatement = 91,
            RULE_analyzeStatement = 92,
            RULE_showStatement = 93,
            RULE_lockStatement = 94,
            RULE_lockDatabase = 95,
            RULE_lockMode = 96,
            RULE_unlockStatement = 97,
            RULE_unlockDatabase = 98,
            RULE_createRoleStatement = 99,
            RULE_dropRoleStatement = 100,
            RULE_grantPrivileges = 101,
            RULE_revokePrivileges = 102,
            RULE_grantRole = 103,
            RULE_revokeRole = 104,
            RULE_showRoleGrants = 105,
            RULE_showRoles = 106,
            RULE_showCurrentRole = 107,
            RULE_setRole = 108,
            RULE_showGrants = 109,
            RULE_showRolePrincipals = 110,
            RULE_privilegeIncludeColObject = 111,
            RULE_privilegeObject = 112,
            RULE_privObject = 113,
            RULE_privObjectCols = 114,
            RULE_privilegeList = 115,
            RULE_privlegeDef = 116,
            RULE_privilegeType = 117,
            RULE_principalSpecification = 118,
            RULE_principalName = 119,
            RULE_withGrantOption = 120,
            RULE_grantOptionFor = 121,
            RULE_adminOptionFor = 122,
            RULE_withAdminOption = 123,
            RULE_metastoreCheck = 124,
            RULE_resourceList = 125,
            RULE_resource = 126,
            RULE_resourceType = 127,
            RULE_createFunctionStatement = 128,
            RULE_dropFunctionStatement = 129,
            RULE_reloadFunctionStatement = 130,
            RULE_createMacroStatement = 131,
            RULE_dropMacroStatement = 132,
            RULE_createViewStatement = 133,
            RULE_createMaterializedViewStatement = 134,
            RULE_viewPartition = 135,
            RULE_dropViewStatement = 136,
            RULE_dropMaterializedViewStatement = 137,
            RULE_showFunctionIdentifier = 138,
            RULE_showStmtIdentifier = 139,
            RULE_tableComment = 140,
            RULE_tablePartition = 141,
            RULE_tableBuckets = 142,
            RULE_tableSkewed = 143,
            RULE_rowFormat = 144,
            RULE_recordReader = 145,
            RULE_recordWriter = 146,
            RULE_rowFormatSerde = 147,
            RULE_rowFormatDelimited = 148,
            RULE_tableRowFormat = 149,
            RULE_tablePropertiesPrefixed = 150,
            RULE_tableProperties = 151,
            RULE_tablePropertiesList = 152,
            RULE_keyValueProperty = 153,
            RULE_keyProperty = 154,
            RULE_tableRowFormatFieldIdentifier = 155,
            RULE_tableRowFormatCollItemsIdentifier = 156,
            RULE_tableRowFormatMapKeysIdentifier = 157,
            RULE_tableRowFormatLinesIdentifier = 158,
            RULE_tableRowNullFormat = 159,
            RULE_tableFileFormat = 160,
            RULE_tableLocation = 161,
            RULE_columnNameTypeList = 162,
            RULE_columnNameTypeOrConstraintList = 163,
            RULE_columnNameColonTypeList = 164,
            RULE_columnNameList = 165,
            RULE_columnName = 166,
            RULE_extColumnName = 167,
            RULE_columnNameOrderList = 168,
            RULE_columnParenthesesList = 169,
            RULE_enableValidateSpecification = 170,
            RULE_enableSpecification = 171,
            RULE_validateSpecification = 172,
            RULE_enforcedSpecification = 173,
            RULE_relySpecification = 174,
            RULE_createConstraint = 175,
            RULE_alterConstraintWithName = 176,
            RULE_pkConstraint = 177,
            RULE_createForeignKey = 178,
            RULE_alterForeignKeyWithName = 179,
            RULE_skewedValueElement = 180,
            RULE_skewedColumnValuePairList = 181,
            RULE_skewedColumnValuePair = 182,
            RULE_skewedColumnValues = 183,
            RULE_skewedColumnValue = 184,
            RULE_skewedValueLocationElement = 185,
            RULE_orderSpecification = 186,
            RULE_nullOrdering = 187,
            RULE_columnNameOrder = 188,
            RULE_columnNameCommentList = 189,
            RULE_columnNameComment = 190,
            RULE_columnRefOrder = 191,
            RULE_columnNameType = 192,
            RULE_columnNameTypeOrConstraint = 193,
            RULE_tableConstraint = 194,
            RULE_columnNameTypeConstraint = 195,
            RULE_columnConstraint = 196,
            RULE_foreignKeyConstraint = 197,
            RULE_colConstraint = 198,
            RULE_alterColumnConstraint = 199,
            RULE_alterForeignKeyConstraint = 200,
            RULE_alterColConstraint = 201,
            RULE_tableConstraintPrimaryKey = 202,
            RULE_constraintOptsCreate = 203,
            RULE_constraintOptsAlter = 204,
            RULE_columnNameColonType = 205,
            RULE_colType = 206,
            RULE_colTypeList = 207,
            RULE_type_db_col = 208,
            RULE_primitiveType = 209,
            RULE_listType = 210,
            RULE_structType = 211,
            RULE_mapType = 212,
            RULE_unionType = 213,
            RULE_setOperator = 214,
            RULE_queryStatementExpression = 215,
            RULE_queryStatementExpressionBody = 216,
            RULE_withClause = 217,
            RULE_cteStatement = 218,
            RULE_fromStatement = 219,
            RULE_singleFromStatement = 220,
            RULE_regularBody = 221,
            RULE_atomSelectStatement = 222,
            RULE_selectStatement = 223,
            RULE_setOpSelectStatement = 224,
            RULE_selectStatementWithCTE = 225,
            RULE_body = 226,
            RULE_insertClause = 227,
            RULE_destination = 228,
            RULE_limitClause = 229,
            RULE_deleteStatement = 230,
            RULE_columnAssignmentClause = 231,
            RULE_setColumnsClause = 232,
            RULE_updateStatement = 233,
            RULE_sqlTransactionStatement = 234,
            RULE_startTransactionStatement = 235,
            RULE_transactionMode = 236,
            RULE_transactionAccessMode = 237,
            RULE_isolationLevel = 238,
            RULE_levelOfIsolation = 239,
            RULE_commitStatement = 240,
            RULE_rollbackStatement = 241,
            RULE_setAutoCommitStatement = 242,
            RULE_abortTransactionStatement = 243,
            RULE_mergeStatement = 244,
            RULE_whenClauses = 245,
            RULE_whenNotMatchedClause = 246,
            RULE_whenMatchedAndClause = 247,
            RULE_whenMatchedThenClause = 248,
            RULE_updateOrDelete = 249,
            RULE_killQueryStatement = 250,
            RULE_selectClause = 251,
            RULE_selectList = 252,
            RULE_selectTrfmClause = 253,
            RULE_selectItem = 254,
            RULE_trfmClause = 255,
            RULE_selectExpression = 256,
            RULE_selectExpressionList = 257,
            RULE_window_clause = 258,
            RULE_window_defn = 259,
            RULE_window_specification = 260,
            RULE_window_frame = 261,
            RULE_window_range_expression = 262,
            RULE_window_value_expression = 263,
            RULE_window_frame_start_boundary = 264,
            RULE_window_frame_boundary = 265,
            RULE_tableAllColumns = 266,
            RULE_tableOrColumn = 267,
            RULE_expressionList = 268,
            RULE_aliasList = 269,
            RULE_fromClause = 270,
            RULE_fromSource = 271,
            RULE_atomjoinSource = 272,
            RULE_joinSource = 273,
            RULE_joinSourcePart = 274,
            RULE_uniqueJoinSource = 275,
            RULE_uniqueJoinExpr = 276,
            RULE_uniqueJoinToken = 277,
            RULE_joinToken = 278,
            RULE_lateralView = 279,
            RULE_tableAlias = 280,
            RULE_tableBucketSample = 281,
            RULE_splitSample = 282,
            RULE_tableSample = 283,
            RULE_tableSource = 284,
            RULE_uniqueJoinTableSource = 285,
            RULE_tableName = 286,
            RULE_viewName = 287,
            RULE_subQuerySource = 288,
            RULE_partitioningSpec = 289,
            RULE_partitionTableFunctionSource = 290,
            RULE_partitionedTableFunction = 291,
            RULE_whereClause = 292,
            RULE_searchCondition = 293,
            RULE_valuesClause = 294,
            RULE_valuesTableConstructor = 295,
            RULE_valueRowConstructor = 296,
            RULE_virtualTableSource = 297,
            RULE_groupByClause = 298,
            RULE_groupby_expression = 299,
            RULE_groupByEmpty = 300,
            RULE_rollupStandard = 301,
            RULE_rollupOldSyntax = 302,
            RULE_groupingSetExpression = 303,
            RULE_groupingSetExpressionMultiple = 304,
            RULE_groupingExpressionSingle = 305,
            RULE_havingClause = 306,
            RULE_havingCondition = 307,
            RULE_expressionsInParenthesis = 308,
            RULE_expressionsNotInParenthesis = 309,
            RULE_expressionPart = 310,
            RULE_expressions = 311,
            RULE_columnRefOrderInParenthesis = 312,
            RULE_columnRefOrderNotInParenthesis = 313,
            RULE_orderByClause = 314,
            RULE_clusterByClause = 315,
            RULE_partitionByClause = 316,
            RULE_distributeByClause = 317,
            RULE_sortByClause = 318,
            RULE_function_ = 319,
            RULE_functionName = 320,
            RULE_castExpression = 321,
            RULE_caseExpression = 322,
            RULE_whenExpression = 323,
            RULE_floorExpression = 324,
            RULE_floorDateQualifiers = 325,
            RULE_extractExpression = 326,
            RULE_timeQualifiers = 327,
            RULE_constant = 328,
            RULE_stringLiteralSequence = 329,
            RULE_charSetStringLiteral = 330,
            RULE_dateLiteral = 331,
            RULE_timestampLiteral = 332,
            RULE_timestampLocalTZLiteral = 333,
            RULE_intervalValue = 334,
            RULE_intervalLiteral = 335,
            RULE_intervalExpression = 336,
            RULE_intervalQualifiers = 337,
            RULE_atomExpression = 338,
            RULE_precedenceUnaryOperator = 339,
            RULE_isCondition = 340,
            RULE_precedenceBitwiseXorOperator = 341,
            RULE_precedenceStarOperator = 342,
            RULE_precedencePlusOperator = 343,
            RULE_precedenceConcatenateOperator = 344,
            RULE_precedenceAmpersandOperator = 345,
            RULE_precedenceBitwiseOrOperator = 346,
            RULE_precedenceRegexpOperator = 347,
            RULE_precedenceComparisonOperator = 348,
            RULE_precedenceNotOperator = 349,
            RULE_precedenceLogicOperator = 350,
            RULE_expression = 351,
            RULE_precedenceExpression = 352,
            RULE_precedenceSimilarExpressionIn = 353,
            RULE_subQueryExpression = 354,
            RULE_booleanValue = 355,
            RULE_booleanValueTok = 356,
            RULE_tableOrPartition = 357,
            RULE_partitionSpec = 358,
            RULE_partitionVal = 359,
            RULE_dropPartitionSpec = 360,
            RULE_dropPartitionVal = 361,
            RULE_dropPartitionOperator = 362,
            RULE_sysFuncNames = 363,
            RULE_descFuncNames = 364,
            RULE_identifier = 365,
            RULE_functionIdentifier = 366,
            RULE_principalIdentifier = 367,
            RULE_nonReserved = 368,
            RULE_sql11ReservedKeywordsUsedAsFunctionName = 369;

    private static String[] makeRuleNames() {
        return new String[] {
            "statements",
            "statementSeparator",
            "statement",
            "explainStatement",
            "explainOption",
            "vectorizationOnly",
            "vectorizatonDetail",
            "execStatement",
            "loadStatement",
            "replicationClause",
            "exportStatement",
            "importStatement",
            "replDumpStatement",
            "replLoadStatement",
            "replConfigs",
            "replConfigsList",
            "replStatusStatement",
            "ddlStatement",
            "ifExists",
            "restrictOrCascade",
            "ifNotExists",
            "rewriteEnabled",
            "rewriteDisabled",
            "storedAsDirs",
            "orReplace",
            "createDatabaseStatement",
            "dbLocation",
            "dbProperties",
            "dbPropertiesList",
            "switchDatabaseStatement",
            "dropDatabaseStatement",
            "databaseComment",
            "createTableStatement",
            "truncateTableStatement",
            "dropTableStatement",
            "alterStatement",
            "alterTableStatementSuffix",
            "alterTblPartitionStatementSuffix",
            "alterStatementPartitionKeyType",
            "alterViewStatementSuffix",
            "alterMaterializedViewStatementSuffix",
            "alterDatabaseStatementSuffix",
            "alterDatabaseSuffixProperties",
            "alterDatabaseSuffixSetOwner",
            "alterDatabaseSuffixSetLocation",
            "alterStatementSuffixRename",
            "alterStatementSuffixAddCol",
            "alterStatementSuffixAddConstraint",
            "alterStatementSuffixDropConstraint",
            "alterStatementSuffixRenameCol",
            "alterStatementSuffixUpdateStatsCol",
            "alterStatementSuffixUpdateStats",
            "alterStatementChangeColPosition",
            "alterStatementSuffixAddPartitions",
            "alterStatementSuffixAddPartitionsElement",
            "alterStatementSuffixTouch",
            "alterStatementSuffixArchive",
            "alterStatementSuffixUnArchive",
            "partitionLocation",
            "alterStatementSuffixDropPartitions",
            "alterStatementSuffixProperties",
            "alterViewSuffixProperties",
            "alterMaterializedViewSuffixRewrite",
            "alterMaterializedViewSuffixRebuild",
            "alterStatementSuffixSerdeProperties",
            "alterIndexStatementSuffix",
            "alterStatementSuffixFileFormat",
            "alterStatementSuffixClusterbySortby",
            "alterTblPartitionStatementSuffixSkewedLocation",
            "skewedLocations",
            "skewedLocationsList",
            "skewedLocationMap",
            "alterStatementSuffixLocation",
            "alterStatementSuffixSkewedby",
            "alterStatementSuffixExchangePartition",
            "alterStatementSuffixRenamePart",
            "alterStatementSuffixStatsPart",
            "alterStatementSuffixMergeFiles",
            "alterStatementSuffixBucketNum",
            "createIndexStatement",
            "locationPath",
            "dropIndexStatement",
            "tablePartitionPrefix",
            "blocking",
            "alterStatementSuffixCompact",
            "alterStatementSuffixSetOwner",
            "fileFormat",
            "inputFileFormat",
            "tabTypeExpr",
            "partTypeExpr",
            "tabPartColTypeExpr",
            "descStatement",
            "analyzeStatement",
            "showStatement",
            "lockStatement",
            "lockDatabase",
            "lockMode",
            "unlockStatement",
            "unlockDatabase",
            "createRoleStatement",
            "dropRoleStatement",
            "grantPrivileges",
            "revokePrivileges",
            "grantRole",
            "revokeRole",
            "showRoleGrants",
            "showRoles",
            "showCurrentRole",
            "setRole",
            "showGrants",
            "showRolePrincipals",
            "privilegeIncludeColObject",
            "privilegeObject",
            "privObject",
            "privObjectCols",
            "privilegeList",
            "privlegeDef",
            "privilegeType",
            "principalSpecification",
            "principalName",
            "withGrantOption",
            "grantOptionFor",
            "adminOptionFor",
            "withAdminOption",
            "metastoreCheck",
            "resourceList",
            "resource",
            "resourceType",
            "createFunctionStatement",
            "dropFunctionStatement",
            "reloadFunctionStatement",
            "createMacroStatement",
            "dropMacroStatement",
            "createViewStatement",
            "createMaterializedViewStatement",
            "viewPartition",
            "dropViewStatement",
            "dropMaterializedViewStatement",
            "showFunctionIdentifier",
            "showStmtIdentifier",
            "tableComment",
            "tablePartition",
            "tableBuckets",
            "tableSkewed",
            "rowFormat",
            "recordReader",
            "recordWriter",
            "rowFormatSerde",
            "rowFormatDelimited",
            "tableRowFormat",
            "tablePropertiesPrefixed",
            "tableProperties",
            "tablePropertiesList",
            "keyValueProperty",
            "keyProperty",
            "tableRowFormatFieldIdentifier",
            "tableRowFormatCollItemsIdentifier",
            "tableRowFormatMapKeysIdentifier",
            "tableRowFormatLinesIdentifier",
            "tableRowNullFormat",
            "tableFileFormat",
            "tableLocation",
            "columnNameTypeList",
            "columnNameTypeOrConstraintList",
            "columnNameColonTypeList",
            "columnNameList",
            "columnName",
            "extColumnName",
            "columnNameOrderList",
            "columnParenthesesList",
            "enableValidateSpecification",
            "enableSpecification",
            "validateSpecification",
            "enforcedSpecification",
            "relySpecification",
            "createConstraint",
            "alterConstraintWithName",
            "pkConstraint",
            "createForeignKey",
            "alterForeignKeyWithName",
            "skewedValueElement",
            "skewedColumnValuePairList",
            "skewedColumnValuePair",
            "skewedColumnValues",
            "skewedColumnValue",
            "skewedValueLocationElement",
            "orderSpecification",
            "nullOrdering",
            "columnNameOrder",
            "columnNameCommentList",
            "columnNameComment",
            "columnRefOrder",
            "columnNameType",
            "columnNameTypeOrConstraint",
            "tableConstraint",
            "columnNameTypeConstraint",
            "columnConstraint",
            "foreignKeyConstraint",
            "colConstraint",
            "alterColumnConstraint",
            "alterForeignKeyConstraint",
            "alterColConstraint",
            "tableConstraintPrimaryKey",
            "constraintOptsCreate",
            "constraintOptsAlter",
            "columnNameColonType",
            "colType",
            "colTypeList",
            "type_db_col",
            "primitiveType",
            "listType",
            "structType",
            "mapType",
            "unionType",
            "setOperator",
            "queryStatementExpression",
            "queryStatementExpressionBody",
            "withClause",
            "cteStatement",
            "fromStatement",
            "singleFromStatement",
            "regularBody",
            "atomSelectStatement",
            "selectStatement",
            "setOpSelectStatement",
            "selectStatementWithCTE",
            "body",
            "insertClause",
            "destination",
            "limitClause",
            "deleteStatement",
            "columnAssignmentClause",
            "setColumnsClause",
            "updateStatement",
            "sqlTransactionStatement",
            "startTransactionStatement",
            "transactionMode",
            "transactionAccessMode",
            "isolationLevel",
            "levelOfIsolation",
            "commitStatement",
            "rollbackStatement",
            "setAutoCommitStatement",
            "abortTransactionStatement",
            "mergeStatement",
            "whenClauses",
            "whenNotMatchedClause",
            "whenMatchedAndClause",
            "whenMatchedThenClause",
            "updateOrDelete",
            "killQueryStatement",
            "selectClause",
            "selectList",
            "selectTrfmClause",
            "selectItem",
            "trfmClause",
            "selectExpression",
            "selectExpressionList",
            "window_clause",
            "window_defn",
            "window_specification",
            "window_frame",
            "window_range_expression",
            "window_value_expression",
            "window_frame_start_boundary",
            "window_frame_boundary",
            "tableAllColumns",
            "tableOrColumn",
            "expressionList",
            "aliasList",
            "fromClause",
            "fromSource",
            "atomjoinSource",
            "joinSource",
            "joinSourcePart",
            "uniqueJoinSource",
            "uniqueJoinExpr",
            "uniqueJoinToken",
            "joinToken",
            "lateralView",
            "tableAlias",
            "tableBucketSample",
            "splitSample",
            "tableSample",
            "tableSource",
            "uniqueJoinTableSource",
            "tableName",
            "viewName",
            "subQuerySource",
            "partitioningSpec",
            "partitionTableFunctionSource",
            "partitionedTableFunction",
            "whereClause",
            "searchCondition",
            "valuesClause",
            "valuesTableConstructor",
            "valueRowConstructor",
            "virtualTableSource",
            "groupByClause",
            "groupby_expression",
            "groupByEmpty",
            "rollupStandard",
            "rollupOldSyntax",
            "groupingSetExpression",
            "groupingSetExpressionMultiple",
            "groupingExpressionSingle",
            "havingClause",
            "havingCondition",
            "expressionsInParenthesis",
            "expressionsNotInParenthesis",
            "expressionPart",
            "expressions",
            "columnRefOrderInParenthesis",
            "columnRefOrderNotInParenthesis",
            "orderByClause",
            "clusterByClause",
            "partitionByClause",
            "distributeByClause",
            "sortByClause",
            "function_",
            "functionName",
            "castExpression",
            "caseExpression",
            "whenExpression",
            "floorExpression",
            "floorDateQualifiers",
            "extractExpression",
            "timeQualifiers",
            "constant",
            "stringLiteralSequence",
            "charSetStringLiteral",
            "dateLiteral",
            "timestampLiteral",
            "timestampLocalTZLiteral",
            "intervalValue",
            "intervalLiteral",
            "intervalExpression",
            "intervalQualifiers",
            "atomExpression",
            "precedenceUnaryOperator",
            "isCondition",
            "precedenceBitwiseXorOperator",
            "precedenceStarOperator",
            "precedencePlusOperator",
            "precedenceConcatenateOperator",
            "precedenceAmpersandOperator",
            "precedenceBitwiseOrOperator",
            "precedenceRegexpOperator",
            "precedenceComparisonOperator",
            "precedenceNotOperator",
            "precedenceLogicOperator",
            "expression",
            "precedenceExpression",
            "precedenceSimilarExpressionIn",
            "subQueryExpression",
            "booleanValue",
            "booleanValueTok",
            "tableOrPartition",
            "partitionSpec",
            "partitionVal",
            "dropPartitionSpec",
            "dropPartitionVal",
            "dropPartitionOperator",
            "sysFuncNames",
            "descFuncNames",
            "identifier",
            "functionIdentifier",
            "principalIdentifier",
            "nonReserved",
            "sql11ReservedKeywordsUsedAsFunctionName"
        };
    }

    public static final String[] ruleNames = makeRuleNames();

    private static String[] makeLiteralNames() {
        return new String[] {
            null,
            "'TRUE'",
            "'FALSE'",
            "'ALL'",
            "'NONE'",
            "'AND'",
            "'OR'",
            null,
            "'LIKE'",
            "'ANY'",
            "'IF'",
            "'EXISTS'",
            "'ASC'",
            "'DESC'",
            "'NULLS'",
            "'LAST'",
            "'ORDER'",
            "'GROUP'",
            "'BY'",
            "'HAVING'",
            "'WHERE'",
            "'FROM'",
            "'AS'",
            "'SELECT'",
            "'DISTINCT'",
            "'INSERT'",
            "'OVERWRITE'",
            "'OUTER'",
            "'UNIQUEJOIN'",
            "'PRESERVE'",
            "'JOIN'",
            "'LEFT'",
            "'RIGHT'",
            "'FULL'",
            "'ON'",
            "'PARTITION'",
            "'PARTITIONS'",
            "'TABLE'",
            "'TABLES'",
            "'COLUMNS'",
            "'INDEX'",
            "'INDEXES'",
            "'REBUILD'",
            "'FUNCTIONS'",
            "'SHOW'",
            "'MSCK'",
            "'REPAIR'",
            "'DIRECTORY'",
            "'LOCAL'",
            "'TRANSFORM'",
            "'USING'",
            "'CLUSTER'",
            "'DISTRIBUTE'",
            "'SORT'",
            "'UNION'",
            "'EXCEPT'",
            "'LOAD'",
            "'EXPORT'",
            "'IMPORT'",
            "'REPLICATION'",
            "'METADATA'",
            "'DATA'",
            "'INPATH'",
            "'IS'",
            "'NULL'",
            "'CREATE'",
            "'EXTERNAL'",
            "'ALTER'",
            "'CHANGE'",
            "'COLUMN'",
            "'FIRST'",
            "'AFTER'",
            "'DESCRIBE'",
            "'DROP'",
            "'RENAME'",
            "'TO'",
            "'COMMENT'",
            "'BOOLEAN'",
            "'TINYINT'",
            "'SMALLINT'",
            null,
            "'BIGINT'",
            "'FLOAT'",
            "'DOUBLE'",
            "'PRECISION'",
            "'DATE'",
            "'DATETIME'",
            "'TIMESTAMP'",
            "'TIMESTAMPLOCALTZ'",
            "'TIME'",
            "'ZONE'",
            "'INTERVAL'",
            null,
            "'STRING'",
            "'CHAR'",
            "'VARCHAR'",
            "'ARRAY'",
            "'STRUCT'",
            "'MAP'",
            "'UNIONTYPE'",
            "'REDUCE'",
            "'PARTITIONED'",
            "'CLUSTERED'",
            "'SORTED'",
            "'INTO'",
            "'BUCKETS'",
            "'ROW'",
            "'ROWS'",
            "'FORMAT'",
            "'DELIMITED'",
            "'FIELDS'",
            "'TERMINATED'",
            "'ESCAPED'",
            "'COLLECTION'",
            "'ITEMS'",
            "'KEYS'",
            "'$KEY$'",
            "'KILL'",
            "'LINES'",
            "'STORED'",
            "'FILEFORMAT'",
            "'INPUTFORMAT'",
            "'OUTPUTFORMAT'",
            "'INPUTDRIVER'",
            "'OUTPUTDRIVER'",
            "'ENABLE'",
            "'DISABLE'",
            "'LOCATION'",
            "'TABLESAMPLE'",
            "'BUCKET'",
            "'OUT'",
            "'OF'",
            "'PERCENT'",
            "'CAST'",
            "'ADD'",
            "'REPLACE'",
            "'RLIKE'",
            "'REGEXP'",
            "'TEMPORARY'",
            "'FUNCTION'",
            "'MACRO'",
            "'FILE'",
            "'JAR'",
            "'EXPLAIN'",
            "'EXTENDED'",
            "'FORMATTED'",
            "'DEPENDENCY'",
            "'LOGICAL'",
            "'SERDE'",
            "'WITH'",
            "'DEFERRED'",
            "'SERDEPROPERTIES'",
            "'DBPROPERTIES'",
            "'LIMIT'",
            "'OFFSET'",
            "'SET'",
            "'UNSET'",
            "'TBLPROPERTIES'",
            "'IDXPROPERTIES'",
            "'$VALUE$'",
            "'$ELEM$'",
            "'DEFINED'",
            "'CASE'",
            "'WHEN'",
            "'THEN'",
            "'ELSE'",
            "'END'",
            "'MAPJOIN'",
            "'STREAMTABLE'",
            "'CLUSTERSTATUS'",
            "'UTC'",
            "'UTC_TMESTAMP'",
            "'LONG'",
            "'DELETE'",
            "'PLUS'",
            "'MINUS'",
            "'FETCH'",
            "'INTERSECT'",
            "'VIEW'",
            "'VIEWS'",
            "'IN'",
            "'DATABASE'",
            "'DATABASES'",
            "'MATERIALIZED'",
            "'SCHEMA'",
            "'SCHEMAS'",
            "'GRANT'",
            "'REVOKE'",
            "'SSL'",
            "'UNDO'",
            "'LOCK'",
            "'LOCKS'",
            "'UNLOCK'",
            "'SHARED'",
            "'EXCLUSIVE'",
            "'PROCEDURE'",
            "'UNSIGNED'",
            "'WHILE'",
            "'READ'",
            "'READS'",
            "'PURGE'",
            "'RANGE'",
            "'ANALYZE'",
            "'BEFORE'",
            "'BETWEEN'",
            "'BOTH'",
            "'BINARY'",
            "'CROSS'",
            "'CONTINUE'",
            "'CURSOR'",
            "'TRIGGER'",
            "'RECORDREADER'",
            "'RECORDWRITER'",
            "'SEMI'",
            "'LATERAL'",
            "'TOUCH'",
            "'ARCHIVE'",
            "'UNARCHIVE'",
            "'COMPUTE'",
            "'STATISTICS'",
            "'USE'",
            "'OPTION'",
            "'CONCATENATE'",
            "'SHOW_DATABASE'",
            "'UPDATE'",
            "'RESTRICT'",
            "'CASCADE'",
            "'SKEWED'",
            "'ROLLUP'",
            "'CUBE'",
            "'DIRECTORIES'",
            "'FOR'",
            "'WINDOW'",
            "'UNBOUNDED'",
            "'PRECEDING'",
            "'FOLLOWING'",
            "'CURRENT'",
            "'CURRENT_DATE'",
            "'CURRENT_TIMESTAMP'",
            "'LESS'",
            "'MORE'",
            "'OVER'",
            "'GROUPING'",
            "'SETS'",
            "'TRUNCATE'",
            "'NOSCAN'",
            "'USER'",
            "'ROLE'",
            "'ROLES'",
            "'INNER'",
            "'EXCHANGE'",
            "'URI'",
            "'SERVER'",
            "'ADMIN'",
            "'OWNER'",
            "'PRINCIPALS'",
            "'COMPACT'",
            "'COMPACTIONS'",
            "'TRANSACTIONS'",
            "'REWRITE'",
            "'AUTHORIZATION'",
            "'REOPTIMIZATION'",
            "'CONF'",
            "'VALUES'",
            "'RELOAD'",
            null,
            "'QUERY'",
            "'QUARTER'",
            null,
            null,
            null,
            "'DAYOFWEEK'",
            null,
            null,
            null,
            "'START'",
            "'TRANSACTION'",
            "'COMMIT'",
            "'ROLLBACK'",
            "'WORK'",
            "'ONLY'",
            "'WRITE'",
            "'ISOLATION'",
            "'LEVEL'",
            "'SNAPSHOT'",
            "'AUTOCOMMIT'",
            "'CACHE'",
            "'PRIMARY'",
            "'FOREIGN'",
            "'REFERENCES'",
            "'CONSTRAINT'",
            "'ENFORCED'",
            "'VALIDATE'",
            "'NOVALIDATE'",
            "'RELY'",
            "'NORELY'",
            "'UNIQUE'",
            "'KEY'",
            "'ABORT'",
            "'EXTRACT'",
            "'FLOOR'",
            "'MERGE'",
            "'MATCHED'",
            "'REPL'",
            "'DUMP'",
            "'STATUS'",
            "'VECTORIZATION'",
            "'SUMMARY'",
            "'OPERATOR'",
            "'EXPRESSION'",
            "'DETAIL'",
            "'WAIT'",
            "'RESOURCE'",
            "'PLAN'",
            "'QUERY_PARALLELISM'",
            "'PLANS'",
            "'ACTIVATE'",
            "'DEFAULT'",
            "'CHECK'",
            "'POOL'",
            "'MOVE'",
            "'DO'",
            "'ALLOC_FRACTION'",
            "'SCHEDULING_POLICY'",
            "'PATH'",
            "'MAPPING'",
            "'WORKLOAD'",
            "'MANAGEMENT'",
            "'ACTIVE'",
            "'UNMANAGED'",
            "'APPLICATION'",
            "'SYNC'",
            "'.'",
            "':'",
            "','",
            "';'",
            "'('",
            "')'",
            "'['",
            "']'",
            "'{'",
            "'}'",
            null,
            "'<=>'",
            null,
            "'<='",
            "'<'",
            "'>='",
            "'>'",
            "'/'",
            "'+'",
            "'-'",
            "'*'",
            "'%'",
            "'DIV'",
            "'&'",
            "'~'",
            "'|'",
            "'||'",
            "'^'",
            "'?'",
            "'$'"
        };
    }

    private static final String[] _LITERAL_NAMES = makeLiteralNames();

    private static String[] makeSymbolicNames() {
        return new String[] {
            null,
            "KW_TRUE",
            "KW_FALSE",
            "KW_ALL",
            "KW_NONE",
            "KW_AND",
            "KW_OR",
            "KW_NOT",
            "KW_LIKE",
            "KW_ANY",
            "KW_IF",
            "KW_EXISTS",
            "KW_ASC",
            "KW_DESC",
            "KW_NULLS",
            "KW_LAST",
            "KW_ORDER",
            "KW_GROUP",
            "KW_BY",
            "KW_HAVING",
            "KW_WHERE",
            "KW_FROM",
            "KW_AS",
            "KW_SELECT",
            "KW_DISTINCT",
            "KW_INSERT",
            "KW_OVERWRITE",
            "KW_OUTER",
            "KW_UNIQUEJOIN",
            "KW_PRESERVE",
            "KW_JOIN",
            "KW_LEFT",
            "KW_RIGHT",
            "KW_FULL",
            "KW_ON",
            "KW_PARTITION",
            "KW_PARTITIONS",
            "KW_TABLE",
            "KW_TABLES",
            "KW_COLUMNS",
            "KW_INDEX",
            "KW_INDEXES",
            "KW_REBUILD",
            "KW_FUNCTIONS",
            "KW_SHOW",
            "KW_MSCK",
            "KW_REPAIR",
            "KW_DIRECTORY",
            "KW_LOCAL",
            "KW_TRANSFORM",
            "KW_USING",
            "KW_CLUSTER",
            "KW_DISTRIBUTE",
            "KW_SORT",
            "KW_UNION",
            "KW_EXCEPT",
            "KW_LOAD",
            "KW_EXPORT",
            "KW_IMPORT",
            "KW_REPLICATION",
            "KW_METADATA",
            "KW_DATA",
            "KW_INPATH",
            "KW_IS",
            "KW_NULL",
            "KW_CREATE",
            "KW_EXTERNAL",
            "KW_ALTER",
            "KW_CHANGE",
            "KW_COLUMN",
            "KW_FIRST",
            "KW_AFTER",
            "KW_DESCRIBE",
            "KW_DROP",
            "KW_RENAME",
            "KW_TO",
            "KW_COMMENT",
            "KW_BOOLEAN",
            "KW_TINYINT",
            "KW_SMALLINT",
            "KW_INT",
            "KW_BIGINT",
            "KW_FLOAT",
            "KW_DOUBLE",
            "KW_PRECISION",
            "KW_DATE",
            "KW_DATETIME",
            "KW_TIMESTAMP",
            "KW_TIMESTAMPLOCALTZ",
            "KW_TIME",
            "KW_ZONE",
            "KW_INTERVAL",
            "KW_DECIMAL",
            "KW_STRING",
            "KW_CHAR",
            "KW_VARCHAR",
            "KW_ARRAY",
            "KW_STRUCT",
            "KW_MAP",
            "KW_UNIONTYPE",
            "KW_REDUCE",
            "KW_PARTITIONED",
            "KW_CLUSTERED",
            "KW_SORTED",
            "KW_INTO",
            "KW_BUCKETS",
            "KW_ROW",
            "KW_ROWS",
            "KW_FORMAT",
            "KW_DELIMITED",
            "KW_FIELDS",
            "KW_TERMINATED",
            "KW_ESCAPED",
            "KW_COLLECTION",
            "KW_ITEMS",
            "KW_KEYS",
            "KW_KEY_TYPE",
            "KW_KILL",
            "KW_LINES",
            "KW_STORED",
            "KW_FILEFORMAT",
            "KW_INPUTFORMAT",
            "KW_OUTPUTFORMAT",
            "KW_INPUTDRIVER",
            "KW_OUTPUTDRIVER",
            "KW_ENABLE",
            "KW_DISABLE",
            "KW_LOCATION",
            "KW_TABLESAMPLE",
            "KW_BUCKET",
            "KW_OUT",
            "KW_OF",
            "KW_PERCENT",
            "KW_CAST",
            "KW_ADD",
            "KW_REPLACE",
            "KW_RLIKE",
            "KW_REGEXP",
            "KW_TEMPORARY",
            "KW_FUNCTION",
            "KW_MACRO",
            "KW_FILE",
            "KW_JAR",
            "KW_EXPLAIN",
            "KW_EXTENDED",
            "KW_FORMATTED",
            "KW_DEPENDENCY",
            "KW_LOGICAL",
            "KW_SERDE",
            "KW_WITH",
            "KW_DEFERRED",
            "KW_SERDEPROPERTIES",
            "KW_DBPROPERTIES",
            "KW_LIMIT",
            "KW_OFFSET",
            "KW_SET",
            "KW_UNSET",
            "KW_TBLPROPERTIES",
            "KW_IDXPROPERTIES",
            "KW_VALUE_TYPE",
            "KW_ELEM_TYPE",
            "KW_DEFINED",
            "KW_CASE",
            "KW_WHEN",
            "KW_THEN",
            "KW_ELSE",
            "KW_END",
            "KW_MAPJOIN",
            "KW_STREAMTABLE",
            "KW_CLUSTERSTATUS",
            "KW_UTC",
            "KW_UTCTIMESTAMP",
            "KW_LONG",
            "KW_DELETE",
            "KW_PLUS",
            "KW_MINUS",
            "KW_FETCH",
            "KW_INTERSECT",
            "KW_VIEW",
            "KW_VIEWS",
            "KW_IN",
            "KW_DATABASE",
            "KW_DATABASES",
            "KW_MATERIALIZED",
            "KW_SCHEMA",
            "KW_SCHEMAS",
            "KW_GRANT",
            "KW_REVOKE",
            "KW_SSL",
            "KW_UNDO",
            "KW_LOCK",
            "KW_LOCKS",
            "KW_UNLOCK",
            "KW_SHARED",
            "KW_EXCLUSIVE",
            "KW_PROCEDURE",
            "KW_UNSIGNED",
            "KW_WHILE",
            "KW_READ",
            "KW_READS",
            "KW_PURGE",
            "KW_RANGE",
            "KW_ANALYZE",
            "KW_BEFORE",
            "KW_BETWEEN",
            "KW_BOTH",
            "KW_BINARY",
            "KW_CROSS",
            "KW_CONTINUE",
            "KW_CURSOR",
            "KW_TRIGGER",
            "KW_RECORDREADER",
            "KW_RECORDWRITER",
            "KW_SEMI",
            "KW_LATERAL",
            "KW_TOUCH",
            "KW_ARCHIVE",
            "KW_UNARCHIVE",
            "KW_COMPUTE",
            "KW_STATISTICS",
            "KW_USE",
            "KW_OPTION",
            "KW_CONCATENATE",
            "KW_SHOW_DATABASE",
            "KW_UPDATE",
            "KW_RESTRICT",
            "KW_CASCADE",
            "KW_SKEWED",
            "KW_ROLLUP",
            "KW_CUBE",
            "KW_DIRECTORIES",
            "KW_FOR",
            "KW_WINDOW",
            "KW_UNBOUNDED",
            "KW_PRECEDING",
            "KW_FOLLOWING",
            "KW_CURRENT",
            "KW_CURRENT_DATE",
            "KW_CURRENT_TIMESTAMP",
            "KW_LESS",
            "KW_MORE",
            "KW_OVER",
            "KW_GROUPING",
            "KW_SETS",
            "KW_TRUNCATE",
            "KW_NOSCAN",
            "KW_USER",
            "KW_ROLE",
            "KW_ROLES",
            "KW_INNER",
            "KW_EXCHANGE",
            "KW_URI",
            "KW_SERVER",
            "KW_ADMIN",
            "KW_OWNER",
            "KW_PRINCIPALS",
            "KW_COMPACT",
            "KW_COMPACTIONS",
            "KW_TRANSACTIONS",
            "KW_REWRITE",
            "KW_AUTHORIZATION",
            "KW_REOPTIMIZATION",
            "KW_CONF",
            "KW_VALUES",
            "KW_RELOAD",
            "KW_YEAR",
            "KW_QUERY",
            "KW_QUARTER",
            "KW_MONTH",
            "KW_WEEK",
            "KW_DAY",
            "KW_DOW",
            "KW_HOUR",
            "KW_MINUTE",
            "KW_SECOND",
            "KW_START",
            "KW_TRANSACTION",
            "KW_COMMIT",
            "KW_ROLLBACK",
            "KW_WORK",
            "KW_ONLY",
            "KW_WRITE",
            "KW_ISOLATION",
            "KW_LEVEL",
            "KW_SNAPSHOT",
            "KW_AUTOCOMMIT",
            "KW_CACHE",
            "KW_PRIMARY",
            "KW_FOREIGN",
            "KW_REFERENCES",
            "KW_CONSTRAINT",
            "KW_ENFORCED",
            "KW_VALIDATE",
            "KW_NOVALIDATE",
            "KW_RELY",
            "KW_NORELY",
            "KW_UNIQUE",
            "KW_KEY",
            "KW_ABORT",
            "KW_EXTRACT",
            "KW_FLOOR",
            "KW_MERGE",
            "KW_MATCHED",
            "KW_REPL",
            "KW_DUMP",
            "KW_STATUS",
            "KW_VECTORIZATION",
            "KW_SUMMARY",
            "KW_OPERATOR",
            "KW_EXPRESSION",
            "KW_DETAIL",
            "KW_WAIT",
            "KW_RESOURCE",
            "KW_PLAN",
            "KW_QUERY_PARALLELISM",
            "KW_PLANS",
            "KW_ACTIVATE",
            "KW_DEFAULT",
            "KW_CHECK",
            "KW_POOL",
            "KW_MOVE",
            "KW_DO",
            "KW_ALLOC_FRACTION",
            "KW_SCHEDULING_POLICY",
            "KW_PATH",
            "KW_MAPPING",
            "KW_WORKLOAD",
            "KW_MANAGEMENT",
            "KW_ACTIVE",
            "KW_UNMANAGED",
            "KW_APPLICATION",
            "KW_SYNC",
            "DOT",
            "COLON",
            "COMMA",
            "SEMICOLON",
            "LPAREN",
            "RPAREN",
            "LSQUARE",
            "RSQUARE",
            "LCURLY",
            "RCURLY",
            "EQUAL",
            "EQUAL_NS",
            "NOTEQUAL",
            "LESSTHANOREQUALTO",
            "LESSTHAN",
            "GREATERTHANOREQUALTO",
            "GREATERTHAN",
            "DIVIDE",
            "PLUS",
            "MINUS",
            "STAR",
            "MOD",
            "DIV",
            "AMPERSAND",
            "TILDE",
            "BITWISEOR",
            "CONCATENATE",
            "BITWISEXOR",
            "QUESTION",
            "DOLLAR",
            "StringLiteral",
            "CharSetLiteral",
            "IntegralLiteral",
            "NumberLiteral",
            "ByteLengthLiteral",
            "Number",
            "Identifier",
            "QuotedIdentifier",
            "CharSetName",
            "WS",
            "LINE_COMMENT",
            "QUERY_HINT",
            "SHOW_HINT",
            "HIDDEN_HINT"
        };
    }

    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /** @deprecated Use {@link #VOCABULARY} instead. */
    @Deprecated public static final String[] tokenNames;

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override
    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "HiveParser.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public HiveParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StatementsContext extends ParserRuleContext {
        public TerminalNode EOF() {
            return getToken(HiveParser.EOF, 0);
        }

        public List<StatementContext> statement() {
            return getRuleContexts(StatementContext.class);
        }

        public StatementContext statement(int i) {
            return getRuleContext(StatementContext.class, i);
        }

        public List<StatementSeparatorContext> statementSeparator() {
            return getRuleContexts(StatementSeparatorContext.class);
        }

        public StatementSeparatorContext statementSeparator(int i) {
            return getRuleContext(StatementSeparatorContext.class, i);
        }

        public StatementsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_statements;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStatements(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStatements(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStatements(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StatementsContext statements() throws RecognitionException {
        StatementsContext _localctx = new StatementsContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_statements);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(745);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 504455934867677184L) != 0)
                        || ((((_la - 65)) & ~0x3f) == 0
                                && ((1L << (_la - 65)) & 4503642577043845L) != 0)
                        || ((((_la - 143)) & ~0x3f) == 0
                                && ((1L << (_la - 143)) & 577190829098012737L) != 0)
                        || ((((_la - 220)) & ~0x3f) == 0
                                && ((1L << (_la - 220)) & 468391953449353233L) != 0)
                        || ((((_la - 298)) & ~0x3f) == 0
                                && ((1L << (_la - 298)) & 274877906985L) != 0)) {
                    {
                        {
                            setState(740);
                            statement();
                            setState(741);
                            statementSeparator();
                        }
                    }
                    setState(747);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(748);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StatementSeparatorContext extends ParserRuleContext {
        public TerminalNode SEMICOLON() {
            return getToken(HiveParser.SEMICOLON, 0);
        }

        public StatementSeparatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_statementSeparator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStatementSeparator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStatementSeparator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStatementSeparator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StatementSeparatorContext statementSeparator() throws RecognitionException {
        StatementSeparatorContext _localctx = new StatementSeparatorContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_statementSeparator);
        try {
            setState(752);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case SEMICOLON:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(750);
                        match(SEMICOLON);
                    }
                    break;
                case EOF:
                case KW_DESC:
                case KW_FROM:
                case KW_SELECT:
                case KW_INSERT:
                case KW_SHOW:
                case KW_MSCK:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_IMPORT:
                case KW_CREATE:
                case KW_ALTER:
                case KW_DESCRIBE:
                case KW_DROP:
                case KW_MAP:
                case KW_REDUCE:
                case KW_KILL:
                case KW_EXPLAIN:
                case KW_WITH:
                case KW_SET:
                case KW_DELETE:
                case KW_GRANT:
                case KW_REVOKE:
                case KW_LOCK:
                case KW_UNLOCK:
                case KW_ANALYZE:
                case KW_USE:
                case KW_UPDATE:
                case KW_TRUNCATE:
                case KW_RELOAD:
                case KW_START:
                case KW_COMMIT:
                case KW_ROLLBACK:
                case KW_ABORT:
                case KW_MERGE:
                case KW_REPL:
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StatementContext extends ParserRuleContext {
        public ExplainStatementContext explainStatement() {
            return getRuleContext(ExplainStatementContext.class, 0);
        }

        public ExecStatementContext execStatement() {
            return getRuleContext(ExecStatementContext.class, 0);
        }

        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_statement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_statement);
        try {
            setState(756);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_EXPLAIN:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(754);
                        explainStatement();
                    }
                    break;
                case KW_DESC:
                case KW_FROM:
                case KW_SELECT:
                case KW_INSERT:
                case KW_SHOW:
                case KW_MSCK:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_IMPORT:
                case KW_CREATE:
                case KW_ALTER:
                case KW_DESCRIBE:
                case KW_DROP:
                case KW_MAP:
                case KW_REDUCE:
                case KW_KILL:
                case KW_WITH:
                case KW_SET:
                case KW_DELETE:
                case KW_GRANT:
                case KW_REVOKE:
                case KW_LOCK:
                case KW_UNLOCK:
                case KW_ANALYZE:
                case KW_USE:
                case KW_UPDATE:
                case KW_TRUNCATE:
                case KW_RELOAD:
                case KW_START:
                case KW_COMMIT:
                case KW_ROLLBACK:
                case KW_ABORT:
                case KW_MERGE:
                case KW_REPL:
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(755);
                        execStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExplainStatementContext extends ParserRuleContext {
        public TerminalNode KW_EXPLAIN() {
            return getToken(HiveParser.KW_EXPLAIN, 0);
        }

        public ExecStatementContext execStatement() {
            return getRuleContext(ExecStatementContext.class, 0);
        }

        public TerminalNode KW_REWRITE() {
            return getToken(HiveParser.KW_REWRITE, 0);
        }

        public QueryStatementExpressionContext queryStatementExpression() {
            return getRuleContext(QueryStatementExpressionContext.class, 0);
        }

        public List<ExplainOptionContext> explainOption() {
            return getRuleContexts(ExplainOptionContext.class);
        }

        public ExplainOptionContext explainOption(int i) {
            return getRuleContext(ExplainOptionContext.class, i);
        }

        public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_explainStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExplainStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExplainStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExplainStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExplainStatementContext explainStatement() throws RecognitionException {
        ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_explainStatement);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(758);
                match(KW_EXPLAIN);
                setState(768);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_DESC:
                    case KW_FROM:
                    case KW_SELECT:
                    case KW_INSERT:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_IMPORT:
                    case KW_CREATE:
                    case KW_ALTER:
                    case KW_DESCRIBE:
                    case KW_DROP:
                    case KW_MAP:
                    case KW_REDUCE:
                    case KW_KILL:
                    case KW_EXTENDED:
                    case KW_FORMATTED:
                    case KW_DEPENDENCY:
                    case KW_LOGICAL:
                    case KW_WITH:
                    case KW_SET:
                    case KW_DELETE:
                    case KW_GRANT:
                    case KW_REVOKE:
                    case KW_LOCK:
                    case KW_UNLOCK:
                    case KW_ANALYZE:
                    case KW_USE:
                    case KW_UPDATE:
                    case KW_TRUNCATE:
                    case KW_AUTHORIZATION:
                    case KW_REOPTIMIZATION:
                    case KW_RELOAD:
                    case KW_START:
                    case KW_COMMIT:
                    case KW_ROLLBACK:
                    case KW_ABORT:
                    case KW_MERGE:
                    case KW_REPL:
                    case KW_VECTORIZATION:
                    case LPAREN:
                        {
                            setState(762);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 3, _ctx);
                            while (_alt != 2
                                    && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1) {
                                    {
                                        {
                                            setState(759);
                                            explainOption();
                                        }
                                    }
                                }
                                setState(764);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 3, _ctx);
                            }
                            setState(765);
                            execStatement();
                        }
                        break;
                    case KW_REWRITE:
                        {
                            setState(766);
                            match(KW_REWRITE);
                            setState(767);
                            queryStatementExpression();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExplainOptionContext extends ParserRuleContext {
        public TerminalNode KW_EXTENDED() {
            return getToken(HiveParser.KW_EXTENDED, 0);
        }

        public TerminalNode KW_FORMATTED() {
            return getToken(HiveParser.KW_FORMATTED, 0);
        }

        public TerminalNode KW_DEPENDENCY() {
            return getToken(HiveParser.KW_DEPENDENCY, 0);
        }

        public TerminalNode KW_LOGICAL() {
            return getToken(HiveParser.KW_LOGICAL, 0);
        }

        public TerminalNode KW_AUTHORIZATION() {
            return getToken(HiveParser.KW_AUTHORIZATION, 0);
        }

        public TerminalNode KW_ANALYZE() {
            return getToken(HiveParser.KW_ANALYZE, 0);
        }

        public TerminalNode KW_REOPTIMIZATION() {
            return getToken(HiveParser.KW_REOPTIMIZATION, 0);
        }

        public TerminalNode KW_VECTORIZATION() {
            return getToken(HiveParser.KW_VECTORIZATION, 0);
        }

        public VectorizationOnlyContext vectorizationOnly() {
            return getRuleContext(VectorizationOnlyContext.class, 0);
        }

        public VectorizatonDetailContext vectorizatonDetail() {
            return getRuleContext(VectorizatonDetailContext.class, 0);
        }

        public ExplainOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_explainOption;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExplainOption(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExplainOption(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExplainOption(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExplainOptionContext explainOption() throws RecognitionException {
        ExplainOptionContext _localctx = new ExplainOptionContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_explainOption);
        int _la;
        try {
            setState(784);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_EXTENDED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(770);
                        match(KW_EXTENDED);
                    }
                    break;
                case KW_FORMATTED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(771);
                        match(KW_FORMATTED);
                    }
                    break;
                case KW_DEPENDENCY:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(772);
                        match(KW_DEPENDENCY);
                    }
                    break;
                case KW_LOGICAL:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(773);
                        match(KW_LOGICAL);
                    }
                    break;
                case KW_AUTHORIZATION:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(774);
                        match(KW_AUTHORIZATION);
                    }
                    break;
                case KW_ANALYZE:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(775);
                        match(KW_ANALYZE);
                    }
                    break;
                case KW_REOPTIMIZATION:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(776);
                        match(KW_REOPTIMIZATION);
                    }
                    break;
                case KW_VECTORIZATION:
                    enterOuterAlt(_localctx, 8);
                    {
                        {
                            setState(777);
                            match(KW_VECTORIZATION);
                            setState(779);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_ONLY) {
                                {
                                    setState(778);
                                    vectorizationOnly();
                                }
                            }

                            setState(782);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (((((_la - 307)) & ~0x3f) == 0
                                    && ((1L << (_la - 307)) & 15L) != 0)) {
                                {
                                    setState(781);
                                    vectorizatonDetail();
                                }
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VectorizationOnlyContext extends ParserRuleContext {
        public TerminalNode KW_ONLY() {
            return getToken(HiveParser.KW_ONLY, 0);
        }

        public VectorizationOnlyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_vectorizationOnly;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterVectorizationOnly(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitVectorizationOnly(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitVectorizationOnly(this);
            else return visitor.visitChildren(this);
        }
    }

    public final VectorizationOnlyContext vectorizationOnly() throws RecognitionException {
        VectorizationOnlyContext _localctx = new VectorizationOnlyContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_vectorizationOnly);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(786);
                match(KW_ONLY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VectorizatonDetailContext extends ParserRuleContext {
        public TerminalNode KW_SUMMARY() {
            return getToken(HiveParser.KW_SUMMARY, 0);
        }

        public TerminalNode KW_OPERATOR() {
            return getToken(HiveParser.KW_OPERATOR, 0);
        }

        public TerminalNode KW_EXPRESSION() {
            return getToken(HiveParser.KW_EXPRESSION, 0);
        }

        public TerminalNode KW_DETAIL() {
            return getToken(HiveParser.KW_DETAIL, 0);
        }

        public VectorizatonDetailContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_vectorizatonDetail;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterVectorizatonDetail(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitVectorizatonDetail(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitVectorizatonDetail(this);
            else return visitor.visitChildren(this);
        }
    }

    public final VectorizatonDetailContext vectorizatonDetail() throws RecognitionException {
        VectorizatonDetailContext _localctx = new VectorizatonDetailContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_vectorizatonDetail);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(788);
                _la = _input.LA(1);
                if (!(((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & 15L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExecStatementContext extends ParserRuleContext {
        public QueryStatementExpressionContext queryStatementExpression() {
            return getRuleContext(QueryStatementExpressionContext.class, 0);
        }

        public LoadStatementContext loadStatement() {
            return getRuleContext(LoadStatementContext.class, 0);
        }

        public ExportStatementContext exportStatement() {
            return getRuleContext(ExportStatementContext.class, 0);
        }

        public ImportStatementContext importStatement() {
            return getRuleContext(ImportStatementContext.class, 0);
        }

        public ReplDumpStatementContext replDumpStatement() {
            return getRuleContext(ReplDumpStatementContext.class, 0);
        }

        public ReplLoadStatementContext replLoadStatement() {
            return getRuleContext(ReplLoadStatementContext.class, 0);
        }

        public ReplStatusStatementContext replStatusStatement() {
            return getRuleContext(ReplStatusStatementContext.class, 0);
        }

        public DdlStatementContext ddlStatement() {
            return getRuleContext(DdlStatementContext.class, 0);
        }

        public DeleteStatementContext deleteStatement() {
            return getRuleContext(DeleteStatementContext.class, 0);
        }

        public UpdateStatementContext updateStatement() {
            return getRuleContext(UpdateStatementContext.class, 0);
        }

        public SqlTransactionStatementContext sqlTransactionStatement() {
            return getRuleContext(SqlTransactionStatementContext.class, 0);
        }

        public MergeStatementContext mergeStatement() {
            return getRuleContext(MergeStatementContext.class, 0);
        }

        public ExecStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_execStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExecStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExecStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExecStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExecStatementContext execStatement() throws RecognitionException {
        ExecStatementContext _localctx = new ExecStatementContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_execStatement);
        try {
            setState(802);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 8, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(790);
                        queryStatementExpression();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(791);
                        loadStatement();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(792);
                        exportStatement();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(793);
                        importStatement();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(794);
                        replDumpStatement();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(795);
                        replLoadStatement();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(796);
                        replStatusStatement();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(797);
                        ddlStatement();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(798);
                        deleteStatement();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(799);
                        updateStatement();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(800);
                        sqlTransactionStatement();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(801);
                        mergeStatement();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LoadStatementContext extends ParserRuleContext {
        public TerminalNode KW_LOAD() {
            return getToken(HiveParser.KW_LOAD, 0);
        }

        public TerminalNode KW_DATA() {
            return getToken(HiveParser.KW_DATA, 0);
        }

        public TerminalNode KW_INPATH() {
            return getToken(HiveParser.KW_INPATH, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_INTO() {
            return getToken(HiveParser.KW_INTO, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public TerminalNode KW_LOCAL() {
            return getToken(HiveParser.KW_LOCAL, 0);
        }

        public TerminalNode KW_OVERWRITE() {
            return getToken(HiveParser.KW_OVERWRITE, 0);
        }

        public InputFileFormatContext inputFileFormat() {
            return getRuleContext(InputFileFormatContext.class, 0);
        }

        public LoadStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_loadStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLoadStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLoadStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLoadStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LoadStatementContext loadStatement() throws RecognitionException {
        LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_loadStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(804);
                match(KW_LOAD);
                setState(805);
                match(KW_DATA);
                setState(807);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCAL) {
                    {
                        setState(806);
                        match(KW_LOCAL);
                    }
                }

                setState(809);
                match(KW_INPATH);
                setState(810);
                match(StringLiteral);
                setState(812);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_OVERWRITE) {
                    {
                        setState(811);
                        match(KW_OVERWRITE);
                    }
                }

                setState(814);
                match(KW_INTO);
                setState(815);
                match(KW_TABLE);
                setState(816);
                tableOrPartition();
                setState(818);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_INPUTFORMAT) {
                    {
                        setState(817);
                        inputFileFormat();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplicationClauseContext extends ParserRuleContext {
        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public TerminalNode KW_REPLICATION() {
            return getToken(HiveParser.KW_REPLICATION, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_METADATA() {
            return getToken(HiveParser.KW_METADATA, 0);
        }

        public ReplicationClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replicationClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplicationClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplicationClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplicationClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplicationClauseContext replicationClause() throws RecognitionException {
        ReplicationClauseContext _localctx = new ReplicationClauseContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_replicationClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(820);
                match(KW_FOR);
                setState(822);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_METADATA) {
                    {
                        setState(821);
                        match(KW_METADATA);
                    }
                }

                setState(824);
                match(KW_REPLICATION);
                setState(825);
                match(LPAREN);
                setState(826);
                match(StringLiteral);
                setState(827);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExportStatementContext extends ParserRuleContext {
        public TerminalNode KW_EXPORT() {
            return getToken(HiveParser.KW_EXPORT, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ReplicationClauseContext replicationClause() {
            return getRuleContext(ReplicationClauseContext.class, 0);
        }

        public ExportStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exportStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExportStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExportStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExportStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExportStatementContext exportStatement() throws RecognitionException {
        ExportStatementContext _localctx = new ExportStatementContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_exportStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(829);
                match(KW_EXPORT);
                setState(830);
                match(KW_TABLE);
                setState(831);
                tableOrPartition();
                setState(832);
                match(KW_TO);
                setState(833);
                match(StringLiteral);
                setState(835);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_FOR) {
                    {
                        setState(834);
                        replicationClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ImportStatementContext extends ParserRuleContext {
        public Token path;

        public TerminalNode KW_IMPORT() {
            return getToken(HiveParser.KW_IMPORT, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableLocationContext tableLocation() {
            return getRuleContext(TableLocationContext.class, 0);
        }

        public TerminalNode KW_EXTERNAL() {
            return getToken(HiveParser.KW_EXTERNAL, 0);
        }

        public ImportStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_importStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterImportStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitImportStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitImportStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ImportStatementContext importStatement() throws RecognitionException {
        ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_importStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(837);
                match(KW_IMPORT);
                setState(843);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TABLE || _la == KW_EXTERNAL) {
                    {
                        setState(839);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_EXTERNAL) {
                            {
                                setState(838);
                                match(KW_EXTERNAL);
                            }
                        }

                        setState(841);
                        match(KW_TABLE);
                        setState(842);
                        tableOrPartition();
                    }
                }

                setState(845);
                match(KW_FROM);
                {
                    setState(846);
                    ((ImportStatementContext) _localctx).path = match(StringLiteral);
                }
                setState(848);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCATION) {
                    {
                        setState(847);
                        tableLocation();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplDumpStatementContext extends ParserRuleContext {
        public TerminalNode KW_REPL() {
            return getToken(HiveParser.KW_REPL, 0);
        }

        public TerminalNode KW_DUMP() {
            return getToken(HiveParser.KW_DUMP, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public List<TerminalNode> Number() {
            return getTokens(HiveParser.Number);
        }

        public TerminalNode Number(int i) {
            return getToken(HiveParser.Number, i);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public ReplConfigsContext replConfigs() {
            return getRuleContext(ReplConfigsContext.class, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public TerminalNode KW_LIMIT() {
            return getToken(HiveParser.KW_LIMIT, 0);
        }

        public ReplDumpStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replDumpStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplDumpStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplDumpStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplDumpStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplDumpStatementContext replDumpStatement() throws RecognitionException {
        ReplDumpStatementContext _localctx = new ReplDumpStatementContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_replDumpStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(850);
                match(KW_REPL);
                setState(851);
                match(KW_DUMP);
                setState(852);
                identifier();
                setState(855);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DOT) {
                    {
                        setState(853);
                        match(DOT);
                        setState(854);
                        identifier();
                    }
                }

                setState(867);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 20, _ctx)) {
                    case 1:
                        {
                            setState(857);
                            match(KW_FROM);
                            setState(858);
                            match(Number);
                            setState(861);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_TO) {
                                {
                                    setState(859);
                                    match(KW_TO);
                                    setState(860);
                                    match(Number);
                                }
                            }

                            setState(865);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_LIMIT) {
                                {
                                    setState(863);
                                    match(KW_LIMIT);
                                    setState(864);
                                    match(Number);
                                }
                            }
                        }
                        break;
                }
                setState(871);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 21, _ctx)) {
                    case 1:
                        {
                            setState(869);
                            match(KW_WITH);
                            setState(870);
                            replConfigs();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplLoadStatementContext extends ParserRuleContext {
        public TerminalNode KW_REPL() {
            return getToken(HiveParser.KW_REPL, 0);
        }

        public TerminalNode KW_LOAD() {
            return getToken(HiveParser.KW_LOAD, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public ReplConfigsContext replConfigs() {
            return getRuleContext(ReplConfigsContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public ReplLoadStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replLoadStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplLoadStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplLoadStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplLoadStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplLoadStatementContext replLoadStatement() throws RecognitionException {
        ReplLoadStatementContext _localctx = new ReplLoadStatementContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_replLoadStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(873);
                match(KW_REPL);
                setState(874);
                match(KW_LOAD);
                setState(880);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934246383616L) != 0)
                        || ((((_la - 68)) & ~0x3f) == 0
                                && ((1L << (_la - 68)) & 3458763614599775565L) != 0)
                        || ((((_la - 134)) & ~0x3f) == 0
                                && ((1L << (_la - 134)) & -2319580865570571373L) != 0)
                        || ((((_la - 198)) & ~0x3f) == 0
                                && ((1L << (_la - 198)) & -4618828440659893195L) != 0)
                        || ((((_la - 264)) & ~0x3f) == 0
                                && ((1L << (_la - 264)) & -244939057153L) != 0)
                        || ((((_la - 328)) & ~0x3f) == 0
                                && ((1L << (_la - 328)) & 1099511627779L) != 0)) {
                    {
                        setState(875);
                        identifier();
                        setState(878);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == DOT) {
                            {
                                setState(876);
                                match(DOT);
                                setState(877);
                                identifier();
                            }
                        }
                    }
                }

                setState(882);
                match(KW_FROM);
                setState(883);
                match(StringLiteral);
                setState(886);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 24, _ctx)) {
                    case 1:
                        {
                            setState(884);
                            match(KW_WITH);
                            setState(885);
                            replConfigs();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplConfigsContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ReplConfigsListContext replConfigsList() {
            return getRuleContext(ReplConfigsListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ReplConfigsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replConfigs;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplConfigs(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplConfigs(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplConfigs(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplConfigsContext replConfigs() throws RecognitionException {
        ReplConfigsContext _localctx = new ReplConfigsContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_replConfigs);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(888);
                match(LPAREN);
                setState(889);
                replConfigsList();
                setState(890);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplConfigsListContext extends ParserRuleContext {
        public List<KeyValuePropertyContext> keyValueProperty() {
            return getRuleContexts(KeyValuePropertyContext.class);
        }

        public KeyValuePropertyContext keyValueProperty(int i) {
            return getRuleContext(KeyValuePropertyContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ReplConfigsListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replConfigsList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplConfigsList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplConfigsList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplConfigsList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplConfigsListContext replConfigsList() throws RecognitionException {
        ReplConfigsListContext _localctx = new ReplConfigsListContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_replConfigsList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(892);
                keyValueProperty();
                setState(897);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(893);
                            match(COMMA);
                            setState(894);
                            keyValueProperty();
                        }
                    }
                    setState(899);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReplStatusStatementContext extends ParserRuleContext {
        public TerminalNode KW_REPL() {
            return getToken(HiveParser.KW_REPL, 0);
        }

        public TerminalNode KW_STATUS() {
            return getToken(HiveParser.KW_STATUS, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public ReplConfigsContext replConfigs() {
            return getRuleContext(ReplConfigsContext.class, 0);
        }

        public ReplStatusStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replStatusStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReplStatusStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReplStatusStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitReplStatusStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReplStatusStatementContext replStatusStatement() throws RecognitionException {
        ReplStatusStatementContext _localctx = new ReplStatusStatementContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_replStatusStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(900);
                match(KW_REPL);
                setState(901);
                match(KW_STATUS);
                setState(902);
                identifier();
                setState(905);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DOT) {
                    {
                        setState(903);
                        match(DOT);
                        setState(904);
                        identifier();
                    }
                }

                setState(909);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 27, _ctx)) {
                    case 1:
                        {
                            setState(907);
                            match(KW_WITH);
                            setState(908);
                            replConfigs();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DdlStatementContext extends ParserRuleContext {
        public CreateDatabaseStatementContext createDatabaseStatement() {
            return getRuleContext(CreateDatabaseStatementContext.class, 0);
        }

        public SwitchDatabaseStatementContext switchDatabaseStatement() {
            return getRuleContext(SwitchDatabaseStatementContext.class, 0);
        }

        public DropDatabaseStatementContext dropDatabaseStatement() {
            return getRuleContext(DropDatabaseStatementContext.class, 0);
        }

        public CreateTableStatementContext createTableStatement() {
            return getRuleContext(CreateTableStatementContext.class, 0);
        }

        public DropTableStatementContext dropTableStatement() {
            return getRuleContext(DropTableStatementContext.class, 0);
        }

        public TruncateTableStatementContext truncateTableStatement() {
            return getRuleContext(TruncateTableStatementContext.class, 0);
        }

        public AlterStatementContext alterStatement() {
            return getRuleContext(AlterStatementContext.class, 0);
        }

        public DescStatementContext descStatement() {
            return getRuleContext(DescStatementContext.class, 0);
        }

        public ShowStatementContext showStatement() {
            return getRuleContext(ShowStatementContext.class, 0);
        }

        public MetastoreCheckContext metastoreCheck() {
            return getRuleContext(MetastoreCheckContext.class, 0);
        }

        public CreateViewStatementContext createViewStatement() {
            return getRuleContext(CreateViewStatementContext.class, 0);
        }

        public CreateMaterializedViewStatementContext createMaterializedViewStatement() {
            return getRuleContext(CreateMaterializedViewStatementContext.class, 0);
        }

        public DropViewStatementContext dropViewStatement() {
            return getRuleContext(DropViewStatementContext.class, 0);
        }

        public DropMaterializedViewStatementContext dropMaterializedViewStatement() {
            return getRuleContext(DropMaterializedViewStatementContext.class, 0);
        }

        public CreateFunctionStatementContext createFunctionStatement() {
            return getRuleContext(CreateFunctionStatementContext.class, 0);
        }

        public CreateMacroStatementContext createMacroStatement() {
            return getRuleContext(CreateMacroStatementContext.class, 0);
        }

        public DropFunctionStatementContext dropFunctionStatement() {
            return getRuleContext(DropFunctionStatementContext.class, 0);
        }

        public ReloadFunctionStatementContext reloadFunctionStatement() {
            return getRuleContext(ReloadFunctionStatementContext.class, 0);
        }

        public DropMacroStatementContext dropMacroStatement() {
            return getRuleContext(DropMacroStatementContext.class, 0);
        }

        public AnalyzeStatementContext analyzeStatement() {
            return getRuleContext(AnalyzeStatementContext.class, 0);
        }

        public LockStatementContext lockStatement() {
            return getRuleContext(LockStatementContext.class, 0);
        }

        public UnlockStatementContext unlockStatement() {
            return getRuleContext(UnlockStatementContext.class, 0);
        }

        public LockDatabaseContext lockDatabase() {
            return getRuleContext(LockDatabaseContext.class, 0);
        }

        public UnlockDatabaseContext unlockDatabase() {
            return getRuleContext(UnlockDatabaseContext.class, 0);
        }

        public CreateRoleStatementContext createRoleStatement() {
            return getRuleContext(CreateRoleStatementContext.class, 0);
        }

        public DropRoleStatementContext dropRoleStatement() {
            return getRuleContext(DropRoleStatementContext.class, 0);
        }

        public GrantPrivilegesContext grantPrivileges() {
            return getRuleContext(GrantPrivilegesContext.class, 0);
        }

        public RevokePrivilegesContext revokePrivileges() {
            return getRuleContext(RevokePrivilegesContext.class, 0);
        }

        public ShowGrantsContext showGrants() {
            return getRuleContext(ShowGrantsContext.class, 0);
        }

        public ShowRoleGrantsContext showRoleGrants() {
            return getRuleContext(ShowRoleGrantsContext.class, 0);
        }

        public ShowRolePrincipalsContext showRolePrincipals() {
            return getRuleContext(ShowRolePrincipalsContext.class, 0);
        }

        public ShowRolesContext showRoles() {
            return getRuleContext(ShowRolesContext.class, 0);
        }

        public GrantRoleContext grantRole() {
            return getRuleContext(GrantRoleContext.class, 0);
        }

        public RevokeRoleContext revokeRole() {
            return getRuleContext(RevokeRoleContext.class, 0);
        }

        public SetRoleContext setRole() {
            return getRuleContext(SetRoleContext.class, 0);
        }

        public ShowCurrentRoleContext showCurrentRole() {
            return getRuleContext(ShowCurrentRoleContext.class, 0);
        }

        public AbortTransactionStatementContext abortTransactionStatement() {
            return getRuleContext(AbortTransactionStatementContext.class, 0);
        }

        public KillQueryStatementContext killQueryStatement() {
            return getRuleContext(KillQueryStatementContext.class, 0);
        }

        public CreateIndexStatementContext createIndexStatement() {
            return getRuleContext(CreateIndexStatementContext.class, 0);
        }

        public DropIndexStatementContext dropIndexStatement() {
            return getRuleContext(DropIndexStatementContext.class, 0);
        }

        public DdlStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ddlStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDdlStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDdlStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDdlStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DdlStatementContext ddlStatement() throws RecognitionException {
        DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_ddlStatement);
        try {
            setState(951);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 28, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(911);
                        createDatabaseStatement();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(912);
                        switchDatabaseStatement();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(913);
                        dropDatabaseStatement();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(914);
                        createTableStatement();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(915);
                        dropTableStatement();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(916);
                        truncateTableStatement();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(917);
                        alterStatement();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(918);
                        descStatement();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(919);
                        showStatement();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(920);
                        metastoreCheck();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(921);
                        createViewStatement();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(922);
                        createMaterializedViewStatement();
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(923);
                        dropViewStatement();
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(924);
                        dropMaterializedViewStatement();
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(925);
                        createFunctionStatement();
                    }
                    break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(926);
                        createMacroStatement();
                    }
                    break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(927);
                        dropFunctionStatement();
                    }
                    break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                    {
                        setState(928);
                        reloadFunctionStatement();
                    }
                    break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                    {
                        setState(929);
                        dropMacroStatement();
                    }
                    break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                    {
                        setState(930);
                        analyzeStatement();
                    }
                    break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                    {
                        setState(931);
                        lockStatement();
                    }
                    break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                    {
                        setState(932);
                        unlockStatement();
                    }
                    break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                    {
                        setState(933);
                        lockDatabase();
                    }
                    break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                    {
                        setState(934);
                        unlockDatabase();
                    }
                    break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                    {
                        setState(935);
                        createRoleStatement();
                    }
                    break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                    {
                        setState(936);
                        dropRoleStatement();
                    }
                    break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                    {
                        setState(937);
                        grantPrivileges();
                    }
                    break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                    {
                        setState(938);
                        revokePrivileges();
                    }
                    break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                    {
                        setState(939);
                        showGrants();
                    }
                    break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                    {
                        setState(940);
                        showRoleGrants();
                    }
                    break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                    {
                        setState(941);
                        showRolePrincipals();
                    }
                    break;
                case 32:
                    enterOuterAlt(_localctx, 32);
                    {
                        setState(942);
                        showRoles();
                    }
                    break;
                case 33:
                    enterOuterAlt(_localctx, 33);
                    {
                        setState(943);
                        grantRole();
                    }
                    break;
                case 34:
                    enterOuterAlt(_localctx, 34);
                    {
                        setState(944);
                        revokeRole();
                    }
                    break;
                case 35:
                    enterOuterAlt(_localctx, 35);
                    {
                        setState(945);
                        setRole();
                    }
                    break;
                case 36:
                    enterOuterAlt(_localctx, 36);
                    {
                        setState(946);
                        showCurrentRole();
                    }
                    break;
                case 37:
                    enterOuterAlt(_localctx, 37);
                    {
                        setState(947);
                        abortTransactionStatement();
                    }
                    break;
                case 38:
                    enterOuterAlt(_localctx, 38);
                    {
                        setState(948);
                        killQueryStatement();
                    }
                    break;
                case 39:
                    enterOuterAlt(_localctx, 39);
                    {
                        setState(949);
                        createIndexStatement();
                    }
                    break;
                case 40:
                    enterOuterAlt(_localctx, 40);
                    {
                        setState(950);
                        dropIndexStatement();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IfExistsContext extends ParserRuleContext {
        public TerminalNode KW_IF() {
            return getToken(HiveParser.KW_IF, 0);
        }

        public TerminalNode KW_EXISTS() {
            return getToken(HiveParser.KW_EXISTS, 0);
        }

        public IfExistsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ifExists;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIfExists(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIfExists(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIfExists(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IfExistsContext ifExists() throws RecognitionException {
        IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_ifExists);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(953);
                match(KW_IF);
                setState(954);
                match(KW_EXISTS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RestrictOrCascadeContext extends ParserRuleContext {
        public TerminalNode KW_RESTRICT() {
            return getToken(HiveParser.KW_RESTRICT, 0);
        }

        public TerminalNode KW_CASCADE() {
            return getToken(HiveParser.KW_CASCADE, 0);
        }

        public RestrictOrCascadeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_restrictOrCascade;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRestrictOrCascade(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRestrictOrCascade(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRestrictOrCascade(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RestrictOrCascadeContext restrictOrCascade() throws RecognitionException {
        RestrictOrCascadeContext _localctx = new RestrictOrCascadeContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_restrictOrCascade);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(956);
                _la = _input.LA(1);
                if (!(_la == KW_RESTRICT || _la == KW_CASCADE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IfNotExistsContext extends ParserRuleContext {
        public TerminalNode KW_IF() {
            return getToken(HiveParser.KW_IF, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_EXISTS() {
            return getToken(HiveParser.KW_EXISTS, 0);
        }

        public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ifNotExists;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIfNotExists(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIfNotExists(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIfNotExists(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IfNotExistsContext ifNotExists() throws RecognitionException {
        IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_ifNotExists);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(958);
                match(KW_IF);
                setState(959);
                match(KW_NOT);
                setState(960);
                match(KW_EXISTS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RewriteEnabledContext extends ParserRuleContext {
        public TerminalNode KW_ENABLE() {
            return getToken(HiveParser.KW_ENABLE, 0);
        }

        public TerminalNode KW_REWRITE() {
            return getToken(HiveParser.KW_REWRITE, 0);
        }

        public RewriteEnabledContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rewriteEnabled;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRewriteEnabled(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRewriteEnabled(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRewriteEnabled(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RewriteEnabledContext rewriteEnabled() throws RecognitionException {
        RewriteEnabledContext _localctx = new RewriteEnabledContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_rewriteEnabled);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(962);
                match(KW_ENABLE);
                setState(963);
                match(KW_REWRITE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RewriteDisabledContext extends ParserRuleContext {
        public TerminalNode KW_DISABLE() {
            return getToken(HiveParser.KW_DISABLE, 0);
        }

        public TerminalNode KW_REWRITE() {
            return getToken(HiveParser.KW_REWRITE, 0);
        }

        public RewriteDisabledContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rewriteDisabled;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRewriteDisabled(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRewriteDisabled(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRewriteDisabled(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RewriteDisabledContext rewriteDisabled() throws RecognitionException {
        RewriteDisabledContext _localctx = new RewriteDisabledContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_rewriteDisabled);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(965);
                match(KW_DISABLE);
                setState(966);
                match(KW_REWRITE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StoredAsDirsContext extends ParserRuleContext {
        public TerminalNode KW_STORED() {
            return getToken(HiveParser.KW_STORED, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode KW_DIRECTORIES() {
            return getToken(HiveParser.KW_DIRECTORIES, 0);
        }

        public StoredAsDirsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_storedAsDirs;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStoredAsDirs(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStoredAsDirs(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStoredAsDirs(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StoredAsDirsContext storedAsDirs() throws RecognitionException {
        StoredAsDirsContext _localctx = new StoredAsDirsContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_storedAsDirs);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(968);
                match(KW_STORED);
                setState(969);
                match(KW_AS);
                setState(970);
                match(KW_DIRECTORIES);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OrReplaceContext extends ParserRuleContext {
        public TerminalNode KW_OR() {
            return getToken(HiveParser.KW_OR, 0);
        }

        public TerminalNode KW_REPLACE() {
            return getToken(HiveParser.KW_REPLACE, 0);
        }

        public OrReplaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orReplace;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterOrReplace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitOrReplace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitOrReplace(this);
            else return visitor.visitChildren(this);
        }
    }

    public final OrReplaceContext orReplace() throws RecognitionException {
        OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_orReplace);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(972);
                match(KW_OR);
                setState(973);
                match(KW_REPLACE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateDatabaseStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public DatabaseCommentContext databaseComment() {
            return getRuleContext(DatabaseCommentContext.class, 0);
        }

        public DbLocationContext dbLocation() {
            return getRuleContext(DbLocationContext.class, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_DBPROPERTIES() {
            return getToken(HiveParser.KW_DBPROPERTIES, 0);
        }

        public DbPropertiesContext dbProperties() {
            return getRuleContext(DbPropertiesContext.class, 0);
        }

        public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createDatabaseStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateDatabaseStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateDatabaseStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitCreateDatabaseStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateDatabaseStatementContext createDatabaseStatement()
            throws RecognitionException {
        CreateDatabaseStatementContext _localctx =
                new CreateDatabaseStatementContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_createDatabaseStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(975);
                match(KW_CREATE);
                setState(976);
                _la = _input.LA(1);
                if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(978);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(977);
                        ifNotExists();
                    }
                }

                setState(980);
                identifier();
                setState(982);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(981);
                        databaseComment();
                    }
                }

                setState(985);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCATION) {
                    {
                        setState(984);
                        dbLocation();
                    }
                }

                setState(990);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
                    case 1:
                        {
                            setState(987);
                            match(KW_WITH);
                            setState(988);
                            match(KW_DBPROPERTIES);
                            setState(989);
                            dbProperties();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DbLocationContext extends ParserRuleContext {
        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public DbLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dbLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDbLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDbLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDbLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DbLocationContext dbLocation() throws RecognitionException {
        DbLocationContext _localctx = new DbLocationContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_dbLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(992);
                match(KW_LOCATION);
                setState(993);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DbPropertiesContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public DbPropertiesListContext dbPropertiesList() {
            return getRuleContext(DbPropertiesListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public DbPropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dbProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDbProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDbProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDbProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DbPropertiesContext dbProperties() throws RecognitionException {
        DbPropertiesContext _localctx = new DbPropertiesContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_dbProperties);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(995);
                match(LPAREN);
                setState(996);
                dbPropertiesList();
                setState(997);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DbPropertiesListContext extends ParserRuleContext {
        public List<KeyValuePropertyContext> keyValueProperty() {
            return getRuleContexts(KeyValuePropertyContext.class);
        }

        public KeyValuePropertyContext keyValueProperty(int i) {
            return getRuleContext(KeyValuePropertyContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public DbPropertiesListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dbPropertiesList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDbPropertiesList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDbPropertiesList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDbPropertiesList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DbPropertiesListContext dbPropertiesList() throws RecognitionException {
        DbPropertiesListContext _localctx = new DbPropertiesListContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_dbPropertiesList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(999);
                keyValueProperty();
                setState(1004);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1000);
                            match(COMMA);
                            setState(1001);
                            keyValueProperty();
                        }
                    }
                    setState(1006);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SwitchDatabaseStatementContext extends ParserRuleContext {
        public TerminalNode KW_USE() {
            return getToken(HiveParser.KW_USE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public SwitchDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_switchDatabaseStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSwitchDatabaseStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSwitchDatabaseStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitSwitchDatabaseStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SwitchDatabaseStatementContext switchDatabaseStatement()
            throws RecognitionException {
        SwitchDatabaseStatementContext _localctx =
                new SwitchDatabaseStatementContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_switchDatabaseStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1007);
                match(KW_USE);
                setState(1008);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropDatabaseStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public RestrictOrCascadeContext restrictOrCascade() {
            return getRuleContext(RestrictOrCascadeContext.class, 0);
        }

        public DropDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropDatabaseStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropDatabaseStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropDatabaseStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropDatabaseStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropDatabaseStatementContext dropDatabaseStatement() throws RecognitionException {
        DropDatabaseStatementContext _localctx = new DropDatabaseStatementContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_dropDatabaseStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1010);
                match(KW_DROP);
                setState(1011);
                _la = _input.LA(1);
                if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1013);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1012);
                        ifExists();
                    }
                }

                setState(1015);
                identifier();
                setState(1017);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RESTRICT || _la == KW_CASCADE) {
                    {
                        setState(1016);
                        restrictOrCascade();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DatabaseCommentContext extends ParserRuleContext {
        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public DatabaseCommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_databaseComment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDatabaseComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDatabaseComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDatabaseComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DatabaseCommentContext databaseComment() throws RecognitionException {
        DatabaseCommentContext _localctx = new DatabaseCommentContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_databaseComment);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1019);
                match(KW_COMMENT);
                setState(1020);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateTableStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public List<TableNameContext> tableName() {
            return getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return getRuleContext(TableNameContext.class, i);
        }

        public TerminalNode KW_LIKE() {
            return getToken(HiveParser.KW_LIKE, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public TerminalNode KW_EXTERNAL() {
            return getToken(HiveParser.KW_EXTERNAL, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public TableRowFormatContext tableRowFormat() {
            return getRuleContext(TableRowFormatContext.class, 0);
        }

        public TableFileFormatContext tableFileFormat() {
            return getRuleContext(TableFileFormatContext.class, 0);
        }

        public TableLocationContext tableLocation() {
            return getRuleContext(TableLocationContext.class, 0);
        }

        public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
            return getRuleContext(TablePropertiesPrefixedContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList() {
            return getRuleContext(ColumnNameTypeOrConstraintListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TableCommentContext tableComment() {
            return getRuleContext(TableCommentContext.class, 0);
        }

        public TablePartitionContext tablePartition() {
            return getRuleContext(TablePartitionContext.class, 0);
        }

        public TableBucketsContext tableBuckets() {
            return getRuleContext(TableBucketsContext.class, 0);
        }

        public TableSkewedContext tableSkewed() {
            return getRuleContext(TableSkewedContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public SelectStatementWithCTEContext selectStatementWithCTE() {
            return getRuleContext(SelectStatementWithCTEContext.class, 0);
        }

        public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createTableStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateTableStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateTableStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateTableStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateTableStatementContext createTableStatement() throws RecognitionException {
        CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_createTableStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1022);
                match(KW_CREATE);
                setState(1024);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TEMPORARY) {
                    {
                        setState(1023);
                        match(KW_TEMPORARY);
                    }
                }

                setState(1027);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_EXTERNAL) {
                    {
                        setState(1026);
                        match(KW_EXTERNAL);
                    }
                }

                setState(1029);
                match(KW_TABLE);
                setState(1031);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1030);
                        ifNotExists();
                    }
                }

                setState(1033);
                tableName();
                setState(1082);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_LIKE:
                        {
                            setState(1034);
                            match(KW_LIKE);
                            setState(1035);
                            tableName();
                            setState(1037);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_ROW) {
                                {
                                    setState(1036);
                                    tableRowFormat();
                                }
                            }

                            setState(1040);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_STORED) {
                                {
                                    setState(1039);
                                    tableFileFormat();
                                }
                            }

                            setState(1043);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_LOCATION) {
                                {
                                    setState(1042);
                                    tableLocation();
                                }
                            }

                            setState(1046);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_TBLPROPERTIES) {
                                {
                                    setState(1045);
                                    tablePropertiesPrefixed();
                                }
                            }
                        }
                        break;
                    case EOF:
                    case KW_DESC:
                    case KW_FROM:
                    case KW_AS:
                    case KW_SELECT:
                    case KW_INSERT:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_IMPORT:
                    case KW_CREATE:
                    case KW_ALTER:
                    case KW_DESCRIBE:
                    case KW_DROP:
                    case KW_COMMENT:
                    case KW_MAP:
                    case KW_REDUCE:
                    case KW_PARTITIONED:
                    case KW_CLUSTERED:
                    case KW_ROW:
                    case KW_KILL:
                    case KW_STORED:
                    case KW_LOCATION:
                    case KW_EXPLAIN:
                    case KW_WITH:
                    case KW_SET:
                    case KW_TBLPROPERTIES:
                    case KW_DELETE:
                    case KW_GRANT:
                    case KW_REVOKE:
                    case KW_LOCK:
                    case KW_UNLOCK:
                    case KW_ANALYZE:
                    case KW_USE:
                    case KW_UPDATE:
                    case KW_SKEWED:
                    case KW_TRUNCATE:
                    case KW_RELOAD:
                    case KW_START:
                    case KW_COMMIT:
                    case KW_ROLLBACK:
                    case KW_ABORT:
                    case KW_MERGE:
                    case KW_REPL:
                    case SEMICOLON:
                    case LPAREN:
                        {
                            setState(1052);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 43, _ctx)) {
                                case 1:
                                    {
                                        setState(1048);
                                        match(LPAREN);
                                        setState(1049);
                                        columnNameTypeOrConstraintList();
                                        setState(1050);
                                        match(RPAREN);
                                    }
                                    break;
                            }
                            setState(1055);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_COMMENT) {
                                {
                                    setState(1054);
                                    tableComment();
                                }
                            }

                            setState(1058);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_PARTITIONED) {
                                {
                                    setState(1057);
                                    tablePartition();
                                }
                            }

                            setState(1061);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_CLUSTERED) {
                                {
                                    setState(1060);
                                    tableBuckets();
                                }
                            }

                            setState(1064);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_SKEWED) {
                                {
                                    setState(1063);
                                    tableSkewed();
                                }
                            }

                            setState(1067);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_ROW) {
                                {
                                    setState(1066);
                                    tableRowFormat();
                                }
                            }

                            setState(1070);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_STORED) {
                                {
                                    setState(1069);
                                    tableFileFormat();
                                }
                            }

                            setState(1073);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_LOCATION) {
                                {
                                    setState(1072);
                                    tableLocation();
                                }
                            }

                            setState(1076);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_TBLPROPERTIES) {
                                {
                                    setState(1075);
                                    tablePropertiesPrefixed();
                                }
                            }

                            setState(1080);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_AS) {
                                {
                                    setState(1078);
                                    match(KW_AS);
                                    setState(1079);
                                    selectStatementWithCTE();
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TruncateTableStatementContext extends ParserRuleContext {
        public TerminalNode KW_TRUNCATE() {
            return getToken(HiveParser.KW_TRUNCATE, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TablePartitionPrefixContext tablePartitionPrefix() {
            return getRuleContext(TablePartitionPrefixContext.class, 0);
        }

        public TerminalNode KW_COLUMNS() {
            return getToken(HiveParser.KW_COLUMNS, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_truncateTableStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTruncateTableStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTruncateTableStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTruncateTableStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TruncateTableStatementContext truncateTableStatement()
            throws RecognitionException {
        TruncateTableStatementContext _localctx =
                new TruncateTableStatementContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_truncateTableStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1084);
                match(KW_TRUNCATE);
                setState(1085);
                match(KW_TABLE);
                setState(1086);
                tablePartitionPrefix();
                setState(1092);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COLUMNS) {
                    {
                        setState(1087);
                        match(KW_COLUMNS);
                        setState(1088);
                        match(LPAREN);
                        setState(1089);
                        columnNameList();
                        setState(1090);
                        match(RPAREN);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropTableStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public TerminalNode KW_PURGE() {
            return getToken(HiveParser.KW_PURGE, 0);
        }

        public ReplicationClauseContext replicationClause() {
            return getRuleContext(ReplicationClauseContext.class, 0);
        }

        public DropTableStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropTableStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropTableStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropTableStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropTableStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropTableStatementContext dropTableStatement() throws RecognitionException {
        DropTableStatementContext _localctx = new DropTableStatementContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_dropTableStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1094);
                match(KW_DROP);
                setState(1095);
                match(KW_TABLE);
                setState(1097);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1096);
                        ifExists();
                    }
                }

                setState(1099);
                tableName();
                setState(1101);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PURGE) {
                    {
                        setState(1100);
                        match(KW_PURGE);
                    }
                }

                setState(1104);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_FOR) {
                    {
                        setState(1103);
                        replicationClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementContext extends ParserRuleContext {
        public TerminalNode KW_ALTER() {
            return getToken(HiveParser.KW_ALTER, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public AlterTableStatementSuffixContext alterTableStatementSuffix() {
            return getRuleContext(AlterTableStatementSuffixContext.class, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public AlterViewStatementSuffixContext alterViewStatementSuffix() {
            return getRuleContext(AlterViewStatementSuffixContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode KW_MATERIALIZED() {
            return getToken(HiveParser.KW_MATERIALIZED, 0);
        }

        public AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix() {
            return getRuleContext(AlterMaterializedViewStatementSuffixContext.class, 0);
        }

        public AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix() {
            return getRuleContext(AlterDatabaseStatementSuffixContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TerminalNode KW_INDEX() {
            return getToken(HiveParser.KW_INDEX, 0);
        }

        public AlterIndexStatementSuffixContext alterIndexStatementSuffix() {
            return getRuleContext(AlterIndexStatementSuffixContext.class, 0);
        }

        public AlterStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAlterStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementContext alterStatement() throws RecognitionException {
        AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_alterStatement);
        int _la;
        try {
            setState(1131);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 59, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1106);
                        match(KW_ALTER);
                        setState(1107);
                        match(KW_TABLE);
                        setState(1108);
                        tableName();
                        setState(1109);
                        alterTableStatementSuffix();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1111);
                        match(KW_ALTER);
                        setState(1112);
                        match(KW_VIEW);
                        setState(1113);
                        tableName();
                        setState(1115);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(1114);
                                match(KW_AS);
                            }
                        }

                        setState(1117);
                        alterViewStatementSuffix();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1119);
                        match(KW_ALTER);
                        setState(1120);
                        match(KW_MATERIALIZED);
                        setState(1121);
                        match(KW_VIEW);
                        setState(1122);
                        tableName();
                        setState(1123);
                        alterMaterializedViewStatementSuffix();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1125);
                        match(KW_ALTER);
                        setState(1126);
                        _la = _input.LA(1);
                        if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1127);
                        alterDatabaseStatementSuffix();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1128);
                        match(KW_ALTER);
                        setState(1129);
                        match(KW_INDEX);
                        setState(1130);
                        alterIndexStatementSuffix();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterTableStatementSuffixContext extends ParserRuleContext {
        public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
            return getRuleContext(AlterStatementSuffixRenameContext.class, 0);
        }

        public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
            return getRuleContext(AlterStatementSuffixDropPartitionsContext.class, 0);
        }

        public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
            return getRuleContext(AlterStatementSuffixAddPartitionsContext.class, 0);
        }

        public AlterStatementSuffixTouchContext alterStatementSuffixTouch() {
            return getRuleContext(AlterStatementSuffixTouchContext.class, 0);
        }

        public AlterStatementSuffixArchiveContext alterStatementSuffixArchive() {
            return getRuleContext(AlterStatementSuffixArchiveContext.class, 0);
        }

        public AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive() {
            return getRuleContext(AlterStatementSuffixUnArchiveContext.class, 0);
        }

        public AlterStatementSuffixPropertiesContext alterStatementSuffixProperties() {
            return getRuleContext(AlterStatementSuffixPropertiesContext.class, 0);
        }

        public AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby() {
            return getRuleContext(AlterStatementSuffixSkewedbyContext.class, 0);
        }

        public AlterStatementSuffixExchangePartitionContext
                alterStatementSuffixExchangePartition() {
            return getRuleContext(AlterStatementSuffixExchangePartitionContext.class, 0);
        }

        public AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType() {
            return getRuleContext(AlterStatementPartitionKeyTypeContext.class, 0);
        }

        public AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint() {
            return getRuleContext(AlterStatementSuffixDropConstraintContext.class, 0);
        }

        public AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint() {
            return getRuleContext(AlterStatementSuffixAddConstraintContext.class, 0);
        }

        public AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix() {
            return getRuleContext(AlterTblPartitionStatementSuffixContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner() {
            return getRuleContext(AlterStatementSuffixSetOwnerContext.class, 0);
        }

        public AlterTableStatementSuffixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterTableStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterTableStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterTableStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterTableStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterTableStatementSuffixContext alterTableStatementSuffix()
            throws RecognitionException {
        AlterTableStatementSuffixContext _localctx =
                new AlterTableStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_alterTableStatementSuffix);
        int _la;
        try {
            setState(1150);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 61, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1133);
                        alterStatementSuffixRename();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1134);
                        alterStatementSuffixDropPartitions();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1135);
                        alterStatementSuffixAddPartitions();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1136);
                        alterStatementSuffixTouch();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1137);
                        alterStatementSuffixArchive();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1138);
                        alterStatementSuffixUnArchive();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1139);
                        alterStatementSuffixProperties();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1140);
                        alterStatementSuffixSkewedby();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(1141);
                        alterStatementSuffixExchangePartition();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(1142);
                        alterStatementPartitionKeyType();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(1143);
                        alterStatementSuffixDropConstraint();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(1144);
                        alterStatementSuffixAddConstraint();
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(1146);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PARTITION) {
                            {
                                setState(1145);
                                partitionSpec();
                            }
                        }

                        setState(1148);
                        alterTblPartitionStatementSuffix();
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(1149);
                        alterStatementSuffixSetOwner();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterTblPartitionStatementSuffixContext extends ParserRuleContext {
        public AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat() {
            return getRuleContext(AlterStatementSuffixFileFormatContext.class, 0);
        }

        public AlterStatementSuffixLocationContext alterStatementSuffixLocation() {
            return getRuleContext(AlterStatementSuffixLocationContext.class, 0);
        }

        public AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() {
            return getRuleContext(AlterStatementSuffixMergeFilesContext.class, 0);
        }

        public AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties() {
            return getRuleContext(AlterStatementSuffixSerdePropertiesContext.class, 0);
        }

        public AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart() {
            return getRuleContext(AlterStatementSuffixRenamePartContext.class, 0);
        }

        public AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum() {
            return getRuleContext(AlterStatementSuffixBucketNumContext.class, 0);
        }

        public AlterTblPartitionStatementSuffixSkewedLocationContext
                alterTblPartitionStatementSuffixSkewedLocation() {
            return getRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext.class, 0);
        }

        public AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby() {
            return getRuleContext(AlterStatementSuffixClusterbySortbyContext.class, 0);
        }

        public AlterStatementSuffixCompactContext alterStatementSuffixCompact() {
            return getRuleContext(AlterStatementSuffixCompactContext.class, 0);
        }

        public AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol() {
            return getRuleContext(AlterStatementSuffixUpdateStatsColContext.class, 0);
        }

        public AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats() {
            return getRuleContext(AlterStatementSuffixUpdateStatsContext.class, 0);
        }

        public AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol() {
            return getRuleContext(AlterStatementSuffixRenameColContext.class, 0);
        }

        public AlterStatementSuffixAddColContext alterStatementSuffixAddCol() {
            return getRuleContext(AlterStatementSuffixAddColContext.class, 0);
        }

        public AlterTblPartitionStatementSuffixContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterTblPartitionStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterTblPartitionStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterTblPartitionStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterTblPartitionStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix()
            throws RecognitionException {
        AlterTblPartitionStatementSuffixContext _localctx =
                new AlterTblPartitionStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_alterTblPartitionStatementSuffix);
        try {
            setState(1165);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 62, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1152);
                        alterStatementSuffixFileFormat();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1153);
                        alterStatementSuffixLocation();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1154);
                        alterStatementSuffixMergeFiles();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1155);
                        alterStatementSuffixSerdeProperties();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1156);
                        alterStatementSuffixRenamePart();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1157);
                        alterStatementSuffixBucketNum();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1158);
                        alterTblPartitionStatementSuffixSkewedLocation();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1159);
                        alterStatementSuffixClusterbySortby();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(1160);
                        alterStatementSuffixCompact();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(1161);
                        alterStatementSuffixUpdateStatsCol();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(1162);
                        alterStatementSuffixUpdateStats();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(1163);
                        alterStatementSuffixRenameCol();
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(1164);
                        alterStatementSuffixAddCol();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementPartitionKeyTypeContext extends ParserRuleContext {
        public TerminalNode KW_PARTITION() {
            return getToken(HiveParser.KW_PARTITION, 0);
        }

        public TerminalNode KW_COLUMN() {
            return getToken(HiveParser.KW_COLUMN, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameTypeContext columnNameType() {
            return getRuleContext(ColumnNameTypeContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public AlterStatementPartitionKeyTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementPartitionKeyType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementPartitionKeyType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementPartitionKeyType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementPartitionKeyType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType()
            throws RecognitionException {
        AlterStatementPartitionKeyTypeContext _localctx =
                new AlterStatementPartitionKeyTypeContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_alterStatementPartitionKeyType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1167);
                match(KW_PARTITION);
                setState(1168);
                match(KW_COLUMN);
                setState(1169);
                match(LPAREN);
                setState(1170);
                columnNameType();
                setState(1171);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterViewStatementSuffixContext extends ParserRuleContext {
        public AlterViewSuffixPropertiesContext alterViewSuffixProperties() {
            return getRuleContext(AlterViewSuffixPropertiesContext.class, 0);
        }

        public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
            return getRuleContext(AlterStatementSuffixRenameContext.class, 0);
        }

        public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
            return getRuleContext(AlterStatementSuffixAddPartitionsContext.class, 0);
        }

        public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
            return getRuleContext(AlterStatementSuffixDropPartitionsContext.class, 0);
        }

        public SelectStatementWithCTEContext selectStatementWithCTE() {
            return getRuleContext(SelectStatementWithCTEContext.class, 0);
        }

        public AlterViewStatementSuffixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterViewStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterViewStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterViewStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterViewStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterViewStatementSuffixContext alterViewStatementSuffix()
            throws RecognitionException {
        AlterViewStatementSuffixContext _localctx =
                new AlterViewStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_alterViewStatementSuffix);
        try {
            setState(1178);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_SET:
                case KW_UNSET:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1173);
                        alterViewSuffixProperties();
                    }
                    break;
                case KW_RENAME:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1174);
                        alterStatementSuffixRename();
                    }
                    break;
                case KW_ADD:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1175);
                        alterStatementSuffixAddPartitions();
                    }
                    break;
                case KW_DROP:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1176);
                        alterStatementSuffixDropPartitions();
                    }
                    break;
                case KW_SELECT:
                case KW_MAP:
                case KW_REDUCE:
                case KW_WITH:
                case LPAREN:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1177);
                        selectStatementWithCTE();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterMaterializedViewStatementSuffixContext extends ParserRuleContext {
        public AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite() {
            return getRuleContext(AlterMaterializedViewSuffixRewriteContext.class, 0);
        }

        public AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild() {
            return getRuleContext(AlterMaterializedViewSuffixRebuildContext.class, 0);
        }

        public AlterMaterializedViewStatementSuffixContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterMaterializedViewStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterMaterializedViewStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterMaterializedViewStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterMaterializedViewStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix()
            throws RecognitionException {
        AlterMaterializedViewStatementSuffixContext _localctx =
                new AlterMaterializedViewStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_alterMaterializedViewStatementSuffix);
        try {
            setState(1182);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ENABLE:
                case KW_DISABLE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1180);
                        alterMaterializedViewSuffixRewrite();
                    }
                    break;
                case KW_REBUILD:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1181);
                        alterMaterializedViewSuffixRebuild();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterDatabaseStatementSuffixContext extends ParserRuleContext {
        public AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties() {
            return getRuleContext(AlterDatabaseSuffixPropertiesContext.class, 0);
        }

        public AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner() {
            return getRuleContext(AlterDatabaseSuffixSetOwnerContext.class, 0);
        }

        public AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation() {
            return getRuleContext(AlterDatabaseSuffixSetLocationContext.class, 0);
        }

        public AlterDatabaseStatementSuffixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterDatabaseStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterDatabaseStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterDatabaseStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterDatabaseStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix()
            throws RecognitionException {
        AlterDatabaseStatementSuffixContext _localctx =
                new AlterDatabaseStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_alterDatabaseStatementSuffix);
        try {
            setState(1187);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 65, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1184);
                        alterDatabaseSuffixProperties();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1185);
                        alterDatabaseSuffixSetOwner();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1186);
                        alterDatabaseSuffixSetLocation();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterDatabaseSuffixPropertiesContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_DBPROPERTIES() {
            return getToken(HiveParser.KW_DBPROPERTIES, 0);
        }

        public DbPropertiesContext dbProperties() {
            return getRuleContext(DbPropertiesContext.class, 0);
        }

        public AlterDatabaseSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterDatabaseSuffixProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterDatabaseSuffixProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterDatabaseSuffixProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterDatabaseSuffixProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties()
            throws RecognitionException {
        AlterDatabaseSuffixPropertiesContext _localctx =
                new AlterDatabaseSuffixPropertiesContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_alterDatabaseSuffixProperties);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1189);
                identifier();
                setState(1190);
                match(KW_SET);
                setState(1191);
                match(KW_DBPROPERTIES);
                setState(1192);
                dbProperties();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterDatabaseSuffixSetOwnerContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_OWNER() {
            return getToken(HiveParser.KW_OWNER, 0);
        }

        public PrincipalNameContext principalName() {
            return getRuleContext(PrincipalNameContext.class, 0);
        }

        public AlterDatabaseSuffixSetOwnerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterDatabaseSuffixSetOwner;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterDatabaseSuffixSetOwner(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterDatabaseSuffixSetOwner(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterDatabaseSuffixSetOwner(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner()
            throws RecognitionException {
        AlterDatabaseSuffixSetOwnerContext _localctx =
                new AlterDatabaseSuffixSetOwnerContext(_ctx, getState());
        enterRule(_localctx, 86, RULE_alterDatabaseSuffixSetOwner);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1194);
                identifier();
                setState(1195);
                match(KW_SET);
                setState(1196);
                match(KW_OWNER);
                setState(1197);
                principalName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterDatabaseSuffixSetLocationContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public AlterDatabaseSuffixSetLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterDatabaseSuffixSetLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterDatabaseSuffixSetLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterDatabaseSuffixSetLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterDatabaseSuffixSetLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation()
            throws RecognitionException {
        AlterDatabaseSuffixSetLocationContext _localctx =
                new AlterDatabaseSuffixSetLocationContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_alterDatabaseSuffixSetLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1199);
                identifier();
                setState(1200);
                match(KW_SET);
                setState(1201);
                match(KW_LOCATION);
                setState(1202);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixRenameContext extends ParserRuleContext {
        public TerminalNode KW_RENAME() {
            return getToken(HiveParser.KW_RENAME, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public AlterStatementSuffixRenameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixRename;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixRename(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixRename(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixRename(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixRenameContext alterStatementSuffixRename()
            throws RecognitionException {
        AlterStatementSuffixRenameContext _localctx =
                new AlterStatementSuffixRenameContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_alterStatementSuffixRename);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1204);
                match(KW_RENAME);
                setState(1205);
                match(KW_TO);
                setState(1206);
                tableName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixAddColContext extends ParserRuleContext {
        public TerminalNode KW_COLUMNS() {
            return getToken(HiveParser.KW_COLUMNS, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameTypeListContext columnNameTypeList() {
            return getRuleContext(ColumnNameTypeListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_ADD() {
            return getToken(HiveParser.KW_ADD, 0);
        }

        public TerminalNode KW_REPLACE() {
            return getToken(HiveParser.KW_REPLACE, 0);
        }

        public RestrictOrCascadeContext restrictOrCascade() {
            return getRuleContext(RestrictOrCascadeContext.class, 0);
        }

        public AlterStatementSuffixAddColContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixAddCol;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixAddCol(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixAddCol(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixAddCol(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixAddColContext alterStatementSuffixAddCol()
            throws RecognitionException {
        AlterStatementSuffixAddColContext _localctx =
                new AlterStatementSuffixAddColContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_alterStatementSuffixAddCol);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1208);
                _la = _input.LA(1);
                if (!(_la == KW_ADD || _la == KW_REPLACE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1209);
                match(KW_COLUMNS);
                setState(1210);
                match(LPAREN);
                setState(1211);
                columnNameTypeList();
                setState(1212);
                match(RPAREN);
                setState(1214);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RESTRICT || _la == KW_CASCADE) {
                    {
                        setState(1213);
                        restrictOrCascade();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixAddConstraintContext extends ParserRuleContext {
        public TerminalNode KW_ADD() {
            return getToken(HiveParser.KW_ADD, 0);
        }

        public AlterForeignKeyWithNameContext alterForeignKeyWithName() {
            return getRuleContext(AlterForeignKeyWithNameContext.class, 0);
        }

        public AlterConstraintWithNameContext alterConstraintWithName() {
            return getRuleContext(AlterConstraintWithNameContext.class, 0);
        }

        public AlterStatementSuffixAddConstraintContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixAddConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixAddConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixAddConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixAddConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint()
            throws RecognitionException {
        AlterStatementSuffixAddConstraintContext _localctx =
                new AlterStatementSuffixAddConstraintContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_alterStatementSuffixAddConstraint);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1216);
                match(KW_ADD);
                setState(1219);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 67, _ctx)) {
                    case 1:
                        {
                            setState(1217);
                            alterForeignKeyWithName();
                        }
                        break;
                    case 2:
                        {
                            setState(1218);
                            alterConstraintWithName();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixDropConstraintContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public AlterStatementSuffixDropConstraintContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixDropConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixDropConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixDropConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixDropConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint()
            throws RecognitionException {
        AlterStatementSuffixDropConstraintContext _localctx =
                new AlterStatementSuffixDropConstraintContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_alterStatementSuffixDropConstraint);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1221);
                match(KW_DROP);
                setState(1222);
                match(KW_CONSTRAINT);
                setState(1223);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixRenameColContext extends ParserRuleContext {
        public TerminalNode KW_CHANGE() {
            return getToken(HiveParser.KW_CHANGE, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public TerminalNode KW_COLUMN() {
            return getToken(HiveParser.KW_COLUMN, 0);
        }

        public AlterColumnConstraintContext alterColumnConstraint() {
            return getRuleContext(AlterColumnConstraintContext.class, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public AlterStatementChangeColPositionContext alterStatementChangeColPosition() {
            return getRuleContext(AlterStatementChangeColPositionContext.class, 0);
        }

        public RestrictOrCascadeContext restrictOrCascade() {
            return getRuleContext(RestrictOrCascadeContext.class, 0);
        }

        public AlterStatementSuffixRenameColContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixRenameCol;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixRenameCol(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixRenameCol(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixRenameCol(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol()
            throws RecognitionException {
        AlterStatementSuffixRenameColContext _localctx =
                new AlterStatementSuffixRenameColContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_alterStatementSuffixRenameCol);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1225);
                match(KW_CHANGE);
                setState(1227);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COLUMN) {
                    {
                        setState(1226);
                        match(KW_COLUMN);
                    }
                }

                setState(1229);
                identifier();
                setState(1230);
                identifier();
                setState(1231);
                colType();
                setState(1233);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & 13L) != 0)) {
                    {
                        setState(1232);
                        alterColumnConstraint();
                    }
                }

                setState(1237);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(1235);
                        match(KW_COMMENT);
                        setState(1236);
                        match(StringLiteral);
                    }
                }

                setState(1240);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_FIRST || _la == KW_AFTER) {
                    {
                        setState(1239);
                        alterStatementChangeColPosition();
                    }
                }

                setState(1243);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RESTRICT || _la == KW_CASCADE) {
                    {
                        setState(1242);
                        restrictOrCascade();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixUpdateStatsColContext extends ParserRuleContext {
        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public TerminalNode KW_STATISTICS() {
            return getToken(HiveParser.KW_STATISTICS, 0);
        }

        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TerminalNode KW_COLUMN() {
            return getToken(HiveParser.KW_COLUMN, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public AlterStatementSuffixUpdateStatsColContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixUpdateStatsCol;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixUpdateStatsCol(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixUpdateStatsCol(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixUpdateStatsCol(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol()
            throws RecognitionException {
        AlterStatementSuffixUpdateStatsColContext _localctx =
                new AlterStatementSuffixUpdateStatsColContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_alterStatementSuffixUpdateStatsCol);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1245);
                match(KW_UPDATE);
                setState(1246);
                match(KW_STATISTICS);
                setState(1247);
                match(KW_FOR);
                setState(1249);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COLUMN) {
                    {
                        setState(1248);
                        match(KW_COLUMN);
                    }
                }

                setState(1251);
                identifier();
                setState(1252);
                match(KW_SET);
                setState(1253);
                tableProperties();
                setState(1256);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(1254);
                        match(KW_COMMENT);
                        setState(1255);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixUpdateStatsContext extends ParserRuleContext {
        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public TerminalNode KW_STATISTICS() {
            return getToken(HiveParser.KW_STATISTICS, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public AlterStatementSuffixUpdateStatsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixUpdateStats;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixUpdateStats(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixUpdateStats(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixUpdateStats(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats()
            throws RecognitionException {
        AlterStatementSuffixUpdateStatsContext _localctx =
                new AlterStatementSuffixUpdateStatsContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_alterStatementSuffixUpdateStats);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1258);
                match(KW_UPDATE);
                setState(1259);
                match(KW_STATISTICS);
                setState(1260);
                match(KW_SET);
                setState(1261);
                tableProperties();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementChangeColPositionContext extends ParserRuleContext {
        public Token first;

        public TerminalNode KW_FIRST() {
            return getToken(HiveParser.KW_FIRST, 0);
        }

        public TerminalNode KW_AFTER() {
            return getToken(HiveParser.KW_AFTER, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public AlterStatementChangeColPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementChangeColPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementChangeColPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementChangeColPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementChangeColPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementChangeColPositionContext alterStatementChangeColPosition()
            throws RecognitionException {
        AlterStatementChangeColPositionContext _localctx =
                new AlterStatementChangeColPositionContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_alterStatementChangeColPosition);
        try {
            setState(1266);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_FIRST:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1263);
                        ((AlterStatementChangeColPositionContext) _localctx).first =
                                match(KW_FIRST);
                    }
                    break;
                case KW_AFTER:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1264);
                        match(KW_AFTER);
                        setState(1265);
                        identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixAddPartitionsContext extends ParserRuleContext {
        public TerminalNode KW_ADD() {
            return getToken(HiveParser.KW_ADD, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public List<AlterStatementSuffixAddPartitionsElementContext>
                alterStatementSuffixAddPartitionsElement() {
            return getRuleContexts(AlterStatementSuffixAddPartitionsElementContext.class);
        }

        public AlterStatementSuffixAddPartitionsElementContext
                alterStatementSuffixAddPartitionsElement(int i) {
            return getRuleContext(AlterStatementSuffixAddPartitionsElementContext.class, i);
        }

        public AlterStatementSuffixAddPartitionsContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixAddPartitions;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixAddPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixAddPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixAddPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions()
            throws RecognitionException {
        AlterStatementSuffixAddPartitionsContext _localctx =
                new AlterStatementSuffixAddPartitionsContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_alterStatementSuffixAddPartitions);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1268);
                match(KW_ADD);
                setState(1270);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1269);
                        ifNotExists();
                    }
                }

                setState(1273);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1272);
                            alterStatementSuffixAddPartitionsElement();
                        }
                    }
                    setState(1275);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == KW_PARTITION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixAddPartitionsElementContext extends ParserRuleContext {
        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public PartitionLocationContext partitionLocation() {
            return getRuleContext(PartitionLocationContext.class, 0);
        }

        public AlterStatementSuffixAddPartitionsElementContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixAddPartitionsElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixAddPartitionsElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixAddPartitionsElement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixAddPartitionsElement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixAddPartitionsElementContext
            alterStatementSuffixAddPartitionsElement() throws RecognitionException {
        AlterStatementSuffixAddPartitionsElementContext _localctx =
                new AlterStatementSuffixAddPartitionsElementContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_alterStatementSuffixAddPartitionsElement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1277);
                partitionSpec();
                setState(1279);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCATION) {
                    {
                        setState(1278);
                        partitionLocation();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixTouchContext extends ParserRuleContext {
        public TerminalNode KW_TOUCH() {
            return getToken(HiveParser.KW_TOUCH, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public AlterStatementSuffixTouchContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixTouch;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixTouch(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixTouch(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixTouch(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixTouchContext alterStatementSuffixTouch()
            throws RecognitionException {
        AlterStatementSuffixTouchContext _localctx =
                new AlterStatementSuffixTouchContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_alterStatementSuffixTouch);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1281);
                match(KW_TOUCH);
                setState(1285);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == KW_PARTITION) {
                    {
                        {
                            setState(1282);
                            partitionSpec();
                        }
                    }
                    setState(1287);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixArchiveContext extends ParserRuleContext {
        public TerminalNode KW_ARCHIVE() {
            return getToken(HiveParser.KW_ARCHIVE, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public AlterStatementSuffixArchiveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixArchive;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixArchive(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixArchive(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixArchive(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixArchiveContext alterStatementSuffixArchive()
            throws RecognitionException {
        AlterStatementSuffixArchiveContext _localctx =
                new AlterStatementSuffixArchiveContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_alterStatementSuffixArchive);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1288);
                match(KW_ARCHIVE);
                setState(1292);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == KW_PARTITION) {
                    {
                        {
                            setState(1289);
                            partitionSpec();
                        }
                    }
                    setState(1294);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixUnArchiveContext extends ParserRuleContext {
        public TerminalNode KW_UNARCHIVE() {
            return getToken(HiveParser.KW_UNARCHIVE, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public AlterStatementSuffixUnArchiveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixUnArchive;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixUnArchive(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixUnArchive(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixUnArchive(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive()
            throws RecognitionException {
        AlterStatementSuffixUnArchiveContext _localctx =
                new AlterStatementSuffixUnArchiveContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_alterStatementSuffixUnArchive);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1295);
                match(KW_UNARCHIVE);
                setState(1299);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == KW_PARTITION) {
                    {
                        {
                            setState(1296);
                            partitionSpec();
                        }
                    }
                    setState(1301);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionLocationContext extends ParserRuleContext {
        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public PartitionLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartitionLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionLocationContext partitionLocation() throws RecognitionException {
        PartitionLocationContext _localctx = new PartitionLocationContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_partitionLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1302);
                match(KW_LOCATION);
                setState(1303);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixDropPartitionsContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public List<DropPartitionSpecContext> dropPartitionSpec() {
            return getRuleContexts(DropPartitionSpecContext.class);
        }

        public DropPartitionSpecContext dropPartitionSpec(int i) {
            return getRuleContext(DropPartitionSpecContext.class, i);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public TerminalNode KW_PURGE() {
            return getToken(HiveParser.KW_PURGE, 0);
        }

        public ReplicationClauseContext replicationClause() {
            return getRuleContext(ReplicationClauseContext.class, 0);
        }

        public AlterStatementSuffixDropPartitionsContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixDropPartitions;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixDropPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixDropPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixDropPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions()
            throws RecognitionException {
        AlterStatementSuffixDropPartitionsContext _localctx =
                new AlterStatementSuffixDropPartitionsContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_alterStatementSuffixDropPartitions);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1305);
                match(KW_DROP);
                setState(1307);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1306);
                        ifExists();
                    }
                }

                setState(1309);
                dropPartitionSpec();
                setState(1314);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1310);
                            match(COMMA);
                            setState(1311);
                            dropPartitionSpec();
                        }
                    }
                    setState(1316);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1318);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PURGE) {
                    {
                        setState(1317);
                        match(KW_PURGE);
                    }
                }

                setState(1321);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_FOR) {
                    {
                        setState(1320);
                        replicationClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixPropertiesContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TerminalNode KW_UNSET() {
            return getToken(HiveParser.KW_UNSET, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public AlterStatementSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixPropertiesContext alterStatementSuffixProperties()
            throws RecognitionException {
        AlterStatementSuffixPropertiesContext _localctx =
                new AlterStatementSuffixPropertiesContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_alterStatementSuffixProperties);
        int _la;
        try {
            setState(1332);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_SET:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1323);
                        match(KW_SET);
                        setState(1324);
                        match(KW_TBLPROPERTIES);
                        setState(1325);
                        tableProperties();
                    }
                    break;
                case KW_UNSET:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1326);
                        match(KW_UNSET);
                        setState(1327);
                        match(KW_TBLPROPERTIES);
                        setState(1329);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_IF) {
                            {
                                setState(1328);
                                ifExists();
                            }
                        }

                        setState(1331);
                        tableProperties();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterViewSuffixPropertiesContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TerminalNode KW_UNSET() {
            return getToken(HiveParser.KW_UNSET, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public AlterViewSuffixPropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterViewSuffixProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterViewSuffixProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterViewSuffixProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterViewSuffixProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterViewSuffixPropertiesContext alterViewSuffixProperties()
            throws RecognitionException {
        AlterViewSuffixPropertiesContext _localctx =
                new AlterViewSuffixPropertiesContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_alterViewSuffixProperties);
        int _la;
        try {
            setState(1343);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_SET:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1334);
                        match(KW_SET);
                        setState(1335);
                        match(KW_TBLPROPERTIES);
                        setState(1336);
                        tableProperties();
                    }
                    break;
                case KW_UNSET:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1337);
                        match(KW_UNSET);
                        setState(1338);
                        match(KW_TBLPROPERTIES);
                        setState(1340);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_IF) {
                            {
                                setState(1339);
                                ifExists();
                            }
                        }

                        setState(1342);
                        tableProperties();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterMaterializedViewSuffixRewriteContext extends ParserRuleContext {
        public RewriteEnabledContext rewriteEnabled() {
            return getRuleContext(RewriteEnabledContext.class, 0);
        }

        public RewriteDisabledContext rewriteDisabled() {
            return getRuleContext(RewriteDisabledContext.class, 0);
        }

        public AlterMaterializedViewSuffixRewriteContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterMaterializedViewSuffixRewrite;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterMaterializedViewSuffixRewrite(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterMaterializedViewSuffixRewrite(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterMaterializedViewSuffixRewrite(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite()
            throws RecognitionException {
        AlterMaterializedViewSuffixRewriteContext _localctx =
                new AlterMaterializedViewSuffixRewriteContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_alterMaterializedViewSuffixRewrite);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1347);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_ENABLE:
                        {
                            setState(1345);
                            rewriteEnabled();
                        }
                        break;
                    case KW_DISABLE:
                        {
                            setState(1346);
                            rewriteDisabled();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterMaterializedViewSuffixRebuildContext extends ParserRuleContext {
        public TerminalNode KW_REBUILD() {
            return getToken(HiveParser.KW_REBUILD, 0);
        }

        public AlterMaterializedViewSuffixRebuildContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterMaterializedViewSuffixRebuild;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterMaterializedViewSuffixRebuild(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterMaterializedViewSuffixRebuild(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterMaterializedViewSuffixRebuild(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild()
            throws RecognitionException {
        AlterMaterializedViewSuffixRebuildContext _localctx =
                new AlterMaterializedViewSuffixRebuildContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_alterMaterializedViewSuffixRebuild);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1349);
                match(KW_REBUILD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixSerdePropertiesContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_SERDE() {
            return getToken(HiveParser.KW_SERDE, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_SERDEPROPERTIES() {
            return getToken(HiveParser.KW_SERDEPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public AlterStatementSuffixSerdePropertiesContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixSerdeProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixSerdeProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixSerdeProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixSerdeProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties()
            throws RecognitionException {
        AlterStatementSuffixSerdePropertiesContext _localctx =
                new AlterStatementSuffixSerdePropertiesContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_alterStatementSuffixSerdeProperties);
        try {
            setState(1362);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 92, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1351);
                        match(KW_SET);
                        setState(1352);
                        match(KW_SERDE);
                        setState(1353);
                        match(StringLiteral);
                        setState(1357);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 91, _ctx)) {
                            case 1:
                                {
                                    setState(1354);
                                    match(KW_WITH);
                                    setState(1355);
                                    match(KW_SERDEPROPERTIES);
                                    setState(1356);
                                    tableProperties();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1359);
                        match(KW_SET);
                        setState(1360);
                        match(KW_SERDEPROPERTIES);
                        setState(1361);
                        tableProperties();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterIndexStatementSuffixContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_REBUILD() {
            return getToken(HiveParser.KW_REBUILD, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public AlterIndexStatementSuffixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterIndexStatementSuffix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterIndexStatementSuffix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterIndexStatementSuffix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterIndexStatementSuffix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterIndexStatementSuffixContext alterIndexStatementSuffix()
            throws RecognitionException {
        AlterIndexStatementSuffixContext _localctx =
                new AlterIndexStatementSuffixContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_alterIndexStatementSuffix);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1364);
                identifier();
                setState(1365);
                match(KW_ON);
                setState(1366);
                tableName();
                setState(1368);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1367);
                        partitionSpec();
                    }
                }

                setState(1370);
                match(KW_REBUILD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixFileFormatContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_FILEFORMAT() {
            return getToken(HiveParser.KW_FILEFORMAT, 0);
        }

        public FileFormatContext fileFormat() {
            return getRuleContext(FileFormatContext.class, 0);
        }

        public AlterStatementSuffixFileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixFileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat()
            throws RecognitionException {
        AlterStatementSuffixFileFormatContext _localctx =
                new AlterStatementSuffixFileFormatContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_alterStatementSuffixFileFormat);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1372);
                match(KW_SET);
                setState(1373);
                match(KW_FILEFORMAT);
                setState(1374);
                fileFormat();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixClusterbySortbyContext extends ParserRuleContext {
        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_CLUSTERED() {
            return getToken(HiveParser.KW_CLUSTERED, 0);
        }

        public TerminalNode KW_SORTED() {
            return getToken(HiveParser.KW_SORTED, 0);
        }

        public TableBucketsContext tableBuckets() {
            return getRuleContext(TableBucketsContext.class, 0);
        }

        public AlterStatementSuffixClusterbySortbyContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixClusterbySortby;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixClusterbySortby(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixClusterbySortby(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixClusterbySortby(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby()
            throws RecognitionException {
        AlterStatementSuffixClusterbySortbyContext _localctx =
                new AlterStatementSuffixClusterbySortbyContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_alterStatementSuffixClusterbySortby);
        try {
            setState(1381);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 94, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1376);
                        match(KW_NOT);
                        setState(1377);
                        match(KW_CLUSTERED);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1378);
                        match(KW_NOT);
                        setState(1379);
                        match(KW_SORTED);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1380);
                        tableBuckets();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterTblPartitionStatementSuffixSkewedLocationContext
            extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_SKEWED() {
            return getToken(HiveParser.KW_SKEWED, 0);
        }

        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public SkewedLocationsContext skewedLocations() {
            return getRuleContext(SkewedLocationsContext.class, 0);
        }

        public AlterTblPartitionStatementSuffixSkewedLocationContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterTblPartitionStatementSuffixSkewedLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener)
                        .enterAlterTblPartitionStatementSuffixSkewedLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener)
                        .exitAlterTblPartitionStatementSuffixSkewedLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterTblPartitionStatementSuffixSkewedLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterTblPartitionStatementSuffixSkewedLocationContext
            alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
        AlterTblPartitionStatementSuffixSkewedLocationContext _localctx =
                new AlterTblPartitionStatementSuffixSkewedLocationContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_alterTblPartitionStatementSuffixSkewedLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1383);
                match(KW_SET);
                setState(1384);
                match(KW_SKEWED);
                setState(1385);
                match(KW_LOCATION);
                setState(1386);
                skewedLocations();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedLocationsContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public SkewedLocationsListContext skewedLocationsList() {
            return getRuleContext(SkewedLocationsListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public SkewedLocationsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedLocations;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedLocations(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedLocations(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedLocations(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedLocationsContext skewedLocations() throws RecognitionException {
        SkewedLocationsContext _localctx = new SkewedLocationsContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_skewedLocations);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1388);
                match(LPAREN);
                setState(1389);
                skewedLocationsList();
                setState(1390);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedLocationsListContext extends ParserRuleContext {
        public List<SkewedLocationMapContext> skewedLocationMap() {
            return getRuleContexts(SkewedLocationMapContext.class);
        }

        public SkewedLocationMapContext skewedLocationMap(int i) {
            return getRuleContext(SkewedLocationMapContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SkewedLocationsListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedLocationsList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedLocationsList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedLocationsList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedLocationsList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedLocationsListContext skewedLocationsList() throws RecognitionException {
        SkewedLocationsListContext _localctx = new SkewedLocationsListContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_skewedLocationsList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1392);
                skewedLocationMap();
                setState(1397);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1393);
                            match(COMMA);
                            setState(1394);
                            skewedLocationMap();
                        }
                    }
                    setState(1399);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedLocationMapContext extends ParserRuleContext {
        public SkewedValueLocationElementContext skewedValueLocationElement() {
            return getRuleContext(SkewedValueLocationElementContext.class, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public SkewedLocationMapContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedLocationMap;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedLocationMap(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedLocationMap(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedLocationMap(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedLocationMapContext skewedLocationMap() throws RecognitionException {
        SkewedLocationMapContext _localctx = new SkewedLocationMapContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_skewedLocationMap);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1400);
                skewedValueLocationElement();
                setState(1401);
                match(EQUAL);
                setState(1402);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixLocationContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public AlterStatementSuffixLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixLocationContext alterStatementSuffixLocation()
            throws RecognitionException {
        AlterStatementSuffixLocationContext _localctx =
                new AlterStatementSuffixLocationContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_alterStatementSuffixLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1404);
                match(KW_SET);
                setState(1405);
                match(KW_LOCATION);
                setState(1406);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixSkewedbyContext extends ParserRuleContext {
        public TableSkewedContext tableSkewed() {
            return getRuleContext(TableSkewedContext.class, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_SKEWED() {
            return getToken(HiveParser.KW_SKEWED, 0);
        }

        public StoredAsDirsContext storedAsDirs() {
            return getRuleContext(StoredAsDirsContext.class, 0);
        }

        public AlterStatementSuffixSkewedbyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixSkewedby;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixSkewedby(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixSkewedby(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixSkewedby(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby()
            throws RecognitionException {
        AlterStatementSuffixSkewedbyContext _localctx =
                new AlterStatementSuffixSkewedbyContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_alterStatementSuffixSkewedby);
        try {
            setState(1413);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 96, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1408);
                        tableSkewed();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1409);
                        match(KW_NOT);
                        setState(1410);
                        match(KW_SKEWED);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1411);
                        match(KW_NOT);
                        setState(1412);
                        storedAsDirs();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixExchangePartitionContext extends ParserRuleContext {
        public TerminalNode KW_EXCHANGE() {
            return getToken(HiveParser.KW_EXCHANGE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public AlterStatementSuffixExchangePartitionContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixExchangePartition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixExchangePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixExchangePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixExchangePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixExchangePartitionContext
            alterStatementSuffixExchangePartition() throws RecognitionException {
        AlterStatementSuffixExchangePartitionContext _localctx =
                new AlterStatementSuffixExchangePartitionContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_alterStatementSuffixExchangePartition);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1415);
                match(KW_EXCHANGE);
                setState(1416);
                partitionSpec();
                setState(1417);
                match(KW_WITH);
                setState(1418);
                match(KW_TABLE);
                setState(1419);
                tableName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixRenamePartContext extends ParserRuleContext {
        public TerminalNode KW_RENAME() {
            return getToken(HiveParser.KW_RENAME, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public AlterStatementSuffixRenamePartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixRenamePart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixRenamePart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixRenamePart(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixRenamePart(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart()
            throws RecognitionException {
        AlterStatementSuffixRenamePartContext _localctx =
                new AlterStatementSuffixRenamePartContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_alterStatementSuffixRenamePart);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1421);
                match(KW_RENAME);
                setState(1422);
                match(KW_TO);
                setState(1423);
                partitionSpec();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixStatsPartContext extends ParserRuleContext {
        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public TerminalNode KW_STATISTICS() {
            return getToken(HiveParser.KW_STATISTICS, 0);
        }

        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TerminalNode KW_COLUMN() {
            return getToken(HiveParser.KW_COLUMN, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public AlterStatementSuffixStatsPartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixStatsPart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixStatsPart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixStatsPart(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixStatsPart(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixStatsPartContext alterStatementSuffixStatsPart()
            throws RecognitionException {
        AlterStatementSuffixStatsPartContext _localctx =
                new AlterStatementSuffixStatsPartContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_alterStatementSuffixStatsPart);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1425);
                match(KW_UPDATE);
                setState(1426);
                match(KW_STATISTICS);
                setState(1427);
                match(KW_FOR);
                setState(1429);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COLUMN) {
                    {
                        setState(1428);
                        match(KW_COLUMN);
                    }
                }

                setState(1431);
                identifier();
                setState(1432);
                match(KW_SET);
                setState(1433);
                tableProperties();
                setState(1436);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(1434);
                        match(KW_COMMENT);
                        setState(1435);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixMergeFilesContext extends ParserRuleContext {
        public TerminalNode KW_CONCATENATE() {
            return getToken(HiveParser.KW_CONCATENATE, 0);
        }

        public AlterStatementSuffixMergeFilesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixMergeFiles;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixMergeFiles(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixMergeFiles(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixMergeFiles(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles()
            throws RecognitionException {
        AlterStatementSuffixMergeFilesContext _localctx =
                new AlterStatementSuffixMergeFilesContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_alterStatementSuffixMergeFiles);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1438);
                match(KW_CONCATENATE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixBucketNumContext extends ParserRuleContext {
        public TerminalNode KW_INTO() {
            return getToken(HiveParser.KW_INTO, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public TerminalNode KW_BUCKETS() {
            return getToken(HiveParser.KW_BUCKETS, 0);
        }

        public AlterStatementSuffixBucketNumContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixBucketNum;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixBucketNum(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixBucketNum(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixBucketNum(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum()
            throws RecognitionException {
        AlterStatementSuffixBucketNumContext _localctx =
                new AlterStatementSuffixBucketNumContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_alterStatementSuffixBucketNum);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1440);
                match(KW_INTO);
                setState(1441);
                match(Number);
                setState(1442);
                match(KW_BUCKETS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateIndexStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_INDEX() {
            return getToken(HiveParser.KW_INDEX, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public List<TerminalNode> KW_TABLE() {
            return getTokens(HiveParser.KW_TABLE);
        }

        public TerminalNode KW_TABLE(int i) {
            return getToken(HiveParser.KW_TABLE, i);
        }

        public List<TableNameContext> tableName() {
            return getRuleContexts(TableNameContext.class);
        }

        public TableNameContext tableName(int i) {
            return getRuleContext(TableNameContext.class, i);
        }

        public List<ColumnParenthesesListContext> columnParenthesesList() {
            return getRuleContexts(ColumnParenthesesListContext.class);
        }

        public ColumnParenthesesListContext columnParenthesesList(int i) {
            return getRuleContext(ColumnParenthesesListContext.class, i);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_DEFERRED() {
            return getToken(HiveParser.KW_DEFERRED, 0);
        }

        public TerminalNode KW_REBUILD() {
            return getToken(HiveParser.KW_REBUILD, 0);
        }

        public TerminalNode KW_IDXPROPERTIES() {
            return getToken(HiveParser.KW_IDXPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TerminalNode KW_IN() {
            return getToken(HiveParser.KW_IN, 0);
        }

        public TerminalNode KW_PARTITIONED() {
            return getToken(HiveParser.KW_PARTITIONED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TableFileFormatContext tableFileFormat() {
            return getRuleContext(TableFileFormatContext.class, 0);
        }

        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public LocationPathContext locationPath() {
            return getRuleContext(LocationPathContext.class, 0);
        }

        public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
            return getRuleContext(TablePropertiesPrefixedContext.class, 0);
        }

        public TableCommentContext tableComment() {
            return getRuleContext(TableCommentContext.class, 0);
        }

        public TableRowFormatContext tableRowFormat() {
            return getRuleContext(TableRowFormatContext.class, 0);
        }

        public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createIndexStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateIndexStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateIndexStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateIndexStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
        CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_createIndexStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1444);
                match(KW_CREATE);
                setState(1445);
                match(KW_INDEX);
                setState(1446);
                identifier();
                setState(1447);
                match(KW_ON);
                setState(1448);
                match(KW_TABLE);
                setState(1449);
                tableName();
                setState(1450);
                columnParenthesesList();
                setState(1451);
                match(KW_AS);
                setState(1452);
                match(StringLiteral);
                setState(1456);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 99, _ctx)) {
                    case 1:
                        {
                            setState(1453);
                            match(KW_WITH);
                            setState(1454);
                            match(KW_DEFERRED);
                            setState(1455);
                            match(KW_REBUILD);
                        }
                        break;
                }
                setState(1460);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IDXPROPERTIES) {
                    {
                        setState(1458);
                        match(KW_IDXPROPERTIES);
                        setState(1459);
                        tableProperties();
                    }
                }

                setState(1465);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IN) {
                    {
                        setState(1462);
                        match(KW_IN);
                        setState(1463);
                        match(KW_TABLE);
                        setState(1464);
                        tableName();
                    }
                }

                setState(1470);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITIONED) {
                    {
                        setState(1467);
                        match(KW_PARTITIONED);
                        setState(1468);
                        match(KW_BY);
                        setState(1469);
                        columnParenthesesList();
                    }
                }

                setState(1476);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW || _la == KW_STORED) {
                    {
                        setState(1473);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_ROW) {
                            {
                                setState(1472);
                                tableRowFormat();
                            }
                        }

                        setState(1475);
                        tableFileFormat();
                    }
                }

                setState(1480);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCATION) {
                    {
                        setState(1478);
                        match(KW_LOCATION);
                        setState(1479);
                        locationPath();
                    }
                }

                setState(1483);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TBLPROPERTIES) {
                    {
                        setState(1482);
                        tablePropertiesPrefixed();
                    }
                }

                setState(1486);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(1485);
                        tableComment();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LocationPathContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(HiveParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(HiveParser.DOT, i);
        }

        public LocationPathContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_locationPath;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLocationPath(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLocationPath(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLocationPath(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LocationPathContext locationPath() throws RecognitionException {
        LocationPathContext _localctx = new LocationPathContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_locationPath);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1488);
                identifier();
                setState(1493);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == DOT) {
                    {
                        {
                            setState(1489);
                            match(DOT);
                            setState(1490);
                            identifier();
                        }
                    }
                    setState(1495);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropIndexStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_INDEX() {
            return getToken(HiveParser.KW_INDEX, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public DropIndexStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropIndexStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropIndexStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropIndexStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropIndexStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropIndexStatementContext dropIndexStatement() throws RecognitionException {
        DropIndexStatementContext _localctx = new DropIndexStatementContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_dropIndexStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1496);
                match(KW_DROP);
                setState(1497);
                match(KW_INDEX);
                setState(1498);
                identifier();
                setState(1499);
                match(KW_ON);
                setState(1500);
                tableName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TablePartitionPrefixContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TablePartitionPrefixContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tablePartitionPrefix;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTablePartitionPrefix(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTablePartitionPrefix(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTablePartitionPrefix(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TablePartitionPrefixContext tablePartitionPrefix() throws RecognitionException {
        TablePartitionPrefixContext _localctx = new TablePartitionPrefixContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_tablePartitionPrefix);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1502);
                tableName();
                setState(1504);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1503);
                        partitionSpec();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BlockingContext extends ParserRuleContext {
        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public TerminalNode KW_WAIT() {
            return getToken(HiveParser.KW_WAIT, 0);
        }

        public BlockingContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_blocking;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterBlocking(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitBlocking(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitBlocking(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BlockingContext blocking() throws RecognitionException {
        BlockingContext _localctx = new BlockingContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_blocking);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1506);
                match(KW_AND);
                setState(1507);
                match(KW_WAIT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixCompactContext extends ParserRuleContext {
        public TerminalNode KW_COMPACT() {
            return getToken(HiveParser.KW_COMPACT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public BlockingContext blocking() {
            return getRuleContext(BlockingContext.class, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_OVERWRITE() {
            return getToken(HiveParser.KW_OVERWRITE, 0);
        }

        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public AlterStatementSuffixCompactContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixCompact;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixCompact(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixCompact(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixCompact(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixCompactContext alterStatementSuffixCompact()
            throws RecognitionException {
        AlterStatementSuffixCompactContext _localctx =
                new AlterStatementSuffixCompactContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_alterStatementSuffixCompact);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1509);
                match(KW_COMPACT);
                setState(1510);
                match(StringLiteral);
                setState(1512);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AND) {
                    {
                        setState(1511);
                        blocking();
                    }
                }

                setState(1518);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 111, _ctx)) {
                    case 1:
                        {
                            setState(1514);
                            match(KW_WITH);
                            setState(1515);
                            match(KW_OVERWRITE);
                            setState(1516);
                            match(KW_TBLPROPERTIES);
                            setState(1517);
                            tableProperties();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterStatementSuffixSetOwnerContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_OWNER() {
            return getToken(HiveParser.KW_OWNER, 0);
        }

        public PrincipalNameContext principalName() {
            return getRuleContext(PrincipalNameContext.class, 0);
        }

        public AlterStatementSuffixSetOwnerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterStatementSuffixSetOwner;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterStatementSuffixSetOwner(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterStatementSuffixSetOwner(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterStatementSuffixSetOwner(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner()
            throws RecognitionException {
        AlterStatementSuffixSetOwnerContext _localctx =
                new AlterStatementSuffixSetOwnerContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_alterStatementSuffixSetOwner);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1520);
                match(KW_SET);
                setState(1521);
                match(KW_OWNER);
                setState(1522);
                principalName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FileFormatContext extends ParserRuleContext {
        public TerminalNode KW_INPUTFORMAT() {
            return getToken(HiveParser.KW_INPUTFORMAT, 0);
        }

        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public TerminalNode KW_OUTPUTFORMAT() {
            return getToken(HiveParser.KW_OUTPUTFORMAT, 0);
        }

        public TerminalNode KW_SERDE() {
            return getToken(HiveParser.KW_SERDE, 0);
        }

        public TerminalNode KW_INPUTDRIVER() {
            return getToken(HiveParser.KW_INPUTDRIVER, 0);
        }

        public TerminalNode KW_OUTPUTDRIVER() {
            return getToken(HiveParser.KW_OUTPUTDRIVER, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public FileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FileFormatContext fileFormat() throws RecognitionException {
        FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_fileFormat);
        int _la;
        try {
            setState(1537);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 113, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1524);
                        match(KW_INPUTFORMAT);
                        setState(1525);
                        match(StringLiteral);
                        setState(1526);
                        match(KW_OUTPUTFORMAT);
                        setState(1527);
                        match(StringLiteral);
                        setState(1528);
                        match(KW_SERDE);
                        setState(1529);
                        match(StringLiteral);
                        setState(1534);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_INPUTDRIVER) {
                            {
                                setState(1530);
                                match(KW_INPUTDRIVER);
                                setState(1531);
                                match(StringLiteral);
                                setState(1532);
                                match(KW_OUTPUTDRIVER);
                                setState(1533);
                                match(StringLiteral);
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1536);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InputFileFormatContext extends ParserRuleContext {
        public TerminalNode KW_INPUTFORMAT() {
            return getToken(HiveParser.KW_INPUTFORMAT, 0);
        }

        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public TerminalNode KW_SERDE() {
            return getToken(HiveParser.KW_SERDE, 0);
        }

        public InputFileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_inputFileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterInputFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitInputFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitInputFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final InputFileFormatContext inputFileFormat() throws RecognitionException {
        InputFileFormatContext _localctx = new InputFileFormatContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_inputFileFormat);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1539);
                match(KW_INPUTFORMAT);
                setState(1540);
                match(StringLiteral);
                setState(1541);
                match(KW_SERDE);
                setState(1542);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TabTypeExprContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(HiveParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(HiveParser.DOT, i);
        }

        public List<TerminalNode> KW_ELEM_TYPE() {
            return getTokens(HiveParser.KW_ELEM_TYPE);
        }

        public TerminalNode KW_ELEM_TYPE(int i) {
            return getToken(HiveParser.KW_ELEM_TYPE, i);
        }

        public List<TerminalNode> KW_KEY_TYPE() {
            return getTokens(HiveParser.KW_KEY_TYPE);
        }

        public TerminalNode KW_KEY_TYPE(int i) {
            return getToken(HiveParser.KW_KEY_TYPE, i);
        }

        public List<TerminalNode> KW_VALUE_TYPE() {
            return getTokens(HiveParser.KW_VALUE_TYPE);
        }

        public TerminalNode KW_VALUE_TYPE(int i) {
            return getToken(HiveParser.KW_VALUE_TYPE, i);
        }

        public TabTypeExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tabTypeExpr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTabTypeExpr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTabTypeExpr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTabTypeExpr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TabTypeExprContext tabTypeExpr() throws RecognitionException {
        TabTypeExprContext _localctx = new TabTypeExprContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_tabTypeExpr);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1544);
                identifier();
                setState(1547);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DOT) {
                    {
                        setState(1545);
                        match(DOT);
                        setState(1546);
                        identifier();
                    }
                }

                setState(1562);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 117, _ctx)) {
                    case 1:
                        {
                            setState(1549);
                            identifier();
                            setState(1559);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == DOT) {
                                {
                                    {
                                        setState(1550);
                                        match(DOT);
                                        setState(1555);
                                        _errHandler.sync(this);
                                        switch (getInterpreter()
                                                .adaptivePredict(_input, 115, _ctx)) {
                                            case 1:
                                                {
                                                    setState(1551);
                                                    match(KW_ELEM_TYPE);
                                                }
                                                break;
                                            case 2:
                                                {
                                                    setState(1552);
                                                    match(KW_KEY_TYPE);
                                                }
                                                break;
                                            case 3:
                                                {
                                                    setState(1553);
                                                    match(KW_VALUE_TYPE);
                                                }
                                                break;
                                            case 4:
                                                {
                                                    setState(1554);
                                                    identifier();
                                                }
                                                break;
                                        }
                                    }
                                }
                                setState(1561);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartTypeExprContext extends ParserRuleContext {
        public TabTypeExprContext tabTypeExpr() {
            return getRuleContext(TabTypeExprContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public PartTypeExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partTypeExpr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartTypeExpr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartTypeExpr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartTypeExpr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartTypeExprContext partTypeExpr() throws RecognitionException {
        PartTypeExprContext _localctx = new PartTypeExprContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_partTypeExpr);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1564);
                tabTypeExpr();
                setState(1566);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1565);
                        partitionSpec();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TabPartColTypeExprContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public ExtColumnNameContext extColumnName() {
            return getRuleContext(ExtColumnNameContext.class, 0);
        }

        public TabPartColTypeExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tabPartColTypeExpr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTabPartColTypeExpr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTabPartColTypeExpr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTabPartColTypeExpr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TabPartColTypeExprContext tabPartColTypeExpr() throws RecognitionException {
        TabPartColTypeExprContext _localctx = new TabPartColTypeExprContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_tabPartColTypeExpr);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1568);
                tableName();
                setState(1570);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1569);
                        partitionSpec();
                    }
                }

                setState(1573);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                    case 1:
                        {
                            setState(1572);
                            extColumnName();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescStatementContext extends ParserRuleContext {
        public TerminalNode KW_DESCRIBE() {
            return getToken(HiveParser.KW_DESCRIBE, 0);
        }

        public TerminalNode KW_DESC() {
            return getToken(HiveParser.KW_DESC, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_FUNCTION() {
            return getToken(HiveParser.KW_FUNCTION, 0);
        }

        public DescFuncNamesContext descFuncNames() {
            return getRuleContext(DescFuncNamesContext.class, 0);
        }

        public TabPartColTypeExprContext tabPartColTypeExpr() {
            return getRuleContext(TabPartColTypeExprContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TerminalNode KW_EXTENDED() {
            return getToken(HiveParser.KW_EXTENDED, 0);
        }

        public TerminalNode KW_FORMATTED() {
            return getToken(HiveParser.KW_FORMATTED, 0);
        }

        public DescStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_descStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDescStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDescStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDescStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DescStatementContext descStatement() throws RecognitionException {
        DescStatementContext _localctx = new DescStatementContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_descStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1575);
                _la = _input.LA(1);
                if (!(_la == KW_DESC || _la == KW_DESCRIBE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1589);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 123, _ctx)) {
                    case 1:
                        {
                            setState(1576);
                            _la = _input.LA(1);
                            if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(1578);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_EXTENDED) {
                                {
                                    setState(1577);
                                    match(KW_EXTENDED);
                                }
                            }

                            setState(1580);
                            identifier();
                        }
                        break;
                    case 2:
                        {
                            setState(1581);
                            match(KW_FUNCTION);
                            setState(1583);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_EXTENDED) {
                                {
                                    setState(1582);
                                    match(KW_EXTENDED);
                                }
                            }

                            setState(1585);
                            descFuncNames();
                        }
                        break;
                    case 3:
                        {
                            {
                                setState(1586);
                                _la = _input.LA(1);
                                if (!(_la == KW_EXTENDED || _la == KW_FORMATTED)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(1587);
                                tabPartColTypeExpr();
                            }
                        }
                        break;
                    case 4:
                        {
                            setState(1588);
                            tabPartColTypeExpr();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AnalyzeStatementContext extends ParserRuleContext {
        public TerminalNode KW_ANALYZE() {
            return getToken(HiveParser.KW_ANALYZE, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public TerminalNode KW_COMPUTE() {
            return getToken(HiveParser.KW_COMPUTE, 0);
        }

        public TerminalNode KW_STATISTICS() {
            return getToken(HiveParser.KW_STATISTICS, 0);
        }

        public TerminalNode KW_CACHE() {
            return getToken(HiveParser.KW_CACHE, 0);
        }

        public TerminalNode KW_METADATA() {
            return getToken(HiveParser.KW_METADATA, 0);
        }

        public TerminalNode KW_NOSCAN() {
            return getToken(HiveParser.KW_NOSCAN, 0);
        }

        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public TerminalNode KW_COLUMNS() {
            return getToken(HiveParser.KW_COLUMNS, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public AnalyzeStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_analyzeStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAnalyzeStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAnalyzeStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAnalyzeStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AnalyzeStatementContext analyzeStatement() throws RecognitionException {
        AnalyzeStatementContext _localctx = new AnalyzeStatementContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_analyzeStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1591);
                match(KW_ANALYZE);
                setState(1592);
                match(KW_TABLE);
                {
                    setState(1593);
                    tableOrPartition();
                }
                setState(1606);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_COMPUTE:
                        {
                            setState(1594);
                            match(KW_COMPUTE);
                            setState(1595);
                            match(KW_STATISTICS);
                            setState(1602);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case KW_NOSCAN:
                                    {
                                        setState(1596);
                                        match(KW_NOSCAN);
                                    }
                                    break;
                                case KW_FOR:
                                    {
                                        {
                                            setState(1597);
                                            match(KW_FOR);
                                            setState(1598);
                                            match(KW_COLUMNS);
                                            setState(1600);
                                            _errHandler.sync(this);
                                            switch (getInterpreter()
                                                    .adaptivePredict(_input, 124, _ctx)) {
                                                case 1:
                                                    {
                                                        setState(1599);
                                                        columnNameList();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    break;
                                case EOF:
                                case KW_DESC:
                                case KW_FROM:
                                case KW_SELECT:
                                case KW_INSERT:
                                case KW_SHOW:
                                case KW_MSCK:
                                case KW_LOAD:
                                case KW_EXPORT:
                                case KW_IMPORT:
                                case KW_CREATE:
                                case KW_ALTER:
                                case KW_DESCRIBE:
                                case KW_DROP:
                                case KW_MAP:
                                case KW_REDUCE:
                                case KW_KILL:
                                case KW_EXPLAIN:
                                case KW_WITH:
                                case KW_SET:
                                case KW_DELETE:
                                case KW_GRANT:
                                case KW_REVOKE:
                                case KW_LOCK:
                                case KW_UNLOCK:
                                case KW_ANALYZE:
                                case KW_USE:
                                case KW_UPDATE:
                                case KW_TRUNCATE:
                                case KW_RELOAD:
                                case KW_START:
                                case KW_COMMIT:
                                case KW_ROLLBACK:
                                case KW_ABORT:
                                case KW_MERGE:
                                case KW_REPL:
                                case SEMICOLON:
                                case LPAREN:
                                    break;
                                default:
                                    break;
                            }
                        }
                        break;
                    case KW_CACHE:
                        {
                            setState(1604);
                            match(KW_CACHE);
                            setState(1605);
                            match(KW_METADATA);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowStatementContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_DATABASES() {
            return getToken(HiveParser.KW_DATABASES, 0);
        }

        public TerminalNode KW_SCHEMAS() {
            return getToken(HiveParser.KW_SCHEMAS, 0);
        }

        public TerminalNode KW_LIKE() {
            return getToken(HiveParser.KW_LIKE, 0);
        }

        public ShowStmtIdentifierContext showStmtIdentifier() {
            return getRuleContext(ShowStmtIdentifierContext.class, 0);
        }

        public TerminalNode KW_TABLES() {
            return getToken(HiveParser.KW_TABLES, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public List<TerminalNode> KW_FROM() {
            return getTokens(HiveParser.KW_FROM);
        }

        public TerminalNode KW_FROM(int i) {
            return getToken(HiveParser.KW_FROM, i);
        }

        public List<TerminalNode> KW_IN() {
            return getTokens(HiveParser.KW_IN);
        }

        public TerminalNode KW_IN(int i) {
            return getToken(HiveParser.KW_IN, i);
        }

        public TerminalNode KW_VIEWS() {
            return getToken(HiveParser.KW_VIEWS, 0);
        }

        public TerminalNode KW_MATERIALIZED() {
            return getToken(HiveParser.KW_MATERIALIZED, 0);
        }

        public TerminalNode KW_COLUMNS() {
            return getToken(HiveParser.KW_COLUMNS, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_FUNCTIONS() {
            return getToken(HiveParser.KW_FUNCTIONS, 0);
        }

        public ShowFunctionIdentifierContext showFunctionIdentifier() {
            return getRuleContext(ShowFunctionIdentifierContext.class, 0);
        }

        public TerminalNode KW_PARTITIONS() {
            return getToken(HiveParser.KW_PARTITIONS, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TerminalNode KW_EXTENDED() {
            return getToken(HiveParser.KW_EXTENDED, 0);
        }

        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_LOCKS() {
            return getToken(HiveParser.KW_LOCKS, 0);
        }

        public PartTypeExprContext partTypeExpr() {
            return getRuleContext(PartTypeExprContext.class, 0);
        }

        public TerminalNode KW_COMPACTIONS() {
            return getToken(HiveParser.KW_COMPACTIONS, 0);
        }

        public TerminalNode KW_TRANSACTIONS() {
            return getToken(HiveParser.KW_TRANSACTIONS, 0);
        }

        public TerminalNode KW_CONF() {
            return getToken(HiveParser.KW_CONF, 0);
        }

        public TerminalNode KW_RESOURCE() {
            return getToken(HiveParser.KW_RESOURCE, 0);
        }

        public TerminalNode KW_PLANS() {
            return getToken(HiveParser.KW_PLANS, 0);
        }

        public TerminalNode KW_PLAN() {
            return getToken(HiveParser.KW_PLAN, 0);
        }

        public ShowStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowStatementContext showStatement() throws RecognitionException {
        ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_showStatement);
        int _la;
        try {
            setState(1731);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 147, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1608);
                        match(KW_SHOW);
                        setState(1609);
                        _la = _input.LA(1);
                        if (!(_la == KW_DATABASES || _la == KW_SCHEMAS)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1612);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LIKE) {
                            {
                                setState(1610);
                                match(KW_LIKE);
                                setState(1611);
                                showStmtIdentifier();
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1614);
                        match(KW_SHOW);
                        setState(1615);
                        match(KW_TABLES);
                        setState(1618);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 128, _ctx)) {
                            case 1:
                                {
                                    setState(1616);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_FROM || _la == KW_IN)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1617);
                                    identifier();
                                }
                                break;
                        }
                        setState(1623);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 129, _ctx)) {
                            case 1:
                                {
                                    setState(1620);
                                    match(KW_LIKE);
                                    setState(1621);
                                    showStmtIdentifier();
                                }
                                break;
                            case 2:
                                {
                                    setState(1622);
                                    showStmtIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1625);
                        match(KW_SHOW);
                        setState(1626);
                        match(KW_VIEWS);
                        setState(1629);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 130, _ctx)) {
                            case 1:
                                {
                                    setState(1627);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_FROM || _la == KW_IN)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1628);
                                    identifier();
                                }
                                break;
                        }
                        setState(1634);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 131, _ctx)) {
                            case 1:
                                {
                                    setState(1631);
                                    match(KW_LIKE);
                                    setState(1632);
                                    showStmtIdentifier();
                                }
                                break;
                            case 2:
                                {
                                    setState(1633);
                                    showStmtIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1636);
                        match(KW_SHOW);
                        setState(1637);
                        match(KW_MATERIALIZED);
                        setState(1638);
                        match(KW_VIEWS);
                        setState(1641);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 132, _ctx)) {
                            case 1:
                                {
                                    setState(1639);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_FROM || _la == KW_IN)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1640);
                                    identifier();
                                }
                                break;
                        }
                        setState(1646);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 133, _ctx)) {
                            case 1:
                                {
                                    setState(1643);
                                    match(KW_LIKE);
                                    setState(1644);
                                    showStmtIdentifier();
                                }
                                break;
                            case 2:
                                {
                                    setState(1645);
                                    showStmtIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1648);
                        match(KW_SHOW);
                        setState(1649);
                        match(KW_COLUMNS);
                        setState(1650);
                        _la = _input.LA(1);
                        if (!(_la == KW_FROM || _la == KW_IN)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1651);
                        tableName();
                        setState(1654);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 134, _ctx)) {
                            case 1:
                                {
                                    setState(1652);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_FROM || _la == KW_IN)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1653);
                                    identifier();
                                }
                                break;
                        }
                        setState(1659);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 135, _ctx)) {
                            case 1:
                                {
                                    setState(1656);
                                    match(KW_LIKE);
                                    setState(1657);
                                    showStmtIdentifier();
                                }
                                break;
                            case 2:
                                {
                                    setState(1658);
                                    showStmtIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1661);
                        match(KW_SHOW);
                        setState(1662);
                        match(KW_FUNCTIONS);
                        setState(1666);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 136, _ctx)) {
                            case 1:
                                {
                                    setState(1663);
                                    match(KW_LIKE);
                                    setState(1664);
                                    showFunctionIdentifier();
                                }
                                break;
                            case 2:
                                {
                                    setState(1665);
                                    showFunctionIdentifier();
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1668);
                        match(KW_SHOW);
                        setState(1669);
                        match(KW_PARTITIONS);
                        setState(1670);
                        tableName();
                        setState(1672);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PARTITION) {
                            {
                                setState(1671);
                                partitionSpec();
                            }
                        }
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1674);
                        match(KW_SHOW);
                        setState(1675);
                        match(KW_CREATE);
                        setState(1680);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case KW_DATABASE:
                            case KW_SCHEMA:
                                {
                                    setState(1676);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1677);
                                    identifier();
                                }
                                break;
                            case KW_TABLE:
                                {
                                    setState(1678);
                                    match(KW_TABLE);
                                    setState(1679);
                                    tableName();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(1682);
                        match(KW_SHOW);
                        setState(1683);
                        match(KW_TABLE);
                        setState(1684);
                        match(KW_EXTENDED);
                        setState(1687);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_FROM || _la == KW_IN) {
                            {
                                setState(1685);
                                _la = _input.LA(1);
                                if (!(_la == KW_FROM || _la == KW_IN)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(1686);
                                identifier();
                            }
                        }

                        setState(1689);
                        match(KW_LIKE);
                        setState(1690);
                        showStmtIdentifier();
                        setState(1692);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PARTITION) {
                            {
                                setState(1691);
                                partitionSpec();
                            }
                        }
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(1694);
                        match(KW_SHOW);
                        setState(1695);
                        match(KW_TBLPROPERTIES);
                        setState(1696);
                        tableName();
                        setState(1700);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 141, _ctx)) {
                            case 1:
                                {
                                    setState(1697);
                                    match(LPAREN);
                                    setState(1698);
                                    match(StringLiteral);
                                    setState(1699);
                                    match(RPAREN);
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(1702);
                        match(KW_SHOW);
                        setState(1703);
                        match(KW_LOCKS);
                        setState(1715);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 145, _ctx)) {
                            case 1:
                                {
                                    setState(1704);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1705);
                                    identifier();
                                    setState(1707);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == KW_EXTENDED) {
                                        {
                                            setState(1706);
                                            match(KW_EXTENDED);
                                        }
                                    }
                                }
                                break;
                            case 2:
                                {
                                    setState(1710);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 143, _ctx)) {
                                        case 1:
                                            {
                                                setState(1709);
                                                partTypeExpr();
                                            }
                                            break;
                                    }
                                    setState(1713);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == KW_EXTENDED) {
                                        {
                                            setState(1712);
                                            match(KW_EXTENDED);
                                        }
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(1717);
                        match(KW_SHOW);
                        setState(1718);
                        match(KW_COMPACTIONS);
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(1719);
                        match(KW_SHOW);
                        setState(1720);
                        match(KW_TRANSACTIONS);
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(1721);
                        match(KW_SHOW);
                        setState(1722);
                        match(KW_CONF);
                        setState(1723);
                        match(StringLiteral);
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(1724);
                        match(KW_SHOW);
                        setState(1725);
                        match(KW_RESOURCE);
                        setState(1729);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case KW_PLAN:
                                {
                                    {
                                        setState(1726);
                                        match(KW_PLAN);
                                        setState(1727);
                                        identifier();
                                    }
                                }
                                break;
                            case KW_PLANS:
                                {
                                    setState(1728);
                                    match(KW_PLANS);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LockStatementContext extends ParserRuleContext {
        public TerminalNode KW_LOCK() {
            return getToken(HiveParser.KW_LOCK, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public LockModeContext lockMode() {
            return getRuleContext(LockModeContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public LockStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lockStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLockStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLockStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLockStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LockStatementContext lockStatement() throws RecognitionException {
        LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_lockStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1733);
                match(KW_LOCK);
                setState(1734);
                match(KW_TABLE);
                setState(1735);
                tableName();
                setState(1737);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1736);
                        partitionSpec();
                    }
                }

                setState(1739);
                lockMode();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LockDatabaseContext extends ParserRuleContext {
        public TerminalNode KW_LOCK() {
            return getToken(HiveParser.KW_LOCK, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public LockModeContext lockMode() {
            return getRuleContext(LockModeContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public LockDatabaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lockDatabase;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLockDatabase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLockDatabase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLockDatabase(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LockDatabaseContext lockDatabase() throws RecognitionException {
        LockDatabaseContext _localctx = new LockDatabaseContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_lockDatabase);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1741);
                match(KW_LOCK);
                setState(1742);
                _la = _input.LA(1);
                if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1743);
                identifier();
                setState(1744);
                lockMode();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LockModeContext extends ParserRuleContext {
        public TerminalNode KW_SHARED() {
            return getToken(HiveParser.KW_SHARED, 0);
        }

        public TerminalNode KW_EXCLUSIVE() {
            return getToken(HiveParser.KW_EXCLUSIVE, 0);
        }

        public LockModeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lockMode;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLockMode(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLockMode(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLockMode(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LockModeContext lockMode() throws RecognitionException {
        LockModeContext _localctx = new LockModeContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_lockMode);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1746);
                _la = _input.LA(1);
                if (!(_la == KW_SHARED || _la == KW_EXCLUSIVE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnlockStatementContext extends ParserRuleContext {
        public TerminalNode KW_UNLOCK() {
            return getToken(HiveParser.KW_UNLOCK, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public UnlockStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unlockStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUnlockStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUnlockStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUnlockStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnlockStatementContext unlockStatement() throws RecognitionException {
        UnlockStatementContext _localctx = new UnlockStatementContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_unlockStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1748);
                match(KW_UNLOCK);
                setState(1749);
                match(KW_TABLE);
                setState(1750);
                tableName();
                setState(1752);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(1751);
                        partitionSpec();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnlockDatabaseContext extends ParserRuleContext {
        public TerminalNode KW_UNLOCK() {
            return getToken(HiveParser.KW_UNLOCK, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public UnlockDatabaseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unlockDatabase;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUnlockDatabase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUnlockDatabase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUnlockDatabase(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnlockDatabaseContext unlockDatabase() throws RecognitionException {
        UnlockDatabaseContext _localctx = new UnlockDatabaseContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_unlockDatabase);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1754);
                match(KW_UNLOCK);
                setState(1755);
                _la = _input.LA(1);
                if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1756);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateRoleStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public CreateRoleStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createRoleStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateRoleStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateRoleStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateRoleStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateRoleStatementContext createRoleStatement() throws RecognitionException {
        CreateRoleStatementContext _localctx = new CreateRoleStatementContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_createRoleStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1758);
                match(KW_CREATE);
                setState(1759);
                match(KW_ROLE);
                setState(1760);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropRoleStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public DropRoleStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropRoleStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropRoleStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropRoleStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropRoleStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropRoleStatementContext dropRoleStatement() throws RecognitionException {
        DropRoleStatementContext _localctx = new DropRoleStatementContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_dropRoleStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1762);
                match(KW_DROP);
                setState(1763);
                match(KW_ROLE);
                setState(1764);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GrantPrivilegesContext extends ParserRuleContext {
        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public PrivilegeListContext privilegeList() {
            return getRuleContext(PrivilegeListContext.class, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public PrincipalSpecificationContext principalSpecification() {
            return getRuleContext(PrincipalSpecificationContext.class, 0);
        }

        public PrivilegeObjectContext privilegeObject() {
            return getRuleContext(PrivilegeObjectContext.class, 0);
        }

        public WithGrantOptionContext withGrantOption() {
            return getRuleContext(WithGrantOptionContext.class, 0);
        }

        public GrantPrivilegesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_grantPrivileges;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGrantPrivileges(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGrantPrivileges(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGrantPrivileges(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GrantPrivilegesContext grantPrivileges() throws RecognitionException {
        GrantPrivilegesContext _localctx = new GrantPrivilegesContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_grantPrivileges);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1766);
                match(KW_GRANT);
                setState(1767);
                privilegeList();
                setState(1769);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ON) {
                    {
                        setState(1768);
                        privilegeObject();
                    }
                }

                setState(1771);
                match(KW_TO);
                setState(1772);
                principalSpecification();
                setState(1774);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 151, _ctx)) {
                    case 1:
                        {
                            setState(1773);
                            withGrantOption();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RevokePrivilegesContext extends ParserRuleContext {
        public TerminalNode KW_REVOKE() {
            return getToken(HiveParser.KW_REVOKE, 0);
        }

        public PrivilegeListContext privilegeList() {
            return getRuleContext(PrivilegeListContext.class, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public PrincipalSpecificationContext principalSpecification() {
            return getRuleContext(PrincipalSpecificationContext.class, 0);
        }

        public GrantOptionForContext grantOptionFor() {
            return getRuleContext(GrantOptionForContext.class, 0);
        }

        public PrivilegeObjectContext privilegeObject() {
            return getRuleContext(PrivilegeObjectContext.class, 0);
        }

        public RevokePrivilegesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_revokePrivileges;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRevokePrivileges(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRevokePrivileges(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRevokePrivileges(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RevokePrivilegesContext revokePrivileges() throws RecognitionException {
        RevokePrivilegesContext _localctx = new RevokePrivilegesContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_revokePrivileges);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1776);
                match(KW_REVOKE);
                setState(1778);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_GRANT) {
                    {
                        setState(1777);
                        grantOptionFor();
                    }
                }

                setState(1780);
                privilegeList();
                setState(1782);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ON) {
                    {
                        setState(1781);
                        privilegeObject();
                    }
                }

                setState(1784);
                match(KW_FROM);
                setState(1785);
                principalSpecification();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GrantRoleContext extends ParserRuleContext {
        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public PrincipalSpecificationContext principalSpecification() {
            return getRuleContext(PrincipalSpecificationContext.class, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public WithAdminOptionContext withAdminOption() {
            return getRuleContext(WithAdminOptionContext.class, 0);
        }

        public GrantRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_grantRole;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGrantRole(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGrantRole(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGrantRole(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GrantRoleContext grantRole() throws RecognitionException {
        GrantRoleContext _localctx = new GrantRoleContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_grantRole);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1787);
                match(KW_GRANT);
                setState(1789);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 154, _ctx)) {
                    case 1:
                        {
                            setState(1788);
                            match(KW_ROLE);
                        }
                        break;
                }
                setState(1791);
                identifier();
                setState(1796);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1792);
                            match(COMMA);
                            setState(1793);
                            identifier();
                        }
                    }
                    setState(1798);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1799);
                match(KW_TO);
                setState(1800);
                principalSpecification();
                setState(1802);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 156, _ctx)) {
                    case 1:
                        {
                            setState(1801);
                            withAdminOption();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RevokeRoleContext extends ParserRuleContext {
        public TerminalNode KW_REVOKE() {
            return getToken(HiveParser.KW_REVOKE, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public PrincipalSpecificationContext principalSpecification() {
            return getRuleContext(PrincipalSpecificationContext.class, 0);
        }

        public AdminOptionForContext adminOptionFor() {
            return getRuleContext(AdminOptionForContext.class, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public RevokeRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_revokeRole;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRevokeRole(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRevokeRole(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRevokeRole(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RevokeRoleContext revokeRole() throws RecognitionException {
        RevokeRoleContext _localctx = new RevokeRoleContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_revokeRole);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1804);
                match(KW_REVOKE);
                setState(1806);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 157, _ctx)) {
                    case 1:
                        {
                            setState(1805);
                            adminOptionFor();
                        }
                        break;
                }
                setState(1809);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 158, _ctx)) {
                    case 1:
                        {
                            setState(1808);
                            match(KW_ROLE);
                        }
                        break;
                }
                setState(1811);
                identifier();
                setState(1816);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1812);
                            match(COMMA);
                            setState(1813);
                            identifier();
                        }
                    }
                    setState(1818);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1819);
                match(KW_FROM);
                setState(1820);
                principalSpecification();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowRoleGrantsContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public PrincipalNameContext principalName() {
            return getRuleContext(PrincipalNameContext.class, 0);
        }

        public ShowRoleGrantsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showRoleGrants;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowRoleGrants(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowRoleGrants(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowRoleGrants(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowRoleGrantsContext showRoleGrants() throws RecognitionException {
        ShowRoleGrantsContext _localctx = new ShowRoleGrantsContext(_ctx, getState());
        enterRule(_localctx, 210, RULE_showRoleGrants);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1822);
                match(KW_SHOW);
                setState(1823);
                match(KW_ROLE);
                setState(1824);
                match(KW_GRANT);
                setState(1825);
                principalName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowRolesContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_ROLES() {
            return getToken(HiveParser.KW_ROLES, 0);
        }

        public ShowRolesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showRoles;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowRoles(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowRoles(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowRoles(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowRolesContext showRoles() throws RecognitionException {
        ShowRolesContext _localctx = new ShowRolesContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_showRoles);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1827);
                match(KW_SHOW);
                setState(1828);
                match(KW_ROLES);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowCurrentRoleContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_CURRENT() {
            return getToken(HiveParser.KW_CURRENT, 0);
        }

        public TerminalNode KW_ROLES() {
            return getToken(HiveParser.KW_ROLES, 0);
        }

        public ShowCurrentRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showCurrentRole;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowCurrentRole(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowCurrentRole(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowCurrentRole(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowCurrentRoleContext showCurrentRole() throws RecognitionException {
        ShowCurrentRoleContext _localctx = new ShowCurrentRoleContext(_ctx, getState());
        enterRule(_localctx, 214, RULE_showCurrentRole);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1830);
                match(KW_SHOW);
                setState(1831);
                match(KW_CURRENT);
                setState(1832);
                match(KW_ROLES);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetRoleContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public TerminalNode KW_NONE() {
            return getToken(HiveParser.KW_NONE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public SetRoleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setRole;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSetRole(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSetRole(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSetRole(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetRoleContext setRole() throws RecognitionException {
        SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
        enterRule(_localctx, 216, RULE_setRole);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1834);
                match(KW_SET);
                setState(1835);
                match(KW_ROLE);
                setState(1839);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_ALL:
                        {
                            setState(1836);
                            match(KW_ALL);
                        }
                        break;
                    case KW_NONE:
                        {
                            setState(1837);
                            match(KW_NONE);
                        }
                        break;
                    case KW_ASC:
                    case KW_DESC:
                    case KW_NULLS:
                    case KW_LAST:
                    case KW_OVERWRITE:
                    case KW_PARTITIONS:
                    case KW_TABLES:
                    case KW_COLUMNS:
                    case KW_INDEX:
                    case KW_INDEXES:
                    case KW_REBUILD:
                    case KW_FUNCTIONS:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_REPAIR:
                    case KW_DIRECTORY:
                    case KW_CLUSTER:
                    case KW_DISTRIBUTE:
                    case KW_SORT:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_REPLICATION:
                    case KW_METADATA:
                    case KW_DATA:
                    case KW_INPATH:
                    case KW_CHANGE:
                    case KW_FIRST:
                    case KW_AFTER:
                    case KW_RENAME:
                    case KW_COMMENT:
                    case KW_TINYINT:
                    case KW_DATETIME:
                    case KW_ZONE:
                    case KW_STRING:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                    case KW_PARTITIONED:
                    case KW_CLUSTERED:
                    case KW_SORTED:
                    case KW_BUCKETS:
                    case KW_FORMAT:
                    case KW_DELIMITED:
                    case KW_FIELDS:
                    case KW_TERMINATED:
                    case KW_ESCAPED:
                    case KW_COLLECTION:
                    case KW_ITEMS:
                    case KW_KEYS:
                    case KW_KEY_TYPE:
                    case KW_KILL:
                    case KW_LINES:
                    case KW_STORED:
                    case KW_FILEFORMAT:
                    case KW_INPUTFORMAT:
                    case KW_OUTPUTFORMAT:
                    case KW_INPUTDRIVER:
                    case KW_OUTPUTDRIVER:
                    case KW_ENABLE:
                    case KW_DISABLE:
                    case KW_LOCATION:
                    case KW_BUCKET:
                    case KW_ADD:
                    case KW_REPLACE:
                    case KW_TEMPORARY:
                    case KW_FILE:
                    case KW_JAR:
                    case KW_EXPLAIN:
                    case KW_FORMATTED:
                    case KW_DEPENDENCY:
                    case KW_LOGICAL:
                    case KW_SERDE:
                    case KW_DEFERRED:
                    case KW_SERDEPROPERTIES:
                    case KW_DBPROPERTIES:
                    case KW_LIMIT:
                    case KW_OFFSET:
                    case KW_UNSET:
                    case KW_TBLPROPERTIES:
                    case KW_IDXPROPERTIES:
                    case KW_VALUE_TYPE:
                    case KW_ELEM_TYPE:
                    case KW_DEFINED:
                    case KW_MAPJOIN:
                    case KW_STREAMTABLE:
                    case KW_CLUSTERSTATUS:
                    case KW_UTC:
                    case KW_UTCTIMESTAMP:
                    case KW_LONG:
                    case KW_PLUS:
                    case KW_VIEW:
                    case KW_VIEWS:
                    case KW_DATABASES:
                    case KW_MATERIALIZED:
                    case KW_SCHEMA:
                    case KW_SCHEMAS:
                    case KW_SSL:
                    case KW_UNDO:
                    case KW_LOCK:
                    case KW_LOCKS:
                    case KW_UNLOCK:
                    case KW_SHARED:
                    case KW_EXCLUSIVE:
                    case KW_UNSIGNED:
                    case KW_WHILE:
                    case KW_READ:
                    case KW_PURGE:
                    case KW_ANALYZE:
                    case KW_BEFORE:
                    case KW_CONTINUE:
                    case KW_RECORDREADER:
                    case KW_RECORDWRITER:
                    case KW_SEMI:
                    case KW_TOUCH:
                    case KW_ARCHIVE:
                    case KW_UNARCHIVE:
                    case KW_COMPUTE:
                    case KW_STATISTICS:
                    case KW_USE:
                    case KW_OPTION:
                    case KW_CONCATENATE:
                    case KW_SHOW_DATABASE:
                    case KW_RESTRICT:
                    case KW_CASCADE:
                    case KW_SKEWED:
                    case KW_DIRECTORIES:
                    case KW_SETS:
                    case KW_NOSCAN:
                    case KW_ROLE:
                    case KW_ROLES:
                    case KW_URI:
                    case KW_SERVER:
                    case KW_ADMIN:
                    case KW_OWNER:
                    case KW_PRINCIPALS:
                    case KW_COMPACT:
                    case KW_COMPACTIONS:
                    case KW_TRANSACTIONS:
                    case KW_REWRITE:
                    case KW_REOPTIMIZATION:
                    case KW_RELOAD:
                    case KW_YEAR:
                    case KW_QUERY:
                    case KW_QUARTER:
                    case KW_MONTH:
                    case KW_WEEK:
                    case KW_DAY:
                    case KW_DOW:
                    case KW_HOUR:
                    case KW_MINUTE:
                    case KW_SECOND:
                    case KW_TRANSACTION:
                    case KW_WORK:
                    case KW_WRITE:
                    case KW_ISOLATION:
                    case KW_LEVEL:
                    case KW_SNAPSHOT:
                    case KW_AUTOCOMMIT:
                    case KW_CACHE:
                    case KW_ENFORCED:
                    case KW_VALIDATE:
                    case KW_NOVALIDATE:
                    case KW_RELY:
                    case KW_NORELY:
                    case KW_KEY:
                    case KW_ABORT:
                    case KW_MATCHED:
                    case KW_REPL:
                    case KW_DUMP:
                    case KW_STATUS:
                    case KW_VECTORIZATION:
                    case KW_SUMMARY:
                    case KW_OPERATOR:
                    case KW_EXPRESSION:
                    case KW_DETAIL:
                    case KW_WAIT:
                    case KW_RESOURCE:
                    case KW_PLAN:
                    case KW_QUERY_PARALLELISM:
                    case KW_PLANS:
                    case KW_ACTIVATE:
                    case KW_DEFAULT:
                    case KW_CHECK:
                    case KW_POOL:
                    case KW_MOVE:
                    case KW_DO:
                    case KW_ALLOC_FRACTION:
                    case KW_SCHEDULING_POLICY:
                    case KW_PATH:
                    case KW_MAPPING:
                    case KW_WORKLOAD:
                    case KW_MANAGEMENT:
                    case KW_ACTIVE:
                    case KW_UNMANAGED:
                    case Identifier:
                        {
                            setState(1838);
                            identifier();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowGrantsContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public PrincipalNameContext principalName() {
            return getRuleContext(PrincipalNameContext.class, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public PrivilegeIncludeColObjectContext privilegeIncludeColObject() {
            return getRuleContext(PrivilegeIncludeColObjectContext.class, 0);
        }

        public ShowGrantsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showGrants;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowGrants(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowGrants(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowGrants(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowGrantsContext showGrants() throws RecognitionException {
        ShowGrantsContext _localctx = new ShowGrantsContext(_ctx, getState());
        enterRule(_localctx, 218, RULE_showGrants);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1841);
                match(KW_SHOW);
                setState(1842);
                match(KW_GRANT);
                setState(1844);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_GROUP || _la == KW_USER || _la == KW_ROLE) {
                    {
                        setState(1843);
                        principalName();
                    }
                }

                setState(1848);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ON) {
                    {
                        setState(1846);
                        match(KW_ON);
                        setState(1847);
                        privilegeIncludeColObject();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowRolePrincipalsContext extends ParserRuleContext {
        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_PRINCIPALS() {
            return getToken(HiveParser.KW_PRINCIPALS, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ShowRolePrincipalsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showRolePrincipals;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowRolePrincipals(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowRolePrincipals(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowRolePrincipals(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowRolePrincipalsContext showRolePrincipals() throws RecognitionException {
        ShowRolePrincipalsContext _localctx = new ShowRolePrincipalsContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_showRolePrincipals);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1850);
                match(KW_SHOW);
                setState(1851);
                match(KW_PRINCIPALS);
                setState(1852);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivilegeIncludeColObjectContext extends ParserRuleContext {
        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public PrivObjectColsContext privObjectCols() {
            return getRuleContext(PrivObjectColsContext.class, 0);
        }

        public PrivilegeIncludeColObjectContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privilegeIncludeColObject;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivilegeIncludeColObject(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivilegeIncludeColObject(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrivilegeIncludeColObject(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivilegeIncludeColObjectContext privilegeIncludeColObject()
            throws RecognitionException {
        PrivilegeIncludeColObjectContext _localctx =
                new PrivilegeIncludeColObjectContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_privilegeIncludeColObject);
        try {
            setState(1856);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ALL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1854);
                        match(KW_ALL);
                    }
                    break;
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLE:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASE:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1855);
                        privObjectCols();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivilegeObjectContext extends ParserRuleContext {
        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public PrivObjectContext privObject() {
            return getRuleContext(PrivObjectContext.class, 0);
        }

        public PrivilegeObjectContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privilegeObject;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivilegeObject(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivilegeObject(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivilegeObject(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivilegeObjectContext privilegeObject() throws RecognitionException {
        PrivilegeObjectContext _localctx = new PrivilegeObjectContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_privilegeObject);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1858);
                match(KW_ON);
                setState(1859);
                privObject();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivObjectContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode KW_URI() {
            return getToken(HiveParser.KW_URI, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_SERVER() {
            return getToken(HiveParser.KW_SERVER, 0);
        }

        public PrivObjectContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privObject;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivObject(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivObject(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivObject(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivObjectContext privObject() throws RecognitionException {
        PrivObjectContext _localctx = new PrivObjectContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_privObject);
        int _la;
        try {
            setState(1874);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 166, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1861);
                        _la = _input.LA(1);
                        if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1862);
                        identifier();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1864);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_TABLE) {
                            {
                                setState(1863);
                                match(KW_TABLE);
                            }
                        }

                        setState(1866);
                        tableName();
                        setState(1868);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PARTITION) {
                            {
                                setState(1867);
                                partitionSpec();
                            }
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1870);
                        match(KW_URI);
                        setState(1871);
                        match(StringLiteral);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1872);
                        match(KW_SERVER);
                        setState(1873);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivObjectColsContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_DATABASE() {
            return getToken(HiveParser.KW_DATABASE, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode KW_URI() {
            return getToken(HiveParser.KW_URI, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_SERVER() {
            return getToken(HiveParser.KW_SERVER, 0);
        }

        public PrivObjectColsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privObjectCols;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivObjectCols(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivObjectCols(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivObjectCols(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivObjectColsContext privObjectCols() throws RecognitionException {
        PrivObjectColsContext _localctx = new PrivObjectColsContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_privObjectCols);
        int _la;
        try {
            setState(1895);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 170, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1876);
                        _la = _input.LA(1);
                        if (!(_la == KW_DATABASE || _la == KW_SCHEMA)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1877);
                        identifier();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1879);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_TABLE) {
                            {
                                setState(1878);
                                match(KW_TABLE);
                            }
                        }

                        setState(1881);
                        tableName();
                        setState(1886);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 168, _ctx)) {
                            case 1:
                                {
                                    setState(1882);
                                    match(LPAREN);
                                    setState(1883);
                                    columnNameList();
                                    setState(1884);
                                    match(RPAREN);
                                }
                                break;
                        }
                        setState(1889);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PARTITION) {
                            {
                                setState(1888);
                                partitionSpec();
                            }
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1891);
                        match(KW_URI);
                        setState(1892);
                        match(StringLiteral);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1893);
                        match(KW_SERVER);
                        setState(1894);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivilegeListContext extends ParserRuleContext {
        public List<PrivlegeDefContext> privlegeDef() {
            return getRuleContexts(PrivlegeDefContext.class);
        }

        public PrivlegeDefContext privlegeDef(int i) {
            return getRuleContext(PrivlegeDefContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privilegeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivilegeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivilegeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivilegeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivilegeListContext privilegeList() throws RecognitionException {
        PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_privilegeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1897);
                privlegeDef();
                setState(1902);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1898);
                            match(COMMA);
                            setState(1899);
                            privlegeDef();
                        }
                    }
                    setState(1904);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivlegeDefContext extends ParserRuleContext {
        public PrivilegeTypeContext privilegeType() {
            return getRuleContext(PrivilegeTypeContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public PrivlegeDefContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privlegeDef;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivlegeDef(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivlegeDef(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivlegeDef(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivlegeDefContext privlegeDef() throws RecognitionException {
        PrivlegeDefContext _localctx = new PrivlegeDefContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_privlegeDef);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1905);
                privilegeType();
                setState(1910);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LPAREN) {
                    {
                        setState(1906);
                        match(LPAREN);
                        setState(1907);
                        columnNameList();
                        setState(1908);
                        match(RPAREN);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrivilegeTypeContext extends ParserRuleContext {
        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public TerminalNode KW_ALTER() {
            return getToken(HiveParser.KW_ALTER, 0);
        }

        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_LOCK() {
            return getToken(HiveParser.KW_LOCK, 0);
        }

        public TerminalNode KW_SELECT() {
            return getToken(HiveParser.KW_SELECT, 0);
        }

        public TerminalNode KW_SHOW_DATABASE() {
            return getToken(HiveParser.KW_SHOW_DATABASE, 0);
        }

        public TerminalNode KW_INSERT() {
            return getToken(HiveParser.KW_INSERT, 0);
        }

        public TerminalNode KW_DELETE() {
            return getToken(HiveParser.KW_DELETE, 0);
        }

        public PrivilegeTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_privilegeType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrivilegeType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrivilegeType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrivilegeType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrivilegeTypeContext privilegeType() throws RecognitionException {
        PrivilegeTypeContext _localctx = new PrivilegeTypeContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_privilegeType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1912);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 41943048L) != 0)
                        || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 261L) != 0)
                        || ((((_la - 173)) & ~0x3f) == 0
                                && ((1L << (_la - 173)) & 3377699720658945L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrincipalSpecificationContext extends ParserRuleContext {
        public List<PrincipalNameContext> principalName() {
            return getRuleContexts(PrincipalNameContext.class);
        }

        public PrincipalNameContext principalName(int i) {
            return getRuleContext(PrincipalNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public PrincipalSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_principalSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrincipalSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrincipalSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrincipalSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrincipalSpecificationContext principalSpecification()
            throws RecognitionException {
        PrincipalSpecificationContext _localctx =
                new PrincipalSpecificationContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_principalSpecification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1914);
                principalName();
                setState(1919);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1915);
                            match(COMMA);
                            setState(1916);
                            principalName();
                        }
                    }
                    setState(1921);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrincipalNameContext extends ParserRuleContext {
        public TerminalNode KW_USER() {
            return getToken(HiveParser.KW_USER, 0);
        }

        public PrincipalIdentifierContext principalIdentifier() {
            return getRuleContext(PrincipalIdentifierContext.class, 0);
        }

        public TerminalNode KW_GROUP() {
            return getToken(HiveParser.KW_GROUP, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public PrincipalNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_principalName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrincipalName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrincipalName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrincipalName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrincipalNameContext principalName() throws RecognitionException {
        PrincipalNameContext _localctx = new PrincipalNameContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_principalName);
        try {
            setState(1928);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_USER:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1922);
                        match(KW_USER);
                        setState(1923);
                        principalIdentifier();
                    }
                    break;
                case KW_GROUP:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1924);
                        match(KW_GROUP);
                        setState(1925);
                        principalIdentifier();
                    }
                    break;
                case KW_ROLE:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1926);
                        match(KW_ROLE);
                        setState(1927);
                        identifier();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WithGrantOptionContext extends ParserRuleContext {
        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public TerminalNode KW_OPTION() {
            return getToken(HiveParser.KW_OPTION, 0);
        }

        public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_withGrantOption;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWithGrantOption(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWithGrantOption(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWithGrantOption(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WithGrantOptionContext withGrantOption() throws RecognitionException {
        WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_withGrantOption);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1930);
                match(KW_WITH);
                setState(1931);
                match(KW_GRANT);
                setState(1932);
                match(KW_OPTION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GrantOptionForContext extends ParserRuleContext {
        public TerminalNode KW_GRANT() {
            return getToken(HiveParser.KW_GRANT, 0);
        }

        public TerminalNode KW_OPTION() {
            return getToken(HiveParser.KW_OPTION, 0);
        }

        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public GrantOptionForContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_grantOptionFor;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGrantOptionFor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGrantOptionFor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGrantOptionFor(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GrantOptionForContext grantOptionFor() throws RecognitionException {
        GrantOptionForContext _localctx = new GrantOptionForContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_grantOptionFor);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1934);
                match(KW_GRANT);
                setState(1935);
                match(KW_OPTION);
                setState(1936);
                match(KW_FOR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AdminOptionForContext extends ParserRuleContext {
        public TerminalNode KW_ADMIN() {
            return getToken(HiveParser.KW_ADMIN, 0);
        }

        public TerminalNode KW_OPTION() {
            return getToken(HiveParser.KW_OPTION, 0);
        }

        public TerminalNode KW_FOR() {
            return getToken(HiveParser.KW_FOR, 0);
        }

        public AdminOptionForContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_adminOptionFor;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAdminOptionFor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAdminOptionFor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAdminOptionFor(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AdminOptionForContext adminOptionFor() throws RecognitionException {
        AdminOptionForContext _localctx = new AdminOptionForContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_adminOptionFor);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1938);
                match(KW_ADMIN);
                setState(1939);
                match(KW_OPTION);
                setState(1940);
                match(KW_FOR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WithAdminOptionContext extends ParserRuleContext {
        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_ADMIN() {
            return getToken(HiveParser.KW_ADMIN, 0);
        }

        public TerminalNode KW_OPTION() {
            return getToken(HiveParser.KW_OPTION, 0);
        }

        public WithAdminOptionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_withAdminOption;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWithAdminOption(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWithAdminOption(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWithAdminOption(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WithAdminOptionContext withAdminOption() throws RecognitionException {
        WithAdminOptionContext _localctx = new WithAdminOptionContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_withAdminOption);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1942);
                match(KW_WITH);
                setState(1943);
                match(KW_ADMIN);
                setState(1944);
                match(KW_OPTION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MetastoreCheckContext extends ParserRuleContext {
        public TerminalNode KW_MSCK() {
            return getToken(HiveParser.KW_MSCK, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_REPAIR() {
            return getToken(HiveParser.KW_REPAIR, 0);
        }

        public TerminalNode KW_PARTITIONS() {
            return getToken(HiveParser.KW_PARTITIONS, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode KW_ADD() {
            return getToken(HiveParser.KW_ADD, 0);
        }

        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_SYNC() {
            return getToken(HiveParser.KW_SYNC, 0);
        }

        public MetastoreCheckContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_metastoreCheck;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterMetastoreCheck(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitMetastoreCheck(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitMetastoreCheck(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MetastoreCheckContext metastoreCheck() throws RecognitionException {
        MetastoreCheckContext _localctx = new MetastoreCheckContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_metastoreCheck);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1946);
                match(KW_MSCK);
                setState(1948);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_REPAIR) {
                    {
                        setState(1947);
                        match(KW_REPAIR);
                    }
                }

                setState(1959);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_TABLE:
                        {
                            setState(1950);
                            match(KW_TABLE);
                            setState(1951);
                            tableName();
                            setState(1954);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 176, _ctx)) {
                                case 1:
                                    {
                                        setState(1952);
                                        _la = _input.LA(1);
                                        if (!(_la == KW_DROP || _la == KW_ADD || _la == KW_SYNC)) {
                                            _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(1953);
                                        match(KW_PARTITIONS);
                                    }
                                    break;
                            }
                        }
                        break;
                    case EOF:
                    case KW_DESC:
                    case KW_FROM:
                    case KW_SELECT:
                    case KW_INSERT:
                    case KW_PARTITION:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_IMPORT:
                    case KW_CREATE:
                    case KW_ALTER:
                    case KW_DESCRIBE:
                    case KW_DROP:
                    case KW_MAP:
                    case KW_REDUCE:
                    case KW_KILL:
                    case KW_EXPLAIN:
                    case KW_WITH:
                    case KW_SET:
                    case KW_DELETE:
                    case KW_GRANT:
                    case KW_REVOKE:
                    case KW_LOCK:
                    case KW_UNLOCK:
                    case KW_ANALYZE:
                    case KW_USE:
                    case KW_UPDATE:
                    case KW_TRUNCATE:
                    case KW_RELOAD:
                    case KW_START:
                    case KW_COMMIT:
                    case KW_ROLLBACK:
                    case KW_ABORT:
                    case KW_MERGE:
                    case KW_REPL:
                    case SEMICOLON:
                    case LPAREN:
                        {
                            setState(1957);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_PARTITION) {
                                {
                                    setState(1956);
                                    partitionSpec();
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResourceListContext extends ParserRuleContext {
        public List<ResourceContext> resource() {
            return getRuleContexts(ResourceContext.class);
        }

        public ResourceContext resource(int i) {
            return getRuleContext(ResourceContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ResourceListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resourceList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterResourceList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitResourceList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitResourceList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ResourceListContext resourceList() throws RecognitionException {
        ResourceListContext _localctx = new ResourceListContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_resourceList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1961);
                resource();
                setState(1966);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1962);
                            match(COMMA);
                            setState(1963);
                            resource();
                        }
                    }
                    setState(1968);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResourceContext extends ParserRuleContext {
        public ResourceTypeContext resourceType() {
            return getRuleContext(ResourceTypeContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ResourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitResource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ResourceContext resource() throws RecognitionException {
        ResourceContext _localctx = new ResourceContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_resource);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1969);
                resourceType();
                setState(1970);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ResourceTypeContext extends ParserRuleContext {
        public TerminalNode KW_JAR() {
            return getToken(HiveParser.KW_JAR, 0);
        }

        public TerminalNode KW_FILE() {
            return getToken(HiveParser.KW_FILE, 0);
        }

        public TerminalNode KW_ARCHIVE() {
            return getToken(HiveParser.KW_ARCHIVE, 0);
        }

        public ResourceTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resourceType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterResourceType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitResourceType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitResourceType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ResourceTypeContext resourceType() throws RecognitionException {
        ResourceTypeContext _localctx = new ResourceTypeContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_resourceType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1972);
                _la = _input.LA(1);
                if (!(_la == KW_FILE || _la == KW_JAR || _la == KW_ARCHIVE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateFunctionStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_FUNCTION() {
            return getToken(HiveParser.KW_FUNCTION, 0);
        }

        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public TerminalNode KW_USING() {
            return getToken(HiveParser.KW_USING, 0);
        }

        public ResourceListContext resourceList() {
            return getRuleContext(ResourceListContext.class, 0);
        }

        public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createFunctionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateFunctionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateFunctionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitCreateFunctionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateFunctionStatementContext createFunctionStatement()
            throws RecognitionException {
        CreateFunctionStatementContext _localctx =
                new CreateFunctionStatementContext(_ctx, getState());
        enterRule(_localctx, 256, RULE_createFunctionStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1974);
                match(KW_CREATE);
                setState(1976);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TEMPORARY) {
                    {
                        setState(1975);
                        match(KW_TEMPORARY);
                    }
                }

                setState(1978);
                match(KW_FUNCTION);
                setState(1979);
                functionIdentifier();
                setState(1980);
                match(KW_AS);
                setState(1981);
                match(StringLiteral);
                setState(1984);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_USING) {
                    {
                        setState(1982);
                        match(KW_USING);
                        setState(1983);
                        resourceList();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropFunctionStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_FUNCTION() {
            return getToken(HiveParser.KW_FUNCTION, 0);
        }

        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public DropFunctionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropFunctionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropFunctionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropFunctionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropFunctionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropFunctionStatementContext dropFunctionStatement() throws RecognitionException {
        DropFunctionStatementContext _localctx = new DropFunctionStatementContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_dropFunctionStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1986);
                match(KW_DROP);
                setState(1988);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TEMPORARY) {
                    {
                        setState(1987);
                        match(KW_TEMPORARY);
                    }
                }

                setState(1990);
                match(KW_FUNCTION);
                setState(1992);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(1991);
                        ifExists();
                    }
                }

                setState(1994);
                functionIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ReloadFunctionStatementContext extends ParserRuleContext {
        public TerminalNode KW_RELOAD() {
            return getToken(HiveParser.KW_RELOAD, 0);
        }

        public TerminalNode KW_FUNCTION() {
            return getToken(HiveParser.KW_FUNCTION, 0);
        }

        public ReloadFunctionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_reloadFunctionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterReloadFunctionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitReloadFunctionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitReloadFunctionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ReloadFunctionStatementContext reloadFunctionStatement()
            throws RecognitionException {
        ReloadFunctionStatementContext _localctx =
                new ReloadFunctionStatementContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_reloadFunctionStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1996);
                match(KW_RELOAD);
                setState(1997);
                match(KW_FUNCTION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateMacroStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public TerminalNode KW_MACRO() {
            return getToken(HiveParser.KW_MACRO, 0);
        }

        public TerminalNode Identifier() {
            return getToken(HiveParser.Identifier, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ColumnNameTypeListContext columnNameTypeList() {
            return getRuleContext(ColumnNameTypeListContext.class, 0);
        }

        public CreateMacroStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createMacroStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateMacroStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateMacroStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateMacroStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateMacroStatementContext createMacroStatement() throws RecognitionException {
        CreateMacroStatementContext _localctx = new CreateMacroStatementContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_createMacroStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1999);
                match(KW_CREATE);
                setState(2000);
                match(KW_TEMPORARY);
                setState(2001);
                match(KW_MACRO);
                setState(2002);
                match(Identifier);
                setState(2003);
                match(LPAREN);
                setState(2005);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934246383616L) != 0)
                        || ((((_la - 68)) & ~0x3f) == 0
                                && ((1L << (_la - 68)) & 3458763614599775565L) != 0)
                        || ((((_la - 134)) & ~0x3f) == 0
                                && ((1L << (_la - 134)) & -2319580865570571373L) != 0)
                        || ((((_la - 198)) & ~0x3f) == 0
                                && ((1L << (_la - 198)) & -4618828440659893195L) != 0)
                        || ((((_la - 264)) & ~0x3f) == 0
                                && ((1L << (_la - 264)) & -244939057153L) != 0)
                        || ((((_la - 328)) & ~0x3f) == 0
                                && ((1L << (_la - 328)) & 1099511627779L) != 0)) {
                    {
                        setState(2004);
                        columnNameTypeList();
                    }
                }

                setState(2007);
                match(RPAREN);
                setState(2008);
                expression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropMacroStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public TerminalNode KW_MACRO() {
            return getToken(HiveParser.KW_MACRO, 0);
        }

        public TerminalNode Identifier() {
            return getToken(HiveParser.Identifier, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public DropMacroStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropMacroStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropMacroStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropMacroStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropMacroStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropMacroStatementContext dropMacroStatement() throws RecognitionException {
        DropMacroStatementContext _localctx = new DropMacroStatementContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_dropMacroStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2010);
                match(KW_DROP);
                setState(2011);
                match(KW_TEMPORARY);
                setState(2012);
                match(KW_MACRO);
                setState(2014);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(2013);
                        ifExists();
                    }
                }

                setState(2016);
                match(Identifier);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateViewStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public SelectStatementWithCTEContext selectStatementWithCTE() {
            return getRuleContext(SelectStatementWithCTEContext.class, 0);
        }

        public OrReplaceContext orReplace() {
            return getRuleContext(OrReplaceContext.class, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameCommentListContext columnNameCommentList() {
            return getRuleContext(ColumnNameCommentListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TableCommentContext tableComment() {
            return getRuleContext(TableCommentContext.class, 0);
        }

        public ViewPartitionContext viewPartition() {
            return getRuleContext(ViewPartitionContext.class, 0);
        }

        public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
            return getRuleContext(TablePropertiesPrefixedContext.class, 0);
        }

        public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createViewStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateViewStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateViewStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateViewStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateViewStatementContext createViewStatement() throws RecognitionException {
        CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_createViewStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2018);
                match(KW_CREATE);
                setState(2020);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_OR) {
                    {
                        setState(2019);
                        orReplace();
                    }
                }

                setState(2022);
                match(KW_VIEW);
                setState(2024);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(2023);
                        ifNotExists();
                    }
                }

                setState(2026);
                tableName();
                setState(2031);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LPAREN) {
                    {
                        setState(2027);
                        match(LPAREN);
                        setState(2028);
                        columnNameCommentList();
                        setState(2029);
                        match(RPAREN);
                    }
                }

                setState(2034);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2033);
                        tableComment();
                    }
                }

                setState(2037);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITIONED) {
                    {
                        setState(2036);
                        viewPartition();
                    }
                }

                setState(2040);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TBLPROPERTIES) {
                    {
                        setState(2039);
                        tablePropertiesPrefixed();
                    }
                }

                setState(2042);
                match(KW_AS);
                setState(2043);
                selectStatementWithCTE();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateMaterializedViewStatementContext extends ParserRuleContext {
        public TerminalNode KW_CREATE() {
            return getToken(HiveParser.KW_CREATE, 0);
        }

        public TerminalNode KW_MATERIALIZED() {
            return getToken(HiveParser.KW_MATERIALIZED, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public SelectStatementWithCTEContext selectStatementWithCTE() {
            return getRuleContext(SelectStatementWithCTEContext.class, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public RewriteDisabledContext rewriteDisabled() {
            return getRuleContext(RewriteDisabledContext.class, 0);
        }

        public TableCommentContext tableComment() {
            return getRuleContext(TableCommentContext.class, 0);
        }

        public TableRowFormatContext tableRowFormat() {
            return getRuleContext(TableRowFormatContext.class, 0);
        }

        public TableFileFormatContext tableFileFormat() {
            return getRuleContext(TableFileFormatContext.class, 0);
        }

        public TableLocationContext tableLocation() {
            return getRuleContext(TableLocationContext.class, 0);
        }

        public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
            return getRuleContext(TablePropertiesPrefixedContext.class, 0);
        }

        public CreateMaterializedViewStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createMaterializedViewStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateMaterializedViewStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateMaterializedViewStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitCreateMaterializedViewStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateMaterializedViewStatementContext createMaterializedViewStatement()
            throws RecognitionException {
        CreateMaterializedViewStatementContext _localctx =
                new CreateMaterializedViewStatementContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_createMaterializedViewStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2045);
                match(KW_CREATE);
                setState(2046);
                match(KW_MATERIALIZED);
                setState(2047);
                match(KW_VIEW);
                setState(2049);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(2048);
                        ifNotExists();
                    }
                }

                setState(2051);
                tableName();
                setState(2053);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_DISABLE) {
                    {
                        setState(2052);
                        rewriteDisabled();
                    }
                }

                setState(2056);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2055);
                        tableComment();
                    }
                }

                setState(2059);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW) {
                    {
                        setState(2058);
                        tableRowFormat();
                    }
                }

                setState(2062);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_STORED) {
                    {
                        setState(2061);
                        tableFileFormat();
                    }
                }

                setState(2065);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LOCATION) {
                    {
                        setState(2064);
                        tableLocation();
                    }
                }

                setState(2068);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TBLPROPERTIES) {
                    {
                        setState(2067);
                        tablePropertiesPrefixed();
                    }
                }

                setState(2070);
                match(KW_AS);
                setState(2071);
                selectStatementWithCTE();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ViewPartitionContext extends ParserRuleContext {
        public TerminalNode KW_PARTITIONED() {
            return getToken(HiveParser.KW_PARTITIONED, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ViewPartitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_viewPartition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterViewPartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitViewPartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitViewPartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ViewPartitionContext viewPartition() throws RecognitionException {
        ViewPartitionContext _localctx = new ViewPartitionContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_viewPartition);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2073);
                match(KW_PARTITIONED);
                setState(2074);
                match(KW_ON);
                setState(2075);
                match(LPAREN);
                setState(2076);
                columnNameList();
                setState(2077);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropViewStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public ViewNameContext viewName() {
            return getRuleContext(ViewNameContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public DropViewStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropViewStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropViewStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropViewStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropViewStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropViewStatementContext dropViewStatement() throws RecognitionException {
        DropViewStatementContext _localctx = new DropViewStatementContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_dropViewStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2079);
                match(KW_DROP);
                setState(2080);
                match(KW_VIEW);
                setState(2082);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(2081);
                        ifExists();
                    }
                }

                setState(2084);
                viewName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropMaterializedViewStatementContext extends ParserRuleContext {
        public TerminalNode KW_DROP() {
            return getToken(HiveParser.KW_DROP, 0);
        }

        public TerminalNode KW_MATERIALIZED() {
            return getToken(HiveParser.KW_MATERIALIZED, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public ViewNameContext viewName() {
            return getRuleContext(ViewNameContext.class, 0);
        }

        public IfExistsContext ifExists() {
            return getRuleContext(IfExistsContext.class, 0);
        }

        public DropMaterializedViewStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropMaterializedViewStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropMaterializedViewStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropMaterializedViewStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitDropMaterializedViewStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropMaterializedViewStatementContext dropMaterializedViewStatement()
            throws RecognitionException {
        DropMaterializedViewStatementContext _localctx =
                new DropMaterializedViewStatementContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_dropMaterializedViewStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2086);
                match(KW_DROP);
                setState(2087);
                match(KW_MATERIALIZED);
                setState(2088);
                match(KW_VIEW);
                setState(2090);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_IF) {
                    {
                        setState(2089);
                        ifExists();
                    }
                }

                setState(2092);
                viewName();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowFunctionIdentifierContext extends ParserRuleContext {
        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ShowFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showFunctionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowFunctionIdentifierContext showFunctionIdentifier()
            throws RecognitionException {
        ShowFunctionIdentifierContext _localctx =
                new ShowFunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 276, RULE_showFunctionIdentifier);
        try {
            setState(2096);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2094);
                        functionIdentifier();
                    }
                    break;
                case StringLiteral:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2095);
                        match(StringLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ShowStmtIdentifierContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ShowStmtIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_showStmtIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterShowStmtIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitShowStmtIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitShowStmtIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ShowStmtIdentifierContext showStmtIdentifier() throws RecognitionException {
        ShowStmtIdentifierContext _localctx = new ShowStmtIdentifierContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_showStmtIdentifier);
        try {
            setState(2100);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2098);
                        identifier();
                    }
                    break;
                case StringLiteral:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2099);
                        match(StringLiteral);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableCommentContext extends ParserRuleContext {
        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableCommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableComment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableCommentContext tableComment() throws RecognitionException {
        TableCommentContext _localctx = new TableCommentContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_tableComment);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2102);
                match(KW_COMMENT);
                setState(2103);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TablePartitionContext extends ParserRuleContext {
        public TerminalNode KW_PARTITIONED() {
            return getToken(HiveParser.KW_PARTITIONED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<ColumnNameTypeConstraintContext> columnNameTypeConstraint() {
            return getRuleContexts(ColumnNameTypeConstraintContext.class);
        }

        public ColumnNameTypeConstraintContext columnNameTypeConstraint(int i) {
            return getRuleContext(ColumnNameTypeConstraintContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public TablePartitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tablePartition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTablePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTablePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTablePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TablePartitionContext tablePartition() throws RecognitionException {
        TablePartitionContext _localctx = new TablePartitionContext(_ctx, getState());
        enterRule(_localctx, 282, RULE_tablePartition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2105);
                match(KW_PARTITIONED);
                setState(2106);
                match(KW_BY);
                setState(2107);
                match(LPAREN);
                setState(2108);
                columnNameTypeConstraint();
                setState(2113);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2109);
                            match(COMMA);
                            setState(2110);
                            columnNameTypeConstraint();
                        }
                    }
                    setState(2115);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2116);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableBucketsContext extends ParserRuleContext {
        public TerminalNode KW_CLUSTERED() {
            return getToken(HiveParser.KW_CLUSTERED, 0);
        }

        public List<TerminalNode> KW_BY() {
            return getTokens(HiveParser.KW_BY);
        }

        public TerminalNode KW_BY(int i) {
            return getToken(HiveParser.KW_BY, i);
        }

        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public TerminalNode KW_INTO() {
            return getToken(HiveParser.KW_INTO, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public TerminalNode KW_BUCKETS() {
            return getToken(HiveParser.KW_BUCKETS, 0);
        }

        public TerminalNode KW_SORTED() {
            return getToken(HiveParser.KW_SORTED, 0);
        }

        public ColumnNameOrderListContext columnNameOrderList() {
            return getRuleContext(ColumnNameOrderListContext.class, 0);
        }

        public TableBucketsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableBuckets;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableBuckets(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableBuckets(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableBuckets(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableBucketsContext tableBuckets() throws RecognitionException {
        TableBucketsContext _localctx = new TableBucketsContext(_ctx, getState());
        enterRule(_localctx, 284, RULE_tableBuckets);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2118);
                match(KW_CLUSTERED);
                setState(2119);
                match(KW_BY);
                setState(2120);
                match(LPAREN);
                setState(2121);
                columnNameList();
                setState(2122);
                match(RPAREN);
                setState(2129);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_SORTED) {
                    {
                        setState(2123);
                        match(KW_SORTED);
                        setState(2124);
                        match(KW_BY);
                        setState(2125);
                        match(LPAREN);
                        setState(2126);
                        columnNameOrderList();
                        setState(2127);
                        match(RPAREN);
                    }
                }

                setState(2131);
                match(KW_INTO);
                setState(2132);
                match(Number);
                setState(2133);
                match(KW_BUCKETS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableSkewedContext extends ParserRuleContext {
        public TerminalNode KW_SKEWED() {
            return getToken(HiveParser.KW_SKEWED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public SkewedValueElementContext skewedValueElement() {
            return getRuleContext(SkewedValueElementContext.class, 0);
        }

        public StoredAsDirsContext storedAsDirs() {
            return getRuleContext(StoredAsDirsContext.class, 0);
        }

        public TableSkewedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableSkewed;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableSkewed(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableSkewed(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableSkewed(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableSkewedContext tableSkewed() throws RecognitionException {
        TableSkewedContext _localctx = new TableSkewedContext(_ctx, getState());
        enterRule(_localctx, 286, RULE_tableSkewed);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2135);
                match(KW_SKEWED);
                setState(2136);
                match(KW_BY);
                setState(2137);
                match(LPAREN);
                setState(2138);
                columnNameList();
                setState(2139);
                match(RPAREN);
                setState(2140);
                match(KW_ON);
                setState(2141);
                match(LPAREN);
                setState(2142);
                skewedValueElement();
                setState(2143);
                match(RPAREN);
                setState(2145);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 205, _ctx)) {
                    case 1:
                        {
                            setState(2144);
                            storedAsDirs();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatContext extends ParserRuleContext {
        public RowFormatSerdeContext rowFormatSerde() {
            return getRuleContext(RowFormatSerdeContext.class, 0);
        }

        public RowFormatDelimitedContext rowFormatDelimited() {
            return getRuleContext(RowFormatDelimitedContext.class, 0);
        }

        public RowFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rowFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRowFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRowFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRowFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RowFormatContext rowFormat() throws RecognitionException {
        RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
        enterRule(_localctx, 288, RULE_rowFormat);
        try {
            setState(2149);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 206, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2147);
                        rowFormatSerde();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2148);
                        rowFormatDelimited();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RecordReaderContext extends ParserRuleContext {
        public TerminalNode KW_RECORDREADER() {
            return getToken(HiveParser.KW_RECORDREADER, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public RecordReaderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_recordReader;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRecordReader(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRecordReader(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRecordReader(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RecordReaderContext recordReader() throws RecognitionException {
        RecordReaderContext _localctx = new RecordReaderContext(_ctx, getState());
        enterRule(_localctx, 290, RULE_recordReader);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2151);
                match(KW_RECORDREADER);
                setState(2152);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RecordWriterContext extends ParserRuleContext {
        public TerminalNode KW_RECORDWRITER() {
            return getToken(HiveParser.KW_RECORDWRITER, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public RecordWriterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_recordWriter;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRecordWriter(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRecordWriter(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRecordWriter(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RecordWriterContext recordWriter() throws RecognitionException {
        RecordWriterContext _localctx = new RecordWriterContext(_ctx, getState());
        enterRule(_localctx, 292, RULE_recordWriter);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2154);
                match(KW_RECORDWRITER);
                setState(2155);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatSerdeContext extends ParserRuleContext {
        public TerminalNode KW_ROW() {
            return getToken(HiveParser.KW_ROW, 0);
        }

        public TerminalNode KW_FORMAT() {
            return getToken(HiveParser.KW_FORMAT, 0);
        }

        public TerminalNode KW_SERDE() {
            return getToken(HiveParser.KW_SERDE, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_SERDEPROPERTIES() {
            return getToken(HiveParser.KW_SERDEPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public RowFormatSerdeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rowFormatSerde;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRowFormatSerde(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRowFormatSerde(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRowFormatSerde(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RowFormatSerdeContext rowFormatSerde() throws RecognitionException {
        RowFormatSerdeContext _localctx = new RowFormatSerdeContext(_ctx, getState());
        enterRule(_localctx, 294, RULE_rowFormatSerde);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2157);
                match(KW_ROW);
                setState(2158);
                match(KW_FORMAT);
                setState(2159);
                match(KW_SERDE);
                setState(2160);
                match(StringLiteral);
                setState(2164);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 207, _ctx)) {
                    case 1:
                        {
                            setState(2161);
                            match(KW_WITH);
                            setState(2162);
                            match(KW_SERDEPROPERTIES);
                            setState(2163);
                            tableProperties();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RowFormatDelimitedContext extends ParserRuleContext {
        public TerminalNode KW_ROW() {
            return getToken(HiveParser.KW_ROW, 0);
        }

        public TerminalNode KW_FORMAT() {
            return getToken(HiveParser.KW_FORMAT, 0);
        }

        public TerminalNode KW_DELIMITED() {
            return getToken(HiveParser.KW_DELIMITED, 0);
        }

        public TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() {
            return getRuleContext(TableRowFormatFieldIdentifierContext.class, 0);
        }

        public TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() {
            return getRuleContext(TableRowFormatCollItemsIdentifierContext.class, 0);
        }

        public TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() {
            return getRuleContext(TableRowFormatMapKeysIdentifierContext.class, 0);
        }

        public TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() {
            return getRuleContext(TableRowFormatLinesIdentifierContext.class, 0);
        }

        public TableRowNullFormatContext tableRowNullFormat() {
            return getRuleContext(TableRowNullFormatContext.class, 0);
        }

        public RowFormatDelimitedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rowFormatDelimited;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRowFormatDelimited(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRowFormatDelimited(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRowFormatDelimited(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RowFormatDelimitedContext rowFormatDelimited() throws RecognitionException {
        RowFormatDelimitedContext _localctx = new RowFormatDelimitedContext(_ctx, getState());
        enterRule(_localctx, 296, RULE_rowFormatDelimited);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2166);
                match(KW_ROW);
                setState(2167);
                match(KW_FORMAT);
                setState(2168);
                match(KW_DELIMITED);
                setState(2170);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_FIELDS) {
                    {
                        setState(2169);
                        tableRowFormatFieldIdentifier();
                    }
                }

                setState(2173);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COLLECTION) {
                    {
                        setState(2172);
                        tableRowFormatCollItemsIdentifier();
                    }
                }

                setState(2176);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 210, _ctx)) {
                    case 1:
                        {
                            setState(2175);
                            tableRowFormatMapKeysIdentifier();
                        }
                        break;
                }
                setState(2179);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LINES) {
                    {
                        setState(2178);
                        tableRowFormatLinesIdentifier();
                    }
                }

                setState(2182);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NULL) {
                    {
                        setState(2181);
                        tableRowNullFormat();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowFormatContext extends ParserRuleContext {
        public RowFormatDelimitedContext rowFormatDelimited() {
            return getRuleContext(RowFormatDelimitedContext.class, 0);
        }

        public RowFormatSerdeContext rowFormatSerde() {
            return getRuleContext(RowFormatSerdeContext.class, 0);
        }

        public TableRowFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableRowFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowFormatContext tableRowFormat() throws RecognitionException {
        TableRowFormatContext _localctx = new TableRowFormatContext(_ctx, getState());
        enterRule(_localctx, 298, RULE_tableRowFormat);
        try {
            setState(2186);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 213, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2184);
                        rowFormatDelimited();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2185);
                        rowFormatSerde();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TablePropertiesPrefixedContext extends ParserRuleContext {
        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TablePropertiesPrefixedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tablePropertiesPrefixed;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTablePropertiesPrefixed(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTablePropertiesPrefixed(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTablePropertiesPrefixed(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TablePropertiesPrefixedContext tablePropertiesPrefixed()
            throws RecognitionException {
        TablePropertiesPrefixedContext _localctx =
                new TablePropertiesPrefixedContext(_ctx, getState());
        enterRule(_localctx, 300, RULE_tablePropertiesPrefixed);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2188);
                match(KW_TBLPROPERTIES);
                setState(2189);
                tableProperties();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TablePropertiesContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TablePropertiesListContext tablePropertiesList() {
            return getRuleContext(TablePropertiesListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TablePropertiesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableProperties;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TablePropertiesContext tableProperties() throws RecognitionException {
        TablePropertiesContext _localctx = new TablePropertiesContext(_ctx, getState());
        enterRule(_localctx, 302, RULE_tableProperties);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2191);
                match(LPAREN);
                setState(2192);
                tablePropertiesList();
                setState(2193);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TablePropertiesListContext extends ParserRuleContext {
        public List<KeyValuePropertyContext> keyValueProperty() {
            return getRuleContexts(KeyValuePropertyContext.class);
        }

        public KeyValuePropertyContext keyValueProperty(int i) {
            return getRuleContext(KeyValuePropertyContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public List<KeyPropertyContext> keyProperty() {
            return getRuleContexts(KeyPropertyContext.class);
        }

        public KeyPropertyContext keyProperty(int i) {
            return getRuleContext(KeyPropertyContext.class, i);
        }

        public TablePropertiesListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tablePropertiesList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTablePropertiesList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTablePropertiesList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTablePropertiesList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TablePropertiesListContext tablePropertiesList() throws RecognitionException {
        TablePropertiesListContext _localctx = new TablePropertiesListContext(_ctx, getState());
        enterRule(_localctx, 304, RULE_tablePropertiesList);
        int _la;
        try {
            setState(2211);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 216, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2195);
                        keyValueProperty();
                        setState(2200);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2196);
                                    match(COMMA);
                                    setState(2197);
                                    keyValueProperty();
                                }
                            }
                            setState(2202);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2203);
                        keyProperty();
                        setState(2208);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2204);
                                    match(COMMA);
                                    setState(2205);
                                    keyProperty();
                                }
                            }
                            setState(2210);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class KeyValuePropertyContext extends ParserRuleContext {
        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public KeyValuePropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_keyValueProperty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterKeyValueProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitKeyValueProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitKeyValueProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final KeyValuePropertyContext keyValueProperty() throws RecognitionException {
        KeyValuePropertyContext _localctx = new KeyValuePropertyContext(_ctx, getState());
        enterRule(_localctx, 306, RULE_keyValueProperty);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2213);
                match(StringLiteral);
                setState(2214);
                match(EQUAL);
                setState(2215);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class KeyPropertyContext extends ParserRuleContext {
        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public KeyPropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_keyProperty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterKeyProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitKeyProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitKeyProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final KeyPropertyContext keyProperty() throws RecognitionException {
        KeyPropertyContext _localctx = new KeyPropertyContext(_ctx, getState());
        enterRule(_localctx, 308, RULE_keyProperty);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2217);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowFormatFieldIdentifierContext extends ParserRuleContext {
        public TerminalNode KW_FIELDS() {
            return getToken(HiveParser.KW_FIELDS, 0);
        }

        public TerminalNode KW_TERMINATED() {
            return getToken(HiveParser.KW_TERMINATED, 0);
        }

        public List<TerminalNode> KW_BY() {
            return getTokens(HiveParser.KW_BY);
        }

        public TerminalNode KW_BY(int i) {
            return getToken(HiveParser.KW_BY, i);
        }

        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public TerminalNode KW_ESCAPED() {
            return getToken(HiveParser.KW_ESCAPED, 0);
        }

        public TableRowFormatFieldIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowFormatFieldIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowFormatFieldIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowFormatFieldIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTableRowFormatFieldIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier()
            throws RecognitionException {
        TableRowFormatFieldIdentifierContext _localctx =
                new TableRowFormatFieldIdentifierContext(_ctx, getState());
        enterRule(_localctx, 310, RULE_tableRowFormatFieldIdentifier);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2219);
                match(KW_FIELDS);
                setState(2220);
                match(KW_TERMINATED);
                setState(2221);
                match(KW_BY);
                setState(2222);
                match(StringLiteral);
                setState(2226);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ESCAPED) {
                    {
                        setState(2223);
                        match(KW_ESCAPED);
                        setState(2224);
                        match(KW_BY);
                        setState(2225);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowFormatCollItemsIdentifierContext extends ParserRuleContext {
        public TerminalNode KW_COLLECTION() {
            return getToken(HiveParser.KW_COLLECTION, 0);
        }

        public TerminalNode KW_ITEMS() {
            return getToken(HiveParser.KW_ITEMS, 0);
        }

        public TerminalNode KW_TERMINATED() {
            return getToken(HiveParser.KW_TERMINATED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableRowFormatCollItemsIdentifierContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowFormatCollItemsIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowFormatCollItemsIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowFormatCollItemsIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTableRowFormatCollItemsIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier()
            throws RecognitionException {
        TableRowFormatCollItemsIdentifierContext _localctx =
                new TableRowFormatCollItemsIdentifierContext(_ctx, getState());
        enterRule(_localctx, 312, RULE_tableRowFormatCollItemsIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2228);
                match(KW_COLLECTION);
                setState(2229);
                match(KW_ITEMS);
                setState(2230);
                match(KW_TERMINATED);
                setState(2231);
                match(KW_BY);
                setState(2232);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowFormatMapKeysIdentifierContext extends ParserRuleContext {
        public TerminalNode KW_MAP() {
            return getToken(HiveParser.KW_MAP, 0);
        }

        public TerminalNode KW_KEYS() {
            return getToken(HiveParser.KW_KEYS, 0);
        }

        public TerminalNode KW_TERMINATED() {
            return getToken(HiveParser.KW_TERMINATED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableRowFormatMapKeysIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowFormatMapKeysIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowFormatMapKeysIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowFormatMapKeysIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTableRowFormatMapKeysIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier()
            throws RecognitionException {
        TableRowFormatMapKeysIdentifierContext _localctx =
                new TableRowFormatMapKeysIdentifierContext(_ctx, getState());
        enterRule(_localctx, 314, RULE_tableRowFormatMapKeysIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2234);
                match(KW_MAP);
                setState(2235);
                match(KW_KEYS);
                setState(2236);
                match(KW_TERMINATED);
                setState(2237);
                match(KW_BY);
                setState(2238);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowFormatLinesIdentifierContext extends ParserRuleContext {
        public TerminalNode KW_LINES() {
            return getToken(HiveParser.KW_LINES, 0);
        }

        public TerminalNode KW_TERMINATED() {
            return getToken(HiveParser.KW_TERMINATED, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableRowFormatLinesIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowFormatLinesIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowFormatLinesIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowFormatLinesIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTableRowFormatLinesIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier()
            throws RecognitionException {
        TableRowFormatLinesIdentifierContext _localctx =
                new TableRowFormatLinesIdentifierContext(_ctx, getState());
        enterRule(_localctx, 316, RULE_tableRowFormatLinesIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2240);
                match(KW_LINES);
                setState(2241);
                match(KW_TERMINATED);
                setState(2242);
                match(KW_BY);
                setState(2243);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableRowNullFormatContext extends ParserRuleContext {
        public TerminalNode KW_NULL() {
            return getToken(HiveParser.KW_NULL, 0);
        }

        public TerminalNode KW_DEFINED() {
            return getToken(HiveParser.KW_DEFINED, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableRowNullFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableRowNullFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableRowNullFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableRowNullFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableRowNullFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableRowNullFormatContext tableRowNullFormat() throws RecognitionException {
        TableRowNullFormatContext _localctx = new TableRowNullFormatContext(_ctx, getState());
        enterRule(_localctx, 318, RULE_tableRowNullFormat);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2245);
                match(KW_NULL);
                setState(2246);
                match(KW_DEFINED);
                setState(2247);
                match(KW_AS);
                setState(2248);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableFileFormatContext extends ParserRuleContext {
        public TerminalNode KW_STORED() {
            return getToken(HiveParser.KW_STORED, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode KW_INPUTFORMAT() {
            return getToken(HiveParser.KW_INPUTFORMAT, 0);
        }

        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public TerminalNode KW_OUTPUTFORMAT() {
            return getToken(HiveParser.KW_OUTPUTFORMAT, 0);
        }

        public TerminalNode KW_INPUTDRIVER() {
            return getToken(HiveParser.KW_INPUTDRIVER, 0);
        }

        public TerminalNode KW_OUTPUTDRIVER() {
            return getToken(HiveParser.KW_OUTPUTDRIVER, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_SERDEPROPERTIES() {
            return getToken(HiveParser.KW_SERDEPROPERTIES, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TableFileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableFileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableFileFormatContext tableFileFormat() throws RecognitionException {
        TableFileFormatContext _localctx = new TableFileFormatContext(_ctx, getState());
        enterRule(_localctx, 320, RULE_tableFileFormat);
        int _la;
        try {
            setState(2273);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 220, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2250);
                        match(KW_STORED);
                        setState(2251);
                        match(KW_AS);
                        setState(2252);
                        match(KW_INPUTFORMAT);
                        setState(2253);
                        match(StringLiteral);
                        setState(2254);
                        match(KW_OUTPUTFORMAT);
                        setState(2255);
                        match(StringLiteral);
                        setState(2260);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_INPUTDRIVER) {
                            {
                                setState(2256);
                                match(KW_INPUTDRIVER);
                                setState(2257);
                                match(StringLiteral);
                                setState(2258);
                                match(KW_OUTPUTDRIVER);
                                setState(2259);
                                match(StringLiteral);
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2262);
                        match(KW_STORED);
                        setState(2263);
                        match(KW_BY);
                        setState(2264);
                        match(StringLiteral);
                        setState(2268);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 219, _ctx)) {
                            case 1:
                                {
                                    setState(2265);
                                    match(KW_WITH);
                                    setState(2266);
                                    match(KW_SERDEPROPERTIES);
                                    setState(2267);
                                    tableProperties();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2270);
                        match(KW_STORED);
                        setState(2271);
                        match(KW_AS);
                        setState(2272);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableLocationContext extends ParserRuleContext {
        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TableLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableLocationContext tableLocation() throws RecognitionException {
        TableLocationContext _localctx = new TableLocationContext(_ctx, getState());
        enterRule(_localctx, 322, RULE_tableLocation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2275);
                match(KW_LOCATION);
                setState(2276);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameTypeListContext extends ParserRuleContext {
        public List<ColumnNameTypeContext> columnNameType() {
            return getRuleContexts(ColumnNameTypeContext.class);
        }

        public ColumnNameTypeContext columnNameType(int i) {
            return getRuleContext(ColumnNameTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameTypeListContext columnNameTypeList() throws RecognitionException {
        ColumnNameTypeListContext _localctx = new ColumnNameTypeListContext(_ctx, getState());
        enterRule(_localctx, 324, RULE_columnNameTypeList);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2278);
                columnNameType();
                setState(2283);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 221, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2279);
                                match(COMMA);
                                setState(2280);
                                columnNameType();
                            }
                        }
                    }
                    setState(2285);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 221, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameTypeOrConstraintListContext extends ParserRuleContext {
        public List<ColumnNameTypeOrConstraintContext> columnNameTypeOrConstraint() {
            return getRuleContexts(ColumnNameTypeOrConstraintContext.class);
        }

        public ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint(int i) {
            return getRuleContext(ColumnNameTypeOrConstraintContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameTypeOrConstraintListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameTypeOrConstraintList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameTypeOrConstraintList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameTypeOrConstraintList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnNameTypeOrConstraintList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList()
            throws RecognitionException {
        ColumnNameTypeOrConstraintListContext _localctx =
                new ColumnNameTypeOrConstraintListContext(_ctx, getState());
        enterRule(_localctx, 326, RULE_columnNameTypeOrConstraintList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2286);
                columnNameTypeOrConstraint();
                setState(2291);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2287);
                            match(COMMA);
                            setState(2288);
                            columnNameTypeOrConstraint();
                        }
                    }
                    setState(2293);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameColonTypeListContext extends ParserRuleContext {
        public List<ColumnNameColonTypeContext> columnNameColonType() {
            return getRuleContexts(ColumnNameColonTypeContext.class);
        }

        public ColumnNameColonTypeContext columnNameColonType(int i) {
            return getRuleContext(ColumnNameColonTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameColonTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameColonTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameColonTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameColonTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnNameColonTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameColonTypeListContext columnNameColonTypeList()
            throws RecognitionException {
        ColumnNameColonTypeListContext _localctx =
                new ColumnNameColonTypeListContext(_ctx, getState());
        enterRule(_localctx, 328, RULE_columnNameColonTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2294);
                columnNameColonType();
                setState(2299);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2295);
                            match(COMMA);
                            setState(2296);
                            columnNameColonType();
                        }
                    }
                    setState(2301);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameListContext extends ParserRuleContext {
        public List<ColumnNameContext> columnName() {
            return getRuleContexts(ColumnNameContext.class);
        }

        public ColumnNameContext columnName(int i) {
            return getRuleContext(ColumnNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameListContext columnNameList() throws RecognitionException {
        ColumnNameListContext _localctx = new ColumnNameListContext(_ctx, getState());
        enterRule(_localctx, 330, RULE_columnNameList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2302);
                columnName();
                setState(2307);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2303);
                            match(COMMA);
                            setState(2304);
                            columnName();
                        }
                    }
                    setState(2309);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ColumnNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameContext columnName() throws RecognitionException {
        ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
        enterRule(_localctx, 332, RULE_columnName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2310);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExtColumnNameContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(HiveParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(HiveParser.DOT, i);
        }

        public List<TerminalNode> KW_ELEM_TYPE() {
            return getTokens(HiveParser.KW_ELEM_TYPE);
        }

        public TerminalNode KW_ELEM_TYPE(int i) {
            return getToken(HiveParser.KW_ELEM_TYPE, i);
        }

        public List<TerminalNode> KW_KEY_TYPE() {
            return getTokens(HiveParser.KW_KEY_TYPE);
        }

        public TerminalNode KW_KEY_TYPE(int i) {
            return getToken(HiveParser.KW_KEY_TYPE, i);
        }

        public List<TerminalNode> KW_VALUE_TYPE() {
            return getTokens(HiveParser.KW_VALUE_TYPE);
        }

        public TerminalNode KW_VALUE_TYPE(int i) {
            return getToken(HiveParser.KW_VALUE_TYPE, i);
        }

        public ExtColumnNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_extColumnName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExtColumnName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExtColumnName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExtColumnName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExtColumnNameContext extColumnName() throws RecognitionException {
        ExtColumnNameContext _localctx = new ExtColumnNameContext(_ctx, getState());
        enterRule(_localctx, 334, RULE_extColumnName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2312);
                identifier();
                setState(2322);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == DOT) {
                    {
                        {
                            setState(2313);
                            match(DOT);
                            setState(2318);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 225, _ctx)) {
                                case 1:
                                    {
                                        setState(2314);
                                        match(KW_ELEM_TYPE);
                                    }
                                    break;
                                case 2:
                                    {
                                        setState(2315);
                                        match(KW_KEY_TYPE);
                                    }
                                    break;
                                case 3:
                                    {
                                        setState(2316);
                                        match(KW_VALUE_TYPE);
                                    }
                                    break;
                                case 4:
                                    {
                                        setState(2317);
                                        identifier();
                                    }
                                    break;
                            }
                        }
                    }
                    setState(2324);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameOrderListContext extends ParserRuleContext {
        public List<ColumnNameOrderContext> columnNameOrder() {
            return getRuleContexts(ColumnNameOrderContext.class);
        }

        public ColumnNameOrderContext columnNameOrder(int i) {
            return getRuleContext(ColumnNameOrderContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameOrderListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameOrderList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameOrderList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameOrderList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameOrderList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameOrderListContext columnNameOrderList() throws RecognitionException {
        ColumnNameOrderListContext _localctx = new ColumnNameOrderListContext(_ctx, getState());
        enterRule(_localctx, 336, RULE_columnNameOrderList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2325);
                columnNameOrder();
                setState(2330);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2326);
                            match(COMMA);
                            setState(2327);
                            columnNameOrder();
                        }
                    }
                    setState(2332);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnParenthesesListContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ColumnParenthesesListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnParenthesesList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnParenthesesList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnParenthesesList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnParenthesesList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnParenthesesListContext columnParenthesesList() throws RecognitionException {
        ColumnParenthesesListContext _localctx = new ColumnParenthesesListContext(_ctx, getState());
        enterRule(_localctx, 338, RULE_columnParenthesesList);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2333);
                match(LPAREN);
                setState(2334);
                columnNameList();
                setState(2335);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class EnableValidateSpecificationContext extends ParserRuleContext {
        public EnableSpecificationContext enableSpecification() {
            return getRuleContext(EnableSpecificationContext.class, 0);
        }

        public ValidateSpecificationContext validateSpecification() {
            return getRuleContext(ValidateSpecificationContext.class, 0);
        }

        public EnforcedSpecificationContext enforcedSpecification() {
            return getRuleContext(EnforcedSpecificationContext.class, 0);
        }

        public EnableValidateSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_enableValidateSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterEnableValidateSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitEnableValidateSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitEnableValidateSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final EnableValidateSpecificationContext enableValidateSpecification()
            throws RecognitionException {
        EnableValidateSpecificationContext _localctx =
                new EnableValidateSpecificationContext(_ctx, getState());
        enterRule(_localctx, 340, RULE_enableValidateSpecification);
        int _la;
        try {
            setState(2342);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ENABLE:
                case KW_DISABLE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2337);
                        enableSpecification();
                        setState(2339);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_VALIDATE || _la == KW_NOVALIDATE) {
                            {
                                setState(2338);
                                validateSpecification();
                            }
                        }
                    }
                    break;
                case KW_NOT:
                case KW_ENFORCED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2341);
                        enforcedSpecification();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class EnableSpecificationContext extends ParserRuleContext {
        public TerminalNode KW_ENABLE() {
            return getToken(HiveParser.KW_ENABLE, 0);
        }

        public TerminalNode KW_DISABLE() {
            return getToken(HiveParser.KW_DISABLE, 0);
        }

        public EnableSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_enableSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterEnableSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitEnableSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitEnableSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final EnableSpecificationContext enableSpecification() throws RecognitionException {
        EnableSpecificationContext _localctx = new EnableSpecificationContext(_ctx, getState());
        enterRule(_localctx, 342, RULE_enableSpecification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2344);
                _la = _input.LA(1);
                if (!(_la == KW_ENABLE || _la == KW_DISABLE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValidateSpecificationContext extends ParserRuleContext {
        public TerminalNode KW_VALIDATE() {
            return getToken(HiveParser.KW_VALIDATE, 0);
        }

        public TerminalNode KW_NOVALIDATE() {
            return getToken(HiveParser.KW_NOVALIDATE, 0);
        }

        public ValidateSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_validateSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterValidateSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitValidateSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitValidateSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ValidateSpecificationContext validateSpecification() throws RecognitionException {
        ValidateSpecificationContext _localctx = new ValidateSpecificationContext(_ctx, getState());
        enterRule(_localctx, 344, RULE_validateSpecification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2346);
                _la = _input.LA(1);
                if (!(_la == KW_VALIDATE || _la == KW_NOVALIDATE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class EnforcedSpecificationContext extends ParserRuleContext {
        public TerminalNode KW_ENFORCED() {
            return getToken(HiveParser.KW_ENFORCED, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public EnforcedSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_enforcedSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterEnforcedSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitEnforcedSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitEnforcedSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final EnforcedSpecificationContext enforcedSpecification() throws RecognitionException {
        EnforcedSpecificationContext _localctx = new EnforcedSpecificationContext(_ctx, getState());
        enterRule(_localctx, 346, RULE_enforcedSpecification);
        try {
            setState(2351);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ENFORCED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2348);
                        match(KW_ENFORCED);
                    }
                    break;
                case KW_NOT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2349);
                        match(KW_NOT);
                        setState(2350);
                        match(KW_ENFORCED);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RelySpecificationContext extends ParserRuleContext {
        public TerminalNode KW_RELY() {
            return getToken(HiveParser.KW_RELY, 0);
        }

        public TerminalNode KW_NORELY() {
            return getToken(HiveParser.KW_NORELY, 0);
        }

        public RelySpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relySpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRelySpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRelySpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRelySpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RelySpecificationContext relySpecification() throws RecognitionException {
        RelySpecificationContext _localctx = new RelySpecificationContext(_ctx, getState());
        enterRule(_localctx, 348, RULE_relySpecification);
        int _la;
        try {
            setState(2357);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_RELY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2353);
                        match(KW_RELY);
                    }
                    break;
                case EOF:
                case KW_DESC:
                case KW_FROM:
                case KW_SELECT:
                case KW_INSERT:
                case KW_SHOW:
                case KW_MSCK:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_IMPORT:
                case KW_CREATE:
                case KW_ALTER:
                case KW_FIRST:
                case KW_AFTER:
                case KW_DESCRIBE:
                case KW_DROP:
                case KW_COMMENT:
                case KW_MAP:
                case KW_REDUCE:
                case KW_KILL:
                case KW_EXPLAIN:
                case KW_WITH:
                case KW_SET:
                case KW_DELETE:
                case KW_GRANT:
                case KW_REVOKE:
                case KW_LOCK:
                case KW_UNLOCK:
                case KW_ANALYZE:
                case KW_USE:
                case KW_UPDATE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_TRUNCATE:
                case KW_RELOAD:
                case KW_START:
                case KW_COMMIT:
                case KW_ROLLBACK:
                case KW_NORELY:
                case KW_ABORT:
                case KW_MERGE:
                case KW_REPL:
                case COMMA:
                case SEMICOLON:
                case LPAREN:
                case RPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2355);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_NORELY) {
                            {
                                setState(2354);
                                match(KW_NORELY);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateConstraintContext extends ParserRuleContext {
        public PkConstraintContext pkConstraint() {
            return getRuleContext(PkConstraintContext.class, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsCreateContext constraintOptsCreate() {
            return getRuleContext(ConstraintOptsCreateContext.class, 0);
        }

        public CreateConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateConstraintContext createConstraint() throws RecognitionException {
        CreateConstraintContext _localctx = new CreateConstraintContext(_ctx, getState());
        enterRule(_localctx, 350, RULE_createConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2361);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2359);
                        match(KW_CONSTRAINT);
                        setState(2360);
                        identifier();
                    }
                }

                setState(2363);
                pkConstraint();
                setState(2365);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2364);
                        constraintOptsCreate();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterConstraintWithNameContext extends ParserRuleContext {
        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public PkConstraintContext pkConstraint() {
            return getRuleContext(PkConstraintContext.class, 0);
        }

        public ConstraintOptsAlterContext constraintOptsAlter() {
            return getRuleContext(ConstraintOptsAlterContext.class, 0);
        }

        public AlterConstraintWithNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterConstraintWithName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterConstraintWithName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterConstraintWithName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterConstraintWithName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterConstraintWithNameContext alterConstraintWithName()
            throws RecognitionException {
        AlterConstraintWithNameContext _localctx =
                new AlterConstraintWithNameContext(_ctx, getState());
        enterRule(_localctx, 352, RULE_alterConstraintWithName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2367);
                match(KW_CONSTRAINT);
                setState(2368);
                identifier();
                setState(2369);
                pkConstraint();
                setState(2371);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2370);
                        constraintOptsAlter();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PkConstraintContext extends ParserRuleContext {
        public ColumnParenthesesListContext pkCols;

        public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
            return getRuleContext(TableConstraintPrimaryKeyContext.class, 0);
        }

        public ColumnParenthesesListContext columnParenthesesList() {
            return getRuleContext(ColumnParenthesesListContext.class, 0);
        }

        public PkConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pkConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPkConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPkConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPkConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PkConstraintContext pkConstraint() throws RecognitionException {
        PkConstraintContext _localctx = new PkConstraintContext(_ctx, getState());
        enterRule(_localctx, 354, RULE_pkConstraint);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2373);
                tableConstraintPrimaryKey();
                setState(2374);
                ((PkConstraintContext) _localctx).pkCols = columnParenthesesList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CreateForeignKeyContext extends ParserRuleContext {
        public TerminalNode KW_FOREIGN() {
            return getToken(HiveParser.KW_FOREIGN, 0);
        }

        public TerminalNode KW_KEY() {
            return getToken(HiveParser.KW_KEY, 0);
        }

        public List<ColumnParenthesesListContext> columnParenthesesList() {
            return getRuleContexts(ColumnParenthesesListContext.class);
        }

        public ColumnParenthesesListContext columnParenthesesList(int i) {
            return getRuleContext(ColumnParenthesesListContext.class, i);
        }

        public TerminalNode KW_REFERENCES() {
            return getToken(HiveParser.KW_REFERENCES, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsCreateContext constraintOptsCreate() {
            return getRuleContext(ConstraintOptsCreateContext.class, 0);
        }

        public CreateForeignKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createForeignKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCreateForeignKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCreateForeignKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCreateForeignKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CreateForeignKeyContext createForeignKey() throws RecognitionException {
        CreateForeignKeyContext _localctx = new CreateForeignKeyContext(_ctx, getState());
        enterRule(_localctx, 356, RULE_createForeignKey);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2378);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2376);
                        match(KW_CONSTRAINT);
                        setState(2377);
                        identifier();
                    }
                }

                setState(2380);
                match(KW_FOREIGN);
                setState(2381);
                match(KW_KEY);
                setState(2382);
                columnParenthesesList();
                setState(2383);
                match(KW_REFERENCES);
                setState(2384);
                tableName();
                setState(2385);
                columnParenthesesList();
                setState(2387);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2386);
                        constraintOptsCreate();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterForeignKeyWithNameContext extends ParserRuleContext {
        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_FOREIGN() {
            return getToken(HiveParser.KW_FOREIGN, 0);
        }

        public TerminalNode KW_KEY() {
            return getToken(HiveParser.KW_KEY, 0);
        }

        public List<ColumnParenthesesListContext> columnParenthesesList() {
            return getRuleContexts(ColumnParenthesesListContext.class);
        }

        public ColumnParenthesesListContext columnParenthesesList(int i) {
            return getRuleContext(ColumnParenthesesListContext.class, i);
        }

        public TerminalNode KW_REFERENCES() {
            return getToken(HiveParser.KW_REFERENCES, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public ConstraintOptsAlterContext constraintOptsAlter() {
            return getRuleContext(ConstraintOptsAlterContext.class, 0);
        }

        public AlterForeignKeyWithNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterForeignKeyWithName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterForeignKeyWithName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterForeignKeyWithName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterForeignKeyWithName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterForeignKeyWithNameContext alterForeignKeyWithName()
            throws RecognitionException {
        AlterForeignKeyWithNameContext _localctx =
                new AlterForeignKeyWithNameContext(_ctx, getState());
        enterRule(_localctx, 358, RULE_alterForeignKeyWithName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2389);
                match(KW_CONSTRAINT);
                setState(2390);
                identifier();
                setState(2391);
                match(KW_FOREIGN);
                setState(2392);
                match(KW_KEY);
                setState(2393);
                columnParenthesesList();
                setState(2394);
                match(KW_REFERENCES);
                setState(2395);
                tableName();
                setState(2396);
                columnParenthesesList();
                setState(2398);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2397);
                        constraintOptsAlter();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedValueElementContext extends ParserRuleContext {
        public SkewedColumnValuesContext skewedColumnValues() {
            return getRuleContext(SkewedColumnValuesContext.class, 0);
        }

        public SkewedColumnValuePairListContext skewedColumnValuePairList() {
            return getRuleContext(SkewedColumnValuePairListContext.class, 0);
        }

        public SkewedValueElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedValueElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedValueElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedValueElement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedValueElement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedValueElementContext skewedValueElement() throws RecognitionException {
        SkewedValueElementContext _localctx = new SkewedValueElementContext(_ctx, getState());
        enterRule(_localctx, 360, RULE_skewedValueElement);
        try {
            setState(2402);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_TRUE:
                case KW_FALSE:
                case KW_NULL:
                case KW_DATE:
                case KW_TIMESTAMP:
                case KW_TIMESTAMPLOCALTZ:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case StringLiteral:
                case IntegralLiteral:
                case NumberLiteral:
                case Number:
                case CharSetName:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2400);
                        skewedColumnValues();
                    }
                    break;
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2401);
                        skewedColumnValuePairList();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedColumnValuePairListContext extends ParserRuleContext {
        public List<SkewedColumnValuePairContext> skewedColumnValuePair() {
            return getRuleContexts(SkewedColumnValuePairContext.class);
        }

        public SkewedColumnValuePairContext skewedColumnValuePair(int i) {
            return getRuleContext(SkewedColumnValuePairContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SkewedColumnValuePairListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedColumnValuePairList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedColumnValuePairList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedColumnValuePairList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitSkewedColumnValuePairList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedColumnValuePairListContext skewedColumnValuePairList()
            throws RecognitionException {
        SkewedColumnValuePairListContext _localctx =
                new SkewedColumnValuePairListContext(_ctx, getState());
        enterRule(_localctx, 362, RULE_skewedColumnValuePairList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2404);
                skewedColumnValuePair();
                setState(2409);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2405);
                            match(COMMA);
                            setState(2406);
                            skewedColumnValuePair();
                        }
                    }
                    setState(2411);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedColumnValuePairContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public SkewedColumnValuesContext skewedColumnValues() {
            return getRuleContext(SkewedColumnValuesContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public SkewedColumnValuePairContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedColumnValuePair;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedColumnValuePair(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedColumnValuePair(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedColumnValuePair(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedColumnValuePairContext skewedColumnValuePair() throws RecognitionException {
        SkewedColumnValuePairContext _localctx = new SkewedColumnValuePairContext(_ctx, getState());
        enterRule(_localctx, 364, RULE_skewedColumnValuePair);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2412);
                match(LPAREN);
                setState(2413);
                skewedColumnValues();
                setState(2414);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedColumnValuesContext extends ParserRuleContext {
        public List<SkewedColumnValueContext> skewedColumnValue() {
            return getRuleContexts(SkewedColumnValueContext.class);
        }

        public SkewedColumnValueContext skewedColumnValue(int i) {
            return getRuleContext(SkewedColumnValueContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SkewedColumnValuesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedColumnValues;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedColumnValues(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedColumnValues(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedColumnValues(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedColumnValuesContext skewedColumnValues() throws RecognitionException {
        SkewedColumnValuesContext _localctx = new SkewedColumnValuesContext(_ctx, getState());
        enterRule(_localctx, 366, RULE_skewedColumnValues);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2416);
                skewedColumnValue();
                setState(2421);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2417);
                            match(COMMA);
                            setState(2418);
                            skewedColumnValue();
                        }
                    }
                    setState(2423);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedColumnValueContext extends ParserRuleContext {
        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public SkewedColumnValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedColumnValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedColumnValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedColumnValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSkewedColumnValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedColumnValueContext skewedColumnValue() throws RecognitionException {
        SkewedColumnValueContext _localctx = new SkewedColumnValueContext(_ctx, getState());
        enterRule(_localctx, 368, RULE_skewedColumnValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2424);
                constant();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SkewedValueLocationElementContext extends ParserRuleContext {
        public SkewedColumnValueContext skewedColumnValue() {
            return getRuleContext(SkewedColumnValueContext.class, 0);
        }

        public SkewedColumnValuePairContext skewedColumnValuePair() {
            return getRuleContext(SkewedColumnValuePairContext.class, 0);
        }

        public SkewedValueLocationElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewedValueLocationElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSkewedValueLocationElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSkewedValueLocationElement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitSkewedValueLocationElement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SkewedValueLocationElementContext skewedValueLocationElement()
            throws RecognitionException {
        SkewedValueLocationElementContext _localctx =
                new SkewedValueLocationElementContext(_ctx, getState());
        enterRule(_localctx, 370, RULE_skewedValueLocationElement);
        try {
            setState(2428);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_TRUE:
                case KW_FALSE:
                case KW_NULL:
                case KW_DATE:
                case KW_TIMESTAMP:
                case KW_TIMESTAMPLOCALTZ:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case StringLiteral:
                case IntegralLiteral:
                case NumberLiteral:
                case Number:
                case CharSetName:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2426);
                        skewedColumnValue();
                    }
                    break;
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2427);
                        skewedColumnValuePair();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OrderSpecificationContext extends ParserRuleContext {
        public TerminalNode KW_ASC() {
            return getToken(HiveParser.KW_ASC, 0);
        }

        public TerminalNode KW_DESC() {
            return getToken(HiveParser.KW_DESC, 0);
        }

        public OrderSpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderSpecification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterOrderSpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitOrderSpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitOrderSpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final OrderSpecificationContext orderSpecification() throws RecognitionException {
        OrderSpecificationContext _localctx = new OrderSpecificationContext(_ctx, getState());
        enterRule(_localctx, 372, RULE_orderSpecification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2430);
                _la = _input.LA(1);
                if (!(_la == KW_ASC || _la == KW_DESC)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NullOrderingContext extends ParserRuleContext {
        public TerminalNode KW_NULLS() {
            return getToken(HiveParser.KW_NULLS, 0);
        }

        public TerminalNode KW_FIRST() {
            return getToken(HiveParser.KW_FIRST, 0);
        }

        public TerminalNode KW_LAST() {
            return getToken(HiveParser.KW_LAST, 0);
        }

        public NullOrderingContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nullOrdering;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterNullOrdering(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitNullOrdering(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitNullOrdering(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NullOrderingContext nullOrdering() throws RecognitionException {
        NullOrderingContext _localctx = new NullOrderingContext(_ctx, getState());
        enterRule(_localctx, 374, RULE_nullOrdering);
        try {
            setState(2436);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 243, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2432);
                        match(KW_NULLS);
                        setState(2433);
                        match(KW_FIRST);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2434);
                        match(KW_NULLS);
                        setState(2435);
                        match(KW_LAST);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameOrderContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public OrderSpecificationContext orderSpecification() {
            return getRuleContext(OrderSpecificationContext.class, 0);
        }

        public NullOrderingContext nullOrdering() {
            return getRuleContext(NullOrderingContext.class, 0);
        }

        public ColumnNameOrderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameOrder;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameOrder(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameOrder(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameOrder(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameOrderContext columnNameOrder() throws RecognitionException {
        ColumnNameOrderContext _localctx = new ColumnNameOrderContext(_ctx, getState());
        enterRule(_localctx, 376, RULE_columnNameOrder);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2438);
                identifier();
                setState(2440);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ASC || _la == KW_DESC) {
                    {
                        setState(2439);
                        orderSpecification();
                    }
                }

                setState(2443);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NULLS) {
                    {
                        setState(2442);
                        nullOrdering();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameCommentListContext extends ParserRuleContext {
        public List<ColumnNameCommentContext> columnNameComment() {
            return getRuleContexts(ColumnNameCommentContext.class);
        }

        public ColumnNameCommentContext columnNameComment(int i) {
            return getRuleContext(ColumnNameCommentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnNameCommentListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameCommentList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameCommentList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameCommentList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameCommentList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameCommentListContext columnNameCommentList() throws RecognitionException {
        ColumnNameCommentListContext _localctx = new ColumnNameCommentListContext(_ctx, getState());
        enterRule(_localctx, 378, RULE_columnNameCommentList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2445);
                columnNameComment();
                setState(2450);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2446);
                            match(COMMA);
                            setState(2447);
                            columnNameComment();
                        }
                    }
                    setState(2452);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameCommentContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ColumnNameCommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameComment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameCommentContext columnNameComment() throws RecognitionException {
        ColumnNameCommentContext _localctx = new ColumnNameCommentContext(_ctx, getState());
        enterRule(_localctx, 380, RULE_columnNameComment);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2453);
                identifier();
                setState(2456);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2454);
                        match(KW_COMMENT);
                        setState(2455);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnRefOrderContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public OrderSpecificationContext orderSpecification() {
            return getRuleContext(OrderSpecificationContext.class, 0);
        }

        public NullOrderingContext nullOrdering() {
            return getRuleContext(NullOrderingContext.class, 0);
        }

        public ColumnRefOrderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnRefOrder;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnRefOrder(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnRefOrder(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnRefOrder(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnRefOrderContext columnRefOrder() throws RecognitionException {
        ColumnRefOrderContext _localctx = new ColumnRefOrderContext(_ctx, getState());
        enterRule(_localctx, 382, RULE_columnRefOrder);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2458);
                expression(0);
                setState(2460);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 248, _ctx)) {
                    case 1:
                        {
                            setState(2459);
                            orderSpecification();
                        }
                        break;
                }
                setState(2463);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NULLS) {
                    {
                        setState(2462);
                        nullOrdering();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameTypeContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ColumnNameTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameTypeContext columnNameType() throws RecognitionException {
        ColumnNameTypeContext _localctx = new ColumnNameTypeContext(_ctx, getState());
        enterRule(_localctx, 384, RULE_columnNameType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2465);
                identifier();
                setState(2466);
                colType();
                setState(2469);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2467);
                        match(KW_COMMENT);
                        setState(2468);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameTypeOrConstraintContext extends ParserRuleContext {
        public TableConstraintContext tableConstraint() {
            return getRuleContext(TableConstraintContext.class, 0);
        }

        public ColumnNameTypeConstraintContext columnNameTypeConstraint() {
            return getRuleContext(ColumnNameTypeConstraintContext.class, 0);
        }

        public ColumnNameTypeOrConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameTypeOrConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameTypeOrConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameTypeOrConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnNameTypeOrConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint()
            throws RecognitionException {
        ColumnNameTypeOrConstraintContext _localctx =
                new ColumnNameTypeOrConstraintContext(_ctx, getState());
        enterRule(_localctx, 386, RULE_columnNameTypeOrConstraint);
        try {
            setState(2473);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_PRIMARY:
                case KW_FOREIGN:
                case KW_CONSTRAINT:
                    enterOuterAlt(_localctx, 1);
                    {
                        {
                            setState(2471);
                            tableConstraint();
                        }
                    }
                    break;
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 2);
                    {
                        {
                            setState(2472);
                            columnNameTypeConstraint();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableConstraintContext extends ParserRuleContext {
        public CreateForeignKeyContext createForeignKey() {
            return getRuleContext(CreateForeignKeyContext.class, 0);
        }

        public CreateConstraintContext createConstraint() {
            return getRuleContext(CreateConstraintContext.class, 0);
        }

        public TableConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableConstraintContext tableConstraint() throws RecognitionException {
        TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
        enterRule(_localctx, 388, RULE_tableConstraint);
        try {
            setState(2477);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 252, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        {
                            setState(2475);
                            createForeignKey();
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        {
                            setState(2476);
                            createConstraint();
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameTypeConstraintContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public ColumnConstraintContext columnConstraint() {
            return getRuleContext(ColumnConstraintContext.class, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ColumnNameTypeConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameTypeConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameTypeConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameTypeConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnNameTypeConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameTypeConstraintContext columnNameTypeConstraint()
            throws RecognitionException {
        ColumnNameTypeConstraintContext _localctx =
                new ColumnNameTypeConstraintContext(_ctx, getState());
        enterRule(_localctx, 390, RULE_columnNameTypeConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2479);
                identifier();
                setState(2480);
                colType();
                setState(2482);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & 13L) != 0)) {
                    {
                        setState(2481);
                        columnConstraint();
                    }
                }

                setState(2486);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2484);
                        match(KW_COMMENT);
                        setState(2485);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnConstraintContext extends ParserRuleContext {
        public ForeignKeyConstraintContext foreignKeyConstraint() {
            return getRuleContext(ForeignKeyConstraintContext.class, 0);
        }

        public ColConstraintContext colConstraint() {
            return getRuleContext(ColConstraintContext.class, 0);
        }

        public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnConstraintContext columnConstraint() throws RecognitionException {
        ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
        enterRule(_localctx, 392, RULE_columnConstraint);
        try {
            setState(2490);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 255, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        {
                            setState(2488);
                            foreignKeyConstraint();
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        {
                            setState(2489);
                            colConstraint();
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ForeignKeyConstraintContext extends ParserRuleContext {
        public TerminalNode KW_REFERENCES() {
            return getToken(HiveParser.KW_REFERENCES, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameContext columnName() {
            return getRuleContext(ColumnNameContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsCreateContext constraintOptsCreate() {
            return getRuleContext(ConstraintOptsCreateContext.class, 0);
        }

        public ForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_foreignKeyConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterForeignKeyConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitForeignKeyConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitForeignKeyConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ForeignKeyConstraintContext foreignKeyConstraint() throws RecognitionException {
        ForeignKeyConstraintContext _localctx = new ForeignKeyConstraintContext(_ctx, getState());
        enterRule(_localctx, 394, RULE_foreignKeyConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2494);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2492);
                        match(KW_CONSTRAINT);
                        setState(2493);
                        identifier();
                    }
                }

                setState(2496);
                match(KW_REFERENCES);
                setState(2497);
                tableName();
                setState(2498);
                match(LPAREN);
                setState(2499);
                columnName();
                setState(2500);
                match(RPAREN);
                setState(2502);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2501);
                        constraintOptsCreate();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColConstraintContext extends ParserRuleContext {
        public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
            return getRuleContext(TableConstraintPrimaryKeyContext.class, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsCreateContext constraintOptsCreate() {
            return getRuleContext(ConstraintOptsCreateContext.class, 0);
        }

        public ColConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColConstraintContext colConstraint() throws RecognitionException {
        ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
        enterRule(_localctx, 396, RULE_colConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2506);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2504);
                        match(KW_CONSTRAINT);
                        setState(2505);
                        identifier();
                    }
                }

                setState(2508);
                tableConstraintPrimaryKey();
                setState(2510);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2509);
                        constraintOptsCreate();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterColumnConstraintContext extends ParserRuleContext {
        public AlterForeignKeyConstraintContext alterForeignKeyConstraint() {
            return getRuleContext(AlterForeignKeyConstraintContext.class, 0);
        }

        public AlterColConstraintContext alterColConstraint() {
            return getRuleContext(AlterColConstraintContext.class, 0);
        }

        public AlterColumnConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterColumnConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterColumnConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterColumnConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAlterColumnConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterColumnConstraintContext alterColumnConstraint() throws RecognitionException {
        AlterColumnConstraintContext _localctx = new AlterColumnConstraintContext(_ctx, getState());
        enterRule(_localctx, 398, RULE_alterColumnConstraint);
        try {
            setState(2514);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 260, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        {
                            setState(2512);
                            alterForeignKeyConstraint();
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        {
                            setState(2513);
                            alterColConstraint();
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterForeignKeyConstraintContext extends ParserRuleContext {
        public TerminalNode KW_REFERENCES() {
            return getToken(HiveParser.KW_REFERENCES, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameContext columnName() {
            return getRuleContext(ColumnNameContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsAlterContext constraintOptsAlter() {
            return getRuleContext(ConstraintOptsAlterContext.class, 0);
        }

        public AlterForeignKeyConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterForeignKeyConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterForeignKeyConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterForeignKeyConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAlterForeignKeyConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterForeignKeyConstraintContext alterForeignKeyConstraint()
            throws RecognitionException {
        AlterForeignKeyConstraintContext _localctx =
                new AlterForeignKeyConstraintContext(_ctx, getState());
        enterRule(_localctx, 400, RULE_alterForeignKeyConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2518);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2516);
                        match(KW_CONSTRAINT);
                        setState(2517);
                        identifier();
                    }
                }

                setState(2520);
                match(KW_REFERENCES);
                setState(2521);
                tableName();
                setState(2522);
                match(LPAREN);
                setState(2523);
                columnName();
                setState(2524);
                match(RPAREN);
                setState(2526);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2525);
                        constraintOptsAlter();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AlterColConstraintContext extends ParserRuleContext {
        public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
            return getRuleContext(TableConstraintPrimaryKeyContext.class, 0);
        }

        public TerminalNode KW_CONSTRAINT() {
            return getToken(HiveParser.KW_CONSTRAINT, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ConstraintOptsAlterContext constraintOptsAlter() {
            return getRuleContext(ConstraintOptsAlterContext.class, 0);
        }

        public AlterColConstraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterColConstraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAlterColConstraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAlterColConstraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAlterColConstraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AlterColConstraintContext alterColConstraint() throws RecognitionException {
        AlterColConstraintContext _localctx = new AlterColConstraintContext(_ctx, getState());
        enterRule(_localctx, 402, RULE_alterColConstraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2530);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CONSTRAINT) {
                    {
                        setState(2528);
                        match(KW_CONSTRAINT);
                        setState(2529);
                        identifier();
                    }
                }

                setState(2532);
                tableConstraintPrimaryKey();
                setState(2534);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT || _la == KW_ENABLE || _la == KW_DISABLE || _la == KW_ENFORCED) {
                    {
                        setState(2533);
                        constraintOptsAlter();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableConstraintPrimaryKeyContext extends ParserRuleContext {
        public TerminalNode KW_PRIMARY() {
            return getToken(HiveParser.KW_PRIMARY, 0);
        }

        public TerminalNode KW_KEY() {
            return getToken(HiveParser.KW_KEY, 0);
        }

        public TableConstraintPrimaryKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableConstraintPrimaryKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableConstraintPrimaryKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableConstraintPrimaryKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTableConstraintPrimaryKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableConstraintPrimaryKeyContext tableConstraintPrimaryKey()
            throws RecognitionException {
        TableConstraintPrimaryKeyContext _localctx =
                new TableConstraintPrimaryKeyContext(_ctx, getState());
        enterRule(_localctx, 404, RULE_tableConstraintPrimaryKey);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2536);
                match(KW_PRIMARY);
                setState(2537);
                match(KW_KEY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstraintOptsCreateContext extends ParserRuleContext {
        public EnableValidateSpecificationContext enableValidateSpecification() {
            return getRuleContext(EnableValidateSpecificationContext.class, 0);
        }

        public RelySpecificationContext relySpecification() {
            return getRuleContext(RelySpecificationContext.class, 0);
        }

        public ConstraintOptsCreateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constraintOptsCreate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterConstraintOptsCreate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitConstraintOptsCreate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitConstraintOptsCreate(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstraintOptsCreateContext constraintOptsCreate() throws RecognitionException {
        ConstraintOptsCreateContext _localctx = new ConstraintOptsCreateContext(_ctx, getState());
        enterRule(_localctx, 406, RULE_constraintOptsCreate);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2539);
                enableValidateSpecification();
                setState(2540);
                relySpecification();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstraintOptsAlterContext extends ParserRuleContext {
        public EnableValidateSpecificationContext enableValidateSpecification() {
            return getRuleContext(EnableValidateSpecificationContext.class, 0);
        }

        public RelySpecificationContext relySpecification() {
            return getRuleContext(RelySpecificationContext.class, 0);
        }

        public ConstraintOptsAlterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constraintOptsAlter;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterConstraintOptsAlter(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitConstraintOptsAlter(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitConstraintOptsAlter(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstraintOptsAlterContext constraintOptsAlter() throws RecognitionException {
        ConstraintOptsAlterContext _localctx = new ConstraintOptsAlterContext(_ctx, getState());
        enterRule(_localctx, 408, RULE_constraintOptsAlter);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2542);
                enableValidateSpecification();
                setState(2543);
                relySpecification();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnNameColonTypeContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(HiveParser.COLON, 0);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public ColumnNameColonTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnNameColonType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnNameColonType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnNameColonType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnNameColonType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnNameColonTypeContext columnNameColonType() throws RecognitionException {
        ColumnNameColonTypeContext _localctx = new ColumnNameColonTypeContext(_ctx, getState());
        enterRule(_localctx, 410, RULE_columnNameColonType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2545);
                identifier();
                setState(2546);
                match(COLON);
                setState(2547);
                colType();
                setState(2550);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_COMMENT) {
                    {
                        setState(2548);
                        match(KW_COMMENT);
                        setState(2549);
                        match(StringLiteral);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColTypeContext extends ParserRuleContext {
        public Type_db_colContext type_db_col() {
            return getRuleContext(Type_db_colContext.class, 0);
        }

        public ColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColTypeContext colType() throws RecognitionException {
        ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
        enterRule(_localctx, 412, RULE_colType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2552);
                type_db_col();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColTypeListContext extends ParserRuleContext {
        public List<ColTypeContext> colType() {
            return getRuleContexts(ColTypeContext.class);
        }

        public ColTypeContext colType(int i) {
            return getRuleContext(ColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColTypeListContext colTypeList() throws RecognitionException {
        ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
        enterRule(_localctx, 414, RULE_colTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2554);
                colType();
                setState(2559);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2555);
                            match(COMMA);
                            setState(2556);
                            colType();
                        }
                    }
                    setState(2561);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Type_db_colContext extends ParserRuleContext {
        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public ListTypeContext listType() {
            return getRuleContext(ListTypeContext.class, 0);
        }

        public StructTypeContext structType() {
            return getRuleContext(StructTypeContext.class, 0);
        }

        public MapTypeContext mapType() {
            return getRuleContext(MapTypeContext.class, 0);
        }

        public UnionTypeContext unionType() {
            return getRuleContext(UnionTypeContext.class, 0);
        }

        public Type_db_colContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_type_db_col;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterType_db_col(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitType_db_col(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitType_db_col(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Type_db_colContext type_db_col() throws RecognitionException {
        Type_db_colContext _localctx = new Type_db_colContext(_ctx, getState());
        enterRule(_localctx, 416, RULE_type_db_col);
        try {
            setState(2567);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_BOOLEAN:
                case KW_TINYINT:
                case KW_SMALLINT:
                case KW_INT:
                case KW_BIGINT:
                case KW_FLOAT:
                case KW_DOUBLE:
                case KW_DATE:
                case KW_DATETIME:
                case KW_TIMESTAMP:
                case KW_TIMESTAMPLOCALTZ:
                case KW_DECIMAL:
                case KW_STRING:
                case KW_CHAR:
                case KW_VARCHAR:
                case KW_BINARY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2562);
                        primitiveType();
                    }
                    break;
                case KW_ARRAY:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2563);
                        listType();
                    }
                    break;
                case KW_STRUCT:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2564);
                        structType();
                    }
                    break;
                case KW_MAP:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2565);
                        mapType();
                    }
                    break;
                case KW_UNIONTYPE:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2566);
                        unionType();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrimitiveTypeContext extends ParserRuleContext {
        public TerminalNode KW_TINYINT() {
            return getToken(HiveParser.KW_TINYINT, 0);
        }

        public TerminalNode KW_SMALLINT() {
            return getToken(HiveParser.KW_SMALLINT, 0);
        }

        public TerminalNode KW_INT() {
            return getToken(HiveParser.KW_INT, 0);
        }

        public TerminalNode KW_BIGINT() {
            return getToken(HiveParser.KW_BIGINT, 0);
        }

        public TerminalNode KW_BOOLEAN() {
            return getToken(HiveParser.KW_BOOLEAN, 0);
        }

        public TerminalNode KW_FLOAT() {
            return getToken(HiveParser.KW_FLOAT, 0);
        }

        public TerminalNode KW_DOUBLE() {
            return getToken(HiveParser.KW_DOUBLE, 0);
        }

        public TerminalNode KW_PRECISION() {
            return getToken(HiveParser.KW_PRECISION, 0);
        }

        public TerminalNode KW_DATE() {
            return getToken(HiveParser.KW_DATE, 0);
        }

        public TerminalNode KW_DATETIME() {
            return getToken(HiveParser.KW_DATETIME, 0);
        }

        public TerminalNode KW_TIMESTAMP() {
            return getToken(HiveParser.KW_TIMESTAMP, 0);
        }

        public TerminalNode KW_TIMESTAMPLOCALTZ() {
            return getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_LOCAL() {
            return getToken(HiveParser.KW_LOCAL, 0);
        }

        public TerminalNode KW_TIME() {
            return getToken(HiveParser.KW_TIME, 0);
        }

        public TerminalNode KW_ZONE() {
            return getToken(HiveParser.KW_ZONE, 0);
        }

        public TerminalNode KW_STRING() {
            return getToken(HiveParser.KW_STRING, 0);
        }

        public TerminalNode KW_BINARY() {
            return getToken(HiveParser.KW_BINARY, 0);
        }

        public TerminalNode KW_DECIMAL() {
            return getToken(HiveParser.KW_DECIMAL, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<TerminalNode> Number() {
            return getTokens(HiveParser.Number);
        }

        public TerminalNode Number(int i) {
            return getToken(HiveParser.Number, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode COMMA() {
            return getToken(HiveParser.COMMA, 0);
        }

        public TerminalNode KW_VARCHAR() {
            return getToken(HiveParser.KW_VARCHAR, 0);
        }

        public TerminalNode KW_CHAR() {
            return getToken(HiveParser.KW_CHAR, 0);
        }

        public PrimitiveTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_primitiveType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrimitiveType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrimitiveType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrimitiveType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrimitiveTypeContext primitiveType() throws RecognitionException {
        PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, getState());
        enterRule(_localctx, 418, RULE_primitiveType);
        int _la;
        try {
            setState(2608);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 271, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2569);
                        match(KW_TINYINT);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2570);
                        match(KW_SMALLINT);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2571);
                        match(KW_INT);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2572);
                        match(KW_BIGINT);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2573);
                        match(KW_BOOLEAN);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2574);
                        match(KW_FLOAT);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(2575);
                        match(KW_DOUBLE);
                        setState(2577);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_PRECISION) {
                            {
                                setState(2576);
                                match(KW_PRECISION);
                            }
                        }
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(2579);
                        match(KW_DATE);
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(2580);
                        match(KW_DATETIME);
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(2581);
                        match(KW_TIMESTAMP);
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(2582);
                        match(KW_TIMESTAMPLOCALTZ);
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(2583);
                        match(KW_TIMESTAMP);
                        setState(2584);
                        match(KW_WITH);
                        setState(2585);
                        match(KW_LOCAL);
                        setState(2586);
                        match(KW_TIME);
                        setState(2587);
                        match(KW_ZONE);
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(2588);
                        match(KW_STRING);
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(2589);
                        match(KW_BINARY);
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(2590);
                        match(KW_DECIMAL);
                        setState(2598);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 270, _ctx)) {
                            case 1:
                                {
                                    setState(2591);
                                    match(LPAREN);
                                    setState(2592);
                                    match(Number);
                                    setState(2595);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == COMMA) {
                                        {
                                            setState(2593);
                                            match(COMMA);
                                            setState(2594);
                                            match(Number);
                                        }
                                    }

                                    setState(2597);
                                    match(RPAREN);
                                }
                                break;
                        }
                    }
                    break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(2600);
                        match(KW_VARCHAR);
                        setState(2601);
                        match(LPAREN);
                        setState(2602);
                        match(Number);
                        setState(2603);
                        match(RPAREN);
                    }
                    break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(2604);
                        match(KW_CHAR);
                        setState(2605);
                        match(LPAREN);
                        setState(2606);
                        match(Number);
                        setState(2607);
                        match(RPAREN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ListTypeContext extends ParserRuleContext {
        public TerminalNode KW_ARRAY() {
            return getToken(HiveParser.KW_ARRAY, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public Type_db_colContext type_db_col() {
            return getRuleContext(Type_db_colContext.class, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public ListTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_listType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterListType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitListType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitListType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ListTypeContext listType() throws RecognitionException {
        ListTypeContext _localctx = new ListTypeContext(_ctx, getState());
        enterRule(_localctx, 420, RULE_listType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2610);
                match(KW_ARRAY);
                setState(2611);
                match(LESSTHAN);
                setState(2612);
                type_db_col();
                setState(2613);
                match(GREATERTHAN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StructTypeContext extends ParserRuleContext {
        public TerminalNode KW_STRUCT() {
            return getToken(HiveParser.KW_STRUCT, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public ColumnNameColonTypeListContext columnNameColonTypeList() {
            return getRuleContext(ColumnNameColonTypeListContext.class, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public StructTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_structType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStructType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStructType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStructType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StructTypeContext structType() throws RecognitionException {
        StructTypeContext _localctx = new StructTypeContext(_ctx, getState());
        enterRule(_localctx, 422, RULE_structType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2615);
                match(KW_STRUCT);
                setState(2616);
                match(LESSTHAN);
                setState(2617);
                columnNameColonTypeList();
                setState(2618);
                match(GREATERTHAN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MapTypeContext extends ParserRuleContext {
        public TerminalNode KW_MAP() {
            return getToken(HiveParser.KW_MAP, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public TerminalNode COMMA() {
            return getToken(HiveParser.COMMA, 0);
        }

        public Type_db_colContext type_db_col() {
            return getRuleContext(Type_db_colContext.class, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public MapTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_mapType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterMapType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitMapType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitMapType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MapTypeContext mapType() throws RecognitionException {
        MapTypeContext _localctx = new MapTypeContext(_ctx, getState());
        enterRule(_localctx, 424, RULE_mapType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2620);
                match(KW_MAP);
                setState(2621);
                match(LESSTHAN);
                setState(2622);
                primitiveType();
                setState(2623);
                match(COMMA);
                setState(2624);
                type_db_col();
                setState(2625);
                match(GREATERTHAN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UnionTypeContext extends ParserRuleContext {
        public TerminalNode KW_UNIONTYPE() {
            return getToken(HiveParser.KW_UNIONTYPE, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public UnionTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unionType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUnionType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUnionType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUnionType(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UnionTypeContext unionType() throws RecognitionException {
        UnionTypeContext _localctx = new UnionTypeContext(_ctx, getState());
        enterRule(_localctx, 426, RULE_unionType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2627);
                match(KW_UNIONTYPE);
                setState(2628);
                match(LESSTHAN);
                setState(2629);
                colTypeList();
                setState(2630);
                match(GREATERTHAN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetOperatorContext extends ParserRuleContext {
        public TerminalNode KW_UNION() {
            return getToken(HiveParser.KW_UNION, 0);
        }

        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public TerminalNode KW_DISTINCT() {
            return getToken(HiveParser.KW_DISTINCT, 0);
        }

        public TerminalNode KW_INTERSECT() {
            return getToken(HiveParser.KW_INTERSECT, 0);
        }

        public TerminalNode KW_EXCEPT() {
            return getToken(HiveParser.KW_EXCEPT, 0);
        }

        public TerminalNode KW_MINUS() {
            return getToken(HiveParser.KW_MINUS, 0);
        }

        public SetOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSetOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSetOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSetOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetOperatorContext setOperator() throws RecognitionException {
        SetOperatorContext _localctx = new SetOperatorContext(_ctx, getState());
        enterRule(_localctx, 428, RULE_setOperator);
        int _la;
        try {
            setState(2656);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 276, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2632);
                        match(KW_UNION);
                        setState(2633);
                        match(KW_ALL);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2634);
                        match(KW_UNION);
                        setState(2636);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTINCT) {
                            {
                                setState(2635);
                                match(KW_DISTINCT);
                            }
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2638);
                        match(KW_INTERSECT);
                        setState(2639);
                        match(KW_ALL);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2640);
                        match(KW_INTERSECT);
                        setState(2642);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTINCT) {
                            {
                                setState(2641);
                                match(KW_DISTINCT);
                            }
                        }
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2644);
                        match(KW_EXCEPT);
                        setState(2645);
                        match(KW_ALL);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2646);
                        match(KW_EXCEPT);
                        setState(2648);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTINCT) {
                            {
                                setState(2647);
                                match(KW_DISTINCT);
                            }
                        }
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(2650);
                        match(KW_MINUS);
                        setState(2651);
                        match(KW_ALL);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(2652);
                        match(KW_MINUS);
                        setState(2654);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTINCT) {
                            {
                                setState(2653);
                                match(KW_DISTINCT);
                            }
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryStatementExpressionContext extends ParserRuleContext {
        public QueryStatementExpressionBodyContext queryStatementExpressionBody() {
            return getRuleContext(QueryStatementExpressionBodyContext.class, 0);
        }

        public WithClauseContext withClause() {
            return getRuleContext(WithClauseContext.class, 0);
        }

        public QueryStatementExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryStatementExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterQueryStatementExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitQueryStatementExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitQueryStatementExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryStatementExpressionContext queryStatementExpression()
            throws RecognitionException {
        QueryStatementExpressionContext _localctx =
                new QueryStatementExpressionContext(_ctx, getState());
        enterRule(_localctx, 430, RULE_queryStatementExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2659);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WITH) {
                    {
                        setState(2658);
                        withClause();
                    }
                }

                setState(2661);
                queryStatementExpressionBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class QueryStatementExpressionBodyContext extends ParserRuleContext {
        public FromStatementContext fromStatement() {
            return getRuleContext(FromStatementContext.class, 0);
        }

        public RegularBodyContext regularBody() {
            return getRuleContext(RegularBodyContext.class, 0);
        }

        public QueryStatementExpressionBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryStatementExpressionBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterQueryStatementExpressionBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitQueryStatementExpressionBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitQueryStatementExpressionBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final QueryStatementExpressionBodyContext queryStatementExpressionBody()
            throws RecognitionException {
        QueryStatementExpressionBodyContext _localctx =
                new QueryStatementExpressionBodyContext(_ctx, getState());
        enterRule(_localctx, 432, RULE_queryStatementExpressionBody);
        try {
            setState(2665);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_FROM:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2663);
                        fromStatement();
                    }
                    break;
                case KW_SELECT:
                case KW_INSERT:
                case KW_MAP:
                case KW_REDUCE:
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2664);
                        regularBody();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WithClauseContext extends ParserRuleContext {
        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public List<CteStatementContext> cteStatement() {
            return getRuleContexts(CteStatementContext.class);
        }

        public CteStatementContext cteStatement(int i) {
            return getRuleContext(CteStatementContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public WithClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_withClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWithClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWithClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWithClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WithClauseContext withClause() throws RecognitionException {
        WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
        enterRule(_localctx, 434, RULE_withClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2667);
                match(KW_WITH);
                setState(2668);
                cteStatement();
                setState(2673);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2669);
                            match(COMMA);
                            setState(2670);
                            cteStatement();
                        }
                    }
                    setState(2675);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CteStatementContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public QueryStatementExpressionContext queryStatementExpression() {
            return getRuleContext(QueryStatementExpressionContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public CteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cteStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCteStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCteStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCteStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CteStatementContext cteStatement() throws RecognitionException {
        CteStatementContext _localctx = new CteStatementContext(_ctx, getState());
        enterRule(_localctx, 436, RULE_cteStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2676);
                identifier();
                setState(2677);
                match(KW_AS);
                setState(2678);
                match(LPAREN);
                setState(2679);
                queryStatementExpression();
                setState(2680);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromStatementContext extends ParserRuleContext {
        public List<SingleFromStatementContext> singleFromStatement() {
            return getRuleContexts(SingleFromStatementContext.class);
        }

        public SingleFromStatementContext singleFromStatement(int i) {
            return getRuleContext(SingleFromStatementContext.class, i);
        }

        public List<SetOperatorContext> setOperator() {
            return getRuleContexts(SetOperatorContext.class);
        }

        public SetOperatorContext setOperator(int i) {
            return getRuleContext(SetOperatorContext.class, i);
        }

        public FromStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFromStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFromStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFromStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromStatementContext fromStatement() throws RecognitionException {
        FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
        enterRule(_localctx, 438, RULE_fromStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                {
                    setState(2682);
                    singleFromStatement();
                }
                setState(2688);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == KW_UNION
                        || _la == KW_EXCEPT
                        || _la == KW_MINUS
                        || _la == KW_INTERSECT) {
                    {
                        {
                            setState(2683);
                            setOperator();
                            setState(2684);
                            singleFromStatement();
                        }
                    }
                    setState(2690);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SingleFromStatementContext extends ParserRuleContext {
        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<BodyContext> body() {
            return getRuleContexts(BodyContext.class);
        }

        public BodyContext body(int i) {
            return getRuleContext(BodyContext.class, i);
        }

        public SingleFromStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleFromStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSingleFromStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSingleFromStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSingleFromStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SingleFromStatementContext singleFromStatement() throws RecognitionException {
        SingleFromStatementContext _localctx = new SingleFromStatementContext(_ctx, getState());
        enterRule(_localctx, 440, RULE_singleFromStatement);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2691);
                fromClause();
                setState(2693);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(2692);
                                    body();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2695);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 281, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RegularBodyContext extends ParserRuleContext {
        public InsertClauseContext insertClause() {
            return getRuleContext(InsertClauseContext.class, 0);
        }

        public SelectStatementContext selectStatement() {
            return getRuleContext(SelectStatementContext.class, 0);
        }

        public ValuesClauseContext valuesClause() {
            return getRuleContext(ValuesClauseContext.class, 0);
        }

        public RegularBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_regularBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRegularBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRegularBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRegularBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RegularBodyContext regularBody() throws RecognitionException {
        RegularBodyContext _localctx = new RegularBodyContext(_ctx, getState());
        enterRule(_localctx, 442, RULE_regularBody);
        try {
            setState(2703);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_INSERT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2697);
                        insertClause();
                        setState(2700);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case KW_SELECT:
                            case KW_MAP:
                            case KW_REDUCE:
                            case LPAREN:
                                {
                                    setState(2698);
                                    selectStatement();
                                }
                                break;
                            case KW_VALUES:
                                {
                                    setState(2699);
                                    valuesClause();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case KW_SELECT:
                case KW_MAP:
                case KW_REDUCE:
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2702);
                        selectStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AtomSelectStatementContext extends ParserRuleContext {
        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public GroupByClauseContext groupByClause() {
            return getRuleContext(GroupByClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public Window_clauseContext window_clause() {
            return getRuleContext(Window_clauseContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public SelectStatementContext selectStatement() {
            return getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public AtomSelectStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_atomSelectStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAtomSelectStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAtomSelectStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAtomSelectStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AtomSelectStatementContext atomSelectStatement() throws RecognitionException {
        AtomSelectStatementContext _localctx = new AtomSelectStatementContext(_ctx, getState());
        enterRule(_localctx, 444, RULE_atomSelectStatement);
        int _la;
        try {
            setState(2725);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_SELECT:
                case KW_MAP:
                case KW_REDUCE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2705);
                        selectClause();
                        setState(2707);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 284, _ctx)) {
                            case 1:
                                {
                                    setState(2706);
                                    fromClause();
                                }
                                break;
                        }
                        setState(2710);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WHERE) {
                            {
                                setState(2709);
                                whereClause();
                            }
                        }

                        setState(2713);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_GROUP) {
                            {
                                setState(2712);
                                groupByClause();
                            }
                        }

                        setState(2716);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_HAVING) {
                            {
                                setState(2715);
                                havingClause();
                            }
                        }

                        setState(2719);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WINDOW) {
                            {
                                setState(2718);
                                window_clause();
                            }
                        }
                    }
                    break;
                case LPAREN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2721);
                        match(LPAREN);
                        setState(2722);
                        selectStatement();
                        setState(2723);
                        match(RPAREN);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectStatementContext extends ParserRuleContext {
        public AtomSelectStatementContext atomSelectStatement() {
            return getRuleContext(AtomSelectStatementContext.class, 0);
        }

        public SetOpSelectStatementContext setOpSelectStatement() {
            return getRuleContext(SetOpSelectStatementContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return getRuleContext(OrderByClauseContext.class, 0);
        }

        public ClusterByClauseContext clusterByClause() {
            return getRuleContext(ClusterByClauseContext.class, 0);
        }

        public DistributeByClauseContext distributeByClause() {
            return getRuleContext(DistributeByClauseContext.class, 0);
        }

        public SortByClauseContext sortByClause() {
            return getRuleContext(SortByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return getRuleContext(LimitClauseContext.class, 0);
        }

        public SelectStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectStatementContext selectStatement() throws RecognitionException {
        SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
        enterRule(_localctx, 446, RULE_selectStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2727);
                atomSelectStatement();
                setState(2729);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_UNION || _la == KW_EXCEPT || _la == KW_MINUS || _la == KW_INTERSECT) {
                    {
                        setState(2728);
                        setOpSelectStatement();
                    }
                }

                setState(2732);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ORDER) {
                    {
                        setState(2731);
                        orderByClause();
                    }
                }

                setState(2735);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_CLUSTER) {
                    {
                        setState(2734);
                        clusterByClause();
                    }
                }

                setState(2738);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_DISTRIBUTE) {
                    {
                        setState(2737);
                        distributeByClause();
                    }
                }

                setState(2741);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_SORT) {
                    {
                        setState(2740);
                        sortByClause();
                    }
                }

                setState(2744);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_LIMIT) {
                    {
                        setState(2743);
                        limitClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetOpSelectStatementContext extends ParserRuleContext {
        public List<SetOperatorContext> setOperator() {
            return getRuleContexts(SetOperatorContext.class);
        }

        public SetOperatorContext setOperator(int i) {
            return getRuleContext(SetOperatorContext.class, i);
        }

        public List<AtomSelectStatementContext> atomSelectStatement() {
            return getRuleContexts(AtomSelectStatementContext.class);
        }

        public AtomSelectStatementContext atomSelectStatement(int i) {
            return getRuleContext(AtomSelectStatementContext.class, i);
        }

        public SetOpSelectStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setOpSelectStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSetOpSelectStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSetOpSelectStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSetOpSelectStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetOpSelectStatementContext setOpSelectStatement() throws RecognitionException {
        SetOpSelectStatementContext _localctx = new SetOpSelectStatementContext(_ctx, getState());
        enterRule(_localctx, 448, RULE_setOpSelectStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2749);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(2746);
                            setOperator();
                            setState(2747);
                            atomSelectStatement();
                        }
                    }
                    setState(2751);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == KW_UNION
                        || _la == KW_EXCEPT
                        || _la == KW_MINUS
                        || _la == KW_INTERSECT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectStatementWithCTEContext extends ParserRuleContext {
        public SelectStatementContext selectStatement() {
            return getRuleContext(SelectStatementContext.class, 0);
        }

        public WithClauseContext withClause() {
            return getRuleContext(WithClauseContext.class, 0);
        }

        public SelectStatementWithCTEContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectStatementWithCTE;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectStatementWithCTE(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectStatementWithCTE(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectStatementWithCTE(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectStatementWithCTEContext selectStatementWithCTE()
            throws RecognitionException {
        SelectStatementWithCTEContext _localctx =
                new SelectStatementWithCTEContext(_ctx, getState());
        enterRule(_localctx, 450, RULE_selectStatementWithCTE);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2754);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WITH) {
                    {
                        setState(2753);
                        withClause();
                    }
                }

                setState(2756);
                selectStatement();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BodyContext extends ParserRuleContext {
        public InsertClauseContext insertClause() {
            return getRuleContext(InsertClauseContext.class, 0);
        }

        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public LateralViewContext lateralView() {
            return getRuleContext(LateralViewContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public GroupByClauseContext groupByClause() {
            return getRuleContext(GroupByClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public Window_clauseContext window_clause() {
            return getRuleContext(Window_clauseContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return getRuleContext(OrderByClauseContext.class, 0);
        }

        public ClusterByClauseContext clusterByClause() {
            return getRuleContext(ClusterByClauseContext.class, 0);
        }

        public DistributeByClauseContext distributeByClause() {
            return getRuleContext(DistributeByClauseContext.class, 0);
        }

        public SortByClauseContext sortByClause() {
            return getRuleContext(SortByClauseContext.class, 0);
        }

        public LimitClauseContext limitClause() {
            return getRuleContext(LimitClauseContext.class, 0);
        }

        public BodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_body;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BodyContext body() throws RecognitionException {
        BodyContext _localctx = new BodyContext(_ctx, getState());
        enterRule(_localctx, 452, RULE_body);
        int _la;
        try {
            setState(2821);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_INSERT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2758);
                        insertClause();
                        setState(2759);
                        selectClause();
                        setState(2761);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LATERAL || _la == COMMA) {
                            {
                                setState(2760);
                                lateralView();
                            }
                        }

                        setState(2764);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WHERE) {
                            {
                                setState(2763);
                                whereClause();
                            }
                        }

                        setState(2767);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_GROUP) {
                            {
                                setState(2766);
                                groupByClause();
                            }
                        }

                        setState(2770);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_HAVING) {
                            {
                                setState(2769);
                                havingClause();
                            }
                        }

                        setState(2773);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WINDOW) {
                            {
                                setState(2772);
                                window_clause();
                            }
                        }

                        setState(2776);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_ORDER) {
                            {
                                setState(2775);
                                orderByClause();
                            }
                        }

                        setState(2779);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_CLUSTER) {
                            {
                                setState(2778);
                                clusterByClause();
                            }
                        }

                        setState(2782);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTRIBUTE) {
                            {
                                setState(2781);
                                distributeByClause();
                            }
                        }

                        setState(2785);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_SORT) {
                            {
                                setState(2784);
                                sortByClause();
                            }
                        }

                        setState(2788);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LIMIT) {
                            {
                                setState(2787);
                                limitClause();
                            }
                        }
                    }
                    break;
                case KW_SELECT:
                case KW_MAP:
                case KW_REDUCE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2790);
                        selectClause();
                        setState(2792);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LATERAL || _la == COMMA) {
                            {
                                setState(2791);
                                lateralView();
                            }
                        }

                        setState(2795);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WHERE) {
                            {
                                setState(2794);
                                whereClause();
                            }
                        }

                        setState(2798);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_GROUP) {
                            {
                                setState(2797);
                                groupByClause();
                            }
                        }

                        setState(2801);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_HAVING) {
                            {
                                setState(2800);
                                havingClause();
                            }
                        }

                        setState(2804);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_WINDOW) {
                            {
                                setState(2803);
                                window_clause();
                            }
                        }

                        setState(2807);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_ORDER) {
                            {
                                setState(2806);
                                orderByClause();
                            }
                        }

                        setState(2810);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_CLUSTER) {
                            {
                                setState(2809);
                                clusterByClause();
                            }
                        }

                        setState(2813);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_DISTRIBUTE) {
                            {
                                setState(2812);
                                distributeByClause();
                            }
                        }

                        setState(2816);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_SORT) {
                            {
                                setState(2815);
                                sortByClause();
                            }
                        }

                        setState(2819);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LIMIT) {
                            {
                                setState(2818);
                                limitClause();
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class InsertClauseContext extends ParserRuleContext {
        public TerminalNode KW_INSERT() {
            return getToken(HiveParser.KW_INSERT, 0);
        }

        public TerminalNode KW_OVERWRITE() {
            return getToken(HiveParser.KW_OVERWRITE, 0);
        }

        public DestinationContext destination() {
            return getRuleContext(DestinationContext.class, 0);
        }

        public IfNotExistsContext ifNotExists() {
            return getRuleContext(IfNotExistsContext.class, 0);
        }

        public TerminalNode KW_INTO() {
            return getToken(HiveParser.KW_INTO, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ColumnNameListContext columnNameList() {
            return getRuleContext(ColumnNameListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public InsertClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insertClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterInsertClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitInsertClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitInsertClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final InsertClauseContext insertClause() throws RecognitionException {
        InsertClauseContext _localctx = new InsertClauseContext(_ctx, getState());
        enterRule(_localctx, 454, RULE_insertClause);
        int _la;
        try {
            setState(2841);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 322, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2823);
                        match(KW_INSERT);
                        setState(2824);
                        match(KW_OVERWRITE);
                        setState(2825);
                        destination();
                        setState(2827);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_IF) {
                            {
                                setState(2826);
                                ifNotExists();
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2829);
                        match(KW_INSERT);
                        setState(2830);
                        match(KW_INTO);
                        setState(2832);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_TABLE) {
                            {
                                setState(2831);
                                match(KW_TABLE);
                            }
                        }

                        setState(2834);
                        tableOrPartition();
                        setState(2839);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 321, _ctx)) {
                            case 1:
                                {
                                    setState(2835);
                                    match(LPAREN);
                                    setState(2836);
                                    columnNameList();
                                    setState(2837);
                                    match(RPAREN);
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DestinationContext extends ParserRuleContext {
        public TerminalNode KW_DIRECTORY() {
            return getToken(HiveParser.KW_DIRECTORY, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_LOCAL() {
            return getToken(HiveParser.KW_LOCAL, 0);
        }

        public TableRowFormatContext tableRowFormat() {
            return getRuleContext(TableRowFormatContext.class, 0);
        }

        public TableFileFormatContext tableFileFormat() {
            return getRuleContext(TableFileFormatContext.class, 0);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public TableOrPartitionContext tableOrPartition() {
            return getRuleContext(TableOrPartitionContext.class, 0);
        }

        public DestinationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_destination;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDestination(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDestination(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDestination(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DestinationContext destination() throws RecognitionException {
        DestinationContext _localctx = new DestinationContext(_ctx, getState());
        enterRule(_localctx, 456, RULE_destination);
        int _la;
        try {
            setState(2856);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_DIRECTORY:
                case KW_LOCAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2844);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_LOCAL) {
                            {
                                setState(2843);
                                match(KW_LOCAL);
                            }
                        }

                        setState(2846);
                        match(KW_DIRECTORY);
                        setState(2847);
                        match(StringLiteral);
                        setState(2849);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_ROW) {
                            {
                                setState(2848);
                                tableRowFormat();
                            }
                        }

                        setState(2852);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_STORED) {
                            {
                                setState(2851);
                                tableFileFormat();
                            }
                        }
                    }
                    break;
                case KW_TABLE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2854);
                        match(KW_TABLE);
                        setState(2855);
                        tableOrPartition();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LimitClauseContext extends ParserRuleContext {
        public TerminalNode KW_LIMIT() {
            return getToken(HiveParser.KW_LIMIT, 0);
        }

        public List<TerminalNode> Number() {
            return getTokens(HiveParser.Number);
        }

        public TerminalNode Number(int i) {
            return getToken(HiveParser.Number, i);
        }

        public TerminalNode COMMA() {
            return getToken(HiveParser.COMMA, 0);
        }

        public TerminalNode KW_OFFSET() {
            return getToken(HiveParser.KW_OFFSET, 0);
        }

        public LimitClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_limitClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLimitClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLimitClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLimitClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LimitClauseContext limitClause() throws RecognitionException {
        LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
        enterRule(_localctx, 458, RULE_limitClause);
        try {
            setState(2868);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 328, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2858);
                        match(KW_LIMIT);
                        {
                            setState(2861);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 327, _ctx)) {
                                case 1:
                                    {
                                        setState(2859);
                                        match(Number);
                                        setState(2860);
                                        match(COMMA);
                                    }
                                    break;
                            }
                            setState(2863);
                            match(Number);
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2864);
                        match(KW_LIMIT);
                        setState(2865);
                        match(Number);
                        setState(2866);
                        match(KW_OFFSET);
                        setState(2867);
                        match(Number);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DeleteStatementContext extends ParserRuleContext {
        public TerminalNode KW_DELETE() {
            return getToken(HiveParser.KW_DELETE, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_deleteStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDeleteStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDeleteStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDeleteStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DeleteStatementContext deleteStatement() throws RecognitionException {
        DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
        enterRule(_localctx, 460, RULE_deleteStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2870);
                match(KW_DELETE);
                setState(2871);
                match(KW_FROM);
                setState(2872);
                tableName();
                setState(2874);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WHERE) {
                    {
                        setState(2873);
                        whereClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnAssignmentClauseContext extends ParserRuleContext {
        public TableOrColumnContext tableOrColumn() {
            return getRuleContext(TableOrColumnContext.class, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ColumnAssignmentClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnAssignmentClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnAssignmentClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnAssignmentClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitColumnAssignmentClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnAssignmentClauseContext columnAssignmentClause()
            throws RecognitionException {
        ColumnAssignmentClauseContext _localctx =
                new ColumnAssignmentClauseContext(_ctx, getState());
        enterRule(_localctx, 462, RULE_columnAssignmentClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2876);
                tableOrColumn();
                setState(2877);
                match(EQUAL);
                setState(2878);
                expression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetColumnsClauseContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public List<ColumnAssignmentClauseContext> columnAssignmentClause() {
            return getRuleContexts(ColumnAssignmentClauseContext.class);
        }

        public ColumnAssignmentClauseContext columnAssignmentClause(int i) {
            return getRuleContext(ColumnAssignmentClauseContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SetColumnsClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setColumnsClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSetColumnsClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSetColumnsClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSetColumnsClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetColumnsClauseContext setColumnsClause() throws RecognitionException {
        SetColumnsClauseContext _localctx = new SetColumnsClauseContext(_ctx, getState());
        enterRule(_localctx, 464, RULE_setColumnsClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2880);
                match(KW_SET);
                setState(2881);
                columnAssignmentClause();
                setState(2886);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2882);
                            match(COMMA);
                            setState(2883);
                            columnAssignmentClause();
                        }
                    }
                    setState(2888);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UpdateStatementContext extends ParserRuleContext {
        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public SetColumnsClauseContext setColumnsClause() {
            return getRuleContext(SetColumnsClauseContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_updateStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUpdateStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUpdateStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUpdateStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UpdateStatementContext updateStatement() throws RecognitionException {
        UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
        enterRule(_localctx, 466, RULE_updateStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2889);
                match(KW_UPDATE);
                setState(2890);
                tableName();
                setState(2891);
                setColumnsClause();
                setState(2893);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WHERE) {
                    {
                        setState(2892);
                        whereClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SqlTransactionStatementContext extends ParserRuleContext {
        public StartTransactionStatementContext startTransactionStatement() {
            return getRuleContext(StartTransactionStatementContext.class, 0);
        }

        public CommitStatementContext commitStatement() {
            return getRuleContext(CommitStatementContext.class, 0);
        }

        public RollbackStatementContext rollbackStatement() {
            return getRuleContext(RollbackStatementContext.class, 0);
        }

        public SetAutoCommitStatementContext setAutoCommitStatement() {
            return getRuleContext(SetAutoCommitStatementContext.class, 0);
        }

        public SqlTransactionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sqlTransactionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSqlTransactionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSqlTransactionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitSqlTransactionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SqlTransactionStatementContext sqlTransactionStatement()
            throws RecognitionException {
        SqlTransactionStatementContext _localctx =
                new SqlTransactionStatementContext(_ctx, getState());
        enterRule(_localctx, 468, RULE_sqlTransactionStatement);
        try {
            setState(2899);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_START:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2895);
                        startTransactionStatement();
                    }
                    break;
                case KW_COMMIT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2896);
                        commitStatement();
                    }
                    break;
                case KW_ROLLBACK:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2897);
                        rollbackStatement();
                    }
                    break;
                case KW_SET:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2898);
                        setAutoCommitStatement();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StartTransactionStatementContext extends ParserRuleContext {
        public TerminalNode KW_START() {
            return getToken(HiveParser.KW_START, 0);
        }

        public TerminalNode KW_TRANSACTION() {
            return getToken(HiveParser.KW_TRANSACTION, 0);
        }

        public List<TransactionModeContext> transactionMode() {
            return getRuleContexts(TransactionModeContext.class);
        }

        public TransactionModeContext transactionMode(int i) {
            return getRuleContext(TransactionModeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public StartTransactionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_startTransactionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStartTransactionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStartTransactionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitStartTransactionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StartTransactionStatementContext startTransactionStatement()
            throws RecognitionException {
        StartTransactionStatementContext _localctx =
                new StartTransactionStatementContext(_ctx, getState());
        enterRule(_localctx, 470, RULE_startTransactionStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2901);
                match(KW_START);
                setState(2902);
                match(KW_TRANSACTION);
                setState(2911);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_READ || _la == KW_ISOLATION) {
                    {
                        setState(2903);
                        transactionMode();
                        setState(2908);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2904);
                                    match(COMMA);
                                    setState(2905);
                                    transactionMode();
                                }
                            }
                            setState(2910);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransactionModeContext extends ParserRuleContext {
        public IsolationLevelContext isolationLevel() {
            return getRuleContext(IsolationLevelContext.class, 0);
        }

        public TransactionAccessModeContext transactionAccessMode() {
            return getRuleContext(TransactionAccessModeContext.class, 0);
        }

        public TransactionModeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transactionMode;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTransactionMode(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTransactionMode(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTransactionMode(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TransactionModeContext transactionMode() throws RecognitionException {
        TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
        enterRule(_localctx, 472, RULE_transactionMode);
        try {
            setState(2915);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ISOLATION:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2913);
                        isolationLevel();
                    }
                    break;
                case KW_READ:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2914);
                        transactionAccessMode();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TransactionAccessModeContext extends ParserRuleContext {
        public TerminalNode KW_READ() {
            return getToken(HiveParser.KW_READ, 0);
        }

        public TerminalNode KW_ONLY() {
            return getToken(HiveParser.KW_ONLY, 0);
        }

        public TerminalNode KW_WRITE() {
            return getToken(HiveParser.KW_WRITE, 0);
        }

        public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transactionAccessMode;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTransactionAccessMode(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTransactionAccessMode(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTransactionAccessMode(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
        TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
        enterRule(_localctx, 474, RULE_transactionAccessMode);
        try {
            setState(2921);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 336, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2917);
                        match(KW_READ);
                        setState(2918);
                        match(KW_ONLY);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2919);
                        match(KW_READ);
                        setState(2920);
                        match(KW_WRITE);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IsolationLevelContext extends ParserRuleContext {
        public TerminalNode KW_ISOLATION() {
            return getToken(HiveParser.KW_ISOLATION, 0);
        }

        public TerminalNode KW_LEVEL() {
            return getToken(HiveParser.KW_LEVEL, 0);
        }

        public LevelOfIsolationContext levelOfIsolation() {
            return getRuleContext(LevelOfIsolationContext.class, 0);
        }

        public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_isolationLevel;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIsolationLevel(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIsolationLevel(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIsolationLevel(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IsolationLevelContext isolationLevel() throws RecognitionException {
        IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
        enterRule(_localctx, 476, RULE_isolationLevel);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2923);
                match(KW_ISOLATION);
                setState(2924);
                match(KW_LEVEL);
                setState(2925);
                levelOfIsolation();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LevelOfIsolationContext extends ParserRuleContext {
        public TerminalNode KW_SNAPSHOT() {
            return getToken(HiveParser.KW_SNAPSHOT, 0);
        }

        public LevelOfIsolationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_levelOfIsolation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLevelOfIsolation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLevelOfIsolation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLevelOfIsolation(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LevelOfIsolationContext levelOfIsolation() throws RecognitionException {
        LevelOfIsolationContext _localctx = new LevelOfIsolationContext(_ctx, getState());
        enterRule(_localctx, 478, RULE_levelOfIsolation);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2927);
                match(KW_SNAPSHOT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CommitStatementContext extends ParserRuleContext {
        public TerminalNode KW_COMMIT() {
            return getToken(HiveParser.KW_COMMIT, 0);
        }

        public TerminalNode KW_WORK() {
            return getToken(HiveParser.KW_WORK, 0);
        }

        public CommitStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_commitStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCommitStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCommitStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCommitStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CommitStatementContext commitStatement() throws RecognitionException {
        CommitStatementContext _localctx = new CommitStatementContext(_ctx, getState());
        enterRule(_localctx, 480, RULE_commitStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2929);
                match(KW_COMMIT);
                setState(2931);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WORK) {
                    {
                        setState(2930);
                        match(KW_WORK);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RollbackStatementContext extends ParserRuleContext {
        public TerminalNode KW_ROLLBACK() {
            return getToken(HiveParser.KW_ROLLBACK, 0);
        }

        public TerminalNode KW_WORK() {
            return getToken(HiveParser.KW_WORK, 0);
        }

        public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rollbackStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRollbackStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRollbackStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRollbackStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RollbackStatementContext rollbackStatement() throws RecognitionException {
        RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
        enterRule(_localctx, 482, RULE_rollbackStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2933);
                match(KW_ROLLBACK);
                setState(2935);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WORK) {
                    {
                        setState(2934);
                        match(KW_WORK);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SetAutoCommitStatementContext extends ParserRuleContext {
        public TerminalNode KW_SET() {
            return getToken(HiveParser.KW_SET, 0);
        }

        public TerminalNode KW_AUTOCOMMIT() {
            return getToken(HiveParser.KW_AUTOCOMMIT, 0);
        }

        public BooleanValueTokContext booleanValueTok() {
            return getRuleContext(BooleanValueTokContext.class, 0);
        }

        public SetAutoCommitStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setAutoCommitStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSetAutoCommitStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSetAutoCommitStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSetAutoCommitStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SetAutoCommitStatementContext setAutoCommitStatement()
            throws RecognitionException {
        SetAutoCommitStatementContext _localctx =
                new SetAutoCommitStatementContext(_ctx, getState());
        enterRule(_localctx, 484, RULE_setAutoCommitStatement);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2937);
                match(KW_SET);
                setState(2938);
                match(KW_AUTOCOMMIT);
                setState(2939);
                booleanValueTok();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AbortTransactionStatementContext extends ParserRuleContext {
        public TerminalNode KW_ABORT() {
            return getToken(HiveParser.KW_ABORT, 0);
        }

        public TerminalNode KW_TRANSACTIONS() {
            return getToken(HiveParser.KW_TRANSACTIONS, 0);
        }

        public List<TerminalNode> Number() {
            return getTokens(HiveParser.Number);
        }

        public TerminalNode Number(int i) {
            return getToken(HiveParser.Number, i);
        }

        public AbortTransactionStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_abortTransactionStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAbortTransactionStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAbortTransactionStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitAbortTransactionStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AbortTransactionStatementContext abortTransactionStatement()
            throws RecognitionException {
        AbortTransactionStatementContext _localctx =
                new AbortTransactionStatementContext(_ctx, getState());
        enterRule(_localctx, 486, RULE_abortTransactionStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2941);
                match(KW_ABORT);
                setState(2942);
                match(KW_TRANSACTIONS);
                setState(2944);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(2943);
                            match(Number);
                        }
                    }
                    setState(2946);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == Number);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class MergeStatementContext extends ParserRuleContext {
        public TerminalNode KW_MERGE() {
            return getToken(HiveParser.KW_MERGE, 0);
        }

        public TerminalNode KW_INTO() {
            return getToken(HiveParser.KW_INTO, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode KW_USING() {
            return getToken(HiveParser.KW_USING, 0);
        }

        public JoinSourcePartContext joinSourcePart() {
            return getRuleContext(JoinSourcePartContext.class, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public WhenClausesContext whenClauses() {
            return getRuleContext(WhenClausesContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public MergeStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_mergeStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterMergeStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitMergeStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitMergeStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final MergeStatementContext mergeStatement() throws RecognitionException {
        MergeStatementContext _localctx = new MergeStatementContext(_ctx, getState());
        enterRule(_localctx, 488, RULE_mergeStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2948);
                match(KW_MERGE);
                setState(2949);
                match(KW_INTO);
                setState(2950);
                tableName();
                setState(2955);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934250577920L) != 0)
                        || ((((_la - 68)) & ~0x3f) == 0
                                && ((1L << (_la - 68)) & 3458763614599775565L) != 0)
                        || ((((_la - 134)) & ~0x3f) == 0
                                && ((1L << (_la - 134)) & -2319580865570571373L) != 0)
                        || ((((_la - 198)) & ~0x3f) == 0
                                && ((1L << (_la - 198)) & -4618828440659893195L) != 0)
                        || ((((_la - 264)) & ~0x3f) == 0
                                && ((1L << (_la - 264)) & -244939057153L) != 0)
                        || ((((_la - 328)) & ~0x3f) == 0
                                && ((1L << (_la - 328)) & 1099511627779L) != 0)) {
                    {
                        setState(2952);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(2951);
                                match(KW_AS);
                            }
                        }

                        setState(2954);
                        identifier();
                    }
                }

                setState(2957);
                match(KW_USING);
                setState(2958);
                joinSourcePart();
                setState(2959);
                match(KW_ON);
                setState(2960);
                expression(0);
                setState(2961);
                whenClauses();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenClausesContext extends ParserRuleContext {
        public List<WhenMatchedAndClauseContext> whenMatchedAndClause() {
            return getRuleContexts(WhenMatchedAndClauseContext.class);
        }

        public WhenMatchedAndClauseContext whenMatchedAndClause(int i) {
            return getRuleContext(WhenMatchedAndClauseContext.class, i);
        }

        public List<WhenMatchedThenClauseContext> whenMatchedThenClause() {
            return getRuleContexts(WhenMatchedThenClauseContext.class);
        }

        public WhenMatchedThenClauseContext whenMatchedThenClause(int i) {
            return getRuleContext(WhenMatchedThenClauseContext.class, i);
        }

        public WhenNotMatchedClauseContext whenNotMatchedClause() {
            return getRuleContext(WhenNotMatchedClauseContext.class, 0);
        }

        public WhenClausesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenClauses;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhenClauses(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhenClauses(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhenClauses(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenClausesContext whenClauses() throws RecognitionException {
        WhenClausesContext _localctx = new WhenClausesContext(_ctx, getState());
        enterRule(_localctx, 490, RULE_whenClauses);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2967);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 343, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            setState(2965);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 342, _ctx)) {
                                case 1:
                                    {
                                        setState(2963);
                                        whenMatchedAndClause();
                                    }
                                    break;
                                case 2:
                                    {
                                        setState(2964);
                                        whenMatchedThenClause();
                                    }
                                    break;
                            }
                        }
                    }
                    setState(2969);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 343, _ctx);
                }
                setState(2971);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_WHEN) {
                    {
                        setState(2970);
                        whenNotMatchedClause();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenNotMatchedClauseContext extends ParserRuleContext {
        public TerminalNode KW_WHEN() {
            return getToken(HiveParser.KW_WHEN, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_MATCHED() {
            return getToken(HiveParser.KW_MATCHED, 0);
        }

        public TerminalNode KW_THEN() {
            return getToken(HiveParser.KW_THEN, 0);
        }

        public TerminalNode KW_INSERT() {
            return getToken(HiveParser.KW_INSERT, 0);
        }

        public TerminalNode KW_VALUES() {
            return getToken(HiveParser.KW_VALUES, 0);
        }

        public ValueRowConstructorContext valueRowConstructor() {
            return getRuleContext(ValueRowConstructorContext.class, 0);
        }

        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public WhenNotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenNotMatchedClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhenNotMatchedClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhenNotMatchedClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhenNotMatchedClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenNotMatchedClauseContext whenNotMatchedClause() throws RecognitionException {
        WhenNotMatchedClauseContext _localctx = new WhenNotMatchedClauseContext(_ctx, getState());
        enterRule(_localctx, 492, RULE_whenNotMatchedClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2973);
                match(KW_WHEN);
                setState(2974);
                match(KW_NOT);
                setState(2975);
                match(KW_MATCHED);
                setState(2978);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AND) {
                    {
                        setState(2976);
                        match(KW_AND);
                        setState(2977);
                        expression(0);
                    }
                }

                setState(2980);
                match(KW_THEN);
                setState(2981);
                match(KW_INSERT);
                setState(2982);
                match(KW_VALUES);
                setState(2983);
                valueRowConstructor();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenMatchedAndClauseContext extends ParserRuleContext {
        public TerminalNode KW_WHEN() {
            return getToken(HiveParser.KW_WHEN, 0);
        }

        public TerminalNode KW_MATCHED() {
            return getToken(HiveParser.KW_MATCHED, 0);
        }

        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode KW_THEN() {
            return getToken(HiveParser.KW_THEN, 0);
        }

        public UpdateOrDeleteContext updateOrDelete() {
            return getRuleContext(UpdateOrDeleteContext.class, 0);
        }

        public WhenMatchedAndClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenMatchedAndClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhenMatchedAndClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhenMatchedAndClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhenMatchedAndClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenMatchedAndClauseContext whenMatchedAndClause() throws RecognitionException {
        WhenMatchedAndClauseContext _localctx = new WhenMatchedAndClauseContext(_ctx, getState());
        enterRule(_localctx, 494, RULE_whenMatchedAndClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2985);
                match(KW_WHEN);
                setState(2986);
                match(KW_MATCHED);
                setState(2987);
                match(KW_AND);
                setState(2988);
                expression(0);
                setState(2989);
                match(KW_THEN);
                setState(2990);
                updateOrDelete();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenMatchedThenClauseContext extends ParserRuleContext {
        public TerminalNode KW_WHEN() {
            return getToken(HiveParser.KW_WHEN, 0);
        }

        public TerminalNode KW_MATCHED() {
            return getToken(HiveParser.KW_MATCHED, 0);
        }

        public TerminalNode KW_THEN() {
            return getToken(HiveParser.KW_THEN, 0);
        }

        public UpdateOrDeleteContext updateOrDelete() {
            return getRuleContext(UpdateOrDeleteContext.class, 0);
        }

        public WhenMatchedThenClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenMatchedThenClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhenMatchedThenClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhenMatchedThenClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhenMatchedThenClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenMatchedThenClauseContext whenMatchedThenClause() throws RecognitionException {
        WhenMatchedThenClauseContext _localctx = new WhenMatchedThenClauseContext(_ctx, getState());
        enterRule(_localctx, 496, RULE_whenMatchedThenClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2992);
                match(KW_WHEN);
                setState(2993);
                match(KW_MATCHED);
                setState(2994);
                match(KW_THEN);
                setState(2995);
                updateOrDelete();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UpdateOrDeleteContext extends ParserRuleContext {
        public TerminalNode KW_UPDATE() {
            return getToken(HiveParser.KW_UPDATE, 0);
        }

        public SetColumnsClauseContext setColumnsClause() {
            return getRuleContext(SetColumnsClauseContext.class, 0);
        }

        public TerminalNode KW_DELETE() {
            return getToken(HiveParser.KW_DELETE, 0);
        }

        public UpdateOrDeleteContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_updateOrDelete;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUpdateOrDelete(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUpdateOrDelete(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUpdateOrDelete(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UpdateOrDeleteContext updateOrDelete() throws RecognitionException {
        UpdateOrDeleteContext _localctx = new UpdateOrDeleteContext(_ctx, getState());
        enterRule(_localctx, 498, RULE_updateOrDelete);
        try {
            setState(3000);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_UPDATE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2997);
                        match(KW_UPDATE);
                        setState(2998);
                        setColumnsClause();
                    }
                    break;
                case KW_DELETE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2999);
                        match(KW_DELETE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class KillQueryStatementContext extends ParserRuleContext {
        public TerminalNode KW_KILL() {
            return getToken(HiveParser.KW_KILL, 0);
        }

        public TerminalNode KW_QUERY() {
            return getToken(HiveParser.KW_QUERY, 0);
        }

        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public KillQueryStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_killQueryStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterKillQueryStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitKillQueryStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitKillQueryStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public final KillQueryStatementContext killQueryStatement() throws RecognitionException {
        KillQueryStatementContext _localctx = new KillQueryStatementContext(_ctx, getState());
        enterRule(_localctx, 500, RULE_killQueryStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3002);
                match(KW_KILL);
                setState(3003);
                match(KW_QUERY);
                setState(3005);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3004);
                            match(StringLiteral);
                        }
                    }
                    setState(3007);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectClauseContext extends ParserRuleContext {
        public TerminalNode KW_SELECT() {
            return getToken(HiveParser.KW_SELECT, 0);
        }

        public TerminalNode QUERY_HINT() {
            return getToken(HiveParser.QUERY_HINT, 0);
        }

        public SelectListContext selectList() {
            return getRuleContext(SelectListContext.class, 0);
        }

        public TerminalNode KW_TRANSFORM() {
            return getToken(HiveParser.KW_TRANSFORM, 0);
        }

        public SelectTrfmClauseContext selectTrfmClause() {
            return getRuleContext(SelectTrfmClauseContext.class, 0);
        }

        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public TerminalNode KW_DISTINCT() {
            return getToken(HiveParser.KW_DISTINCT, 0);
        }

        public TrfmClauseContext trfmClause() {
            return getRuleContext(TrfmClauseContext.class, 0);
        }

        public SelectClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectClauseContext selectClause() throws RecognitionException {
        SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
        enterRule(_localctx, 502, RULE_selectClause);
        int _la;
        try {
            setState(3022);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_SELECT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3009);
                        match(KW_SELECT);
                        setState(3011);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == QUERY_HINT) {
                            {
                                setState(3010);
                                match(QUERY_HINT);
                            }
                        }

                        setState(3019);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case KW_TRUE:
                            case KW_FALSE:
                            case KW_ALL:
                            case KW_NOT:
                            case KW_IF:
                            case KW_EXISTS:
                            case KW_ASC:
                            case KW_DESC:
                            case KW_NULLS:
                            case KW_LAST:
                            case KW_DISTINCT:
                            case KW_OVERWRITE:
                            case KW_PARTITIONS:
                            case KW_TABLES:
                            case KW_COLUMNS:
                            case KW_INDEX:
                            case KW_INDEXES:
                            case KW_REBUILD:
                            case KW_FUNCTIONS:
                            case KW_SHOW:
                            case KW_MSCK:
                            case KW_REPAIR:
                            case KW_DIRECTORY:
                            case KW_CLUSTER:
                            case KW_DISTRIBUTE:
                            case KW_SORT:
                            case KW_LOAD:
                            case KW_EXPORT:
                            case KW_REPLICATION:
                            case KW_METADATA:
                            case KW_DATA:
                            case KW_INPATH:
                            case KW_NULL:
                            case KW_CHANGE:
                            case KW_FIRST:
                            case KW_AFTER:
                            case KW_RENAME:
                            case KW_COMMENT:
                            case KW_BOOLEAN:
                            case KW_TINYINT:
                            case KW_SMALLINT:
                            case KW_INT:
                            case KW_BIGINT:
                            case KW_FLOAT:
                            case KW_DOUBLE:
                            case KW_DATE:
                            case KW_DATETIME:
                            case KW_TIMESTAMP:
                            case KW_TIMESTAMPLOCALTZ:
                            case KW_ZONE:
                            case KW_INTERVAL:
                            case KW_STRING:
                            case KW_ARRAY:
                            case KW_STRUCT:
                            case KW_MAP:
                            case KW_UNIONTYPE:
                            case KW_PARTITIONED:
                            case KW_CLUSTERED:
                            case KW_SORTED:
                            case KW_BUCKETS:
                            case KW_FORMAT:
                            case KW_DELIMITED:
                            case KW_FIELDS:
                            case KW_TERMINATED:
                            case KW_ESCAPED:
                            case KW_COLLECTION:
                            case KW_ITEMS:
                            case KW_KEYS:
                            case KW_KEY_TYPE:
                            case KW_KILL:
                            case KW_LINES:
                            case KW_STORED:
                            case KW_FILEFORMAT:
                            case KW_INPUTFORMAT:
                            case KW_OUTPUTFORMAT:
                            case KW_INPUTDRIVER:
                            case KW_OUTPUTDRIVER:
                            case KW_ENABLE:
                            case KW_DISABLE:
                            case KW_LOCATION:
                            case KW_BUCKET:
                            case KW_CAST:
                            case KW_ADD:
                            case KW_REPLACE:
                            case KW_TEMPORARY:
                            case KW_FILE:
                            case KW_JAR:
                            case KW_EXPLAIN:
                            case KW_FORMATTED:
                            case KW_DEPENDENCY:
                            case KW_LOGICAL:
                            case KW_SERDE:
                            case KW_DEFERRED:
                            case KW_SERDEPROPERTIES:
                            case KW_DBPROPERTIES:
                            case KW_LIMIT:
                            case KW_OFFSET:
                            case KW_UNSET:
                            case KW_TBLPROPERTIES:
                            case KW_IDXPROPERTIES:
                            case KW_VALUE_TYPE:
                            case KW_ELEM_TYPE:
                            case KW_DEFINED:
                            case KW_CASE:
                            case KW_MAPJOIN:
                            case KW_STREAMTABLE:
                            case KW_CLUSTERSTATUS:
                            case KW_UTC:
                            case KW_UTCTIMESTAMP:
                            case KW_LONG:
                            case KW_PLUS:
                            case KW_VIEW:
                            case KW_VIEWS:
                            case KW_DATABASES:
                            case KW_MATERIALIZED:
                            case KW_SCHEMA:
                            case KW_SCHEMAS:
                            case KW_SSL:
                            case KW_UNDO:
                            case KW_LOCK:
                            case KW_LOCKS:
                            case KW_UNLOCK:
                            case KW_SHARED:
                            case KW_EXCLUSIVE:
                            case KW_UNSIGNED:
                            case KW_WHILE:
                            case KW_READ:
                            case KW_PURGE:
                            case KW_ANALYZE:
                            case KW_BEFORE:
                            case KW_BINARY:
                            case KW_CONTINUE:
                            case KW_RECORDREADER:
                            case KW_RECORDWRITER:
                            case KW_SEMI:
                            case KW_TOUCH:
                            case KW_ARCHIVE:
                            case KW_UNARCHIVE:
                            case KW_COMPUTE:
                            case KW_STATISTICS:
                            case KW_USE:
                            case KW_OPTION:
                            case KW_CONCATENATE:
                            case KW_SHOW_DATABASE:
                            case KW_RESTRICT:
                            case KW_CASCADE:
                            case KW_SKEWED:
                            case KW_DIRECTORIES:
                            case KW_CURRENT_DATE:
                            case KW_CURRENT_TIMESTAMP:
                            case KW_GROUPING:
                            case KW_SETS:
                            case KW_NOSCAN:
                            case KW_ROLE:
                            case KW_ROLES:
                            case KW_URI:
                            case KW_SERVER:
                            case KW_ADMIN:
                            case KW_OWNER:
                            case KW_PRINCIPALS:
                            case KW_COMPACT:
                            case KW_COMPACTIONS:
                            case KW_TRANSACTIONS:
                            case KW_REWRITE:
                            case KW_REOPTIMIZATION:
                            case KW_RELOAD:
                            case KW_YEAR:
                            case KW_QUERY:
                            case KW_QUARTER:
                            case KW_MONTH:
                            case KW_WEEK:
                            case KW_DAY:
                            case KW_DOW:
                            case KW_HOUR:
                            case KW_MINUTE:
                            case KW_SECOND:
                            case KW_TRANSACTION:
                            case KW_WORK:
                            case KW_WRITE:
                            case KW_ISOLATION:
                            case KW_LEVEL:
                            case KW_SNAPSHOT:
                            case KW_AUTOCOMMIT:
                            case KW_CACHE:
                            case KW_ENFORCED:
                            case KW_VALIDATE:
                            case KW_NOVALIDATE:
                            case KW_RELY:
                            case KW_NORELY:
                            case KW_KEY:
                            case KW_ABORT:
                            case KW_EXTRACT:
                            case KW_FLOOR:
                            case KW_MATCHED:
                            case KW_REPL:
                            case KW_DUMP:
                            case KW_STATUS:
                            case KW_VECTORIZATION:
                            case KW_SUMMARY:
                            case KW_OPERATOR:
                            case KW_EXPRESSION:
                            case KW_DETAIL:
                            case KW_WAIT:
                            case KW_RESOURCE:
                            case KW_PLAN:
                            case KW_QUERY_PARALLELISM:
                            case KW_PLANS:
                            case KW_ACTIVATE:
                            case KW_DEFAULT:
                            case KW_CHECK:
                            case KW_POOL:
                            case KW_MOVE:
                            case KW_DO:
                            case KW_ALLOC_FRACTION:
                            case KW_SCHEDULING_POLICY:
                            case KW_PATH:
                            case KW_MAPPING:
                            case KW_WORKLOAD:
                            case KW_MANAGEMENT:
                            case KW_ACTIVE:
                            case KW_UNMANAGED:
                            case LPAREN:
                            case PLUS:
                            case MINUS:
                            case STAR:
                            case TILDE:
                            case StringLiteral:
                            case IntegralLiteral:
                            case NumberLiteral:
                            case Number:
                            case Identifier:
                            case CharSetName:
                                {
                                    {
                                        setState(3014);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == KW_ALL || _la == KW_DISTINCT) {
                                            {
                                                setState(3013);
                                                _la = _input.LA(1);
                                                if (!(_la == KW_ALL || _la == KW_DISTINCT)) {
                                                    _errHandler.recoverInline(this);
                                                } else {
                                                    if (_input.LA(1) == Token.EOF)
                                                        matchedEOF = true;
                                                    _errHandler.reportMatch(this);
                                                    consume();
                                                }
                                            }
                                        }

                                        setState(3016);
                                        selectList();
                                    }
                                }
                                break;
                            case KW_TRANSFORM:
                                {
                                    {
                                        setState(3017);
                                        match(KW_TRANSFORM);
                                        setState(3018);
                                        selectTrfmClause();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case KW_MAP:
                case KW_REDUCE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3021);
                        trfmClause();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectListContext extends ParserRuleContext {
        public List<SelectItemContext> selectItem() {
            return getRuleContexts(SelectItemContext.class);
        }

        public SelectItemContext selectItem(int i) {
            return getRuleContext(SelectItemContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SelectListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectListContext selectList() throws RecognitionException {
        SelectListContext _localctx = new SelectListContext(_ctx, getState());
        enterRule(_localctx, 504, RULE_selectList);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3024);
                selectItem();
                setState(3029);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 352, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3025);
                                match(COMMA);
                                setState(3026);
                                selectItem();
                            }
                        }
                    }
                    setState(3031);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 352, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectTrfmClauseContext extends ParserRuleContext {
        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public SelectExpressionListContext selectExpressionList() {
            return getRuleContext(SelectExpressionListContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public TerminalNode KW_USING() {
            return getToken(HiveParser.KW_USING, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public RecordWriterContext recordWriter() {
            return getRuleContext(RecordWriterContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public RecordReaderContext recordReader() {
            return getRuleContext(RecordReaderContext.class, 0);
        }

        public AliasListContext aliasList() {
            return getRuleContext(AliasListContext.class, 0);
        }

        public ColumnNameTypeListContext columnNameTypeList() {
            return getRuleContext(ColumnNameTypeListContext.class, 0);
        }

        public SelectTrfmClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectTrfmClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectTrfmClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectTrfmClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectTrfmClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectTrfmClauseContext selectTrfmClause() throws RecognitionException {
        SelectTrfmClauseContext _localctx = new SelectTrfmClauseContext(_ctx, getState());
        enterRule(_localctx, 506, RULE_selectTrfmClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3032);
                match(LPAREN);
                setState(3033);
                selectExpressionList();
                setState(3034);
                match(RPAREN);
                setState(3036);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW) {
                    {
                        setState(3035);
                        rowFormat();
                    }
                }

                setState(3039);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RECORDWRITER) {
                    {
                        setState(3038);
                        recordWriter();
                    }
                }

                setState(3041);
                match(KW_USING);
                setState(3042);
                match(StringLiteral);
                setState(3057);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AS) {
                    {
                        setState(3043);
                        match(KW_AS);
                        setState(3055);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case LPAREN:
                                {
                                    {
                                        setState(3044);
                                        match(LPAREN);
                                        setState(3047);
                                        _errHandler.sync(this);
                                        switch (getInterpreter()
                                                .adaptivePredict(_input, 355, _ctx)) {
                                            case 1:
                                                {
                                                    setState(3045);
                                                    aliasList();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    setState(3046);
                                                    columnNameTypeList();
                                                }
                                                break;
                                        }
                                        setState(3049);
                                        match(RPAREN);
                                    }
                                }
                                break;
                            case KW_ASC:
                            case KW_DESC:
                            case KW_NULLS:
                            case KW_LAST:
                            case KW_OVERWRITE:
                            case KW_PARTITIONS:
                            case KW_TABLES:
                            case KW_COLUMNS:
                            case KW_INDEX:
                            case KW_INDEXES:
                            case KW_REBUILD:
                            case KW_FUNCTIONS:
                            case KW_SHOW:
                            case KW_MSCK:
                            case KW_REPAIR:
                            case KW_DIRECTORY:
                            case KW_CLUSTER:
                            case KW_DISTRIBUTE:
                            case KW_SORT:
                            case KW_LOAD:
                            case KW_EXPORT:
                            case KW_REPLICATION:
                            case KW_METADATA:
                            case KW_DATA:
                            case KW_INPATH:
                            case KW_CHANGE:
                            case KW_FIRST:
                            case KW_AFTER:
                            case KW_RENAME:
                            case KW_COMMENT:
                            case KW_TINYINT:
                            case KW_DATETIME:
                            case KW_ZONE:
                            case KW_STRING:
                            case KW_STRUCT:
                            case KW_UNIONTYPE:
                            case KW_PARTITIONED:
                            case KW_CLUSTERED:
                            case KW_SORTED:
                            case KW_BUCKETS:
                            case KW_FORMAT:
                            case KW_DELIMITED:
                            case KW_FIELDS:
                            case KW_TERMINATED:
                            case KW_ESCAPED:
                            case KW_COLLECTION:
                            case KW_ITEMS:
                            case KW_KEYS:
                            case KW_KEY_TYPE:
                            case KW_KILL:
                            case KW_LINES:
                            case KW_STORED:
                            case KW_FILEFORMAT:
                            case KW_INPUTFORMAT:
                            case KW_OUTPUTFORMAT:
                            case KW_INPUTDRIVER:
                            case KW_OUTPUTDRIVER:
                            case KW_ENABLE:
                            case KW_DISABLE:
                            case KW_LOCATION:
                            case KW_BUCKET:
                            case KW_ADD:
                            case KW_REPLACE:
                            case KW_TEMPORARY:
                            case KW_FILE:
                            case KW_JAR:
                            case KW_EXPLAIN:
                            case KW_FORMATTED:
                            case KW_DEPENDENCY:
                            case KW_LOGICAL:
                            case KW_SERDE:
                            case KW_DEFERRED:
                            case KW_SERDEPROPERTIES:
                            case KW_DBPROPERTIES:
                            case KW_LIMIT:
                            case KW_OFFSET:
                            case KW_UNSET:
                            case KW_TBLPROPERTIES:
                            case KW_IDXPROPERTIES:
                            case KW_VALUE_TYPE:
                            case KW_ELEM_TYPE:
                            case KW_DEFINED:
                            case KW_MAPJOIN:
                            case KW_STREAMTABLE:
                            case KW_CLUSTERSTATUS:
                            case KW_UTC:
                            case KW_UTCTIMESTAMP:
                            case KW_LONG:
                            case KW_PLUS:
                            case KW_VIEW:
                            case KW_VIEWS:
                            case KW_DATABASES:
                            case KW_MATERIALIZED:
                            case KW_SCHEMA:
                            case KW_SCHEMAS:
                            case KW_SSL:
                            case KW_UNDO:
                            case KW_LOCK:
                            case KW_LOCKS:
                            case KW_UNLOCK:
                            case KW_SHARED:
                            case KW_EXCLUSIVE:
                            case KW_UNSIGNED:
                            case KW_WHILE:
                            case KW_READ:
                            case KW_PURGE:
                            case KW_ANALYZE:
                            case KW_BEFORE:
                            case KW_CONTINUE:
                            case KW_RECORDREADER:
                            case KW_RECORDWRITER:
                            case KW_SEMI:
                            case KW_TOUCH:
                            case KW_ARCHIVE:
                            case KW_UNARCHIVE:
                            case KW_COMPUTE:
                            case KW_STATISTICS:
                            case KW_USE:
                            case KW_OPTION:
                            case KW_CONCATENATE:
                            case KW_SHOW_DATABASE:
                            case KW_RESTRICT:
                            case KW_CASCADE:
                            case KW_SKEWED:
                            case KW_DIRECTORIES:
                            case KW_SETS:
                            case KW_NOSCAN:
                            case KW_ROLE:
                            case KW_ROLES:
                            case KW_URI:
                            case KW_SERVER:
                            case KW_ADMIN:
                            case KW_OWNER:
                            case KW_PRINCIPALS:
                            case KW_COMPACT:
                            case KW_COMPACTIONS:
                            case KW_TRANSACTIONS:
                            case KW_REWRITE:
                            case KW_REOPTIMIZATION:
                            case KW_RELOAD:
                            case KW_YEAR:
                            case KW_QUERY:
                            case KW_QUARTER:
                            case KW_MONTH:
                            case KW_WEEK:
                            case KW_DAY:
                            case KW_DOW:
                            case KW_HOUR:
                            case KW_MINUTE:
                            case KW_SECOND:
                            case KW_TRANSACTION:
                            case KW_WORK:
                            case KW_WRITE:
                            case KW_ISOLATION:
                            case KW_LEVEL:
                            case KW_SNAPSHOT:
                            case KW_AUTOCOMMIT:
                            case KW_CACHE:
                            case KW_ENFORCED:
                            case KW_VALIDATE:
                            case KW_NOVALIDATE:
                            case KW_RELY:
                            case KW_NORELY:
                            case KW_KEY:
                            case KW_ABORT:
                            case KW_MATCHED:
                            case KW_REPL:
                            case KW_DUMP:
                            case KW_STATUS:
                            case KW_VECTORIZATION:
                            case KW_SUMMARY:
                            case KW_OPERATOR:
                            case KW_EXPRESSION:
                            case KW_DETAIL:
                            case KW_WAIT:
                            case KW_RESOURCE:
                            case KW_PLAN:
                            case KW_QUERY_PARALLELISM:
                            case KW_PLANS:
                            case KW_ACTIVATE:
                            case KW_DEFAULT:
                            case KW_CHECK:
                            case KW_POOL:
                            case KW_MOVE:
                            case KW_DO:
                            case KW_ALLOC_FRACTION:
                            case KW_SCHEDULING_POLICY:
                            case KW_PATH:
                            case KW_MAPPING:
                            case KW_WORKLOAD:
                            case KW_MANAGEMENT:
                            case KW_ACTIVE:
                            case KW_UNMANAGED:
                            case Identifier:
                                {
                                    setState(3053);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 356, _ctx)) {
                                        case 1:
                                            {
                                                setState(3051);
                                                aliasList();
                                            }
                                            break;
                                        case 2:
                                            {
                                                setState(3052);
                                                columnNameTypeList();
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

                setState(3060);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW) {
                    {
                        setState(3059);
                        rowFormat();
                    }
                }

                setState(3063);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RECORDREADER) {
                    {
                        setState(3062);
                        recordReader();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectItemContext extends ParserRuleContext {
        public TableAllColumnsContext tableAllColumns() {
            return getRuleContext(TableAllColumnsContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SelectItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectItem(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectItem(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectItemContext selectItem() throws RecognitionException {
        SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
        enterRule(_localctx, 508, RULE_selectItem);
        int _la;
        try {
            setState(3085);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 364, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3065);
                        tableAllColumns();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        {
                            setState(3066);
                            expression(0);
                            setState(3083);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 363, _ctx)) {
                                case 1:
                                    {
                                        {
                                            setState(3068);
                                            _errHandler.sync(this);
                                            _la = _input.LA(1);
                                            if (_la == KW_AS) {
                                                {
                                                    setState(3067);
                                                    match(KW_AS);
                                                }
                                            }

                                            setState(3070);
                                            identifier();
                                        }
                                    }
                                    break;
                                case 2:
                                    {
                                        {
                                            setState(3071);
                                            match(KW_AS);
                                            setState(3072);
                                            match(LPAREN);
                                            setState(3073);
                                            identifier();
                                            setState(3078);
                                            _errHandler.sync(this);
                                            _la = _input.LA(1);
                                            while (_la == COMMA) {
                                                {
                                                    {
                                                        setState(3074);
                                                        match(COMMA);
                                                        setState(3075);
                                                        identifier();
                                                    }
                                                }
                                                setState(3080);
                                                _errHandler.sync(this);
                                                _la = _input.LA(1);
                                            }
                                            setState(3081);
                                            match(RPAREN);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TrfmClauseContext extends ParserRuleContext {
        public TerminalNode KW_USING() {
            return getToken(HiveParser.KW_USING, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_MAP() {
            return getToken(HiveParser.KW_MAP, 0);
        }

        public SelectExpressionListContext selectExpressionList() {
            return getRuleContext(SelectExpressionListContext.class, 0);
        }

        public TerminalNode KW_REDUCE() {
            return getToken(HiveParser.KW_REDUCE, 0);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public RecordWriterContext recordWriter() {
            return getRuleContext(RecordWriterContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public RecordReaderContext recordReader() {
            return getRuleContext(RecordReaderContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public AliasListContext aliasList() {
            return getRuleContext(AliasListContext.class, 0);
        }

        public ColumnNameTypeListContext columnNameTypeList() {
            return getRuleContext(ColumnNameTypeListContext.class, 0);
        }

        public TrfmClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_trfmClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTrfmClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTrfmClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTrfmClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TrfmClauseContext trfmClause() throws RecognitionException {
        TrfmClauseContext _localctx = new TrfmClauseContext(_ctx, getState());
        enterRule(_localctx, 510, RULE_trfmClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3091);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_MAP:
                        {
                            setState(3087);
                            match(KW_MAP);
                            setState(3088);
                            selectExpressionList();
                        }
                        break;
                    case KW_REDUCE:
                        {
                            setState(3089);
                            match(KW_REDUCE);
                            setState(3090);
                            selectExpressionList();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3094);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW) {
                    {
                        setState(3093);
                        rowFormat();
                    }
                }

                setState(3097);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RECORDWRITER) {
                    {
                        setState(3096);
                        recordWriter();
                    }
                }

                setState(3099);
                match(KW_USING);
                setState(3100);
                match(StringLiteral);
                setState(3115);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AS) {
                    {
                        setState(3101);
                        match(KW_AS);
                        setState(3113);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case LPAREN:
                                {
                                    {
                                        setState(3102);
                                        match(LPAREN);
                                        setState(3105);
                                        _errHandler.sync(this);
                                        switch (getInterpreter()
                                                .adaptivePredict(_input, 368, _ctx)) {
                                            case 1:
                                                {
                                                    setState(3103);
                                                    aliasList();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    setState(3104);
                                                    columnNameTypeList();
                                                }
                                                break;
                                        }
                                        setState(3107);
                                        match(RPAREN);
                                    }
                                }
                                break;
                            case KW_ASC:
                            case KW_DESC:
                            case KW_NULLS:
                            case KW_LAST:
                            case KW_OVERWRITE:
                            case KW_PARTITIONS:
                            case KW_TABLES:
                            case KW_COLUMNS:
                            case KW_INDEX:
                            case KW_INDEXES:
                            case KW_REBUILD:
                            case KW_FUNCTIONS:
                            case KW_SHOW:
                            case KW_MSCK:
                            case KW_REPAIR:
                            case KW_DIRECTORY:
                            case KW_CLUSTER:
                            case KW_DISTRIBUTE:
                            case KW_SORT:
                            case KW_LOAD:
                            case KW_EXPORT:
                            case KW_REPLICATION:
                            case KW_METADATA:
                            case KW_DATA:
                            case KW_INPATH:
                            case KW_CHANGE:
                            case KW_FIRST:
                            case KW_AFTER:
                            case KW_RENAME:
                            case KW_COMMENT:
                            case KW_TINYINT:
                            case KW_DATETIME:
                            case KW_ZONE:
                            case KW_STRING:
                            case KW_STRUCT:
                            case KW_UNIONTYPE:
                            case KW_PARTITIONED:
                            case KW_CLUSTERED:
                            case KW_SORTED:
                            case KW_BUCKETS:
                            case KW_FORMAT:
                            case KW_DELIMITED:
                            case KW_FIELDS:
                            case KW_TERMINATED:
                            case KW_ESCAPED:
                            case KW_COLLECTION:
                            case KW_ITEMS:
                            case KW_KEYS:
                            case KW_KEY_TYPE:
                            case KW_KILL:
                            case KW_LINES:
                            case KW_STORED:
                            case KW_FILEFORMAT:
                            case KW_INPUTFORMAT:
                            case KW_OUTPUTFORMAT:
                            case KW_INPUTDRIVER:
                            case KW_OUTPUTDRIVER:
                            case KW_ENABLE:
                            case KW_DISABLE:
                            case KW_LOCATION:
                            case KW_BUCKET:
                            case KW_ADD:
                            case KW_REPLACE:
                            case KW_TEMPORARY:
                            case KW_FILE:
                            case KW_JAR:
                            case KW_EXPLAIN:
                            case KW_FORMATTED:
                            case KW_DEPENDENCY:
                            case KW_LOGICAL:
                            case KW_SERDE:
                            case KW_DEFERRED:
                            case KW_SERDEPROPERTIES:
                            case KW_DBPROPERTIES:
                            case KW_LIMIT:
                            case KW_OFFSET:
                            case KW_UNSET:
                            case KW_TBLPROPERTIES:
                            case KW_IDXPROPERTIES:
                            case KW_VALUE_TYPE:
                            case KW_ELEM_TYPE:
                            case KW_DEFINED:
                            case KW_MAPJOIN:
                            case KW_STREAMTABLE:
                            case KW_CLUSTERSTATUS:
                            case KW_UTC:
                            case KW_UTCTIMESTAMP:
                            case KW_LONG:
                            case KW_PLUS:
                            case KW_VIEW:
                            case KW_VIEWS:
                            case KW_DATABASES:
                            case KW_MATERIALIZED:
                            case KW_SCHEMA:
                            case KW_SCHEMAS:
                            case KW_SSL:
                            case KW_UNDO:
                            case KW_LOCK:
                            case KW_LOCKS:
                            case KW_UNLOCK:
                            case KW_SHARED:
                            case KW_EXCLUSIVE:
                            case KW_UNSIGNED:
                            case KW_WHILE:
                            case KW_READ:
                            case KW_PURGE:
                            case KW_ANALYZE:
                            case KW_BEFORE:
                            case KW_CONTINUE:
                            case KW_RECORDREADER:
                            case KW_RECORDWRITER:
                            case KW_SEMI:
                            case KW_TOUCH:
                            case KW_ARCHIVE:
                            case KW_UNARCHIVE:
                            case KW_COMPUTE:
                            case KW_STATISTICS:
                            case KW_USE:
                            case KW_OPTION:
                            case KW_CONCATENATE:
                            case KW_SHOW_DATABASE:
                            case KW_RESTRICT:
                            case KW_CASCADE:
                            case KW_SKEWED:
                            case KW_DIRECTORIES:
                            case KW_SETS:
                            case KW_NOSCAN:
                            case KW_ROLE:
                            case KW_ROLES:
                            case KW_URI:
                            case KW_SERVER:
                            case KW_ADMIN:
                            case KW_OWNER:
                            case KW_PRINCIPALS:
                            case KW_COMPACT:
                            case KW_COMPACTIONS:
                            case KW_TRANSACTIONS:
                            case KW_REWRITE:
                            case KW_REOPTIMIZATION:
                            case KW_RELOAD:
                            case KW_YEAR:
                            case KW_QUERY:
                            case KW_QUARTER:
                            case KW_MONTH:
                            case KW_WEEK:
                            case KW_DAY:
                            case KW_DOW:
                            case KW_HOUR:
                            case KW_MINUTE:
                            case KW_SECOND:
                            case KW_TRANSACTION:
                            case KW_WORK:
                            case KW_WRITE:
                            case KW_ISOLATION:
                            case KW_LEVEL:
                            case KW_SNAPSHOT:
                            case KW_AUTOCOMMIT:
                            case KW_CACHE:
                            case KW_ENFORCED:
                            case KW_VALIDATE:
                            case KW_NOVALIDATE:
                            case KW_RELY:
                            case KW_NORELY:
                            case KW_KEY:
                            case KW_ABORT:
                            case KW_MATCHED:
                            case KW_REPL:
                            case KW_DUMP:
                            case KW_STATUS:
                            case KW_VECTORIZATION:
                            case KW_SUMMARY:
                            case KW_OPERATOR:
                            case KW_EXPRESSION:
                            case KW_DETAIL:
                            case KW_WAIT:
                            case KW_RESOURCE:
                            case KW_PLAN:
                            case KW_QUERY_PARALLELISM:
                            case KW_PLANS:
                            case KW_ACTIVATE:
                            case KW_DEFAULT:
                            case KW_CHECK:
                            case KW_POOL:
                            case KW_MOVE:
                            case KW_DO:
                            case KW_ALLOC_FRACTION:
                            case KW_SCHEDULING_POLICY:
                            case KW_PATH:
                            case KW_MAPPING:
                            case KW_WORKLOAD:
                            case KW_MANAGEMENT:
                            case KW_ACTIVE:
                            case KW_UNMANAGED:
                            case Identifier:
                                {
                                    setState(3111);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 369, _ctx)) {
                                        case 1:
                                            {
                                                setState(3109);
                                                aliasList();
                                            }
                                            break;
                                        case 2:
                                            {
                                                setState(3110);
                                                columnNameTypeList();
                                            }
                                            break;
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

                setState(3118);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ROW) {
                    {
                        setState(3117);
                        rowFormat();
                    }
                }

                setState(3121);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_RECORDREADER) {
                    {
                        setState(3120);
                        recordReader();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectExpressionContext extends ParserRuleContext {
        public TableAllColumnsContext tableAllColumns() {
            return getRuleContext(TableAllColumnsContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public SelectExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectExpressionContext selectExpression() throws RecognitionException {
        SelectExpressionContext _localctx = new SelectExpressionContext(_ctx, getState());
        enterRule(_localctx, 512, RULE_selectExpression);
        try {
            setState(3125);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 374, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3123);
                        tableAllColumns();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3124);
                        expression(0);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SelectExpressionListContext extends ParserRuleContext {
        public List<SelectExpressionContext> selectExpression() {
            return getRuleContexts(SelectExpressionContext.class);
        }

        public SelectExpressionContext selectExpression(int i) {
            return getRuleContext(SelectExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public SelectExpressionListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectExpressionList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSelectExpressionList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSelectExpressionList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSelectExpressionList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SelectExpressionListContext selectExpressionList() throws RecognitionException {
        SelectExpressionListContext _localctx = new SelectExpressionListContext(_ctx, getState());
        enterRule(_localctx, 514, RULE_selectExpressionList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3127);
                selectExpression();
                setState(3132);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3128);
                            match(COMMA);
                            setState(3129);
                            selectExpression();
                        }
                    }
                    setState(3134);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_clauseContext extends ParserRuleContext {
        public TerminalNode KW_WINDOW() {
            return getToken(HiveParser.KW_WINDOW, 0);
        }

        public List<Window_defnContext> window_defn() {
            return getRuleContexts(Window_defnContext.class);
        }

        public Window_defnContext window_defn(int i) {
            return getRuleContext(Window_defnContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public Window_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWindow_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_clauseContext window_clause() throws RecognitionException {
        Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
        enterRule(_localctx, 516, RULE_window_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3135);
                match(KW_WINDOW);
                setState(3136);
                window_defn();
                setState(3141);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3137);
                            match(COMMA);
                            setState(3138);
                            window_defn();
                        }
                    }
                    setState(3143);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_defnContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public Window_specificationContext window_specification() {
            return getRuleContext(Window_specificationContext.class, 0);
        }

        public Window_defnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_defn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_defn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_defn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWindow_defn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_defnContext window_defn() throws RecognitionException {
        Window_defnContext _localctx = new Window_defnContext(_ctx, getState());
        enterRule(_localctx, 518, RULE_window_defn);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3144);
                identifier();
                setState(3145);
                match(KW_AS);
                setState(3146);
                window_specification();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_specificationContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public PartitioningSpecContext partitioningSpec() {
            return getRuleContext(PartitioningSpecContext.class, 0);
        }

        public Window_frameContext window_frame() {
            return getRuleContext(Window_frameContext.class, 0);
        }

        public Window_specificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_specification;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_specification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_specification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWindow_specification(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_specificationContext window_specification() throws RecognitionException {
        Window_specificationContext _localctx = new Window_specificationContext(_ctx, getState());
        enterRule(_localctx, 520, RULE_window_specification);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3160);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_ASC:
                    case KW_DESC:
                    case KW_NULLS:
                    case KW_LAST:
                    case KW_OVERWRITE:
                    case KW_PARTITIONS:
                    case KW_TABLES:
                    case KW_COLUMNS:
                    case KW_INDEX:
                    case KW_INDEXES:
                    case KW_REBUILD:
                    case KW_FUNCTIONS:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_REPAIR:
                    case KW_DIRECTORY:
                    case KW_CLUSTER:
                    case KW_DISTRIBUTE:
                    case KW_SORT:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_REPLICATION:
                    case KW_METADATA:
                    case KW_DATA:
                    case KW_INPATH:
                    case KW_CHANGE:
                    case KW_FIRST:
                    case KW_AFTER:
                    case KW_RENAME:
                    case KW_COMMENT:
                    case KW_TINYINT:
                    case KW_DATETIME:
                    case KW_ZONE:
                    case KW_STRING:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                    case KW_PARTITIONED:
                    case KW_CLUSTERED:
                    case KW_SORTED:
                    case KW_BUCKETS:
                    case KW_FORMAT:
                    case KW_DELIMITED:
                    case KW_FIELDS:
                    case KW_TERMINATED:
                    case KW_ESCAPED:
                    case KW_COLLECTION:
                    case KW_ITEMS:
                    case KW_KEYS:
                    case KW_KEY_TYPE:
                    case KW_KILL:
                    case KW_LINES:
                    case KW_STORED:
                    case KW_FILEFORMAT:
                    case KW_INPUTFORMAT:
                    case KW_OUTPUTFORMAT:
                    case KW_INPUTDRIVER:
                    case KW_OUTPUTDRIVER:
                    case KW_ENABLE:
                    case KW_DISABLE:
                    case KW_LOCATION:
                    case KW_BUCKET:
                    case KW_ADD:
                    case KW_REPLACE:
                    case KW_TEMPORARY:
                    case KW_FILE:
                    case KW_JAR:
                    case KW_EXPLAIN:
                    case KW_FORMATTED:
                    case KW_DEPENDENCY:
                    case KW_LOGICAL:
                    case KW_SERDE:
                    case KW_DEFERRED:
                    case KW_SERDEPROPERTIES:
                    case KW_DBPROPERTIES:
                    case KW_LIMIT:
                    case KW_OFFSET:
                    case KW_UNSET:
                    case KW_TBLPROPERTIES:
                    case KW_IDXPROPERTIES:
                    case KW_VALUE_TYPE:
                    case KW_ELEM_TYPE:
                    case KW_DEFINED:
                    case KW_MAPJOIN:
                    case KW_STREAMTABLE:
                    case KW_CLUSTERSTATUS:
                    case KW_UTC:
                    case KW_UTCTIMESTAMP:
                    case KW_LONG:
                    case KW_PLUS:
                    case KW_VIEW:
                    case KW_VIEWS:
                    case KW_DATABASES:
                    case KW_MATERIALIZED:
                    case KW_SCHEMA:
                    case KW_SCHEMAS:
                    case KW_SSL:
                    case KW_UNDO:
                    case KW_LOCK:
                    case KW_LOCKS:
                    case KW_UNLOCK:
                    case KW_SHARED:
                    case KW_EXCLUSIVE:
                    case KW_UNSIGNED:
                    case KW_WHILE:
                    case KW_READ:
                    case KW_PURGE:
                    case KW_ANALYZE:
                    case KW_BEFORE:
                    case KW_CONTINUE:
                    case KW_RECORDREADER:
                    case KW_RECORDWRITER:
                    case KW_SEMI:
                    case KW_TOUCH:
                    case KW_ARCHIVE:
                    case KW_UNARCHIVE:
                    case KW_COMPUTE:
                    case KW_STATISTICS:
                    case KW_USE:
                    case KW_OPTION:
                    case KW_CONCATENATE:
                    case KW_SHOW_DATABASE:
                    case KW_RESTRICT:
                    case KW_CASCADE:
                    case KW_SKEWED:
                    case KW_DIRECTORIES:
                    case KW_SETS:
                    case KW_NOSCAN:
                    case KW_ROLE:
                    case KW_ROLES:
                    case KW_URI:
                    case KW_SERVER:
                    case KW_ADMIN:
                    case KW_OWNER:
                    case KW_PRINCIPALS:
                    case KW_COMPACT:
                    case KW_COMPACTIONS:
                    case KW_TRANSACTIONS:
                    case KW_REWRITE:
                    case KW_REOPTIMIZATION:
                    case KW_RELOAD:
                    case KW_YEAR:
                    case KW_QUERY:
                    case KW_QUARTER:
                    case KW_MONTH:
                    case KW_WEEK:
                    case KW_DAY:
                    case KW_DOW:
                    case KW_HOUR:
                    case KW_MINUTE:
                    case KW_SECOND:
                    case KW_TRANSACTION:
                    case KW_WORK:
                    case KW_WRITE:
                    case KW_ISOLATION:
                    case KW_LEVEL:
                    case KW_SNAPSHOT:
                    case KW_AUTOCOMMIT:
                    case KW_CACHE:
                    case KW_ENFORCED:
                    case KW_VALIDATE:
                    case KW_NOVALIDATE:
                    case KW_RELY:
                    case KW_NORELY:
                    case KW_KEY:
                    case KW_ABORT:
                    case KW_MATCHED:
                    case KW_REPL:
                    case KW_DUMP:
                    case KW_STATUS:
                    case KW_VECTORIZATION:
                    case KW_SUMMARY:
                    case KW_OPERATOR:
                    case KW_EXPRESSION:
                    case KW_DETAIL:
                    case KW_WAIT:
                    case KW_RESOURCE:
                    case KW_PLAN:
                    case KW_QUERY_PARALLELISM:
                    case KW_PLANS:
                    case KW_ACTIVATE:
                    case KW_DEFAULT:
                    case KW_CHECK:
                    case KW_POOL:
                    case KW_MOVE:
                    case KW_DO:
                    case KW_ALLOC_FRACTION:
                    case KW_SCHEDULING_POLICY:
                    case KW_PATH:
                    case KW_MAPPING:
                    case KW_WORKLOAD:
                    case KW_MANAGEMENT:
                    case KW_ACTIVE:
                    case KW_UNMANAGED:
                    case Identifier:
                        {
                            setState(3148);
                            identifier();
                        }
                        break;
                    case LPAREN:
                        {
                            {
                                setState(3149);
                                match(LPAREN);
                                setState(3151);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 377, _ctx)) {
                                    case 1:
                                        {
                                            setState(3150);
                                            identifier();
                                        }
                                        break;
                                }
                                setState(3154);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if ((((_la) & ~0x3f) == 0
                                        && ((1L << _la) & 15762633055600640L) != 0)) {
                                    {
                                        setState(3153);
                                        partitioningSpec();
                                    }
                                }

                                setState(3157);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if (_la == KW_ROWS || _la == KW_RANGE) {
                                    {
                                        setState(3156);
                                        window_frame();
                                    }
                                }

                                setState(3159);
                                match(RPAREN);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_frameContext extends ParserRuleContext {
        public Window_range_expressionContext window_range_expression() {
            return getRuleContext(Window_range_expressionContext.class, 0);
        }

        public Window_value_expressionContext window_value_expression() {
            return getRuleContext(Window_value_expressionContext.class, 0);
        }

        public Window_frameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_frame;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_frame(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_frame(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWindow_frame(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_frameContext window_frame() throws RecognitionException {
        Window_frameContext _localctx = new Window_frameContext(_ctx, getState());
        enterRule(_localctx, 522, RULE_window_frame);
        try {
            setState(3164);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ROWS:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3162);
                        window_range_expression();
                    }
                    break;
                case KW_RANGE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3163);
                        window_value_expression();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_range_expressionContext extends ParserRuleContext {
        public TerminalNode KW_ROWS() {
            return getToken(HiveParser.KW_ROWS, 0);
        }

        public Window_frame_start_boundaryContext window_frame_start_boundary() {
            return getRuleContext(Window_frame_start_boundaryContext.class, 0);
        }

        public TerminalNode KW_BETWEEN() {
            return getToken(HiveParser.KW_BETWEEN, 0);
        }

        public List<Window_frame_boundaryContext> window_frame_boundary() {
            return getRuleContexts(Window_frame_boundaryContext.class);
        }

        public Window_frame_boundaryContext window_frame_boundary(int i) {
            return getRuleContext(Window_frame_boundaryContext.class, i);
        }

        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public Window_range_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_range_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_range_expression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_range_expression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitWindow_range_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_range_expressionContext window_range_expression()
            throws RecognitionException {
        Window_range_expressionContext _localctx =
                new Window_range_expressionContext(_ctx, getState());
        enterRule(_localctx, 524, RULE_window_range_expression);
        try {
            setState(3174);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 382, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3166);
                        match(KW_ROWS);
                        setState(3167);
                        window_frame_start_boundary();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3168);
                        match(KW_ROWS);
                        setState(3169);
                        match(KW_BETWEEN);
                        setState(3170);
                        window_frame_boundary();
                        setState(3171);
                        match(KW_AND);
                        setState(3172);
                        window_frame_boundary();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_value_expressionContext extends ParserRuleContext {
        public TerminalNode KW_RANGE() {
            return getToken(HiveParser.KW_RANGE, 0);
        }

        public Window_frame_start_boundaryContext window_frame_start_boundary() {
            return getRuleContext(Window_frame_start_boundaryContext.class, 0);
        }

        public TerminalNode KW_BETWEEN() {
            return getToken(HiveParser.KW_BETWEEN, 0);
        }

        public List<Window_frame_boundaryContext> window_frame_boundary() {
            return getRuleContexts(Window_frame_boundaryContext.class);
        }

        public Window_frame_boundaryContext window_frame_boundary(int i) {
            return getRuleContext(Window_frame_boundaryContext.class, i);
        }

        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public Window_value_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_value_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_value_expression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_value_expression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitWindow_value_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_value_expressionContext window_value_expression()
            throws RecognitionException {
        Window_value_expressionContext _localctx =
                new Window_value_expressionContext(_ctx, getState());
        enterRule(_localctx, 526, RULE_window_value_expression);
        try {
            setState(3184);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 383, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3176);
                        match(KW_RANGE);
                        setState(3177);
                        window_frame_start_boundary();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3178);
                        match(KW_RANGE);
                        setState(3179);
                        match(KW_BETWEEN);
                        setState(3180);
                        window_frame_boundary();
                        setState(3181);
                        match(KW_AND);
                        setState(3182);
                        window_frame_boundary();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_frame_start_boundaryContext extends ParserRuleContext {
        public TerminalNode KW_UNBOUNDED() {
            return getToken(HiveParser.KW_UNBOUNDED, 0);
        }

        public TerminalNode KW_PRECEDING() {
            return getToken(HiveParser.KW_PRECEDING, 0);
        }

        public TerminalNode KW_CURRENT() {
            return getToken(HiveParser.KW_CURRENT, 0);
        }

        public TerminalNode KW_ROW() {
            return getToken(HiveParser.KW_ROW, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public Window_frame_start_boundaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_frame_start_boundary;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_frame_start_boundary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_frame_start_boundary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitWindow_frame_start_boundary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_frame_start_boundaryContext window_frame_start_boundary()
            throws RecognitionException {
        Window_frame_start_boundaryContext _localctx =
                new Window_frame_start_boundaryContext(_ctx, getState());
        enterRule(_localctx, 528, RULE_window_frame_start_boundary);
        try {
            setState(3192);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_UNBOUNDED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3186);
                        match(KW_UNBOUNDED);
                        setState(3187);
                        match(KW_PRECEDING);
                    }
                    break;
                case KW_CURRENT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3188);
                        match(KW_CURRENT);
                        setState(3189);
                        match(KW_ROW);
                    }
                    break;
                case Number:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3190);
                        match(Number);
                        setState(3191);
                        match(KW_PRECEDING);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Window_frame_boundaryContext extends ParserRuleContext {
        public TerminalNode KW_UNBOUNDED() {
            return getToken(HiveParser.KW_UNBOUNDED, 0);
        }

        public TerminalNode KW_PRECEDING() {
            return getToken(HiveParser.KW_PRECEDING, 0);
        }

        public TerminalNode KW_FOLLOWING() {
            return getToken(HiveParser.KW_FOLLOWING, 0);
        }

        public TerminalNode KW_CURRENT() {
            return getToken(HiveParser.KW_CURRENT, 0);
        }

        public TerminalNode KW_ROW() {
            return getToken(HiveParser.KW_ROW, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public Window_frame_boundaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_window_frame_boundary;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWindow_frame_boundary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWindow_frame_boundary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWindow_frame_boundary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Window_frame_boundaryContext window_frame_boundary() throws RecognitionException {
        Window_frame_boundaryContext _localctx = new Window_frame_boundaryContext(_ctx, getState());
        enterRule(_localctx, 530, RULE_window_frame_boundary);
        int _la;
        try {
            setState(3200);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_UNBOUNDED:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3194);
                        match(KW_UNBOUNDED);
                        setState(3195);
                        _la = _input.LA(1);
                        if (!(_la == KW_PRECEDING || _la == KW_FOLLOWING)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                case KW_CURRENT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3196);
                        match(KW_CURRENT);
                        setState(3197);
                        match(KW_ROW);
                    }
                    break;
                case Number:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3198);
                        match(Number);
                        setState(3199);
                        _la = _input.LA(1);
                        if (!(_la == KW_PRECEDING || _la == KW_FOLLOWING)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableAllColumnsContext extends ParserRuleContext {
        public TerminalNode STAR() {
            return getToken(HiveParser.STAR, 0);
        }

        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public TableAllColumnsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableAllColumns;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableAllColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableAllColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableAllColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableAllColumnsContext tableAllColumns() throws RecognitionException {
        TableAllColumnsContext _localctx = new TableAllColumnsContext(_ctx, getState());
        enterRule(_localctx, 532, RULE_tableAllColumns);
        try {
            setState(3207);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case STAR:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3202);
                        match(STAR);
                    }
                    break;
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3203);
                        tableName();
                        setState(3204);
                        match(DOT);
                        setState(3205);
                        match(STAR);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableOrColumnContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TableOrColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableOrColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableOrColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableOrColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableOrColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableOrColumnContext tableOrColumn() throws RecognitionException {
        TableOrColumnContext _localctx = new TableOrColumnContext(_ctx, getState());
        enterRule(_localctx, 534, RULE_tableOrColumn);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3209);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionListContext extends ParserRuleContext {
        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ExpressionListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpressionList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpressionList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExpressionList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionListContext expressionList() throws RecognitionException {
        ExpressionListContext _localctx = new ExpressionListContext(_ctx, getState());
        enterRule(_localctx, 536, RULE_expressionList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3211);
                expression(0);
                setState(3216);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3212);
                            match(COMMA);
                            setState(3213);
                            expression(0);
                        }
                    }
                    setState(3218);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AliasListContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public AliasListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_aliasList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAliasList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAliasList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAliasList(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AliasListContext aliasList() throws RecognitionException {
        AliasListContext _localctx = new AliasListContext(_ctx, getState());
        enterRule(_localctx, 538, RULE_aliasList);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3219);
                identifier();
                setState(3224);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 388, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3220);
                                match(COMMA);
                                setState(3221);
                                identifier();
                            }
                        }
                    }
                    setState(3226);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 388, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromClauseContext extends ParserRuleContext {
        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public FromSourceContext fromSource() {
            return getRuleContext(FromSourceContext.class, 0);
        }

        public FromClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFromClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFromClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFromClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromClauseContext fromClause() throws RecognitionException {
        FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
        enterRule(_localctx, 540, RULE_fromClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3227);
                match(KW_FROM);
                setState(3228);
                fromSource();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FromSourceContext extends ParserRuleContext {
        public UniqueJoinTokenContext uniqueJoinToken() {
            return getRuleContext(UniqueJoinTokenContext.class, 0);
        }

        public List<UniqueJoinSourceContext> uniqueJoinSource() {
            return getRuleContexts(UniqueJoinSourceContext.class);
        }

        public UniqueJoinSourceContext uniqueJoinSource(int i) {
            return getRuleContext(UniqueJoinSourceContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public JoinSourceContext joinSource() {
            return getRuleContext(JoinSourceContext.class, 0);
        }

        public FromSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFromSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFromSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFromSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FromSourceContext fromSource() throws RecognitionException {
        FromSourceContext _localctx = new FromSourceContext(_ctx, getState());
        enterRule(_localctx, 542, RULE_fromSource);
        int _la;
        try {
            setState(3239);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_UNIQUEJOIN:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3230);
                        uniqueJoinToken();
                        setState(3231);
                        uniqueJoinSource();
                        setState(3234);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(3232);
                                    match(COMMA);
                                    setState(3233);
                                    uniqueJoinSource();
                                }
                            }
                            setState(3236);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == COMMA);
                    }
                    break;
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLE:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case LPAREN:
                case Identifier:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3238);
                        joinSource();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AtomjoinSourceContext extends ParserRuleContext {
        public TableSourceContext tableSource() {
            return getRuleContext(TableSourceContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public VirtualTableSourceContext virtualTableSource() {
            return getRuleContext(VirtualTableSourceContext.class, 0);
        }

        public SubQuerySourceContext subQuerySource() {
            return getRuleContext(SubQuerySourceContext.class, 0);
        }

        public PartitionedTableFunctionContext partitionedTableFunction() {
            return getRuleContext(PartitionedTableFunctionContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public JoinSourceContext joinSource() {
            return getRuleContext(JoinSourceContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public AtomjoinSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_atomjoinSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAtomjoinSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAtomjoinSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAtomjoinSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AtomjoinSourceContext atomjoinSource() throws RecognitionException {
        AtomjoinSourceContext _localctx = new AtomjoinSourceContext(_ctx, getState());
        enterRule(_localctx, 544, RULE_atomjoinSource);
        try {
            int _alt;
            setState(3273);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 395, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3241);
                        tableSource();
                        setState(3245);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 391, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(3242);
                                        lateralView();
                                    }
                                }
                            }
                            setState(3247);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 391, _ctx);
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3248);
                        virtualTableSource();
                        setState(3252);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 392, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(3249);
                                        lateralView();
                                    }
                                }
                            }
                            setState(3254);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 392, _ctx);
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3255);
                        subQuerySource();
                        setState(3259);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 393, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(3256);
                                        lateralView();
                                    }
                                }
                            }
                            setState(3261);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 393, _ctx);
                        }
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3262);
                        partitionedTableFunction();
                        setState(3266);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 394, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(3263);
                                        lateralView();
                                    }
                                }
                            }
                            setState(3268);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 394, _ctx);
                        }
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3269);
                        match(LPAREN);
                        setState(3270);
                        joinSource();
                        setState(3271);
                        match(RPAREN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinSourceContext extends ParserRuleContext {
        public AtomjoinSourceContext atomjoinSource() {
            return getRuleContext(AtomjoinSourceContext.class, 0);
        }

        public List<JoinTokenContext> joinToken() {
            return getRuleContexts(JoinTokenContext.class);
        }

        public JoinTokenContext joinToken(int i) {
            return getRuleContext(JoinTokenContext.class, i);
        }

        public List<JoinSourcePartContext> joinSourcePart() {
            return getRuleContexts(JoinSourcePartContext.class);
        }

        public JoinSourcePartContext joinSourcePart(int i) {
            return getRuleContext(JoinSourcePartContext.class, i);
        }

        public List<TerminalNode> KW_ON() {
            return getTokens(HiveParser.KW_ON);
        }

        public TerminalNode KW_ON(int i) {
            return getToken(HiveParser.KW_ON, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> KW_USING() {
            return getTokens(HiveParser.KW_USING);
        }

        public TerminalNode KW_USING(int i) {
            return getToken(HiveParser.KW_USING, i);
        }

        public List<ColumnParenthesesListContext> columnParenthesesList() {
            return getRuleContexts(ColumnParenthesesListContext.class);
        }

        public ColumnParenthesesListContext columnParenthesesList(int i) {
            return getRuleContext(ColumnParenthesesListContext.class, i);
        }

        public JoinSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterJoinSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitJoinSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitJoinSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinSourceContext joinSource() throws RecognitionException {
        JoinSourceContext _localctx = new JoinSourceContext(_ctx, getState());
        enterRule(_localctx, 546, RULE_joinSource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3275);
                atomjoinSource();
                setState(3286);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)
                        || _la == KW_CROSS
                        || _la == KW_INNER
                        || _la == COMMA) {
                    {
                        {
                            setState(3276);
                            joinToken();
                            setState(3277);
                            joinSourcePart();
                            setState(3282);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case KW_ON:
                                    {
                                        setState(3278);
                                        match(KW_ON);
                                        setState(3279);
                                        expression(0);
                                    }
                                    break;
                                case KW_USING:
                                    {
                                        setState(3280);
                                        match(KW_USING);
                                        setState(3281);
                                        columnParenthesesList();
                                    }
                                    break;
                                case EOF:
                                case KW_DESC:
                                case KW_ORDER:
                                case KW_GROUP:
                                case KW_HAVING:
                                case KW_WHERE:
                                case KW_FROM:
                                case KW_SELECT:
                                case KW_INSERT:
                                case KW_JOIN:
                                case KW_LEFT:
                                case KW_RIGHT:
                                case KW_FULL:
                                case KW_SHOW:
                                case KW_MSCK:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                case KW_UNION:
                                case KW_EXCEPT:
                                case KW_LOAD:
                                case KW_EXPORT:
                                case KW_IMPORT:
                                case KW_CREATE:
                                case KW_ALTER:
                                case KW_DESCRIBE:
                                case KW_DROP:
                                case KW_MAP:
                                case KW_REDUCE:
                                case KW_KILL:
                                case KW_EXPLAIN:
                                case KW_WITH:
                                case KW_LIMIT:
                                case KW_SET:
                                case KW_DELETE:
                                case KW_MINUS:
                                case KW_INTERSECT:
                                case KW_GRANT:
                                case KW_REVOKE:
                                case KW_LOCK:
                                case KW_UNLOCK:
                                case KW_ANALYZE:
                                case KW_CROSS:
                                case KW_USE:
                                case KW_UPDATE:
                                case KW_WINDOW:
                                case KW_TRUNCATE:
                                case KW_INNER:
                                case KW_RELOAD:
                                case KW_START:
                                case KW_COMMIT:
                                case KW_ROLLBACK:
                                case KW_ABORT:
                                case KW_MERGE:
                                case KW_REPL:
                                case COMMA:
                                case SEMICOLON:
                                case LPAREN:
                                case RPAREN:
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                    setState(3288);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinSourcePartContext extends ParserRuleContext {
        public TableSourceContext tableSource() {
            return getRuleContext(TableSourceContext.class, 0);
        }

        public VirtualTableSourceContext virtualTableSource() {
            return getRuleContext(VirtualTableSourceContext.class, 0);
        }

        public SubQuerySourceContext subQuerySource() {
            return getRuleContext(SubQuerySourceContext.class, 0);
        }

        public PartitionedTableFunctionContext partitionedTableFunction() {
            return getRuleContext(PartitionedTableFunctionContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public JoinSourcePartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinSourcePart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterJoinSourcePart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitJoinSourcePart(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitJoinSourcePart(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinSourcePartContext joinSourcePart() throws RecognitionException {
        JoinSourcePartContext _localctx = new JoinSourcePartContext(_ctx, getState());
        enterRule(_localctx, 548, RULE_joinSourcePart);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3293);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 398, _ctx)) {
                    case 1:
                        {
                            setState(3289);
                            tableSource();
                        }
                        break;
                    case 2:
                        {
                            setState(3290);
                            virtualTableSource();
                        }
                        break;
                    case 3:
                        {
                            setState(3291);
                            subQuerySource();
                        }
                        break;
                    case 4:
                        {
                            setState(3292);
                            partitionedTableFunction();
                        }
                        break;
                }
                setState(3298);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 399, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3295);
                                lateralView();
                            }
                        }
                    }
                    setState(3300);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 399, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UniqueJoinSourceContext extends ParserRuleContext {
        public UniqueJoinTableSourceContext uniqueJoinTableSource() {
            return getRuleContext(UniqueJoinTableSourceContext.class, 0);
        }

        public UniqueJoinExprContext uniqueJoinExpr() {
            return getRuleContext(UniqueJoinExprContext.class, 0);
        }

        public TerminalNode KW_PRESERVE() {
            return getToken(HiveParser.KW_PRESERVE, 0);
        }

        public UniqueJoinSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_uniqueJoinSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUniqueJoinSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUniqueJoinSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUniqueJoinSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UniqueJoinSourceContext uniqueJoinSource() throws RecognitionException {
        UniqueJoinSourceContext _localctx = new UniqueJoinSourceContext(_ctx, getState());
        enterRule(_localctx, 550, RULE_uniqueJoinSource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3302);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PRESERVE) {
                    {
                        setState(3301);
                        match(KW_PRESERVE);
                    }
                }

                setState(3304);
                uniqueJoinTableSource();
                setState(3305);
                uniqueJoinExpr();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UniqueJoinExprContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ExpressionListContext expressionList() {
            return getRuleContext(ExpressionListContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public UniqueJoinExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_uniqueJoinExpr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUniqueJoinExpr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUniqueJoinExpr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUniqueJoinExpr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UniqueJoinExprContext uniqueJoinExpr() throws RecognitionException {
        UniqueJoinExprContext _localctx = new UniqueJoinExprContext(_ctx, getState());
        enterRule(_localctx, 552, RULE_uniqueJoinExpr);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3307);
                match(LPAREN);
                setState(3308);
                expressionList();
                setState(3309);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UniqueJoinTokenContext extends ParserRuleContext {
        public TerminalNode KW_UNIQUEJOIN() {
            return getToken(HiveParser.KW_UNIQUEJOIN, 0);
        }

        public UniqueJoinTokenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_uniqueJoinToken;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUniqueJoinToken(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUniqueJoinToken(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUniqueJoinToken(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UniqueJoinTokenContext uniqueJoinToken() throws RecognitionException {
        UniqueJoinTokenContext _localctx = new UniqueJoinTokenContext(_ctx, getState());
        enterRule(_localctx, 554, RULE_uniqueJoinToken);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3311);
                match(KW_UNIQUEJOIN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class JoinTokenContext extends ParserRuleContext {
        public TerminalNode KW_JOIN() {
            return getToken(HiveParser.KW_JOIN, 0);
        }

        public TerminalNode KW_INNER() {
            return getToken(HiveParser.KW_INNER, 0);
        }

        public TerminalNode COMMA() {
            return getToken(HiveParser.COMMA, 0);
        }

        public TerminalNode KW_CROSS() {
            return getToken(HiveParser.KW_CROSS, 0);
        }

        public TerminalNode KW_LEFT() {
            return getToken(HiveParser.KW_LEFT, 0);
        }

        public TerminalNode KW_OUTER() {
            return getToken(HiveParser.KW_OUTER, 0);
        }

        public TerminalNode KW_RIGHT() {
            return getToken(HiveParser.KW_RIGHT, 0);
        }

        public TerminalNode KW_FULL() {
            return getToken(HiveParser.KW_FULL, 0);
        }

        public TerminalNode KW_SEMI() {
            return getToken(HiveParser.KW_SEMI, 0);
        }

        public JoinTokenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinToken;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterJoinToken(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitJoinToken(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitJoinToken(this);
            else return visitor.visitChildren(this);
        }
    }

    public final JoinTokenContext joinToken() throws RecognitionException {
        JoinTokenContext _localctx = new JoinTokenContext(_ctx, getState());
        enterRule(_localctx, 556, RULE_joinToken);
        int _la;
        try {
            setState(3337);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 404, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3313);
                        match(KW_JOIN);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3314);
                        match(KW_INNER);
                        setState(3315);
                        match(KW_JOIN);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3316);
                        match(COMMA);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3317);
                        match(KW_CROSS);
                        setState(3318);
                        match(KW_JOIN);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3319);
                        match(KW_LEFT);
                        setState(3321);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_OUTER) {
                            {
                                setState(3320);
                                match(KW_OUTER);
                            }
                        }

                        setState(3323);
                        match(KW_JOIN);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(3324);
                        match(KW_RIGHT);
                        setState(3326);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_OUTER) {
                            {
                                setState(3325);
                                match(KW_OUTER);
                            }
                        }

                        setState(3328);
                        match(KW_JOIN);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(3329);
                        match(KW_FULL);
                        setState(3331);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_OUTER) {
                            {
                                setState(3330);
                                match(KW_OUTER);
                            }
                        }

                        setState(3333);
                        match(KW_JOIN);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(3334);
                        match(KW_LEFT);
                        setState(3335);
                        match(KW_SEMI);
                        setState(3336);
                        match(KW_JOIN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LateralViewContext extends ParserRuleContext {
        public TerminalNode KW_LATERAL() {
            return getToken(HiveParser.KW_LATERAL, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public TerminalNode KW_OUTER() {
            return getToken(HiveParser.KW_OUTER, 0);
        }

        public Function_Context function_() {
            return getRuleContext(Function_Context.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public ValuesClauseContext valuesClause() {
            return getRuleContext(ValuesClauseContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public LateralViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lateralView;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterLateralView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitLateralView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitLateralView(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LateralViewContext lateralView() throws RecognitionException {
        LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
        enterRule(_localctx, 558, RULE_lateralView);
        int _la;
        try {
            int _alt;
            setState(3398);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 414, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3339);
                        match(KW_LATERAL);
                        setState(3340);
                        match(KW_VIEW);
                        setState(3341);
                        match(KW_OUTER);
                        setState(3342);
                        function_();
                        setState(3343);
                        tableAlias();
                        setState(3353);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(3344);
                                match(KW_AS);
                                setState(3345);
                                identifier();
                                setState(3350);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 405, _ctx);
                                while (_alt != 2
                                        && _alt
                                                != org.antlr
                                                        .v4
                                                        .runtime
                                                        .atn
                                                        .ATN
                                                        .INVALID_ALT_NUMBER) {
                                    if (_alt == 1) {
                                        {
                                            {
                                                setState(3346);
                                                match(COMMA);
                                                setState(3347);
                                                identifier();
                                            }
                                        }
                                    }
                                    setState(3352);
                                    _errHandler.sync(this);
                                    _alt = getInterpreter().adaptivePredict(_input, 405, _ctx);
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3356);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA) {
                            {
                                setState(3355);
                                match(COMMA);
                            }
                        }

                        setState(3358);
                        match(KW_LATERAL);
                        setState(3359);
                        match(KW_VIEW);
                        setState(3360);
                        function_();
                        setState(3361);
                        tableAlias();
                        setState(3371);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(3362);
                                match(KW_AS);
                                setState(3363);
                                identifier();
                                setState(3368);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 408, _ctx);
                                while (_alt != 2
                                        && _alt
                                                != org.antlr
                                                        .v4
                                                        .runtime
                                                        .atn
                                                        .ATN
                                                        .INVALID_ALT_NUMBER) {
                                    if (_alt == 1) {
                                        {
                                            {
                                                setState(3364);
                                                match(COMMA);
                                                setState(3365);
                                                identifier();
                                            }
                                        }
                                    }
                                    setState(3370);
                                    _errHandler.sync(this);
                                    _alt = getInterpreter().adaptivePredict(_input, 408, _ctx);
                                }
                            }
                        }
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3374);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA) {
                            {
                                setState(3373);
                                match(COMMA);
                            }
                        }

                        setState(3376);
                        match(KW_LATERAL);
                        setState(3377);
                        match(KW_TABLE);
                        setState(3378);
                        match(LPAREN);
                        setState(3379);
                        valuesClause();
                        setState(3380);
                        match(RPAREN);
                        setState(3382);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(3381);
                                match(KW_AS);
                            }
                        }

                        setState(3384);
                        tableAlias();
                        setState(3396);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 413, _ctx)) {
                            case 1:
                                {
                                    setState(3385);
                                    match(LPAREN);
                                    setState(3386);
                                    identifier();
                                    setState(3391);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3387);
                                                match(COMMA);
                                                setState(3388);
                                                identifier();
                                            }
                                        }
                                        setState(3393);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                    setState(3394);
                                    match(RPAREN);
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableAliasContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TableAliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableAlias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableAlias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableAlias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableAlias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableAliasContext tableAlias() throws RecognitionException {
        TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
        enterRule(_localctx, 560, RULE_tableAlias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3400);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableBucketSampleContext extends ParserRuleContext {
        public TerminalNode KW_TABLESAMPLE() {
            return getToken(HiveParser.KW_TABLESAMPLE, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode KW_BUCKET() {
            return getToken(HiveParser.KW_BUCKET, 0);
        }

        public List<TerminalNode> Number() {
            return getTokens(HiveParser.Number);
        }

        public TerminalNode Number(int i) {
            return getToken(HiveParser.Number, i);
        }

        public TerminalNode KW_OUT() {
            return getToken(HiveParser.KW_OUT, 0);
        }

        public TerminalNode KW_OF() {
            return getToken(HiveParser.KW_OF, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public TableBucketSampleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableBucketSample;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableBucketSample(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableBucketSample(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableBucketSample(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableBucketSampleContext tableBucketSample() throws RecognitionException {
        TableBucketSampleContext _localctx = new TableBucketSampleContext(_ctx, getState());
        enterRule(_localctx, 562, RULE_tableBucketSample);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3402);
                match(KW_TABLESAMPLE);
                setState(3403);
                match(LPAREN);
                setState(3404);
                match(KW_BUCKET);
                setState(3405);
                match(Number);
                setState(3406);
                match(KW_OUT);
                setState(3407);
                match(KW_OF);
                setState(3408);
                match(Number);
                setState(3418);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ON) {
                    {
                        setState(3409);
                        match(KW_ON);
                        setState(3410);
                        expression(0);
                        setState(3415);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(3411);
                                    match(COMMA);
                                    setState(3412);
                                    expression(0);
                                }
                            }
                            setState(3417);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

                setState(3420);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SplitSampleContext extends ParserRuleContext {
        public TerminalNode KW_TABLESAMPLE() {
            return getToken(HiveParser.KW_TABLESAMPLE, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_PERCENT() {
            return getToken(HiveParser.KW_PERCENT, 0);
        }

        public TerminalNode KW_ROWS() {
            return getToken(HiveParser.KW_ROWS, 0);
        }

        public TerminalNode ByteLengthLiteral() {
            return getToken(HiveParser.ByteLengthLiteral, 0);
        }

        public SplitSampleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_splitSample;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSplitSample(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSplitSample(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSplitSample(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SplitSampleContext splitSample() throws RecognitionException {
        SplitSampleContext _localctx = new SplitSampleContext(_ctx, getState());
        enterRule(_localctx, 564, RULE_splitSample);
        int _la;
        try {
            setState(3431);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 417, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3422);
                        match(KW_TABLESAMPLE);
                        setState(3423);
                        match(LPAREN);
                        setState(3424);
                        match(Number);
                        setState(3425);
                        _la = _input.LA(1);
                        if (!(_la == KW_ROWS || _la == KW_PERCENT)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(3426);
                        match(RPAREN);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3427);
                        match(KW_TABLESAMPLE);
                        setState(3428);
                        match(LPAREN);
                        setState(3429);
                        match(ByteLengthLiteral);
                        setState(3430);
                        match(RPAREN);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableSampleContext extends ParserRuleContext {
        public TableBucketSampleContext tableBucketSample() {
            return getRuleContext(TableBucketSampleContext.class, 0);
        }

        public SplitSampleContext splitSample() {
            return getRuleContext(SplitSampleContext.class, 0);
        }

        public TableSampleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableSample;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableSample(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableSample(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableSample(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableSampleContext tableSample() throws RecognitionException {
        TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
        enterRule(_localctx, 566, RULE_tableSample);
        try {
            setState(3435);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 418, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3433);
                        tableBucketSample();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3434);
                        splitSample();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableSourceContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TablePropertiesContext tableProperties() {
            return getRuleContext(TablePropertiesContext.class, 0);
        }

        public TableSampleContext tableSample() {
            return getRuleContext(TableSampleContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public TableSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableSourceContext tableSource() throws RecognitionException {
        TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
        enterRule(_localctx, 568, RULE_tableSource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3437);
                tableName();
                setState(3439);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 419, _ctx)) {
                    case 1:
                        {
                            setState(3438);
                            tableProperties();
                        }
                        break;
                }
                setState(3442);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TABLESAMPLE) {
                    {
                        setState(3441);
                        tableSample();
                    }
                }

                setState(3448);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 422, _ctx)) {
                    case 1:
                        {
                            setState(3445);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_AS) {
                                {
                                    setState(3444);
                                    match(KW_AS);
                                }
                            }

                            setState(3447);
                            identifier();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class UniqueJoinTableSourceContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public TableSampleContext tableSample() {
            return getRuleContext(TableSampleContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public UniqueJoinTableSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_uniqueJoinTableSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterUniqueJoinTableSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitUniqueJoinTableSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitUniqueJoinTableSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final UniqueJoinTableSourceContext uniqueJoinTableSource() throws RecognitionException {
        UniqueJoinTableSourceContext _localctx = new UniqueJoinTableSourceContext(_ctx, getState());
        enterRule(_localctx, 570, RULE_uniqueJoinTableSource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3450);
                tableName();
                setState(3452);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TABLESAMPLE) {
                    {
                        setState(3451);
                        tableSample();
                    }
                }

                setState(3458);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934250577920L) != 0)
                        || ((((_la - 68)) & ~0x3f) == 0
                                && ((1L << (_la - 68)) & 3458763614599775565L) != 0)
                        || ((((_la - 134)) & ~0x3f) == 0
                                && ((1L << (_la - 134)) & -2319580865570571373L) != 0)
                        || ((((_la - 198)) & ~0x3f) == 0
                                && ((1L << (_la - 198)) & -4618828440659893195L) != 0)
                        || ((((_la - 264)) & ~0x3f) == 0
                                && ((1L << (_la - 264)) & -244939057153L) != 0)
                        || ((((_la - 328)) & ~0x3f) == 0
                                && ((1L << (_la - 328)) & 1099511627779L) != 0)) {
                    {
                        setState(3455);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_AS) {
                            {
                                setState(3454);
                                match(KW_AS);
                            }
                        }

                        setState(3457);
                        identifier();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableNameContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public TableNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableNameContext tableName() throws RecognitionException {
        TableNameContext _localctx = new TableNameContext(_ctx, getState());
        enterRule(_localctx, 572, RULE_tableName);
        try {
            setState(3465);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 426, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3460);
                        identifier();
                        setState(3461);
                        match(DOT);
                        setState(3462);
                        identifier();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3464);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ViewNameContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public ViewNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_viewName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterViewName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitViewName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitViewName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ViewNameContext viewName() throws RecognitionException {
        ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
        enterRule(_localctx, 574, RULE_viewName);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3470);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 427, _ctx)) {
                    case 1:
                        {
                            setState(3467);
                            identifier();
                            setState(3468);
                            match(DOT);
                        }
                        break;
                }
                setState(3472);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubQuerySourceContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public QueryStatementExpressionContext queryStatementExpression() {
            return getRuleContext(QueryStatementExpressionContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public SubQuerySourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_subQuerySource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSubQuerySource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSubQuerySource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSubQuerySource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SubQuerySourceContext subQuerySource() throws RecognitionException {
        SubQuerySourceContext _localctx = new SubQuerySourceContext(_ctx, getState());
        enterRule(_localctx, 576, RULE_subQuerySource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3474);
                match(LPAREN);
                setState(3475);
                queryStatementExpression();
                setState(3476);
                match(RPAREN);
                setState(3478);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AS) {
                    {
                        setState(3477);
                        match(KW_AS);
                    }
                }

                setState(3480);
                identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitioningSpecContext extends ParserRuleContext {
        public PartitionByClauseContext partitionByClause() {
            return getRuleContext(PartitionByClauseContext.class, 0);
        }

        public OrderByClauseContext orderByClause() {
            return getRuleContext(OrderByClauseContext.class, 0);
        }

        public DistributeByClauseContext distributeByClause() {
            return getRuleContext(DistributeByClauseContext.class, 0);
        }

        public SortByClauseContext sortByClause() {
            return getRuleContext(SortByClauseContext.class, 0);
        }

        public ClusterByClauseContext clusterByClause() {
            return getRuleContext(ClusterByClauseContext.class, 0);
        }

        public PartitioningSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitioningSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitioningSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitioningSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartitioningSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitioningSpecContext partitioningSpec() throws RecognitionException {
        PartitioningSpecContext _localctx = new PartitioningSpecContext(_ctx, getState());
        enterRule(_localctx, 578, RULE_partitioningSpec);
        int _la;
        try {
            setState(3493);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_PARTITION:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3482);
                        partitionByClause();
                        setState(3484);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_ORDER) {
                            {
                                setState(3483);
                                orderByClause();
                            }
                        }
                    }
                    break;
                case KW_ORDER:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3486);
                        orderByClause();
                    }
                    break;
                case KW_DISTRIBUTE:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3487);
                        distributeByClause();
                        setState(3489);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == KW_SORT) {
                            {
                                setState(3488);
                                sortByClause();
                            }
                        }
                    }
                    break;
                case KW_SORT:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3491);
                        sortByClause();
                    }
                    break;
                case KW_CLUSTER:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3492);
                        clusterByClause();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionTableFunctionSourceContext extends ParserRuleContext {
        public SubQuerySourceContext subQuerySource() {
            return getRuleContext(SubQuerySourceContext.class, 0);
        }

        public TableSourceContext tableSource() {
            return getRuleContext(TableSourceContext.class, 0);
        }

        public PartitionedTableFunctionContext partitionedTableFunction() {
            return getRuleContext(PartitionedTableFunctionContext.class, 0);
        }

        public PartitionTableFunctionSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionTableFunctionSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionTableFunctionSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionTableFunctionSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPartitionTableFunctionSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionTableFunctionSourceContext partitionTableFunctionSource()
            throws RecognitionException {
        PartitionTableFunctionSourceContext _localctx =
                new PartitionTableFunctionSourceContext(_ctx, getState());
        enterRule(_localctx, 580, RULE_partitionTableFunctionSource);
        try {
            setState(3498);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 432, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3495);
                        subQuerySource();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3496);
                        tableSource();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3497);
                        partitionedTableFunction();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionedTableFunctionContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public TerminalNode KW_ON() {
            return getToken(HiveParser.KW_ON, 0);
        }

        public PartitionTableFunctionSourceContext partitionTableFunctionSource() {
            return getRuleContext(PartitionTableFunctionSourceContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public PartitioningSpecContext partitioningSpec() {
            return getRuleContext(PartitioningSpecContext.class, 0);
        }

        public List<TerminalNode> Identifier() {
            return getTokens(HiveParser.Identifier);
        }

        public TerminalNode Identifier(int i) {
            return getToken(HiveParser.Identifier, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public PartitionedTableFunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionedTableFunction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionedTableFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionedTableFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPartitionedTableFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionedTableFunctionContext partitionedTableFunction()
            throws RecognitionException {
        PartitionedTableFunctionContext _localctx =
                new PartitionedTableFunctionContext(_ctx, getState());
        enterRule(_localctx, 582, RULE_partitionedTableFunction);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3500);
                identifier();
                setState(3501);
                match(LPAREN);
                setState(3502);
                match(KW_ON);
                setState(3503);
                partitionTableFunctionSource();
                setState(3505);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762633055600640L) != 0)) {
                    {
                        setState(3504);
                        partitioningSpec();
                    }
                }

                setState(3522);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == Identifier) {
                    {
                        setState(3507);
                        match(Identifier);
                        setState(3508);
                        match(LPAREN);
                        setState(3509);
                        expression(0);
                        setState(3510);
                        match(RPAREN);
                        setState(3519);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(3511);
                                    match(COMMA);
                                    setState(3512);
                                    match(Identifier);
                                    setState(3513);
                                    match(LPAREN);
                                    setState(3514);
                                    expression(0);
                                    setState(3515);
                                    match(RPAREN);
                                }
                            }
                            setState(3521);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

                setState(3524);
                match(RPAREN);
                setState(3526);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 436, _ctx)) {
                    case 1:
                        {
                            setState(3525);
                            identifier();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhereClauseContext extends ParserRuleContext {
        public TerminalNode KW_WHERE() {
            return getToken(HiveParser.KW_WHERE, 0);
        }

        public SearchConditionContext searchCondition() {
            return getRuleContext(SearchConditionContext.class, 0);
        }

        public WhereClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whereClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhereClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhereClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhereClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhereClauseContext whereClause() throws RecognitionException {
        WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
        enterRule(_localctx, 584, RULE_whereClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3528);
                match(KW_WHERE);
                setState(3529);
                searchCondition();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SearchConditionContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public SearchConditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_searchCondition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSearchCondition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSearchCondition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSearchCondition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SearchConditionContext searchCondition() throws RecognitionException {
        SearchConditionContext _localctx = new SearchConditionContext(_ctx, getState());
        enterRule(_localctx, 586, RULE_searchCondition);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3531);
                expression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValuesClauseContext extends ParserRuleContext {
        public TerminalNode KW_VALUES() {
            return getToken(HiveParser.KW_VALUES, 0);
        }

        public ValuesTableConstructorContext valuesTableConstructor() {
            return getRuleContext(ValuesTableConstructorContext.class, 0);
        }

        public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_valuesClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterValuesClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitValuesClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitValuesClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ValuesClauseContext valuesClause() throws RecognitionException {
        ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
        enterRule(_localctx, 588, RULE_valuesClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3533);
                match(KW_VALUES);
                setState(3534);
                valuesTableConstructor();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValuesTableConstructorContext extends ParserRuleContext {
        public List<ValueRowConstructorContext> valueRowConstructor() {
            return getRuleContexts(ValueRowConstructorContext.class);
        }

        public ValueRowConstructorContext valueRowConstructor(int i) {
            return getRuleContext(ValueRowConstructorContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ValuesTableConstructorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_valuesTableConstructor;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterValuesTableConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitValuesTableConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitValuesTableConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ValuesTableConstructorContext valuesTableConstructor()
            throws RecognitionException {
        ValuesTableConstructorContext _localctx =
                new ValuesTableConstructorContext(_ctx, getState());
        enterRule(_localctx, 590, RULE_valuesTableConstructor);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3536);
                valueRowConstructor();
                setState(3541);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3537);
                            match(COMMA);
                            setState(3538);
                            valueRowConstructor();
                        }
                    }
                    setState(3543);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ValueRowConstructorContext extends ParserRuleContext {
        public ExpressionsInParenthesisContext expressionsInParenthesis() {
            return getRuleContext(ExpressionsInParenthesisContext.class, 0);
        }

        public ValueRowConstructorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_valueRowConstructor;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterValueRowConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitValueRowConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitValueRowConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ValueRowConstructorContext valueRowConstructor() throws RecognitionException {
        ValueRowConstructorContext _localctx = new ValueRowConstructorContext(_ctx, getState());
        enterRule(_localctx, 592, RULE_valueRowConstructor);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3544);
                expressionsInParenthesis();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class VirtualTableSourceContext extends ParserRuleContext {
        public TerminalNode KW_TABLE() {
            return getToken(HiveParser.KW_TABLE, 0);
        }

        public List<TerminalNode> LPAREN() {
            return getTokens(HiveParser.LPAREN);
        }

        public TerminalNode LPAREN(int i) {
            return getToken(HiveParser.LPAREN, i);
        }

        public ValuesClauseContext valuesClause() {
            return getRuleContext(ValuesClauseContext.class, 0);
        }

        public List<TerminalNode> RPAREN() {
            return getTokens(HiveParser.RPAREN);
        }

        public TerminalNode RPAREN(int i) {
            return getToken(HiveParser.RPAREN, i);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public VirtualTableSourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_virtualTableSource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterVirtualTableSource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitVirtualTableSource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitVirtualTableSource(this);
            else return visitor.visitChildren(this);
        }
    }

    public final VirtualTableSourceContext virtualTableSource() throws RecognitionException {
        VirtualTableSourceContext _localctx = new VirtualTableSourceContext(_ctx, getState());
        enterRule(_localctx, 594, RULE_virtualTableSource);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3546);
                match(KW_TABLE);
                setState(3547);
                match(LPAREN);
                setState(3548);
                valuesClause();
                setState(3549);
                match(RPAREN);
                setState(3551);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_AS) {
                    {
                        setState(3550);
                        match(KW_AS);
                    }
                }

                setState(3553);
                tableAlias();
                setState(3563);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LPAREN) {
                    {
                        setState(3554);
                        match(LPAREN);
                        setState(3555);
                        identifier();
                        setState(3560);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(3556);
                                    match(COMMA);
                                    setState(3557);
                                    identifier();
                                }
                            }
                            setState(3562);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                }

                setState(3565);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupByClauseContext extends ParserRuleContext {
        public TerminalNode KW_GROUP() {
            return getToken(HiveParser.KW_GROUP, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public Groupby_expressionContext groupby_expression() {
            return getRuleContext(Groupby_expressionContext.class, 0);
        }

        public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGroupByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupByClauseContext groupByClause() throws RecognitionException {
        GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
        enterRule(_localctx, 596, RULE_groupByClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3567);
                match(KW_GROUP);
                setState(3568);
                match(KW_BY);
                setState(3569);
                groupby_expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Groupby_expressionContext extends ParserRuleContext {
        public RollupStandardContext rollupStandard() {
            return getRuleContext(RollupStandardContext.class, 0);
        }

        public RollupOldSyntaxContext rollupOldSyntax() {
            return getRuleContext(RollupOldSyntaxContext.class, 0);
        }

        public GroupByEmptyContext groupByEmpty() {
            return getRuleContext(GroupByEmptyContext.class, 0);
        }

        public Groupby_expressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupby_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupby_expression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupby_expression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGroupby_expression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Groupby_expressionContext groupby_expression() throws RecognitionException {
        Groupby_expressionContext _localctx = new Groupby_expressionContext(_ctx, getState());
        enterRule(_localctx, 598, RULE_groupby_expression);
        try {
            setState(3574);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 441, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3571);
                        rollupStandard();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3572);
                        rollupOldSyntax();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3573);
                        groupByEmpty();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupByEmptyContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public GroupByEmptyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupByEmpty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupByEmpty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupByEmpty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGroupByEmpty(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupByEmptyContext groupByEmpty() throws RecognitionException {
        GroupByEmptyContext _localctx = new GroupByEmptyContext(_ctx, getState());
        enterRule(_localctx, 600, RULE_groupByEmpty);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3576);
                match(LPAREN);
                setState(3577);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RollupStandardContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_ROLLUP() {
            return getToken(HiveParser.KW_ROLLUP, 0);
        }

        public TerminalNode KW_CUBE() {
            return getToken(HiveParser.KW_CUBE, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public RollupStandardContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rollupStandard;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRollupStandard(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRollupStandard(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRollupStandard(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RollupStandardContext rollupStandard() throws RecognitionException {
        RollupStandardContext _localctx = new RollupStandardContext(_ctx, getState());
        enterRule(_localctx, 602, RULE_rollupStandard);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3579);
                _la = _input.LA(1);
                if (!(_la == KW_ROLLUP || _la == KW_CUBE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(3580);
                match(LPAREN);
                setState(3581);
                expression(0);
                setState(3586);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3582);
                            match(COMMA);
                            setState(3583);
                            expression(0);
                        }
                    }
                    setState(3588);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3589);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class RollupOldSyntaxContext extends ParserRuleContext {
        public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
            return getRuleContext(ExpressionsNotInParenthesisContext.class, 0);
        }

        public TerminalNode KW_WITH() {
            return getToken(HiveParser.KW_WITH, 0);
        }

        public TerminalNode KW_ROLLUP() {
            return getToken(HiveParser.KW_ROLLUP, 0);
        }

        public TerminalNode KW_CUBE() {
            return getToken(HiveParser.KW_CUBE, 0);
        }

        public TerminalNode KW_GROUPING() {
            return getToken(HiveParser.KW_GROUPING, 0);
        }

        public TerminalNode KW_SETS() {
            return getToken(HiveParser.KW_SETS, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<GroupingSetExpressionContext> groupingSetExpression() {
            return getRuleContexts(GroupingSetExpressionContext.class);
        }

        public GroupingSetExpressionContext groupingSetExpression(int i) {
            return getRuleContext(GroupingSetExpressionContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public RollupOldSyntaxContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rollupOldSyntax;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterRollupOldSyntax(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitRollupOldSyntax(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitRollupOldSyntax(this);
            else return visitor.visitChildren(this);
        }
    }

    public final RollupOldSyntaxContext rollupOldSyntax() throws RecognitionException {
        RollupOldSyntaxContext _localctx = new RollupOldSyntaxContext(_ctx, getState());
        enterRule(_localctx, 604, RULE_rollupOldSyntax);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3591);
                expressionsNotInParenthesis();
                setState(3596);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 443, _ctx)) {
                    case 1:
                        {
                            setState(3592);
                            match(KW_WITH);
                            setState(3593);
                            match(KW_ROLLUP);
                        }
                        break;
                    case 2:
                        {
                            setState(3594);
                            match(KW_WITH);
                            setState(3595);
                            match(KW_CUBE);
                        }
                        break;
                }
                setState(3611);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_GROUPING) {
                    {
                        setState(3598);
                        match(KW_GROUPING);
                        setState(3599);
                        match(KW_SETS);
                        setState(3600);
                        match(LPAREN);
                        setState(3601);
                        groupingSetExpression();
                        setState(3606);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(3602);
                                    match(COMMA);
                                    setState(3603);
                                    groupingSetExpression();
                                }
                            }
                            setState(3608);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3609);
                        match(RPAREN);
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingSetExpressionContext extends ParserRuleContext {
        public GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() {
            return getRuleContext(GroupingSetExpressionMultipleContext.class, 0);
        }

        public GroupingExpressionSingleContext groupingExpressionSingle() {
            return getRuleContext(GroupingExpressionSingleContext.class, 0);
        }

        public GroupingSetExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingSetExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupingSetExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupingSetExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitGroupingSetExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingSetExpressionContext groupingSetExpression() throws RecognitionException {
        GroupingSetExpressionContext _localctx = new GroupingSetExpressionContext(_ctx, getState());
        enterRule(_localctx, 606, RULE_groupingSetExpression);
        try {
            setState(3615);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 446, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3613);
                        groupingSetExpressionMultiple();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3614);
                        groupingExpressionSingle();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingSetExpressionMultipleContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public GroupingSetExpressionMultipleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingSetExpressionMultiple;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupingSetExpressionMultiple(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupingSetExpressionMultiple(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitGroupingSetExpressionMultiple(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingSetExpressionMultipleContext groupingSetExpressionMultiple()
            throws RecognitionException {
        GroupingSetExpressionMultipleContext _localctx =
                new GroupingSetExpressionMultipleContext(_ctx, getState());
        enterRule(_localctx, 608, RULE_groupingSetExpressionMultiple);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3617);
                match(LPAREN);
                setState(3619);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934246386822L) != 0)
                        || ((((_la - 64)) & ~0x3f) == 0
                                && ((1L << (_la - 64)) & -14365894904623L) != 0)
                        || ((((_la - 129)) & ~0x3f) == 0
                                && ((1L << (_la - 129)) & -439611394830142863L) != 0)
                        || ((((_la - 193)) & ~0x3f) == 0
                                && ((1L << (_la - 193)) & -227941784928606533L) != 0)
                        || ((((_la - 257)) & ~0x3f) == 0
                                && ((1L << (_la - 257)) & -18158059782249L) != 0)
                        || ((((_la - 321)) & ~0x3f) == 0
                                && ((1L << (_la - 321)) & 802679458660863L) != 0)) {
                    {
                        setState(3618);
                        expression(0);
                    }
                }

                setState(3625);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3621);
                            match(COMMA);
                            setState(3622);
                            expression(0);
                        }
                    }
                    setState(3627);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3628);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class GroupingExpressionSingleContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public GroupingExpressionSingleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingExpressionSingle;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterGroupingExpressionSingle(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitGroupingExpressionSingle(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitGroupingExpressionSingle(this);
            else return visitor.visitChildren(this);
        }
    }

    public final GroupingExpressionSingleContext groupingExpressionSingle()
            throws RecognitionException {
        GroupingExpressionSingleContext _localctx =
                new GroupingExpressionSingleContext(_ctx, getState());
        enterRule(_localctx, 610, RULE_groupingExpressionSingle);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3630);
                expression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HavingClauseContext extends ParserRuleContext {
        public TerminalNode KW_HAVING() {
            return getToken(HiveParser.KW_HAVING, 0);
        }

        public HavingConditionContext havingCondition() {
            return getRuleContext(HavingConditionContext.class, 0);
        }

        public HavingClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_havingClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterHavingClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitHavingClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitHavingClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HavingClauseContext havingClause() throws RecognitionException {
        HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
        enterRule(_localctx, 612, RULE_havingClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3632);
                match(KW_HAVING);
                setState(3633);
                havingCondition();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HavingConditionContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public HavingConditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_havingCondition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterHavingCondition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitHavingCondition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitHavingCondition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HavingConditionContext havingCondition() throws RecognitionException {
        HavingConditionContext _localctx = new HavingConditionContext(_ctx, getState());
        enterRule(_localctx, 614, RULE_havingCondition);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3635);
                expression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionsInParenthesisContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
            return getRuleContext(ExpressionsNotInParenthesisContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ExpressionsInParenthesisContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionsInParenthesis;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpressionsInParenthesis(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpressionsInParenthesis(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitExpressionsInParenthesis(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionsInParenthesisContext expressionsInParenthesis()
            throws RecognitionException {
        ExpressionsInParenthesisContext _localctx =
                new ExpressionsInParenthesisContext(_ctx, getState());
        enterRule(_localctx, 616, RULE_expressionsInParenthesis);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3637);
                match(LPAREN);
                setState(3638);
                expressionsNotInParenthesis();
                setState(3639);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionsNotInParenthesisContext extends ParserRuleContext {
        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public ExpressionPartContext expressionPart() {
            return getRuleContext(ExpressionPartContext.class, 0);
        }

        public ExpressionsNotInParenthesisContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionsNotInParenthesis;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpressionsNotInParenthesis(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpressionsNotInParenthesis(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitExpressionsNotInParenthesis(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionsNotInParenthesisContext expressionsNotInParenthesis()
            throws RecognitionException {
        ExpressionsNotInParenthesisContext _localctx =
                new ExpressionsNotInParenthesisContext(_ctx, getState());
        enterRule(_localctx, 618, RULE_expressionsNotInParenthesis);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3641);
                expression(0);
                setState(3643);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMA) {
                    {
                        setState(3642);
                        expressionPart();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionPartContext extends ParserRuleContext {
        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public ExpressionPartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionPart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpressionPart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpressionPart(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExpressionPart(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionPartContext expressionPart() throws RecognitionException {
        ExpressionPartContext _localctx = new ExpressionPartContext(_ctx, getState());
        enterRule(_localctx, 620, RULE_expressionPart);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3647);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3645);
                            match(COMMA);
                            setState(3646);
                            expression(0);
                        }
                    }
                    setState(3649);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == COMMA);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionsContext extends ParserRuleContext {
        public ExpressionsInParenthesisContext expressionsInParenthesis() {
            return getRuleContext(ExpressionsInParenthesisContext.class, 0);
        }

        public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
            return getRuleContext(ExpressionsNotInParenthesisContext.class, 0);
        }

        public ExpressionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressions;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpressions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpressions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExpressions(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionsContext expressions() throws RecognitionException {
        ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
        enterRule(_localctx, 622, RULE_expressions);
        try {
            setState(3653);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 451, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3651);
                        expressionsInParenthesis();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3652);
                        expressionsNotInParenthesis();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnRefOrderInParenthesisContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<ColumnRefOrderContext> columnRefOrder() {
            return getRuleContexts(ColumnRefOrderContext.class);
        }

        public ColumnRefOrderContext columnRefOrder(int i) {
            return getRuleContext(ColumnRefOrderContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnRefOrderInParenthesisContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnRefOrderInParenthesis;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnRefOrderInParenthesis(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnRefOrderInParenthesis(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnRefOrderInParenthesis(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis()
            throws RecognitionException {
        ColumnRefOrderInParenthesisContext _localctx =
                new ColumnRefOrderInParenthesisContext(_ctx, getState());
        enterRule(_localctx, 624, RULE_columnRefOrderInParenthesis);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3655);
                match(LPAREN);
                setState(3656);
                columnRefOrder();
                setState(3661);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3657);
                            match(COMMA);
                            setState(3658);
                            columnRefOrder();
                        }
                    }
                    setState(3663);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(3664);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ColumnRefOrderNotInParenthesisContext extends ParserRuleContext {
        public List<ColumnRefOrderContext> columnRefOrder() {
            return getRuleContexts(ColumnRefOrderContext.class);
        }

        public ColumnRefOrderContext columnRefOrder(int i) {
            return getRuleContext(ColumnRefOrderContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public ColumnRefOrderNotInParenthesisContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_columnRefOrderNotInParenthesis;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterColumnRefOrderNotInParenthesis(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitColumnRefOrderNotInParenthesis(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitColumnRefOrderNotInParenthesis(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis()
            throws RecognitionException {
        ColumnRefOrderNotInParenthesisContext _localctx =
                new ColumnRefOrderNotInParenthesisContext(_ctx, getState());
        enterRule(_localctx, 626, RULE_columnRefOrderNotInParenthesis);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3666);
                columnRefOrder();
                setState(3671);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3667);
                            match(COMMA);
                            setState(3668);
                            columnRefOrder();
                        }
                    }
                    setState(3673);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class OrderByClauseContext extends ParserRuleContext {
        public TerminalNode KW_ORDER() {
            return getToken(HiveParser.KW_ORDER, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public List<ColumnRefOrderContext> columnRefOrder() {
            return getRuleContexts(ColumnRefOrderContext.class);
        }

        public ColumnRefOrderContext columnRefOrder(int i) {
            return getRuleContext(ColumnRefOrderContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterOrderByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitOrderByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitOrderByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final OrderByClauseContext orderByClause() throws RecognitionException {
        OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
        enterRule(_localctx, 628, RULE_orderByClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3674);
                match(KW_ORDER);
                setState(3675);
                match(KW_BY);
                setState(3676);
                columnRefOrder();
                setState(3681);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3677);
                            match(COMMA);
                            setState(3678);
                            columnRefOrder();
                        }
                    }
                    setState(3683);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ClusterByClauseContext extends ParserRuleContext {
        public TerminalNode KW_CLUSTER() {
            return getToken(HiveParser.KW_CLUSTER, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public ExpressionsContext expressions() {
            return getRuleContext(ExpressionsContext.class, 0);
        }

        public ClusterByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_clusterByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterClusterByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitClusterByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitClusterByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ClusterByClauseContext clusterByClause() throws RecognitionException {
        ClusterByClauseContext _localctx = new ClusterByClauseContext(_ctx, getState());
        enterRule(_localctx, 630, RULE_clusterByClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3684);
                match(KW_CLUSTER);
                setState(3685);
                match(KW_BY);
                setState(3686);
                expressions();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionByClauseContext extends ParserRuleContext {
        public TerminalNode KW_PARTITION() {
            return getToken(HiveParser.KW_PARTITION, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public ExpressionsContext expressions() {
            return getRuleContext(ExpressionsContext.class, 0);
        }

        public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartitionByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionByClauseContext partitionByClause() throws RecognitionException {
        PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
        enterRule(_localctx, 632, RULE_partitionByClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3688);
                match(KW_PARTITION);
                setState(3689);
                match(KW_BY);
                setState(3690);
                expressions();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DistributeByClauseContext extends ParserRuleContext {
        public TerminalNode KW_DISTRIBUTE() {
            return getToken(HiveParser.KW_DISTRIBUTE, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public ExpressionsContext expressions() {
            return getRuleContext(ExpressionsContext.class, 0);
        }

        public DistributeByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_distributeByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDistributeByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDistributeByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDistributeByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DistributeByClauseContext distributeByClause() throws RecognitionException {
        DistributeByClauseContext _localctx = new DistributeByClauseContext(_ctx, getState());
        enterRule(_localctx, 634, RULE_distributeByClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3692);
                match(KW_DISTRIBUTE);
                setState(3693);
                match(KW_BY);
                setState(3694);
                expressions();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SortByClauseContext extends ParserRuleContext {
        public TerminalNode KW_SORT() {
            return getToken(HiveParser.KW_SORT, 0);
        }

        public TerminalNode KW_BY() {
            return getToken(HiveParser.KW_BY, 0);
        }

        public ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis() {
            return getRuleContext(ColumnRefOrderInParenthesisContext.class, 0);
        }

        public ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis() {
            return getRuleContext(ColumnRefOrderNotInParenthesisContext.class, 0);
        }

        public SortByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sortByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSortByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSortByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSortByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SortByClauseContext sortByClause() throws RecognitionException {
        SortByClauseContext _localctx = new SortByClauseContext(_ctx, getState());
        enterRule(_localctx, 636, RULE_sortByClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3696);
                match(KW_SORT);
                setState(3697);
                match(KW_BY);
                setState(3700);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 455, _ctx)) {
                    case 1:
                        {
                            setState(3698);
                            columnRefOrderInParenthesis();
                        }
                        break;
                    case 2:
                        {
                            setState(3699);
                            columnRefOrderNotInParenthesis();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Function_Context extends ParserRuleContext {
        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode STAR() {
            return getToken(HiveParser.STAR, 0);
        }

        public TerminalNode KW_OVER() {
            return getToken(HiveParser.KW_OVER, 0);
        }

        public Window_specificationContext window_specification() {
            return getRuleContext(Window_specificationContext.class, 0);
        }

        public List<SelectExpressionContext> selectExpression() {
            return getRuleContexts(SelectExpressionContext.class);
        }

        public SelectExpressionContext selectExpression(int i) {
            return getRuleContext(SelectExpressionContext.class, i);
        }

        public TerminalNode KW_DISTINCT() {
            return getToken(HiveParser.KW_DISTINCT, 0);
        }

        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public Function_Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_function_;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFunction_(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFunction_(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFunction_(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Function_Context function_() throws RecognitionException {
        Function_Context _localctx = new Function_Context(_ctx, getState());
        enterRule(_localctx, 638, RULE_function_);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3702);
                functionName();
                setState(3703);
                match(LPAREN);
                setState(3718);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 459, _ctx)) {
                    case 1:
                        {
                            setState(3704);
                            match(STAR);
                        }
                        break;
                    case 2:
                        {
                            setState(3706);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == KW_ALL || _la == KW_DISTINCT) {
                                {
                                    setState(3705);
                                    _la = _input.LA(1);
                                    if (!(_la == KW_ALL || _la == KW_DISTINCT)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                }
                            }

                            setState(3716);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8879127934246386822L) != 0)
                                    || ((((_la - 64)) & ~0x3f) == 0
                                            && ((1L << (_la - 64)) & -14365894904623L) != 0)
                                    || ((((_la - 129)) & ~0x3f) == 0
                                            && ((1L << (_la - 129)) & -439611394830142863L) != 0)
                                    || ((((_la - 193)) & ~0x3f) == 0
                                            && ((1L << (_la - 193)) & -227941784928606533L) != 0)
                                    || ((((_la - 257)) & ~0x3f) == 0
                                            && ((1L << (_la - 257)) & -18158059782249L) != 0)
                                    || ((((_la - 321)) & ~0x3f) == 0
                                            && ((1L << (_la - 321)) & 802681606144511L) != 0)) {
                                {
                                    setState(3708);
                                    selectExpression();
                                    setState(3713);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3709);
                                                match(COMMA);
                                                setState(3710);
                                                selectExpression();
                                            }
                                        }
                                        setState(3715);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                }
                            }
                        }
                        break;
                }
                setState(3720);
                match(RPAREN);
                setState(3723);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 460, _ctx)) {
                    case 1:
                        {
                            setState(3721);
                            match(KW_OVER);
                            setState(3722);
                            window_specification();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionNameContext extends ParserRuleContext {
        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public Sql11ReservedKeywordsUsedAsFunctionNameContext
                sql11ReservedKeywordsUsedAsFunctionName() {
            return getRuleContext(Sql11ReservedKeywordsUsedAsFunctionNameContext.class, 0);
        }

        public FunctionNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFunctionName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFunctionName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFunctionName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionNameContext functionName() throws RecognitionException {
        FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
        enterRule(_localctx, 640, RULE_functionName);
        try {
            setState(3727);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3725);
                        functionIdentifier();
                    }
                    break;
                case KW_IF:
                case KW_BOOLEAN:
                case KW_SMALLINT:
                case KW_INT:
                case KW_BIGINT:
                case KW_FLOAT:
                case KW_DOUBLE:
                case KW_DATE:
                case KW_TIMESTAMP:
                case KW_ARRAY:
                case KW_MAP:
                case KW_BINARY:
                case KW_CURRENT_DATE:
                case KW_CURRENT_TIMESTAMP:
                case KW_GROUPING:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3726);
                        sql11ReservedKeywordsUsedAsFunctionName();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CastExpressionContext extends ParserRuleContext {
        public TerminalNode KW_CAST() {
            return getToken(HiveParser.KW_CAST, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode KW_AS() {
            return getToken(HiveParser.KW_AS, 0);
        }

        public PrimitiveTypeContext primitiveType() {
            return getRuleContext(PrimitiveTypeContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public CastExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_castExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCastExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCastExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCastExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CastExpressionContext castExpression() throws RecognitionException {
        CastExpressionContext _localctx = new CastExpressionContext(_ctx, getState());
        enterRule(_localctx, 642, RULE_castExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3729);
                match(KW_CAST);
                setState(3730);
                match(LPAREN);
                setState(3731);
                expression(0);
                setState(3732);
                match(KW_AS);
                setState(3733);
                primitiveType();
                setState(3734);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CaseExpressionContext extends ParserRuleContext {
        public TerminalNode KW_CASE() {
            return getToken(HiveParser.KW_CASE, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode KW_END() {
            return getToken(HiveParser.KW_END, 0);
        }

        public List<TerminalNode> KW_WHEN() {
            return getTokens(HiveParser.KW_WHEN);
        }

        public TerminalNode KW_WHEN(int i) {
            return getToken(HiveParser.KW_WHEN, i);
        }

        public List<TerminalNode> KW_THEN() {
            return getTokens(HiveParser.KW_THEN);
        }

        public TerminalNode KW_THEN(int i) {
            return getToken(HiveParser.KW_THEN, i);
        }

        public TerminalNode KW_ELSE() {
            return getToken(HiveParser.KW_ELSE, 0);
        }

        public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_caseExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCaseExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCaseExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCaseExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CaseExpressionContext caseExpression() throws RecognitionException {
        CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
        enterRule(_localctx, 644, RULE_caseExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3736);
                match(KW_CASE);
                setState(3737);
                expression(0);
                setState(3743);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3738);
                            match(KW_WHEN);
                            setState(3739);
                            expression(0);
                            setState(3740);
                            match(KW_THEN);
                            setState(3741);
                            expression(0);
                        }
                    }
                    setState(3745);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == KW_WHEN);
                setState(3749);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ELSE) {
                    {
                        setState(3747);
                        match(KW_ELSE);
                        setState(3748);
                        expression(0);
                    }
                }

                setState(3751);
                match(KW_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class WhenExpressionContext extends ParserRuleContext {
        public TerminalNode KW_CASE() {
            return getToken(HiveParser.KW_CASE, 0);
        }

        public TerminalNode KW_END() {
            return getToken(HiveParser.KW_END, 0);
        }

        public List<TerminalNode> KW_WHEN() {
            return getTokens(HiveParser.KW_WHEN);
        }

        public TerminalNode KW_WHEN(int i) {
            return getToken(HiveParser.KW_WHEN, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> KW_THEN() {
            return getTokens(HiveParser.KW_THEN);
        }

        public TerminalNode KW_THEN(int i) {
            return getToken(HiveParser.KW_THEN, i);
        }

        public TerminalNode KW_ELSE() {
            return getToken(HiveParser.KW_ELSE, 0);
        }

        public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterWhenExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitWhenExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitWhenExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final WhenExpressionContext whenExpression() throws RecognitionException {
        WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
        enterRule(_localctx, 646, RULE_whenExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3753);
                match(KW_CASE);
                setState(3759);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(3754);
                            match(KW_WHEN);
                            setState(3755);
                            expression(0);
                            setState(3756);
                            match(KW_THEN);
                            setState(3757);
                            expression(0);
                        }
                    }
                    setState(3761);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == KW_WHEN);
                setState(3765);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_ELSE) {
                    {
                        setState(3763);
                        match(KW_ELSE);
                        setState(3764);
                        expression(0);
                    }
                }

                setState(3767);
                match(KW_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FloorExpressionContext extends ParserRuleContext {
        public TerminalNode KW_FLOOR() {
            return getToken(HiveParser.KW_FLOOR, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public FloorDateQualifiersContext floorDateQualifiers() {
            return getRuleContext(FloorDateQualifiersContext.class, 0);
        }

        public FloorExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_floorExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFloorExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFloorExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFloorExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FloorExpressionContext floorExpression() throws RecognitionException {
        FloorExpressionContext _localctx = new FloorExpressionContext(_ctx, getState());
        enterRule(_localctx, 648, RULE_floorExpression);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3769);
                match(KW_FLOOR);
                setState(3770);
                match(LPAREN);
                setState(3771);
                expression(0);
                setState(3774);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_TO) {
                    {
                        setState(3772);
                        match(KW_TO);
                        setState(3773);
                        floorDateQualifiers();
                    }
                }

                setState(3776);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FloorDateQualifiersContext extends ParserRuleContext {
        public TerminalNode KW_YEAR() {
            return getToken(HiveParser.KW_YEAR, 0);
        }

        public TerminalNode KW_QUARTER() {
            return getToken(HiveParser.KW_QUARTER, 0);
        }

        public TerminalNode KW_MONTH() {
            return getToken(HiveParser.KW_MONTH, 0);
        }

        public TerminalNode KW_WEEK() {
            return getToken(HiveParser.KW_WEEK, 0);
        }

        public TerminalNode KW_DAY() {
            return getToken(HiveParser.KW_DAY, 0);
        }

        public TerminalNode KW_HOUR() {
            return getToken(HiveParser.KW_HOUR, 0);
        }

        public TerminalNode KW_MINUTE() {
            return getToken(HiveParser.KW_MINUTE, 0);
        }

        public TerminalNode KW_SECOND() {
            return getToken(HiveParser.KW_SECOND, 0);
        }

        public FloorDateQualifiersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_floorDateQualifiers;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFloorDateQualifiers(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFloorDateQualifiers(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFloorDateQualifiers(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FloorDateQualifiersContext floorDateQualifiers() throws RecognitionException {
        FloorDateQualifiersContext _localctx = new FloorDateQualifiersContext(_ctx, getState());
        enterRule(_localctx, 650, RULE_floorDateQualifiers);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3778);
                _la = _input.LA(1);
                if (!(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & 957L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExtractExpressionContext extends ParserRuleContext {
        public TerminalNode KW_EXTRACT() {
            return getToken(HiveParser.KW_EXTRACT, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public TimeQualifiersContext timeQualifiers() {
            return getRuleContext(TimeQualifiersContext.class, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public ExtractExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_extractExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExtractExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExtractExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExtractExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExtractExpressionContext extractExpression() throws RecognitionException {
        ExtractExpressionContext _localctx = new ExtractExpressionContext(_ctx, getState());
        enterRule(_localctx, 652, RULE_extractExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3780);
                match(KW_EXTRACT);
                setState(3781);
                match(LPAREN);
                setState(3782);
                timeQualifiers();
                setState(3783);
                match(KW_FROM);
                setState(3784);
                expression(0);
                setState(3785);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimeQualifiersContext extends ParserRuleContext {
        public TerminalNode KW_YEAR() {
            return getToken(HiveParser.KW_YEAR, 0);
        }

        public TerminalNode KW_QUARTER() {
            return getToken(HiveParser.KW_QUARTER, 0);
        }

        public TerminalNode KW_MONTH() {
            return getToken(HiveParser.KW_MONTH, 0);
        }

        public TerminalNode KW_WEEK() {
            return getToken(HiveParser.KW_WEEK, 0);
        }

        public TerminalNode KW_DAY() {
            return getToken(HiveParser.KW_DAY, 0);
        }

        public TerminalNode KW_DOW() {
            return getToken(HiveParser.KW_DOW, 0);
        }

        public TerminalNode KW_HOUR() {
            return getToken(HiveParser.KW_HOUR, 0);
        }

        public TerminalNode KW_MINUTE() {
            return getToken(HiveParser.KW_MINUTE, 0);
        }

        public TerminalNode KW_SECOND() {
            return getToken(HiveParser.KW_SECOND, 0);
        }

        public TimeQualifiersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_timeQualifiers;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTimeQualifiers(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTimeQualifiers(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTimeQualifiers(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TimeQualifiersContext timeQualifiers() throws RecognitionException {
        TimeQualifiersContext _localctx = new TimeQualifiersContext(_ctx, getState());
        enterRule(_localctx, 654, RULE_timeQualifiers);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3787);
                _la = _input.LA(1);
                if (!(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & 1021L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ConstantContext extends ParserRuleContext {
        public IntervalLiteralContext intervalLiteral() {
            return getRuleContext(IntervalLiteralContext.class, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public DateLiteralContext dateLiteral() {
            return getRuleContext(DateLiteralContext.class, 0);
        }

        public TimestampLiteralContext timestampLiteral() {
            return getRuleContext(TimestampLiteralContext.class, 0);
        }

        public TimestampLocalTZLiteralContext timestampLocalTZLiteral() {
            return getRuleContext(TimestampLocalTZLiteralContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public StringLiteralSequenceContext stringLiteralSequence() {
            return getRuleContext(StringLiteralSequenceContext.class, 0);
        }

        public TerminalNode IntegralLiteral() {
            return getToken(HiveParser.IntegralLiteral, 0);
        }

        public TerminalNode NumberLiteral() {
            return getToken(HiveParser.NumberLiteral, 0);
        }

        public CharSetStringLiteralContext charSetStringLiteral() {
            return getRuleContext(CharSetStringLiteralContext.class, 0);
        }

        public BooleanValueContext booleanValue() {
            return getRuleContext(BooleanValueContext.class, 0);
        }

        public TerminalNode KW_NULL() {
            return getToken(HiveParser.KW_NULL, 0);
        }

        public ConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constant;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterConstant(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitConstant(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitConstant(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ConstantContext constant() throws RecognitionException {
        ConstantContext _localctx = new ConstantContext(_ctx, getState());
        enterRule(_localctx, 656, RULE_constant);
        try {
            setState(3801);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 467, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3789);
                        intervalLiteral();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3790);
                        match(Number);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3791);
                        dateLiteral();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3792);
                        timestampLiteral();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3793);
                        timestampLocalTZLiteral();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(3794);
                        match(StringLiteral);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(3795);
                        stringLiteralSequence();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(3796);
                        match(IntegralLiteral);
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(3797);
                        match(NumberLiteral);
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(3798);
                        charSetStringLiteral();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(3799);
                        booleanValue();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(3800);
                        match(KW_NULL);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StringLiteralSequenceContext extends ParserRuleContext {
        public List<TerminalNode> StringLiteral() {
            return getTokens(HiveParser.StringLiteral);
        }

        public TerminalNode StringLiteral(int i) {
            return getToken(HiveParser.StringLiteral, i);
        }

        public StringLiteralSequenceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_stringLiteralSequence;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterStringLiteralSequence(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitStringLiteralSequence(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitStringLiteralSequence(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StringLiteralSequenceContext stringLiteralSequence() throws RecognitionException {
        StringLiteralSequenceContext _localctx = new StringLiteralSequenceContext(_ctx, getState());
        enterRule(_localctx, 658, RULE_stringLiteralSequence);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3803);
                match(StringLiteral);
                setState(3805);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(3804);
                                    match(StringLiteral);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(3807);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 468, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class CharSetStringLiteralContext extends ParserRuleContext {
        public TerminalNode CharSetName() {
            return getToken(HiveParser.CharSetName, 0);
        }

        public TerminalNode CharSetLiteral() {
            return getToken(HiveParser.CharSetLiteral, 0);
        }

        public CharSetStringLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_charSetStringLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterCharSetStringLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitCharSetStringLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitCharSetStringLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final CharSetStringLiteralContext charSetStringLiteral() throws RecognitionException {
        CharSetStringLiteralContext _localctx = new CharSetStringLiteralContext(_ctx, getState());
        enterRule(_localctx, 660, RULE_charSetStringLiteral);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3809);
                match(CharSetName);
                setState(3810);
                match(CharSetLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DateLiteralContext extends ParserRuleContext {
        public TerminalNode KW_DATE() {
            return getToken(HiveParser.KW_DATE, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_CURRENT_DATE() {
            return getToken(HiveParser.KW_CURRENT_DATE, 0);
        }

        public DateLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dateLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDateLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDateLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDateLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DateLiteralContext dateLiteral() throws RecognitionException {
        DateLiteralContext _localctx = new DateLiteralContext(_ctx, getState());
        enterRule(_localctx, 662, RULE_dateLiteral);
        try {
            setState(3815);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_DATE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3812);
                        match(KW_DATE);
                        setState(3813);
                        match(StringLiteral);
                    }
                    break;
                case KW_CURRENT_DATE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3814);
                        match(KW_CURRENT_DATE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimestampLiteralContext extends ParserRuleContext {
        public TerminalNode KW_TIMESTAMP() {
            return getToken(HiveParser.KW_TIMESTAMP, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode KW_CURRENT_TIMESTAMP() {
            return getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
        }

        public TimestampLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_timestampLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTimestampLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTimestampLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTimestampLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TimestampLiteralContext timestampLiteral() throws RecognitionException {
        TimestampLiteralContext _localctx = new TimestampLiteralContext(_ctx, getState());
        enterRule(_localctx, 664, RULE_timestampLiteral);
        try {
            setState(3820);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_TIMESTAMP:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3817);
                        match(KW_TIMESTAMP);
                        setState(3818);
                        match(StringLiteral);
                    }
                    break;
                case KW_CURRENT_TIMESTAMP:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3819);
                        match(KW_CURRENT_TIMESTAMP);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TimestampLocalTZLiteralContext extends ParserRuleContext {
        public TerminalNode KW_TIMESTAMPLOCALTZ() {
            return getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TimestampLocalTZLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_timestampLocalTZLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTimestampLocalTZLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTimestampLocalTZLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitTimestampLocalTZLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TimestampLocalTZLiteralContext timestampLocalTZLiteral()
            throws RecognitionException {
        TimestampLocalTZLiteralContext _localctx =
                new TimestampLocalTZLiteralContext(_ctx, getState());
        enterRule(_localctx, 666, RULE_timestampLocalTZLiteral);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3822);
                match(KW_TIMESTAMPLOCALTZ);
                setState(3823);
                match(StringLiteral);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalValueContext extends ParserRuleContext {
        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public TerminalNode Number() {
            return getToken(HiveParser.Number, 0);
        }

        public IntervalValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIntervalValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIntervalValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIntervalValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalValueContext intervalValue() throws RecognitionException {
        IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
        enterRule(_localctx, 668, RULE_intervalValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3825);
                _la = _input.LA(1);
                if (!(_la == StringLiteral || _la == Number)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalLiteralContext extends ParserRuleContext {
        public IntervalValueContext intervalValue() {
            return getRuleContext(IntervalValueContext.class, 0);
        }

        public IntervalQualifiersContext intervalQualifiers() {
            return getRuleContext(IntervalQualifiersContext.class, 0);
        }

        public IntervalLiteralContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalLiteral;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIntervalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIntervalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIntervalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalLiteralContext intervalLiteral() throws RecognitionException {
        IntervalLiteralContext _localctx = new IntervalLiteralContext(_ctx, getState());
        enterRule(_localctx, 670, RULE_intervalLiteral);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3827);
                intervalValue();
                setState(3828);
                intervalQualifiers();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalExpressionContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public IntervalValueContext intervalValue() {
            return getRuleContext(IntervalValueContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public IntervalQualifiersContext intervalQualifiers() {
            return getRuleContext(IntervalQualifiersContext.class, 0);
        }

        public TerminalNode KW_INTERVAL() {
            return getToken(HiveParser.KW_INTERVAL, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public IntervalExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIntervalExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIntervalExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIntervalExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalExpressionContext intervalExpression() throws RecognitionException {
        IntervalExpressionContext _localctx = new IntervalExpressionContext(_ctx, getState());
        enterRule(_localctx, 672, RULE_intervalExpression);
        try {
            setState(3845);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 471, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3830);
                        match(LPAREN);
                        setState(3831);
                        intervalValue();
                        setState(3832);
                        match(RPAREN);
                        setState(3833);
                        intervalQualifiers();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3835);
                        match(KW_INTERVAL);
                        setState(3836);
                        intervalValue();
                        setState(3837);
                        intervalQualifiers();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3839);
                        match(KW_INTERVAL);
                        setState(3840);
                        match(LPAREN);
                        setState(3841);
                        expression(0);
                        setState(3842);
                        match(RPAREN);
                        setState(3843);
                        intervalQualifiers();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IntervalQualifiersContext extends ParserRuleContext {
        public TerminalNode KW_YEAR() {
            return getToken(HiveParser.KW_YEAR, 0);
        }

        public TerminalNode KW_TO() {
            return getToken(HiveParser.KW_TO, 0);
        }

        public TerminalNode KW_MONTH() {
            return getToken(HiveParser.KW_MONTH, 0);
        }

        public TerminalNode KW_DAY() {
            return getToken(HiveParser.KW_DAY, 0);
        }

        public TerminalNode KW_SECOND() {
            return getToken(HiveParser.KW_SECOND, 0);
        }

        public TerminalNode KW_HOUR() {
            return getToken(HiveParser.KW_HOUR, 0);
        }

        public TerminalNode KW_MINUTE() {
            return getToken(HiveParser.KW_MINUTE, 0);
        }

        public IntervalQualifiersContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalQualifiers;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIntervalQualifiers(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIntervalQualifiers(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIntervalQualifiers(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IntervalQualifiersContext intervalQualifiers() throws RecognitionException {
        IntervalQualifiersContext _localctx = new IntervalQualifiersContext(_ctx, getState());
        enterRule(_localctx, 674, RULE_intervalQualifiers);
        try {
            setState(3859);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 472, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3847);
                        match(KW_YEAR);
                        setState(3848);
                        match(KW_TO);
                        setState(3849);
                        match(KW_MONTH);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3850);
                        match(KW_DAY);
                        setState(3851);
                        match(KW_TO);
                        setState(3852);
                        match(KW_SECOND);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3853);
                        match(KW_YEAR);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3854);
                        match(KW_MONTH);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3855);
                        match(KW_DAY);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(3856);
                        match(KW_HOUR);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(3857);
                        match(KW_MINUTE);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(3858);
                        match(KW_SECOND);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class AtomExpressionContext extends ParserRuleContext {
        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public IntervalExpressionContext intervalExpression() {
            return getRuleContext(IntervalExpressionContext.class, 0);
        }

        public CastExpressionContext castExpression() {
            return getRuleContext(CastExpressionContext.class, 0);
        }

        public ExtractExpressionContext extractExpression() {
            return getRuleContext(ExtractExpressionContext.class, 0);
        }

        public FloorExpressionContext floorExpression() {
            return getRuleContext(FloorExpressionContext.class, 0);
        }

        public CaseExpressionContext caseExpression() {
            return getRuleContext(CaseExpressionContext.class, 0);
        }

        public WhenExpressionContext whenExpression() {
            return getRuleContext(WhenExpressionContext.class, 0);
        }

        public SubQueryExpressionContext subQueryExpression() {
            return getRuleContext(SubQueryExpressionContext.class, 0);
        }

        public Function_Context function_() {
            return getRuleContext(Function_Context.class, 0);
        }

        public TableOrColumnContext tableOrColumn() {
            return getRuleContext(TableOrColumnContext.class, 0);
        }

        public ExpressionsInParenthesisContext expressionsInParenthesis() {
            return getRuleContext(ExpressionsInParenthesisContext.class, 0);
        }

        public AtomExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_atomExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterAtomExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitAtomExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitAtomExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final AtomExpressionContext atomExpression() throws RecognitionException {
        AtomExpressionContext _localctx = new AtomExpressionContext(_ctx, getState());
        enterRule(_localctx, 676, RULE_atomExpression);
        try {
            setState(3872);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 473, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3861);
                        constant();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3862);
                        intervalExpression();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3863);
                        castExpression();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3864);
                        extractExpression();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3865);
                        floorExpression();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(3866);
                        caseExpression();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(3867);
                        whenExpression();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(3868);
                        subQueryExpression();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(3869);
                        function_();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(3870);
                        tableOrColumn();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(3871);
                        expressionsInParenthesis();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceUnaryOperatorContext extends ParserRuleContext {
        public TerminalNode PLUS() {
            return getToken(HiveParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(HiveParser.MINUS, 0);
        }

        public TerminalNode TILDE() {
            return getToken(HiveParser.TILDE, 0);
        }

        public PrecedenceUnaryOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceUnaryOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceUnaryOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceUnaryOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceUnaryOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceUnaryOperatorContext precedenceUnaryOperator()
            throws RecognitionException {
        PrecedenceUnaryOperatorContext _localctx =
                new PrecedenceUnaryOperatorContext(_ctx, getState());
        enterRule(_localctx, 678, RULE_precedenceUnaryOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3874);
                _la = _input.LA(1);
                if (!(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & 67L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IsConditionContext extends ParserRuleContext {
        public TerminalNode KW_NULL() {
            return getToken(HiveParser.KW_NULL, 0);
        }

        public TerminalNode KW_TRUE() {
            return getToken(HiveParser.KW_TRUE, 0);
        }

        public TerminalNode KW_FALSE() {
            return getToken(HiveParser.KW_FALSE, 0);
        }

        public TerminalNode KW_DISTINCT() {
            return getToken(HiveParser.KW_DISTINCT, 0);
        }

        public TerminalNode KW_FROM() {
            return getToken(HiveParser.KW_FROM, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public IsConditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_isCondition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIsCondition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIsCondition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIsCondition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IsConditionContext isCondition() throws RecognitionException {
        IsConditionContext _localctx = new IsConditionContext(_ctx, getState());
        enterRule(_localctx, 680, RULE_isCondition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3877);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_NOT) {
                    {
                        setState(3876);
                        match(KW_NOT);
                    }
                }

                setState(3884);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_NULL:
                        {
                            setState(3879);
                            match(KW_NULL);
                        }
                        break;
                    case KW_TRUE:
                        {
                            setState(3880);
                            match(KW_TRUE);
                        }
                        break;
                    case KW_FALSE:
                        {
                            setState(3881);
                            match(KW_FALSE);
                        }
                        break;
                    case KW_DISTINCT:
                        {
                            setState(3882);
                            match(KW_DISTINCT);
                            setState(3883);
                            match(KW_FROM);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceBitwiseXorOperatorContext extends ParserRuleContext {
        public TerminalNode BITWISEXOR() {
            return getToken(HiveParser.BITWISEXOR, 0);
        }

        public PrecedenceBitwiseXorOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceBitwiseXorOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceBitwiseXorOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceBitwiseXorOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceBitwiseXorOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator()
            throws RecognitionException {
        PrecedenceBitwiseXorOperatorContext _localctx =
                new PrecedenceBitwiseXorOperatorContext(_ctx, getState());
        enterRule(_localctx, 682, RULE_precedenceBitwiseXorOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3886);
                match(BITWISEXOR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceStarOperatorContext extends ParserRuleContext {
        public TerminalNode STAR() {
            return getToken(HiveParser.STAR, 0);
        }

        public TerminalNode DIVIDE() {
            return getToken(HiveParser.DIVIDE, 0);
        }

        public TerminalNode MOD() {
            return getToken(HiveParser.MOD, 0);
        }

        public TerminalNode DIV() {
            return getToken(HiveParser.DIV, 0);
        }

        public PrecedenceStarOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceStarOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceStarOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceStarOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrecedenceStarOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceStarOperatorContext precedenceStarOperator()
            throws RecognitionException {
        PrecedenceStarOperatorContext _localctx =
                new PrecedenceStarOperatorContext(_ctx, getState());
        enterRule(_localctx, 684, RULE_precedenceStarOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3888);
                _la = _input.LA(1);
                if (!(((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 57L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedencePlusOperatorContext extends ParserRuleContext {
        public TerminalNode PLUS() {
            return getToken(HiveParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(HiveParser.MINUS, 0);
        }

        public PrecedencePlusOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedencePlusOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedencePlusOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedencePlusOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrecedencePlusOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedencePlusOperatorContext precedencePlusOperator()
            throws RecognitionException {
        PrecedencePlusOperatorContext _localctx =
                new PrecedencePlusOperatorContext(_ctx, getState());
        enterRule(_localctx, 686, RULE_precedencePlusOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3890);
                _la = _input.LA(1);
                if (!(_la == PLUS || _la == MINUS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceConcatenateOperatorContext extends ParserRuleContext {
        public TerminalNode CONCATENATE() {
            return getToken(HiveParser.CONCATENATE, 0);
        }

        public PrecedenceConcatenateOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceConcatenateOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceConcatenateOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceConcatenateOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceConcatenateOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceConcatenateOperatorContext precedenceConcatenateOperator()
            throws RecognitionException {
        PrecedenceConcatenateOperatorContext _localctx =
                new PrecedenceConcatenateOperatorContext(_ctx, getState());
        enterRule(_localctx, 688, RULE_precedenceConcatenateOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3892);
                match(CONCATENATE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceAmpersandOperatorContext extends ParserRuleContext {
        public TerminalNode AMPERSAND() {
            return getToken(HiveParser.AMPERSAND, 0);
        }

        public PrecedenceAmpersandOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceAmpersandOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceAmpersandOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceAmpersandOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceAmpersandOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceAmpersandOperatorContext precedenceAmpersandOperator()
            throws RecognitionException {
        PrecedenceAmpersandOperatorContext _localctx =
                new PrecedenceAmpersandOperatorContext(_ctx, getState());
        enterRule(_localctx, 690, RULE_precedenceAmpersandOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3894);
                match(AMPERSAND);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceBitwiseOrOperatorContext extends ParserRuleContext {
        public TerminalNode BITWISEOR() {
            return getToken(HiveParser.BITWISEOR, 0);
        }

        public PrecedenceBitwiseOrOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceBitwiseOrOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceBitwiseOrOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceBitwiseOrOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceBitwiseOrOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator()
            throws RecognitionException {
        PrecedenceBitwiseOrOperatorContext _localctx =
                new PrecedenceBitwiseOrOperatorContext(_ctx, getState());
        enterRule(_localctx, 692, RULE_precedenceBitwiseOrOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3896);
                match(BITWISEOR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceRegexpOperatorContext extends ParserRuleContext {
        public TerminalNode KW_LIKE() {
            return getToken(HiveParser.KW_LIKE, 0);
        }

        public TerminalNode KW_RLIKE() {
            return getToken(HiveParser.KW_RLIKE, 0);
        }

        public TerminalNode KW_REGEXP() {
            return getToken(HiveParser.KW_REGEXP, 0);
        }

        public PrecedenceRegexpOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceRegexpOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceRegexpOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceRegexpOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceRegexpOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceRegexpOperatorContext precedenceRegexpOperator()
            throws RecognitionException {
        PrecedenceRegexpOperatorContext _localctx =
                new PrecedenceRegexpOperatorContext(_ctx, getState());
        enterRule(_localctx, 694, RULE_precedenceRegexpOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3898);
                _la = _input.LA(1);
                if (!(_la == KW_LIKE || _la == KW_RLIKE || _la == KW_REGEXP)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceComparisonOperatorContext extends ParserRuleContext {
        public TerminalNode LESSTHANOREQUALTO() {
            return getToken(HiveParser.LESSTHANOREQUALTO, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public TerminalNode GREATERTHANOREQUALTO() {
            return getToken(HiveParser.GREATERTHANOREQUALTO, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public TerminalNode EQUAL_NS() {
            return getToken(HiveParser.EQUAL_NS, 0);
        }

        public TerminalNode NOTEQUAL() {
            return getToken(HiveParser.NOTEQUAL, 0);
        }

        public PrecedenceComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceComparisonOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceComparisonOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceComparisonOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceComparisonOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceComparisonOperatorContext precedenceComparisonOperator()
            throws RecognitionException {
        PrecedenceComparisonOperatorContext _localctx =
                new PrecedenceComparisonOperatorContext(_ctx, getState());
        enterRule(_localctx, 696, RULE_precedenceComparisonOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3900);
                _la = _input.LA(1);
                if (!(((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & 127L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceNotOperatorContext extends ParserRuleContext {
        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public PrecedenceNotOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceNotOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceNotOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceNotOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrecedenceNotOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceNotOperatorContext precedenceNotOperator() throws RecognitionException {
        PrecedenceNotOperatorContext _localctx = new PrecedenceNotOperatorContext(_ctx, getState());
        enterRule(_localctx, 698, RULE_precedenceNotOperator);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3902);
                match(KW_NOT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceLogicOperatorContext extends ParserRuleContext {
        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public TerminalNode KW_OR() {
            return getToken(HiveParser.KW_OR, 0);
        }

        public PrecedenceLogicOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceLogicOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceLogicOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceLogicOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceLogicOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceLogicOperatorContext precedenceLogicOperator()
            throws RecognitionException {
        PrecedenceLogicOperatorContext _localctx =
                new PrecedenceLogicOperatorContext(_ctx, getState());
        enterRule(_localctx, 700, RULE_precedenceLogicOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3904);
                _la = _input.LA(1);
                if (!(_la == KW_AND || _la == KW_OR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExpressionContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public PrecedenceExpressionContext precedenceExpression() {
            return getRuleContext(PrecedenceExpressionContext.class, 0);
        }

        public PrecedenceLogicOperatorContext precedenceLogicOperator() {
            return getRuleContext(PrecedenceLogicOperatorContext.class, 0);
        }

        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExpressionContext expression() throws RecognitionException {
        return expression(0);
    }

    private ExpressionContext expression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
        ExpressionContext _prevctx = _localctx;
        int _startState = 702;
        enterRecursionRule(_localctx, 702, RULE_expression, _p);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3912);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 476, _ctx)) {
                    case 1:
                        {
                            setState(3907);
                            match(LPAREN);
                            setState(3908);
                            expression(0);
                            setState(3909);
                            match(RPAREN);
                        }
                        break;
                    case 2:
                        {
                            setState(3911);
                            precedenceExpression(0);
                        }
                        break;
                }
                _ctx.stop = _input.LT(-1);
                setState(3920);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 477, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new ExpressionContext(_parentctx, _parentState);
                                pushNewRecursionContext(_localctx, _startState, RULE_expression);
                                setState(3914);
                                if (!(precpred(_ctx, 3)))
                                    throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                setState(3915);
                                precedenceLogicOperator();
                                setState(3916);
                                expression(4);
                            }
                        }
                    }
                    setState(3922);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 477, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceExpressionContext extends ParserRuleContext {
        public AtomExpressionContext atomExpression() {
            return getRuleContext(AtomExpressionContext.class, 0);
        }

        public List<TerminalNode> LSQUARE() {
            return getTokens(HiveParser.LSQUARE);
        }

        public TerminalNode LSQUARE(int i) {
            return getToken(HiveParser.LSQUARE, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> RSQUARE() {
            return getTokens(HiveParser.RSQUARE);
        }

        public TerminalNode RSQUARE(int i) {
            return getToken(HiveParser.RSQUARE, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(HiveParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(HiveParser.DOT, i);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public PrecedenceUnaryOperatorContext precedenceUnaryOperator() {
            return getRuleContext(PrecedenceUnaryOperatorContext.class, 0);
        }

        public List<PrecedenceExpressionContext> precedenceExpression() {
            return getRuleContexts(PrecedenceExpressionContext.class);
        }

        public PrecedenceExpressionContext precedenceExpression(int i) {
            return getRuleContext(PrecedenceExpressionContext.class, i);
        }

        public TerminalNode KW_EXISTS() {
            return getToken(HiveParser.KW_EXISTS, 0);
        }

        public SubQueryExpressionContext subQueryExpression() {
            return getRuleContext(SubQueryExpressionContext.class, 0);
        }

        public PrecedenceNotOperatorContext precedenceNotOperator() {
            return getRuleContext(PrecedenceNotOperatorContext.class, 0);
        }

        public PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator() {
            return getRuleContext(PrecedenceBitwiseXorOperatorContext.class, 0);
        }

        public PrecedenceStarOperatorContext precedenceStarOperator() {
            return getRuleContext(PrecedenceStarOperatorContext.class, 0);
        }

        public PrecedencePlusOperatorContext precedencePlusOperator() {
            return getRuleContext(PrecedencePlusOperatorContext.class, 0);
        }

        public PrecedenceConcatenateOperatorContext precedenceConcatenateOperator() {
            return getRuleContext(PrecedenceConcatenateOperatorContext.class, 0);
        }

        public PrecedenceAmpersandOperatorContext precedenceAmpersandOperator() {
            return getRuleContext(PrecedenceAmpersandOperatorContext.class, 0);
        }

        public PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator() {
            return getRuleContext(PrecedenceBitwiseOrOperatorContext.class, 0);
        }

        public PrecedenceComparisonOperatorContext precedenceComparisonOperator() {
            return getRuleContext(PrecedenceComparisonOperatorContext.class, 0);
        }

        public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
            return getRuleContext(PrecedenceRegexpOperatorContext.class, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_BETWEEN() {
            return getToken(HiveParser.KW_BETWEEN, 0);
        }

        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public TerminalNode KW_IS() {
            return getToken(HiveParser.KW_IS, 0);
        }

        public IsConditionContext isCondition() {
            return getRuleContext(IsConditionContext.class, 0);
        }

        public TerminalNode KW_LIKE() {
            return getToken(HiveParser.KW_LIKE, 0);
        }

        public ExpressionsInParenthesisContext expressionsInParenthesis() {
            return getRuleContext(ExpressionsInParenthesisContext.class, 0);
        }

        public TerminalNode KW_ANY() {
            return getToken(HiveParser.KW_ANY, 0);
        }

        public TerminalNode KW_ALL() {
            return getToken(HiveParser.KW_ALL, 0);
        }

        public TerminalNode KW_IN() {
            return getToken(HiveParser.KW_IN, 0);
        }

        public PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn() {
            return getRuleContext(PrecedenceSimilarExpressionInContext.class, 0);
        }

        public PrecedenceExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrecedenceExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceExpressionContext precedenceExpression() throws RecognitionException {
        return precedenceExpression(0);
    }

    private PrecedenceExpressionContext precedenceExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        PrecedenceExpressionContext _localctx = new PrecedenceExpressionContext(_ctx, _parentState);
        PrecedenceExpressionContext _prevctx = _localctx;
        int _startState = 704;
        enterRecursionRule(_localctx, 704, RULE_precedenceExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3944);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case KW_TRUE:
                    case KW_FALSE:
                    case KW_IF:
                    case KW_ASC:
                    case KW_DESC:
                    case KW_NULLS:
                    case KW_LAST:
                    case KW_OVERWRITE:
                    case KW_PARTITIONS:
                    case KW_TABLES:
                    case KW_COLUMNS:
                    case KW_INDEX:
                    case KW_INDEXES:
                    case KW_REBUILD:
                    case KW_FUNCTIONS:
                    case KW_SHOW:
                    case KW_MSCK:
                    case KW_REPAIR:
                    case KW_DIRECTORY:
                    case KW_CLUSTER:
                    case KW_DISTRIBUTE:
                    case KW_SORT:
                    case KW_LOAD:
                    case KW_EXPORT:
                    case KW_REPLICATION:
                    case KW_METADATA:
                    case KW_DATA:
                    case KW_INPATH:
                    case KW_NULL:
                    case KW_CHANGE:
                    case KW_FIRST:
                    case KW_AFTER:
                    case KW_RENAME:
                    case KW_COMMENT:
                    case KW_BOOLEAN:
                    case KW_TINYINT:
                    case KW_SMALLINT:
                    case KW_INT:
                    case KW_BIGINT:
                    case KW_FLOAT:
                    case KW_DOUBLE:
                    case KW_DATE:
                    case KW_DATETIME:
                    case KW_TIMESTAMP:
                    case KW_TIMESTAMPLOCALTZ:
                    case KW_ZONE:
                    case KW_INTERVAL:
                    case KW_STRING:
                    case KW_ARRAY:
                    case KW_STRUCT:
                    case KW_MAP:
                    case KW_UNIONTYPE:
                    case KW_PARTITIONED:
                    case KW_CLUSTERED:
                    case KW_SORTED:
                    case KW_BUCKETS:
                    case KW_FORMAT:
                    case KW_DELIMITED:
                    case KW_FIELDS:
                    case KW_TERMINATED:
                    case KW_ESCAPED:
                    case KW_COLLECTION:
                    case KW_ITEMS:
                    case KW_KEYS:
                    case KW_KEY_TYPE:
                    case KW_KILL:
                    case KW_LINES:
                    case KW_STORED:
                    case KW_FILEFORMAT:
                    case KW_INPUTFORMAT:
                    case KW_OUTPUTFORMAT:
                    case KW_INPUTDRIVER:
                    case KW_OUTPUTDRIVER:
                    case KW_ENABLE:
                    case KW_DISABLE:
                    case KW_LOCATION:
                    case KW_BUCKET:
                    case KW_CAST:
                    case KW_ADD:
                    case KW_REPLACE:
                    case KW_TEMPORARY:
                    case KW_FILE:
                    case KW_JAR:
                    case KW_EXPLAIN:
                    case KW_FORMATTED:
                    case KW_DEPENDENCY:
                    case KW_LOGICAL:
                    case KW_SERDE:
                    case KW_DEFERRED:
                    case KW_SERDEPROPERTIES:
                    case KW_DBPROPERTIES:
                    case KW_LIMIT:
                    case KW_OFFSET:
                    case KW_UNSET:
                    case KW_TBLPROPERTIES:
                    case KW_IDXPROPERTIES:
                    case KW_VALUE_TYPE:
                    case KW_ELEM_TYPE:
                    case KW_DEFINED:
                    case KW_CASE:
                    case KW_MAPJOIN:
                    case KW_STREAMTABLE:
                    case KW_CLUSTERSTATUS:
                    case KW_UTC:
                    case KW_UTCTIMESTAMP:
                    case KW_LONG:
                    case KW_PLUS:
                    case KW_VIEW:
                    case KW_VIEWS:
                    case KW_DATABASES:
                    case KW_MATERIALIZED:
                    case KW_SCHEMA:
                    case KW_SCHEMAS:
                    case KW_SSL:
                    case KW_UNDO:
                    case KW_LOCK:
                    case KW_LOCKS:
                    case KW_UNLOCK:
                    case KW_SHARED:
                    case KW_EXCLUSIVE:
                    case KW_UNSIGNED:
                    case KW_WHILE:
                    case KW_READ:
                    case KW_PURGE:
                    case KW_ANALYZE:
                    case KW_BEFORE:
                    case KW_BINARY:
                    case KW_CONTINUE:
                    case KW_RECORDREADER:
                    case KW_RECORDWRITER:
                    case KW_SEMI:
                    case KW_TOUCH:
                    case KW_ARCHIVE:
                    case KW_UNARCHIVE:
                    case KW_COMPUTE:
                    case KW_STATISTICS:
                    case KW_USE:
                    case KW_OPTION:
                    case KW_CONCATENATE:
                    case KW_SHOW_DATABASE:
                    case KW_RESTRICT:
                    case KW_CASCADE:
                    case KW_SKEWED:
                    case KW_DIRECTORIES:
                    case KW_CURRENT_DATE:
                    case KW_CURRENT_TIMESTAMP:
                    case KW_GROUPING:
                    case KW_SETS:
                    case KW_NOSCAN:
                    case KW_ROLE:
                    case KW_ROLES:
                    case KW_URI:
                    case KW_SERVER:
                    case KW_ADMIN:
                    case KW_OWNER:
                    case KW_PRINCIPALS:
                    case KW_COMPACT:
                    case KW_COMPACTIONS:
                    case KW_TRANSACTIONS:
                    case KW_REWRITE:
                    case KW_REOPTIMIZATION:
                    case KW_RELOAD:
                    case KW_YEAR:
                    case KW_QUERY:
                    case KW_QUARTER:
                    case KW_MONTH:
                    case KW_WEEK:
                    case KW_DAY:
                    case KW_DOW:
                    case KW_HOUR:
                    case KW_MINUTE:
                    case KW_SECOND:
                    case KW_TRANSACTION:
                    case KW_WORK:
                    case KW_WRITE:
                    case KW_ISOLATION:
                    case KW_LEVEL:
                    case KW_SNAPSHOT:
                    case KW_AUTOCOMMIT:
                    case KW_CACHE:
                    case KW_ENFORCED:
                    case KW_VALIDATE:
                    case KW_NOVALIDATE:
                    case KW_RELY:
                    case KW_NORELY:
                    case KW_KEY:
                    case KW_ABORT:
                    case KW_EXTRACT:
                    case KW_FLOOR:
                    case KW_MATCHED:
                    case KW_REPL:
                    case KW_DUMP:
                    case KW_STATUS:
                    case KW_VECTORIZATION:
                    case KW_SUMMARY:
                    case KW_OPERATOR:
                    case KW_EXPRESSION:
                    case KW_DETAIL:
                    case KW_WAIT:
                    case KW_RESOURCE:
                    case KW_PLAN:
                    case KW_QUERY_PARALLELISM:
                    case KW_PLANS:
                    case KW_ACTIVATE:
                    case KW_DEFAULT:
                    case KW_CHECK:
                    case KW_POOL:
                    case KW_MOVE:
                    case KW_DO:
                    case KW_ALLOC_FRACTION:
                    case KW_SCHEDULING_POLICY:
                    case KW_PATH:
                    case KW_MAPPING:
                    case KW_WORKLOAD:
                    case KW_MANAGEMENT:
                    case KW_ACTIVE:
                    case KW_UNMANAGED:
                    case LPAREN:
                    case StringLiteral:
                    case IntegralLiteral:
                    case NumberLiteral:
                    case Number:
                    case Identifier:
                    case CharSetName:
                        {
                            setState(3924);
                            atomExpression();
                            setState(3933);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 479, _ctx);
                            while (_alt != 2
                                    && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1) {
                                    {
                                        setState(3931);
                                        _errHandler.sync(this);
                                        switch (_input.LA(1)) {
                                            case LSQUARE:
                                                {
                                                    {
                                                        setState(3925);
                                                        match(LSQUARE);
                                                        setState(3926);
                                                        expression(0);
                                                        setState(3927);
                                                        match(RSQUARE);
                                                    }
                                                }
                                                break;
                                            case DOT:
                                                {
                                                    {
                                                        setState(3929);
                                                        match(DOT);
                                                        setState(3930);
                                                        identifier();
                                                    }
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                }
                                setState(3935);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 479, _ctx);
                            }
                        }
                        break;
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                            setState(3936);
                            precedenceUnaryOperator();
                            setState(3937);
                            precedenceExpression(15);
                        }
                        break;
                    case KW_EXISTS:
                        {
                            setState(3939);
                            match(KW_EXISTS);
                            setState(3940);
                            subQueryExpression();
                        }
                        break;
                    case KW_NOT:
                        {
                            setState(3941);
                            precedenceNotOperator();
                            setState(3942);
                            precedenceExpression(1);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                _ctx.stop = _input.LT(-1);
                setState(4008);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 486, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(4006);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 485, _ctx)) {
                                case 1:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3946);
                                        if (!(precpred(_ctx, 13)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 13)");
                                        setState(3947);
                                        precedenceBitwiseXorOperator();
                                        setState(3948);
                                        precedenceExpression(14);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3950);
                                        if (!(precpred(_ctx, 12)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 12)");
                                        setState(3951);
                                        precedenceStarOperator();
                                        setState(3952);
                                        precedenceExpression(13);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3954);
                                        if (!(precpred(_ctx, 11)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 11)");
                                        setState(3955);
                                        precedencePlusOperator();
                                        setState(3956);
                                        precedenceExpression(12);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3958);
                                        if (!(precpred(_ctx, 10)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 10)");
                                        setState(3959);
                                        precedenceConcatenateOperator();
                                        setState(3960);
                                        precedenceExpression(11);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3962);
                                        if (!(precpred(_ctx, 9)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 9)");
                                        setState(3963);
                                        precedenceAmpersandOperator();
                                        setState(3964);
                                        precedenceExpression(10);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3966);
                                        if (!(precpred(_ctx, 8)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 8)");
                                        setState(3967);
                                        precedenceBitwiseOrOperator();
                                        setState(3968);
                                        precedenceExpression(9);
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3970);
                                        if (!(precpred(_ctx, 7)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 7)");
                                        setState(3971);
                                        precedenceComparisonOperator();
                                        setState(3972);
                                        precedenceExpression(8);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3974);
                                        if (!(precpred(_ctx, 6)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 6)");
                                        setState(3976);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == KW_NOT) {
                                            {
                                                setState(3975);
                                                match(KW_NOT);
                                            }
                                        }

                                        setState(3978);
                                        precedenceRegexpOperator();
                                        setState(3979);
                                        precedenceExpression(7);
                                    }
                                    break;
                                case 9:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3981);
                                        if (!(precpred(_ctx, 3)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 3)");
                                        setState(3983);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == KW_NOT) {
                                            {
                                                setState(3982);
                                                match(KW_NOT);
                                            }
                                        }

                                        setState(3985);
                                        match(KW_BETWEEN);
                                        setState(3986);
                                        precedenceExpression(0);
                                        setState(3987);
                                        match(KW_AND);
                                        setState(3988);
                                        precedenceExpression(4);
                                    }
                                    break;
                                case 10:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3990);
                                        if (!(precpred(_ctx, 14)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 14)");
                                        setState(3991);
                                        match(KW_IS);
                                        setState(3992);
                                        isCondition();
                                    }
                                    break;
                                case 11:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(3993);
                                        if (!(precpred(_ctx, 5)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 5)");
                                        setState(3995);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == KW_NOT) {
                                            {
                                                setState(3994);
                                                match(KW_NOT);
                                            }
                                        }

                                        setState(3997);
                                        match(KW_LIKE);
                                        setState(3998);
                                        _la = _input.LA(1);
                                        if (!(_la == KW_ALL || _la == KW_ANY)) {
                                            _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(3999);
                                        expressionsInParenthesis();
                                    }
                                    break;
                                case 12:
                                    {
                                        _localctx =
                                                new PrecedenceExpressionContext(
                                                        _parentctx, _parentState);
                                        pushNewRecursionContext(
                                                _localctx, _startState, RULE_precedenceExpression);
                                        setState(4000);
                                        if (!(precpred(_ctx, 4)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 4)");
                                        setState(4002);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                        if (_la == KW_NOT) {
                                            {
                                                setState(4001);
                                                match(KW_NOT);
                                            }
                                        }

                                        setState(4004);
                                        match(KW_IN);
                                        setState(4005);
                                        precedenceSimilarExpressionIn();
                                    }
                                    break;
                            }
                        }
                    }
                    setState(4010);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 486, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrecedenceSimilarExpressionInContext extends ParserRuleContext {
        public SubQueryExpressionContext subQueryExpression() {
            return getRuleContext(SubQueryExpressionContext.class, 0);
        }

        public ExpressionsInParenthesisContext expressionsInParenthesis() {
            return getRuleContext(ExpressionsInParenthesisContext.class, 0);
        }

        public PrecedenceSimilarExpressionInContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_precedenceSimilarExpressionIn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrecedenceSimilarExpressionIn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrecedenceSimilarExpressionIn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitPrecedenceSimilarExpressionIn(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn()
            throws RecognitionException {
        PrecedenceSimilarExpressionInContext _localctx =
                new PrecedenceSimilarExpressionInContext(_ctx, getState());
        enterRule(_localctx, 706, RULE_precedenceSimilarExpressionIn);
        try {
            setState(4013);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 487, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(4011);
                        subQueryExpression();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(4012);
                        expressionsInParenthesis();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SubQueryExpressionContext extends ParserRuleContext {
        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public SelectStatementContext selectStatement() {
            return getRuleContext(SelectStatementContext.class, 0);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public SubQueryExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_subQueryExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSubQueryExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSubQueryExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSubQueryExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SubQueryExpressionContext subQueryExpression() throws RecognitionException {
        SubQueryExpressionContext _localctx = new SubQueryExpressionContext(_ctx, getState());
        enterRule(_localctx, 708, RULE_subQueryExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4015);
                match(LPAREN);
                setState(4016);
                selectStatement();
                setState(4017);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BooleanValueContext extends ParserRuleContext {
        public TerminalNode KW_TRUE() {
            return getToken(HiveParser.KW_TRUE, 0);
        }

        public TerminalNode KW_FALSE() {
            return getToken(HiveParser.KW_FALSE, 0);
        }

        public BooleanValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterBooleanValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitBooleanValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitBooleanValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BooleanValueContext booleanValue() throws RecognitionException {
        BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
        enterRule(_localctx, 710, RULE_booleanValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4019);
                _la = _input.LA(1);
                if (!(_la == KW_TRUE || _la == KW_FALSE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BooleanValueTokContext extends ParserRuleContext {
        public TerminalNode KW_TRUE() {
            return getToken(HiveParser.KW_TRUE, 0);
        }

        public TerminalNode KW_FALSE() {
            return getToken(HiveParser.KW_FALSE, 0);
        }

        public BooleanValueTokContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanValueTok;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterBooleanValueTok(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitBooleanValueTok(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitBooleanValueTok(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BooleanValueTokContext booleanValueTok() throws RecognitionException {
        BooleanValueTokContext _localctx = new BooleanValueTokContext(_ctx, getState());
        enterRule(_localctx, 712, RULE_booleanValueTok);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4021);
                _la = _input.LA(1);
                if (!(_la == KW_TRUE || _la == KW_FALSE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class TableOrPartitionContext extends ParserRuleContext {
        public TableNameContext tableName() {
            return getRuleContext(TableNameContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TableOrPartitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableOrPartition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterTableOrPartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitTableOrPartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitTableOrPartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final TableOrPartitionContext tableOrPartition() throws RecognitionException {
        TableOrPartitionContext _localctx = new TableOrPartitionContext(_ctx, getState());
        enterRule(_localctx, 714, RULE_tableOrPartition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4023);
                tableName();
                setState(4025);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == KW_PARTITION) {
                    {
                        setState(4024);
                        partitionSpec();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionSpecContext extends ParserRuleContext {
        public TerminalNode KW_PARTITION() {
            return getToken(HiveParser.KW_PARTITION, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<PartitionValContext> partitionVal() {
            return getRuleContexts(PartitionValContext.class);
        }

        public PartitionValContext partitionVal(int i) {
            return getRuleContext(PartitionValContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartitionSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionSpecContext partitionSpec() throws RecognitionException {
        PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
        enterRule(_localctx, 716, RULE_partitionSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4027);
                match(KW_PARTITION);
                setState(4028);
                match(LPAREN);
                setState(4029);
                partitionVal();
                setState(4034);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(4030);
                            match(COMMA);
                            setState(4031);
                            partitionVal();
                        }
                    }
                    setState(4036);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4037);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PartitionValContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public PartitionValContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionVal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPartitionVal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPartitionVal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPartitionVal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PartitionValContext partitionVal() throws RecognitionException {
        PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
        enterRule(_localctx, 718, RULE_partitionVal);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4039);
                identifier();
                setState(4042);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EQUAL) {
                    {
                        setState(4040);
                        match(EQUAL);
                        setState(4041);
                        constant();
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropPartitionSpecContext extends ParserRuleContext {
        public TerminalNode KW_PARTITION() {
            return getToken(HiveParser.KW_PARTITION, 0);
        }

        public TerminalNode LPAREN() {
            return getToken(HiveParser.LPAREN, 0);
        }

        public List<DropPartitionValContext> dropPartitionVal() {
            return getRuleContexts(DropPartitionValContext.class);
        }

        public DropPartitionValContext dropPartitionVal(int i) {
            return getRuleContext(DropPartitionValContext.class, i);
        }

        public TerminalNode RPAREN() {
            return getToken(HiveParser.RPAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(HiveParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(HiveParser.COMMA, i);
        }

        public DropPartitionSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropPartitionSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropPartitionSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropPartitionSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropPartitionSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropPartitionSpecContext dropPartitionSpec() throws RecognitionException {
        DropPartitionSpecContext _localctx = new DropPartitionSpecContext(_ctx, getState());
        enterRule(_localctx, 720, RULE_dropPartitionSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4044);
                match(KW_PARTITION);
                setState(4045);
                match(LPAREN);
                setState(4046);
                dropPartitionVal();
                setState(4051);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(4047);
                            match(COMMA);
                            setState(4048);
                            dropPartitionVal();
                        }
                    }
                    setState(4053);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(4054);
                match(RPAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropPartitionValContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public DropPartitionOperatorContext dropPartitionOperator() {
            return getRuleContext(DropPartitionOperatorContext.class, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public DropPartitionValContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropPartitionVal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropPartitionVal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropPartitionVal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropPartitionVal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropPartitionValContext dropPartitionVal() throws RecognitionException {
        DropPartitionValContext _localctx = new DropPartitionValContext(_ctx, getState());
        enterRule(_localctx, 722, RULE_dropPartitionVal);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4056);
                identifier();
                setState(4057);
                dropPartitionOperator();
                setState(4058);
                constant();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DropPartitionOperatorContext extends ParserRuleContext {
        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public TerminalNode NOTEQUAL() {
            return getToken(HiveParser.NOTEQUAL, 0);
        }

        public TerminalNode LESSTHANOREQUALTO() {
            return getToken(HiveParser.LESSTHANOREQUALTO, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public TerminalNode GREATERTHANOREQUALTO() {
            return getToken(HiveParser.GREATERTHANOREQUALTO, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public DropPartitionOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dropPartitionOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDropPartitionOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDropPartitionOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDropPartitionOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DropPartitionOperatorContext dropPartitionOperator() throws RecognitionException {
        DropPartitionOperatorContext _localctx = new DropPartitionOperatorContext(_ctx, getState());
        enterRule(_localctx, 724, RULE_dropPartitionOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4060);
                _la = _input.LA(1);
                if (!(((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & 125L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class SysFuncNamesContext extends ParserRuleContext {
        public TerminalNode KW_AND() {
            return getToken(HiveParser.KW_AND, 0);
        }

        public TerminalNode KW_OR() {
            return getToken(HiveParser.KW_OR, 0);
        }

        public TerminalNode KW_NOT() {
            return getToken(HiveParser.KW_NOT, 0);
        }

        public TerminalNode KW_LIKE() {
            return getToken(HiveParser.KW_LIKE, 0);
        }

        public TerminalNode KW_IF() {
            return getToken(HiveParser.KW_IF, 0);
        }

        public TerminalNode KW_CASE() {
            return getToken(HiveParser.KW_CASE, 0);
        }

        public TerminalNode KW_WHEN() {
            return getToken(HiveParser.KW_WHEN, 0);
        }

        public TerminalNode KW_FLOOR() {
            return getToken(HiveParser.KW_FLOOR, 0);
        }

        public TerminalNode KW_TINYINT() {
            return getToken(HiveParser.KW_TINYINT, 0);
        }

        public TerminalNode KW_SMALLINT() {
            return getToken(HiveParser.KW_SMALLINT, 0);
        }

        public TerminalNode KW_INT() {
            return getToken(HiveParser.KW_INT, 0);
        }

        public TerminalNode KW_BIGINT() {
            return getToken(HiveParser.KW_BIGINT, 0);
        }

        public TerminalNode KW_FLOAT() {
            return getToken(HiveParser.KW_FLOAT, 0);
        }

        public TerminalNode KW_DOUBLE() {
            return getToken(HiveParser.KW_DOUBLE, 0);
        }

        public TerminalNode KW_BOOLEAN() {
            return getToken(HiveParser.KW_BOOLEAN, 0);
        }

        public TerminalNode KW_STRING() {
            return getToken(HiveParser.KW_STRING, 0);
        }

        public TerminalNode KW_BINARY() {
            return getToken(HiveParser.KW_BINARY, 0);
        }

        public TerminalNode KW_ARRAY() {
            return getToken(HiveParser.KW_ARRAY, 0);
        }

        public TerminalNode KW_MAP() {
            return getToken(HiveParser.KW_MAP, 0);
        }

        public TerminalNode KW_STRUCT() {
            return getToken(HiveParser.KW_STRUCT, 0);
        }

        public TerminalNode KW_UNIONTYPE() {
            return getToken(HiveParser.KW_UNIONTYPE, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(HiveParser.EQUAL, 0);
        }

        public TerminalNode EQUAL_NS() {
            return getToken(HiveParser.EQUAL_NS, 0);
        }

        public TerminalNode NOTEQUAL() {
            return getToken(HiveParser.NOTEQUAL, 0);
        }

        public TerminalNode LESSTHANOREQUALTO() {
            return getToken(HiveParser.LESSTHANOREQUALTO, 0);
        }

        public TerminalNode LESSTHAN() {
            return getToken(HiveParser.LESSTHAN, 0);
        }

        public TerminalNode GREATERTHANOREQUALTO() {
            return getToken(HiveParser.GREATERTHANOREQUALTO, 0);
        }

        public TerminalNode GREATERTHAN() {
            return getToken(HiveParser.GREATERTHAN, 0);
        }

        public TerminalNode DIVIDE() {
            return getToken(HiveParser.DIVIDE, 0);
        }

        public TerminalNode PLUS() {
            return getToken(HiveParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(HiveParser.MINUS, 0);
        }

        public TerminalNode STAR() {
            return getToken(HiveParser.STAR, 0);
        }

        public TerminalNode MOD() {
            return getToken(HiveParser.MOD, 0);
        }

        public TerminalNode DIV() {
            return getToken(HiveParser.DIV, 0);
        }

        public TerminalNode AMPERSAND() {
            return getToken(HiveParser.AMPERSAND, 0);
        }

        public TerminalNode TILDE() {
            return getToken(HiveParser.TILDE, 0);
        }

        public TerminalNode BITWISEOR() {
            return getToken(HiveParser.BITWISEOR, 0);
        }

        public TerminalNode BITWISEXOR() {
            return getToken(HiveParser.BITWISEXOR, 0);
        }

        public TerminalNode KW_RLIKE() {
            return getToken(HiveParser.KW_RLIKE, 0);
        }

        public TerminalNode KW_REGEXP() {
            return getToken(HiveParser.KW_REGEXP, 0);
        }

        public TerminalNode KW_IN() {
            return getToken(HiveParser.KW_IN, 0);
        }

        public TerminalNode KW_BETWEEN() {
            return getToken(HiveParser.KW_BETWEEN, 0);
        }

        public SysFuncNamesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sysFuncNames;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSysFuncNames(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSysFuncNames(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitSysFuncNames(this);
            else return visitor.visitChildren(this);
        }
    }

    public final SysFuncNamesContext sysFuncNames() throws RecognitionException {
        SysFuncNamesContext _localctx = new SysFuncNamesContext(_ctx, getState());
        enterRule(_localctx, 726, RULE_sysFuncNames);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4062);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & 1504L) != 0)
                        || ((((_la - 77)) & ~0x3f) == 0
                                && ((1L << (_la - 77)) & 1729382256918200447L) != 0)
                        || ((((_la - 162)) & ~0x3f) == 0
                                && ((1L << (_la - 162)) & 21990232817667L) != 0)
                        || ((((_la - 300)) & ~0x3f) == 0
                                && ((1L << (_la - 300)) & 864686730408624129L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DescFuncNamesContext extends ParserRuleContext {
        public SysFuncNamesContext sysFuncNames() {
            return getRuleContext(SysFuncNamesContext.class, 0);
        }

        public TerminalNode StringLiteral() {
            return getToken(HiveParser.StringLiteral, 0);
        }

        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public DescFuncNamesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_descFuncNames;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterDescFuncNames(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitDescFuncNames(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitDescFuncNames(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DescFuncNamesContext descFuncNames() throws RecognitionException {
        DescFuncNamesContext _localctx = new DescFuncNamesContext(_ctx, getState());
        enterRule(_localctx, 728, RULE_descFuncNames);
        try {
            setState(4067);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 492, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(4064);
                        sysFuncNames();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(4065);
                        match(StringLiteral);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(4066);
                        functionIdentifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentifierContext extends ParserRuleContext {
        public TerminalNode Identifier() {
            return getToken(HiveParser.Identifier, 0);
        }

        public NonReservedContext nonReserved() {
            return getRuleContext(NonReservedContext.class, 0);
        }

        public IdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentifierContext identifier() throws RecognitionException {
        IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
        enterRule(_localctx, 730, RULE_identifier);
        try {
            setState(4071);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case Identifier:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(4069);
                        match(Identifier);
                    }
                    break;
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(4070);
                        nonReserved();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class FunctionIdentifierContext extends ParserRuleContext {
        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(HiveParser.DOT, 0);
        }

        public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
        FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 732, RULE_functionIdentifier);
        try {
            setState(4078);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 494, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(4073);
                        identifier();
                        setState(4074);
                        match(DOT);
                        setState(4075);
                        identifier();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(4077);
                        identifier();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class PrincipalIdentifierContext extends ParserRuleContext {
        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode QuotedIdentifier() {
            return getToken(HiveParser.QuotedIdentifier, 0);
        }

        public PrincipalIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_principalIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterPrincipalIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitPrincipalIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitPrincipalIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public final PrincipalIdentifierContext principalIdentifier() throws RecognitionException {
        PrincipalIdentifierContext _localctx = new PrincipalIdentifierContext(_ctx, getState());
        enterRule(_localctx, 734, RULE_principalIdentifier);
        try {
            setState(4082);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case KW_ASC:
                case KW_DESC:
                case KW_NULLS:
                case KW_LAST:
                case KW_OVERWRITE:
                case KW_PARTITIONS:
                case KW_TABLES:
                case KW_COLUMNS:
                case KW_INDEX:
                case KW_INDEXES:
                case KW_REBUILD:
                case KW_FUNCTIONS:
                case KW_SHOW:
                case KW_MSCK:
                case KW_REPAIR:
                case KW_DIRECTORY:
                case KW_CLUSTER:
                case KW_DISTRIBUTE:
                case KW_SORT:
                case KW_LOAD:
                case KW_EXPORT:
                case KW_REPLICATION:
                case KW_METADATA:
                case KW_DATA:
                case KW_INPATH:
                case KW_CHANGE:
                case KW_FIRST:
                case KW_AFTER:
                case KW_RENAME:
                case KW_COMMENT:
                case KW_TINYINT:
                case KW_DATETIME:
                case KW_ZONE:
                case KW_STRING:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                case KW_PARTITIONED:
                case KW_CLUSTERED:
                case KW_SORTED:
                case KW_BUCKETS:
                case KW_FORMAT:
                case KW_DELIMITED:
                case KW_FIELDS:
                case KW_TERMINATED:
                case KW_ESCAPED:
                case KW_COLLECTION:
                case KW_ITEMS:
                case KW_KEYS:
                case KW_KEY_TYPE:
                case KW_KILL:
                case KW_LINES:
                case KW_STORED:
                case KW_FILEFORMAT:
                case KW_INPUTFORMAT:
                case KW_OUTPUTFORMAT:
                case KW_INPUTDRIVER:
                case KW_OUTPUTDRIVER:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_LOCATION:
                case KW_BUCKET:
                case KW_ADD:
                case KW_REPLACE:
                case KW_TEMPORARY:
                case KW_FILE:
                case KW_JAR:
                case KW_EXPLAIN:
                case KW_FORMATTED:
                case KW_DEPENDENCY:
                case KW_LOGICAL:
                case KW_SERDE:
                case KW_DEFERRED:
                case KW_SERDEPROPERTIES:
                case KW_DBPROPERTIES:
                case KW_LIMIT:
                case KW_OFFSET:
                case KW_UNSET:
                case KW_TBLPROPERTIES:
                case KW_IDXPROPERTIES:
                case KW_VALUE_TYPE:
                case KW_ELEM_TYPE:
                case KW_DEFINED:
                case KW_MAPJOIN:
                case KW_STREAMTABLE:
                case KW_CLUSTERSTATUS:
                case KW_UTC:
                case KW_UTCTIMESTAMP:
                case KW_LONG:
                case KW_PLUS:
                case KW_VIEW:
                case KW_VIEWS:
                case KW_DATABASES:
                case KW_MATERIALIZED:
                case KW_SCHEMA:
                case KW_SCHEMAS:
                case KW_SSL:
                case KW_UNDO:
                case KW_LOCK:
                case KW_LOCKS:
                case KW_UNLOCK:
                case KW_SHARED:
                case KW_EXCLUSIVE:
                case KW_UNSIGNED:
                case KW_WHILE:
                case KW_READ:
                case KW_PURGE:
                case KW_ANALYZE:
                case KW_BEFORE:
                case KW_CONTINUE:
                case KW_RECORDREADER:
                case KW_RECORDWRITER:
                case KW_SEMI:
                case KW_TOUCH:
                case KW_ARCHIVE:
                case KW_UNARCHIVE:
                case KW_COMPUTE:
                case KW_STATISTICS:
                case KW_USE:
                case KW_OPTION:
                case KW_CONCATENATE:
                case KW_SHOW_DATABASE:
                case KW_RESTRICT:
                case KW_CASCADE:
                case KW_SKEWED:
                case KW_DIRECTORIES:
                case KW_SETS:
                case KW_NOSCAN:
                case KW_ROLE:
                case KW_ROLES:
                case KW_URI:
                case KW_SERVER:
                case KW_ADMIN:
                case KW_OWNER:
                case KW_PRINCIPALS:
                case KW_COMPACT:
                case KW_COMPACTIONS:
                case KW_TRANSACTIONS:
                case KW_REWRITE:
                case KW_REOPTIMIZATION:
                case KW_RELOAD:
                case KW_YEAR:
                case KW_QUERY:
                case KW_QUARTER:
                case KW_MONTH:
                case KW_WEEK:
                case KW_DAY:
                case KW_DOW:
                case KW_HOUR:
                case KW_MINUTE:
                case KW_SECOND:
                case KW_TRANSACTION:
                case KW_WORK:
                case KW_WRITE:
                case KW_ISOLATION:
                case KW_LEVEL:
                case KW_SNAPSHOT:
                case KW_AUTOCOMMIT:
                case KW_CACHE:
                case KW_ENFORCED:
                case KW_VALIDATE:
                case KW_NOVALIDATE:
                case KW_RELY:
                case KW_NORELY:
                case KW_KEY:
                case KW_ABORT:
                case KW_MATCHED:
                case KW_REPL:
                case KW_DUMP:
                case KW_STATUS:
                case KW_VECTORIZATION:
                case KW_SUMMARY:
                case KW_OPERATOR:
                case KW_EXPRESSION:
                case KW_DETAIL:
                case KW_WAIT:
                case KW_RESOURCE:
                case KW_PLAN:
                case KW_QUERY_PARALLELISM:
                case KW_PLANS:
                case KW_ACTIVATE:
                case KW_DEFAULT:
                case KW_CHECK:
                case KW_POOL:
                case KW_MOVE:
                case KW_DO:
                case KW_ALLOC_FRACTION:
                case KW_SCHEDULING_POLICY:
                case KW_PATH:
                case KW_MAPPING:
                case KW_WORKLOAD:
                case KW_MANAGEMENT:
                case KW_ACTIVE:
                case KW_UNMANAGED:
                case Identifier:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(4080);
                        identifier();
                    }
                    break;
                case QuotedIdentifier:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(4081);
                        match(QuotedIdentifier);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class NonReservedContext extends ParserRuleContext {
        public TerminalNode KW_ABORT() {
            return getToken(HiveParser.KW_ABORT, 0);
        }

        public TerminalNode KW_ADD() {
            return getToken(HiveParser.KW_ADD, 0);
        }

        public TerminalNode KW_ADMIN() {
            return getToken(HiveParser.KW_ADMIN, 0);
        }

        public TerminalNode KW_AFTER() {
            return getToken(HiveParser.KW_AFTER, 0);
        }

        public TerminalNode KW_ANALYZE() {
            return getToken(HiveParser.KW_ANALYZE, 0);
        }

        public TerminalNode KW_ARCHIVE() {
            return getToken(HiveParser.KW_ARCHIVE, 0);
        }

        public TerminalNode KW_ASC() {
            return getToken(HiveParser.KW_ASC, 0);
        }

        public TerminalNode KW_BEFORE() {
            return getToken(HiveParser.KW_BEFORE, 0);
        }

        public TerminalNode KW_BUCKET() {
            return getToken(HiveParser.KW_BUCKET, 0);
        }

        public TerminalNode KW_BUCKETS() {
            return getToken(HiveParser.KW_BUCKETS, 0);
        }

        public TerminalNode KW_CASCADE() {
            return getToken(HiveParser.KW_CASCADE, 0);
        }

        public TerminalNode KW_CHANGE() {
            return getToken(HiveParser.KW_CHANGE, 0);
        }

        public TerminalNode KW_CHECK() {
            return getToken(HiveParser.KW_CHECK, 0);
        }

        public TerminalNode KW_CLUSTER() {
            return getToken(HiveParser.KW_CLUSTER, 0);
        }

        public TerminalNode KW_CLUSTERED() {
            return getToken(HiveParser.KW_CLUSTERED, 0);
        }

        public TerminalNode KW_CLUSTERSTATUS() {
            return getToken(HiveParser.KW_CLUSTERSTATUS, 0);
        }

        public TerminalNode KW_COLLECTION() {
            return getToken(HiveParser.KW_COLLECTION, 0);
        }

        public TerminalNode KW_COLUMNS() {
            return getToken(HiveParser.KW_COLUMNS, 0);
        }

        public TerminalNode KW_COMMENT() {
            return getToken(HiveParser.KW_COMMENT, 0);
        }

        public TerminalNode KW_COMPACT() {
            return getToken(HiveParser.KW_COMPACT, 0);
        }

        public TerminalNode KW_COMPACTIONS() {
            return getToken(HiveParser.KW_COMPACTIONS, 0);
        }

        public TerminalNode KW_COMPUTE() {
            return getToken(HiveParser.KW_COMPUTE, 0);
        }

        public TerminalNode KW_CONCATENATE() {
            return getToken(HiveParser.KW_CONCATENATE, 0);
        }

        public TerminalNode KW_CONTINUE() {
            return getToken(HiveParser.KW_CONTINUE, 0);
        }

        public TerminalNode KW_DATA() {
            return getToken(HiveParser.KW_DATA, 0);
        }

        public TerminalNode KW_DAY() {
            return getToken(HiveParser.KW_DAY, 0);
        }

        public TerminalNode KW_DATABASES() {
            return getToken(HiveParser.KW_DATABASES, 0);
        }

        public TerminalNode KW_DATETIME() {
            return getToken(HiveParser.KW_DATETIME, 0);
        }

        public TerminalNode KW_DBPROPERTIES() {
            return getToken(HiveParser.KW_DBPROPERTIES, 0);
        }

        public TerminalNode KW_DEFERRED() {
            return getToken(HiveParser.KW_DEFERRED, 0);
        }

        public TerminalNode KW_DEFINED() {
            return getToken(HiveParser.KW_DEFINED, 0);
        }

        public TerminalNode KW_DELIMITED() {
            return getToken(HiveParser.KW_DELIMITED, 0);
        }

        public TerminalNode KW_DEPENDENCY() {
            return getToken(HiveParser.KW_DEPENDENCY, 0);
        }

        public TerminalNode KW_DESC() {
            return getToken(HiveParser.KW_DESC, 0);
        }

        public TerminalNode KW_DIRECTORIES() {
            return getToken(HiveParser.KW_DIRECTORIES, 0);
        }

        public TerminalNode KW_DIRECTORY() {
            return getToken(HiveParser.KW_DIRECTORY, 0);
        }

        public TerminalNode KW_DISABLE() {
            return getToken(HiveParser.KW_DISABLE, 0);
        }

        public TerminalNode KW_DISTRIBUTE() {
            return getToken(HiveParser.KW_DISTRIBUTE, 0);
        }

        public TerminalNode KW_DOW() {
            return getToken(HiveParser.KW_DOW, 0);
        }

        public TerminalNode KW_ELEM_TYPE() {
            return getToken(HiveParser.KW_ELEM_TYPE, 0);
        }

        public TerminalNode KW_ENABLE() {
            return getToken(HiveParser.KW_ENABLE, 0);
        }

        public TerminalNode KW_ENFORCED() {
            return getToken(HiveParser.KW_ENFORCED, 0);
        }

        public TerminalNode KW_ESCAPED() {
            return getToken(HiveParser.KW_ESCAPED, 0);
        }

        public TerminalNode KW_EXCLUSIVE() {
            return getToken(HiveParser.KW_EXCLUSIVE, 0);
        }

        public TerminalNode KW_EXPLAIN() {
            return getToken(HiveParser.KW_EXPLAIN, 0);
        }

        public TerminalNode KW_EXPORT() {
            return getToken(HiveParser.KW_EXPORT, 0);
        }

        public TerminalNode KW_FIELDS() {
            return getToken(HiveParser.KW_FIELDS, 0);
        }

        public TerminalNode KW_FILE() {
            return getToken(HiveParser.KW_FILE, 0);
        }

        public TerminalNode KW_FILEFORMAT() {
            return getToken(HiveParser.KW_FILEFORMAT, 0);
        }

        public TerminalNode KW_FIRST() {
            return getToken(HiveParser.KW_FIRST, 0);
        }

        public TerminalNode KW_FORMAT() {
            return getToken(HiveParser.KW_FORMAT, 0);
        }

        public TerminalNode KW_FORMATTED() {
            return getToken(HiveParser.KW_FORMATTED, 0);
        }

        public TerminalNode KW_FUNCTIONS() {
            return getToken(HiveParser.KW_FUNCTIONS, 0);
        }

        public TerminalNode KW_HOUR() {
            return getToken(HiveParser.KW_HOUR, 0);
        }

        public TerminalNode KW_IDXPROPERTIES() {
            return getToken(HiveParser.KW_IDXPROPERTIES, 0);
        }

        public TerminalNode KW_INDEX() {
            return getToken(HiveParser.KW_INDEX, 0);
        }

        public TerminalNode KW_INDEXES() {
            return getToken(HiveParser.KW_INDEXES, 0);
        }

        public TerminalNode KW_INPATH() {
            return getToken(HiveParser.KW_INPATH, 0);
        }

        public TerminalNode KW_INPUTDRIVER() {
            return getToken(HiveParser.KW_INPUTDRIVER, 0);
        }

        public TerminalNode KW_INPUTFORMAT() {
            return getToken(HiveParser.KW_INPUTFORMAT, 0);
        }

        public TerminalNode KW_ITEMS() {
            return getToken(HiveParser.KW_ITEMS, 0);
        }

        public TerminalNode KW_JAR() {
            return getToken(HiveParser.KW_JAR, 0);
        }

        public TerminalNode KW_KILL() {
            return getToken(HiveParser.KW_KILL, 0);
        }

        public TerminalNode KW_KEYS() {
            return getToken(HiveParser.KW_KEYS, 0);
        }

        public TerminalNode KW_KEY_TYPE() {
            return getToken(HiveParser.KW_KEY_TYPE, 0);
        }

        public TerminalNode KW_LAST() {
            return getToken(HiveParser.KW_LAST, 0);
        }

        public TerminalNode KW_LIMIT() {
            return getToken(HiveParser.KW_LIMIT, 0);
        }

        public TerminalNode KW_OFFSET() {
            return getToken(HiveParser.KW_OFFSET, 0);
        }

        public TerminalNode KW_LINES() {
            return getToken(HiveParser.KW_LINES, 0);
        }

        public TerminalNode KW_LOAD() {
            return getToken(HiveParser.KW_LOAD, 0);
        }

        public TerminalNode KW_LOCATION() {
            return getToken(HiveParser.KW_LOCATION, 0);
        }

        public TerminalNode KW_LOCK() {
            return getToken(HiveParser.KW_LOCK, 0);
        }

        public TerminalNode KW_LOCKS() {
            return getToken(HiveParser.KW_LOCKS, 0);
        }

        public TerminalNode KW_LOGICAL() {
            return getToken(HiveParser.KW_LOGICAL, 0);
        }

        public TerminalNode KW_LONG() {
            return getToken(HiveParser.KW_LONG, 0);
        }

        public TerminalNode KW_MAPJOIN() {
            return getToken(HiveParser.KW_MAPJOIN, 0);
        }

        public TerminalNode KW_MATERIALIZED() {
            return getToken(HiveParser.KW_MATERIALIZED, 0);
        }

        public TerminalNode KW_METADATA() {
            return getToken(HiveParser.KW_METADATA, 0);
        }

        public TerminalNode KW_MINUTE() {
            return getToken(HiveParser.KW_MINUTE, 0);
        }

        public TerminalNode KW_MONTH() {
            return getToken(HiveParser.KW_MONTH, 0);
        }

        public TerminalNode KW_MSCK() {
            return getToken(HiveParser.KW_MSCK, 0);
        }

        public TerminalNode KW_NOSCAN() {
            return getToken(HiveParser.KW_NOSCAN, 0);
        }

        public TerminalNode KW_NULLS() {
            return getToken(HiveParser.KW_NULLS, 0);
        }

        public TerminalNode KW_OPTION() {
            return getToken(HiveParser.KW_OPTION, 0);
        }

        public TerminalNode KW_OUTPUTDRIVER() {
            return getToken(HiveParser.KW_OUTPUTDRIVER, 0);
        }

        public TerminalNode KW_OUTPUTFORMAT() {
            return getToken(HiveParser.KW_OUTPUTFORMAT, 0);
        }

        public TerminalNode KW_OVERWRITE() {
            return getToken(HiveParser.KW_OVERWRITE, 0);
        }

        public TerminalNode KW_OWNER() {
            return getToken(HiveParser.KW_OWNER, 0);
        }

        public TerminalNode KW_PARTITIONED() {
            return getToken(HiveParser.KW_PARTITIONED, 0);
        }

        public TerminalNode KW_PARTITIONS() {
            return getToken(HiveParser.KW_PARTITIONS, 0);
        }

        public TerminalNode KW_PLUS() {
            return getToken(HiveParser.KW_PLUS, 0);
        }

        public TerminalNode KW_PRINCIPALS() {
            return getToken(HiveParser.KW_PRINCIPALS, 0);
        }

        public TerminalNode KW_PURGE() {
            return getToken(HiveParser.KW_PURGE, 0);
        }

        public TerminalNode KW_QUERY() {
            return getToken(HiveParser.KW_QUERY, 0);
        }

        public TerminalNode KW_QUARTER() {
            return getToken(HiveParser.KW_QUARTER, 0);
        }

        public TerminalNode KW_READ() {
            return getToken(HiveParser.KW_READ, 0);
        }

        public TerminalNode KW_REBUILD() {
            return getToken(HiveParser.KW_REBUILD, 0);
        }

        public TerminalNode KW_RECORDREADER() {
            return getToken(HiveParser.KW_RECORDREADER, 0);
        }

        public TerminalNode KW_RECORDWRITER() {
            return getToken(HiveParser.KW_RECORDWRITER, 0);
        }

        public TerminalNode KW_RELOAD() {
            return getToken(HiveParser.KW_RELOAD, 0);
        }

        public TerminalNode KW_RENAME() {
            return getToken(HiveParser.KW_RENAME, 0);
        }

        public TerminalNode KW_REPAIR() {
            return getToken(HiveParser.KW_REPAIR, 0);
        }

        public TerminalNode KW_REPLACE() {
            return getToken(HiveParser.KW_REPLACE, 0);
        }

        public TerminalNode KW_REPLICATION() {
            return getToken(HiveParser.KW_REPLICATION, 0);
        }

        public TerminalNode KW_RESTRICT() {
            return getToken(HiveParser.KW_RESTRICT, 0);
        }

        public TerminalNode KW_REWRITE() {
            return getToken(HiveParser.KW_REWRITE, 0);
        }

        public TerminalNode KW_ROLE() {
            return getToken(HiveParser.KW_ROLE, 0);
        }

        public TerminalNode KW_ROLES() {
            return getToken(HiveParser.KW_ROLES, 0);
        }

        public TerminalNode KW_SCHEMA() {
            return getToken(HiveParser.KW_SCHEMA, 0);
        }

        public TerminalNode KW_SCHEMAS() {
            return getToken(HiveParser.KW_SCHEMAS, 0);
        }

        public TerminalNode KW_SECOND() {
            return getToken(HiveParser.KW_SECOND, 0);
        }

        public TerminalNode KW_SEMI() {
            return getToken(HiveParser.KW_SEMI, 0);
        }

        public TerminalNode KW_SERDE() {
            return getToken(HiveParser.KW_SERDE, 0);
        }

        public TerminalNode KW_SERDEPROPERTIES() {
            return getToken(HiveParser.KW_SERDEPROPERTIES, 0);
        }

        public TerminalNode KW_SERVER() {
            return getToken(HiveParser.KW_SERVER, 0);
        }

        public TerminalNode KW_SETS() {
            return getToken(HiveParser.KW_SETS, 0);
        }

        public TerminalNode KW_SHARED() {
            return getToken(HiveParser.KW_SHARED, 0);
        }

        public TerminalNode KW_SHOW() {
            return getToken(HiveParser.KW_SHOW, 0);
        }

        public TerminalNode KW_SHOW_DATABASE() {
            return getToken(HiveParser.KW_SHOW_DATABASE, 0);
        }

        public TerminalNode KW_SKEWED() {
            return getToken(HiveParser.KW_SKEWED, 0);
        }

        public TerminalNode KW_SORT() {
            return getToken(HiveParser.KW_SORT, 0);
        }

        public TerminalNode KW_SORTED() {
            return getToken(HiveParser.KW_SORTED, 0);
        }

        public TerminalNode KW_SSL() {
            return getToken(HiveParser.KW_SSL, 0);
        }

        public TerminalNode KW_STATISTICS() {
            return getToken(HiveParser.KW_STATISTICS, 0);
        }

        public TerminalNode KW_STORED() {
            return getToken(HiveParser.KW_STORED, 0);
        }

        public TerminalNode KW_STREAMTABLE() {
            return getToken(HiveParser.KW_STREAMTABLE, 0);
        }

        public TerminalNode KW_STRING() {
            return getToken(HiveParser.KW_STRING, 0);
        }

        public TerminalNode KW_STRUCT() {
            return getToken(HiveParser.KW_STRUCT, 0);
        }

        public TerminalNode KW_TABLES() {
            return getToken(HiveParser.KW_TABLES, 0);
        }

        public TerminalNode KW_TBLPROPERTIES() {
            return getToken(HiveParser.KW_TBLPROPERTIES, 0);
        }

        public TerminalNode KW_TEMPORARY() {
            return getToken(HiveParser.KW_TEMPORARY, 0);
        }

        public TerminalNode KW_TERMINATED() {
            return getToken(HiveParser.KW_TERMINATED, 0);
        }

        public TerminalNode KW_TINYINT() {
            return getToken(HiveParser.KW_TINYINT, 0);
        }

        public TerminalNode KW_TOUCH() {
            return getToken(HiveParser.KW_TOUCH, 0);
        }

        public TerminalNode KW_TRANSACTIONS() {
            return getToken(HiveParser.KW_TRANSACTIONS, 0);
        }

        public TerminalNode KW_UNARCHIVE() {
            return getToken(HiveParser.KW_UNARCHIVE, 0);
        }

        public TerminalNode KW_UNDO() {
            return getToken(HiveParser.KW_UNDO, 0);
        }

        public TerminalNode KW_UNIONTYPE() {
            return getToken(HiveParser.KW_UNIONTYPE, 0);
        }

        public TerminalNode KW_UNLOCK() {
            return getToken(HiveParser.KW_UNLOCK, 0);
        }

        public TerminalNode KW_UNSET() {
            return getToken(HiveParser.KW_UNSET, 0);
        }

        public TerminalNode KW_UNSIGNED() {
            return getToken(HiveParser.KW_UNSIGNED, 0);
        }

        public TerminalNode KW_URI() {
            return getToken(HiveParser.KW_URI, 0);
        }

        public TerminalNode KW_USE() {
            return getToken(HiveParser.KW_USE, 0);
        }

        public TerminalNode KW_UTC() {
            return getToken(HiveParser.KW_UTC, 0);
        }

        public TerminalNode KW_UTCTIMESTAMP() {
            return getToken(HiveParser.KW_UTCTIMESTAMP, 0);
        }

        public TerminalNode KW_VALUE_TYPE() {
            return getToken(HiveParser.KW_VALUE_TYPE, 0);
        }

        public TerminalNode KW_VIEW() {
            return getToken(HiveParser.KW_VIEW, 0);
        }

        public TerminalNode KW_WEEK() {
            return getToken(HiveParser.KW_WEEK, 0);
        }

        public TerminalNode KW_WHILE() {
            return getToken(HiveParser.KW_WHILE, 0);
        }

        public TerminalNode KW_YEAR() {
            return getToken(HiveParser.KW_YEAR, 0);
        }

        public TerminalNode KW_WORK() {
            return getToken(HiveParser.KW_WORK, 0);
        }

        public TerminalNode KW_TRANSACTION() {
            return getToken(HiveParser.KW_TRANSACTION, 0);
        }

        public TerminalNode KW_WRITE() {
            return getToken(HiveParser.KW_WRITE, 0);
        }

        public TerminalNode KW_ISOLATION() {
            return getToken(HiveParser.KW_ISOLATION, 0);
        }

        public TerminalNode KW_LEVEL() {
            return getToken(HiveParser.KW_LEVEL, 0);
        }

        public TerminalNode KW_SNAPSHOT() {
            return getToken(HiveParser.KW_SNAPSHOT, 0);
        }

        public TerminalNode KW_AUTOCOMMIT() {
            return getToken(HiveParser.KW_AUTOCOMMIT, 0);
        }

        public TerminalNode KW_RELY() {
            return getToken(HiveParser.KW_RELY, 0);
        }

        public TerminalNode KW_NORELY() {
            return getToken(HiveParser.KW_NORELY, 0);
        }

        public TerminalNode KW_VALIDATE() {
            return getToken(HiveParser.KW_VALIDATE, 0);
        }

        public TerminalNode KW_NOVALIDATE() {
            return getToken(HiveParser.KW_NOVALIDATE, 0);
        }

        public TerminalNode KW_KEY() {
            return getToken(HiveParser.KW_KEY, 0);
        }

        public TerminalNode KW_MATCHED() {
            return getToken(HiveParser.KW_MATCHED, 0);
        }

        public TerminalNode KW_REPL() {
            return getToken(HiveParser.KW_REPL, 0);
        }

        public TerminalNode KW_DUMP() {
            return getToken(HiveParser.KW_DUMP, 0);
        }

        public TerminalNode KW_STATUS() {
            return getToken(HiveParser.KW_STATUS, 0);
        }

        public TerminalNode KW_CACHE() {
            return getToken(HiveParser.KW_CACHE, 0);
        }

        public TerminalNode KW_VIEWS() {
            return getToken(HiveParser.KW_VIEWS, 0);
        }

        public TerminalNode KW_VECTORIZATION() {
            return getToken(HiveParser.KW_VECTORIZATION, 0);
        }

        public TerminalNode KW_SUMMARY() {
            return getToken(HiveParser.KW_SUMMARY, 0);
        }

        public TerminalNode KW_OPERATOR() {
            return getToken(HiveParser.KW_OPERATOR, 0);
        }

        public TerminalNode KW_EXPRESSION() {
            return getToken(HiveParser.KW_EXPRESSION, 0);
        }

        public TerminalNode KW_DETAIL() {
            return getToken(HiveParser.KW_DETAIL, 0);
        }

        public TerminalNode KW_WAIT() {
            return getToken(HiveParser.KW_WAIT, 0);
        }

        public TerminalNode KW_ZONE() {
            return getToken(HiveParser.KW_ZONE, 0);
        }

        public TerminalNode KW_DEFAULT() {
            return getToken(HiveParser.KW_DEFAULT, 0);
        }

        public TerminalNode KW_REOPTIMIZATION() {
            return getToken(HiveParser.KW_REOPTIMIZATION, 0);
        }

        public TerminalNode KW_RESOURCE() {
            return getToken(HiveParser.KW_RESOURCE, 0);
        }

        public TerminalNode KW_PLAN() {
            return getToken(HiveParser.KW_PLAN, 0);
        }

        public TerminalNode KW_PLANS() {
            return getToken(HiveParser.KW_PLANS, 0);
        }

        public TerminalNode KW_QUERY_PARALLELISM() {
            return getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
        }

        public TerminalNode KW_ACTIVATE() {
            return getToken(HiveParser.KW_ACTIVATE, 0);
        }

        public TerminalNode KW_MOVE() {
            return getToken(HiveParser.KW_MOVE, 0);
        }

        public TerminalNode KW_DO() {
            return getToken(HiveParser.KW_DO, 0);
        }

        public TerminalNode KW_POOL() {
            return getToken(HiveParser.KW_POOL, 0);
        }

        public TerminalNode KW_ALLOC_FRACTION() {
            return getToken(HiveParser.KW_ALLOC_FRACTION, 0);
        }

        public TerminalNode KW_SCHEDULING_POLICY() {
            return getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
        }

        public TerminalNode KW_PATH() {
            return getToken(HiveParser.KW_PATH, 0);
        }

        public TerminalNode KW_MAPPING() {
            return getToken(HiveParser.KW_MAPPING, 0);
        }

        public TerminalNode KW_WORKLOAD() {
            return getToken(HiveParser.KW_WORKLOAD, 0);
        }

        public TerminalNode KW_MANAGEMENT() {
            return getToken(HiveParser.KW_MANAGEMENT, 0);
        }

        public TerminalNode KW_ACTIVE() {
            return getToken(HiveParser.KW_ACTIVE, 0);
        }

        public TerminalNode KW_UNMANAGED() {
            return getToken(HiveParser.KW_UNMANAGED, 0);
        }

        public NonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor).visitNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public final NonReservedContext nonReserved() throws RecognitionException {
        NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
        enterRule(_localctx, 736, RULE_nonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4084);
                _la = _input.LA(1);
                if (!(((((_la - 12)) & ~0x3f) == 0
                                && ((1L << (_la - 12)) & 5550602496763772943L) != 0)
                        || ((((_la - 76)) & ~0x3f) == 0
                                && ((1L << (_la - 76)) & 5489887942252053509L) != 0)
                        || ((((_la - 141)) & ~0x3f) == 0
                                && ((1L << (_la - 141)) & 7764098430583946999L) != 0)
                        || ((((_la - 208)) & ~0x3f) == 0
                                && ((1L << (_la - 208)) & -58553770177527879L) != 0)
                        || ((((_la - 272)) & ~0x3f) == 0
                                && ((1L << (_la - 272)) & 288230375194918551L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Sql11ReservedKeywordsUsedAsFunctionNameContext extends ParserRuleContext {
        public TerminalNode KW_IF() {
            return getToken(HiveParser.KW_IF, 0);
        }

        public TerminalNode KW_ARRAY() {
            return getToken(HiveParser.KW_ARRAY, 0);
        }

        public TerminalNode KW_MAP() {
            return getToken(HiveParser.KW_MAP, 0);
        }

        public TerminalNode KW_BIGINT() {
            return getToken(HiveParser.KW_BIGINT, 0);
        }

        public TerminalNode KW_BINARY() {
            return getToken(HiveParser.KW_BINARY, 0);
        }

        public TerminalNode KW_BOOLEAN() {
            return getToken(HiveParser.KW_BOOLEAN, 0);
        }

        public TerminalNode KW_CURRENT_DATE() {
            return getToken(HiveParser.KW_CURRENT_DATE, 0);
        }

        public TerminalNode KW_CURRENT_TIMESTAMP() {
            return getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode KW_DATE() {
            return getToken(HiveParser.KW_DATE, 0);
        }

        public TerminalNode KW_DOUBLE() {
            return getToken(HiveParser.KW_DOUBLE, 0);
        }

        public TerminalNode KW_FLOAT() {
            return getToken(HiveParser.KW_FLOAT, 0);
        }

        public TerminalNode KW_GROUPING() {
            return getToken(HiveParser.KW_GROUPING, 0);
        }

        public TerminalNode KW_INT() {
            return getToken(HiveParser.KW_INT, 0);
        }

        public TerminalNode KW_SMALLINT() {
            return getToken(HiveParser.KW_SMALLINT, 0);
        }

        public TerminalNode KW_TIMESTAMP() {
            return getToken(HiveParser.KW_TIMESTAMP, 0);
        }

        public Sql11ReservedKeywordsUsedAsFunctionNameContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sql11ReservedKeywordsUsedAsFunctionName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).enterSql11ReservedKeywordsUsedAsFunctionName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HiveParserListener)
                ((HiveParserListener) listener).exitSql11ReservedKeywordsUsedAsFunctionName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HiveParserVisitor)
                return ((HiveParserVisitor<? extends T>) visitor)
                        .visitSql11ReservedKeywordsUsedAsFunctionName(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Sql11ReservedKeywordsUsedAsFunctionNameContext
            sql11ReservedKeywordsUsedAsFunctionName() throws RecognitionException {
        Sql11ReservedKeywordsUsedAsFunctionNameContext _localctx =
                new Sql11ReservedKeywordsUsedAsFunctionNameContext(_ctx, getState());
        enterRule(_localctx, 738, RULE_sql11ReservedKeywordsUsedAsFunctionName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(4086);
                _la = _input.LA(1);
                if (!(_la == KW_IF
                        || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & 2622845L) != 0)
                        || ((((_la - 206)) & ~0x3f) == 0
                                && ((1L << (_la - 206)) & 75161927681L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
            case 351:
                return expression_sempred((ExpressionContext) _localctx, predIndex);
            case 352:
                return precedenceExpression_sempred(
                        (PrecedenceExpressionContext) _localctx, predIndex);
        }
        return true;
    }

    private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 0:
                return precpred(_ctx, 3);
        }
        return true;
    }

    private boolean precedenceExpression_sempred(
            PrecedenceExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 1:
                return precpred(_ctx, 13);
            case 2:
                return precpred(_ctx, 12);
            case 3:
                return precpred(_ctx, 11);
            case 4:
                return precpred(_ctx, 10);
            case 5:
                return precpred(_ctx, 9);
            case 6:
                return precpred(_ctx, 8);
            case 7:
                return precpred(_ctx, 7);
            case 8:
                return precpred(_ctx, 6);
            case 9:
                return precpred(_ctx, 3);
            case 10:
                return precpred(_ctx, 14);
            case 11:
                return precpred(_ctx, 5);
            case 12:
                return precpred(_ctx, 4);
        }
        return true;
    }

    private static final String _serializedATNSegment0 =
            "\u0004\u0001\u0177\u0ff9\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"
                    + "\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"
                    + "\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"
                    + "\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"
                    + "\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"
                    + "\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"
                    + "\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"
                    + "\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"
                    + "\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"
                    + "\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"
                    + "\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"
                    + "\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"
                    + "\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"
                    + ",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"
                    + "1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"
                    + "6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"
                    + ";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"
                    + "@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"
                    + "E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"
                    + "J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"
                    + "O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"
                    + "T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"
                    + "Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"
                    + "^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"
                    + "c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"
                    + "h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"
                    + "m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"
                    + "r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"
                    + "w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"
                    + "|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"
                    + "\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"
                    + "\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"
                    + "\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"
                    + "\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"
                    + "\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"
                    + "\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"
                    + "\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"
                    + "\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"
                    + "\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"
                    + "\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"
                    + "\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"
                    + "\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"
                    + "\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"
                    + "\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"
                    + "\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"
                    + "\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"
                    + "\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"
                    + "\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"
                    + "\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"
                    + "\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"
                    + "\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"
                    + "\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"
                    + "\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"
                    + "\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"
                    + "\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"
                    + "\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"
                    + "\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"
                    + "\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"
                    + "\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"
                    + "\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"
                    + "\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"
                    + "\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"
                    + "\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"
                    + "\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"
                    + "\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"
                    + "\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"
                    + "\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"
                    + "\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"
                    + "\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"
                    + "\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"
                    + "\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"
                    + "\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"
                    + "\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"
                    + "\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"
                    + "\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"
                    + "\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"
                    + "\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"
                    + "\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"
                    + "\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"
                    + "\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"
                    + "\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"
                    + "\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"
                    + "\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"
                    + "\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"
                    + "\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"
                    + "\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"
                    + "\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"
                    + "\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"
                    + "\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"
                    + "\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"
                    + "\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"
                    + "\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"
                    + "\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"
                    + "\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"
                    + "\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"
                    + "\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"
                    + "\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"
                    + "\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"
                    + "\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"
                    + "\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"
                    + "\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"
                    + "\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"
                    + "\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"
                    + "\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"
                    + "\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"
                    + "\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"
                    + "\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"
                    + "\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"
                    + "\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"
                    + "\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"
                    + "\u0170\u0002\u0171\u0007\u0171\u0001\u0000\u0001\u0000\u0001\u0000\u0005"
                    + "\u0000\u02e8\b\u0000\n\u0000\f\u0000\u02eb\t\u0000\u0001\u0000\u0001\u0000"
                    + "\u0001\u0001\u0001\u0001\u0003\u0001\u02f1\b\u0001\u0001\u0002\u0001\u0002"
                    + "\u0003\u0002\u02f5\b\u0002\u0001\u0003\u0001\u0003\u0005\u0003\u02f9\b"
                    + "\u0003\n\u0003\f\u0003\u02fc\t\u0003\u0001\u0003\u0001\u0003\u0001\u0003"
                    + "\u0003\u0003\u0301\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"
                    + "\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004"
                    + "\u030c\b\u0004\u0001\u0004\u0003\u0004\u030f\b\u0004\u0003\u0004\u0311"
                    + "\b\u0004\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001"
                    + "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"
                    + "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0323"
                    + "\b\u0007\u0001\b\u0001\b\u0001\b\u0003\b\u0328\b\b\u0001\b\u0001\b\u0001"
                    + "\b\u0003\b\u032d\b\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u0333\b\b"
                    + "\u0001\t\u0001\t\u0003\t\u0337\b\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"
                    + "\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0344\b\n\u0001"
                    + "\u000b\u0001\u000b\u0003\u000b\u0348\b\u000b\u0001\u000b\u0001\u000b\u0003"
                    + "\u000b\u034c\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0351"
                    + "\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0358\b\f\u0001"
                    + "\f\u0001\f\u0001\f\u0001\f\u0003\f\u035e\b\f\u0001\f\u0001\f\u0003\f\u0362"
                    + "\b\f\u0003\f\u0364\b\f\u0001\f\u0001\f\u0003\f\u0368\b\f\u0001\r\u0001"
                    + "\r\u0001\r\u0001\r\u0001\r\u0003\r\u036f\b\r\u0003\r\u0371\b\r\u0001\r"
                    + "\u0001\r\u0001\r\u0001\r\u0003\r\u0377\b\r\u0001\u000e\u0001\u000e\u0001"
                    + "\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0005\u000f\u0380"
                    + "\b\u000f\n\u000f\f\u000f\u0383\t\u000f\u0001\u0010\u0001\u0010\u0001\u0010"
                    + "\u0001\u0010\u0001\u0010\u0003\u0010\u038a\b\u0010\u0001\u0010\u0001\u0010"
                    + "\u0003\u0010\u038e\b\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"
                    + "\u0003\u0011\u03b8\b\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013"
                    + "\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015"
                    + "\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017"
                    + "\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018"
                    + "\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u03d3\b\u0019\u0001\u0019"
                    + "\u0001\u0019\u0003\u0019\u03d7\b\u0019\u0001\u0019\u0003\u0019\u03da\b"
                    + "\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u03df\b\u0019\u0001"
                    + "\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001"
                    + "\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0005\u001c\u03eb\b\u001c\n"
                    + "\u001c\f\u001c\u03ee\t\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001"
                    + "\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u03f6\b\u001e\u0001\u001e\u0001"
                    + "\u001e\u0003\u001e\u03fa\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001"
                    + " \u0001 \u0003 \u0401\b \u0001 \u0003 \u0404\b \u0001 \u0001 \u0003 \u0408"
                    + "\b \u0001 \u0001 \u0001 \u0001 \u0003 \u040e\b \u0001 \u0003 \u0411\b"
                    + " \u0001 \u0003 \u0414\b \u0001 \u0003 \u0417\b \u0001 \u0001 \u0001 \u0001"
                    + " \u0003 \u041d\b \u0001 \u0003 \u0420\b \u0001 \u0003 \u0423\b \u0001"
                    + " \u0003 \u0426\b \u0001 \u0003 \u0429\b \u0001 \u0003 \u042c\b \u0001"
                    + " \u0003 \u042f\b \u0001 \u0003 \u0432\b \u0001 \u0003 \u0435\b \u0001"
                    + " \u0001 \u0003 \u0439\b \u0003 \u043b\b \u0001!\u0001!\u0001!\u0001!\u0001"
                    + "!\u0001!\u0001!\u0001!\u0003!\u0445\b!\u0001\"\u0001\"\u0001\"\u0003\""
                    + "\u044a\b\"\u0001\"\u0001\"\u0003\"\u044e\b\"\u0001\"\u0003\"\u0451\b\""
                    + "\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003"
                    + "#\u045c\b#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"
                    + "#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u046c\b#\u0001$\u0001$\u0001"
                    + "$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001"
                    + "$\u0003$\u047b\b$\u0001$\u0001$\u0003$\u047f\b$\u0001%\u0001%\u0001%\u0001"
                    + "%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003"
                    + "%\u048e\b%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001\'\u0001\'\u0001"
                    + "\'\u0001\'\u0001\'\u0003\'\u049b\b\'\u0001(\u0001(\u0003(\u049f\b(\u0001"
                    + ")\u0001)\u0001)\u0003)\u04a4\b)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"
                    + "+\u0001+\u0001+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"
                    + "-\u0001-\u0001-\u0001-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0003"
                    + ".\u04bf\b.\u0001/\u0001/\u0001/\u0003/\u04c4\b/\u00010\u00010\u00010\u0001"
                    + "0\u00011\u00011\u00031\u04cc\b1\u00011\u00011\u00011\u00011\u00031\u04d2"
                    + "\b1\u00011\u00011\u00031\u04d6\b1\u00011\u00031\u04d9\b1\u00011\u0003"
                    + "1\u04dc\b1\u00012\u00012\u00012\u00012\u00032\u04e2\b2\u00012\u00012\u0001"
                    + "2\u00012\u00012\u00032\u04e9\b2\u00013\u00013\u00013\u00013\u00013\u0001"
                    + "4\u00014\u00014\u00034\u04f3\b4\u00015\u00015\u00035\u04f7\b5\u00015\u0004"
                    + "5\u04fa\b5\u000b5\f5\u04fb\u00016\u00016\u00036\u0500\b6\u00017\u0001"
                    + "7\u00057\u0504\b7\n7\f7\u0507\t7\u00018\u00018\u00058\u050b\b8\n8\f8\u050e"
                    + "\t8\u00019\u00019\u00059\u0512\b9\n9\f9\u0515\t9\u0001:\u0001:\u0001:"
                    + "\u0001;\u0001;\u0003;\u051c\b;\u0001;\u0001;\u0001;\u0005;\u0521\b;\n"
                    + ";\f;\u0524\t;\u0001;\u0003;\u0527\b;\u0001;\u0003;\u052a\b;\u0001<\u0001"
                    + "<\u0001<\u0001<\u0001<\u0001<\u0003<\u0532\b<\u0001<\u0003<\u0535\b<\u0001"
                    + "=\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u053d\b=\u0001=\u0003=\u0540"
                    + "\b=\u0001>\u0001>\u0003>\u0544\b>\u0001?\u0001?\u0001@\u0001@\u0001@\u0001"
                    + "@\u0001@\u0001@\u0003@\u054e\b@\u0001@\u0001@\u0001@\u0003@\u0553\b@\u0001"
                    + "A\u0001A\u0001A\u0001A\u0003A\u0559\bA\u0001A\u0001A\u0001B\u0001B\u0001"
                    + "B\u0001B\u0001C\u0001C\u0001C\u0001C\u0001C\u0003C\u0566\bC\u0001D\u0001"
                    + "D\u0001D\u0001D\u0001D\u0001E\u0001E\u0001E\u0001E\u0001F\u0001F\u0001"
                    + "F\u0005F\u0574\bF\nF\fF\u0577\tF\u0001G\u0001G\u0001G\u0001G\u0001H\u0001"
                    + "H\u0001H\u0001H\u0001I\u0001I\u0001I\u0001I\u0001I\u0003I\u0586\bI\u0001"
                    + "J\u0001J\u0001J\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0001K\u0001"
                    + "L\u0001L\u0001L\u0001L\u0003L\u0596\bL\u0001L\u0001L\u0001L\u0001L\u0001"
                    + "L\u0003L\u059d\bL\u0001M\u0001M\u0001N\u0001N\u0001N\u0001N\u0001O\u0001"
                    + "O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001"
                    + "O\u0003O\u05b1\bO\u0001O\u0001O\u0003O\u05b5\bO\u0001O\u0001O\u0001O\u0003"
                    + "O\u05ba\bO\u0001O\u0001O\u0001O\u0003O\u05bf\bO\u0001O\u0003O\u05c2\b"
                    + "O\u0001O\u0003O\u05c5\bO\u0001O\u0001O\u0003O\u05c9\bO\u0001O\u0003O\u05cc"
                    + "\bO\u0001O\u0003O\u05cf\bO\u0001P\u0001P\u0001P\u0005P\u05d4\bP\nP\fP"
                    + "\u05d7\tP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001R\u0001R\u0003"
                    + "R\u05e1\bR\u0001S\u0001S\u0001S\u0001T\u0001T\u0001T\u0003T\u05e9\bT\u0001"
                    + "T\u0001T\u0001T\u0001T\u0003T\u05ef\bT\u0001U\u0001U\u0001U\u0001U\u0001"
                    + "V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003"
                    + "V\u05ff\bV\u0001V\u0003V\u0602\bV\u0001W\u0001W\u0001W\u0001W\u0001W\u0001"
                    + "X\u0001X\u0001X\u0003X\u060c\bX\u0001X\u0001X\u0001X\u0001X\u0001X\u0001"
                    + "X\u0003X\u0614\bX\u0005X\u0616\bX\nX\fX\u0619\tX\u0003X\u061b\bX\u0001"
                    + "Y\u0001Y\u0003Y\u061f\bY\u0001Z\u0001Z\u0003Z\u0623\bZ\u0001Z\u0003Z\u0626"
                    + "\bZ\u0001[\u0001[\u0001[\u0003[\u062b\b[\u0001[\u0001[\u0001[\u0003[\u0630"
                    + "\b[\u0001[\u0001[\u0001[\u0001[\u0003[\u0636\b[\u0001\\\u0001\\\u0001"
                    + "\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0641\b\\\u0003"
                    + "\\\u0643\b\\\u0001\\\u0001\\\u0003\\\u0647\b\\\u0001]\u0001]\u0001]\u0001"
                    + "]\u0003]\u064d\b]\u0001]\u0001]\u0001]\u0001]\u0003]\u0653\b]\u0001]\u0001"
                    + "]\u0001]\u0003]\u0658\b]\u0001]\u0001]\u0001]\u0001]\u0003]\u065e\b]\u0001"
                    + "]\u0001]\u0001]\u0003]\u0663\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003"
                    + "]\u066a\b]\u0001]\u0001]\u0001]\u0003]\u066f\b]\u0001]\u0001]\u0001]\u0001"
                    + "]\u0001]\u0001]\u0003]\u0677\b]\u0001]\u0001]\u0001]\u0003]\u067c\b]\u0001"
                    + "]\u0001]\u0001]\u0001]\u0001]\u0003]\u0683\b]\u0001]\u0001]\u0001]\u0001"
                    + "]\u0003]\u0689\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u0691"
                    + "\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u0698\b]\u0001]\u0001]\u0001"
                    + "]\u0003]\u069d\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u06a5"
                    + "\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u06ac\b]\u0001]\u0003]\u06af"
                    + "\b]\u0001]\u0003]\u06b2\b]\u0003]\u06b4\b]\u0001]\u0001]\u0001]\u0001"
                    + "]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0003]\u06c2"
                    + "\b]\u0003]\u06c4\b]\u0001^\u0001^\u0001^\u0001^\u0003^\u06ca\b^\u0001"
                    + "^\u0001^\u0001_\u0001_\u0001_\u0001_\u0001_\u0001`\u0001`\u0001a\u0001"
                    + "a\u0001a\u0001a\u0003a\u06d9\ba\u0001b\u0001b\u0001b\u0001b\u0001c\u0001"
                    + "c\u0001c\u0001c\u0001d\u0001d\u0001d\u0001d\u0001e\u0001e\u0001e\u0003"
                    + "e\u06ea\be\u0001e\u0001e\u0001e\u0003e\u06ef\be\u0001f\u0001f\u0003f\u06f3"
                    + "\bf\u0001f\u0001f\u0003f\u06f7\bf\u0001f\u0001f\u0001f\u0001g\u0001g\u0003"
                    + "g\u06fe\bg\u0001g\u0001g\u0001g\u0005g\u0703\bg\ng\fg\u0706\tg\u0001g"
                    + "\u0001g\u0001g\u0003g\u070b\bg\u0001h\u0001h\u0003h\u070f\bh\u0001h\u0003"
                    + "h\u0712\bh\u0001h\u0001h\u0001h\u0005h\u0717\bh\nh\fh\u071a\th\u0001h"
                    + "\u0001h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001i\u0001j\u0001j\u0001"
                    + "j\u0001k\u0001k\u0001k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001l\u0003"
                    + "l\u0730\bl\u0001m\u0001m\u0001m\u0003m\u0735\bm\u0001m\u0001m\u0003m\u0739"
                    + "\bm\u0001n\u0001n\u0001n\u0001n\u0001o\u0001o\u0003o\u0741\bo\u0001p\u0001"
                    + "p\u0001p\u0001q\u0001q\u0001q\u0003q\u0749\bq\u0001q\u0001q\u0003q\u074d"
                    + "\bq\u0001q\u0001q\u0001q\u0001q\u0003q\u0753\bq\u0001r\u0001r\u0001r\u0003"
                    + "r\u0758\br\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u075f\br\u0001r\u0003"
                    + "r\u0762\br\u0001r\u0001r\u0001r\u0001r\u0003r\u0768\br\u0001s\u0001s\u0001"
                    + "s\u0005s\u076d\bs\ns\fs\u0770\ts\u0001t\u0001t\u0001t\u0001t\u0001t\u0003"
                    + "t\u0777\bt\u0001u\u0001u\u0001v\u0001v\u0001v\u0005v\u077e\bv\nv\fv\u0781"
                    + "\tv\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0003w\u0789\bw\u0001x\u0001"
                    + "x\u0001x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001z\u0001z\u0001z\u0001"
                    + "z\u0001{\u0001{\u0001{\u0001{\u0001|\u0001|\u0003|\u079d\b|\u0001|\u0001"
                    + "|\u0001|\u0001|\u0003|\u07a3\b|\u0001|\u0003|\u07a6\b|\u0003|\u07a8\b"
                    + "|\u0001}\u0001}\u0001}\u0005}\u07ad\b}\n}\f}\u07b0\t}\u0001~\u0001~\u0001"
                    + "~\u0001\u007f\u0001\u007f\u0001\u0080\u0001\u0080\u0003\u0080\u07b9\b"
                    + "\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"
                    + "\u0080\u0003\u0080\u07c1\b\u0080\u0001\u0081\u0001\u0081\u0003\u0081\u07c5"
                    + "\b\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u07c9\b\u0081\u0001\u0081"
                    + "\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0083\u0001\u0083"
                    + "\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u07d6\b\u0083"
                    + "\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001\u0084"
                    + "\u0001\u0084\u0003\u0084\u07df\b\u0084\u0001\u0084\u0001\u0084\u0001\u0085"
                    + "\u0001\u0085\u0003\u0085\u07e5\b\u0085\u0001\u0085\u0001\u0085\u0003\u0085"
                    + "\u07e9\b\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085"
                    + "\u0003\u0085\u07f0\b\u0085\u0001\u0085\u0003\u0085\u07f3\b\u0085\u0001"
                    + "\u0085\u0003\u0085\u07f6\b\u0085\u0001\u0085\u0003\u0085\u07f9\b\u0085"
                    + "\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0001\u0086"
                    + "\u0001\u0086\u0003\u0086\u0802\b\u0086\u0001\u0086\u0001\u0086\u0003\u0086"
                    + "\u0806\b\u0086\u0001\u0086\u0003\u0086\u0809\b\u0086\u0001\u0086\u0003"
                    + "\u0086\u080c\b\u0086\u0001\u0086\u0003\u0086\u080f\b\u0086\u0001\u0086"
                    + "\u0003\u0086\u0812\b\u0086\u0001\u0086\u0003\u0086\u0815\b\u0086\u0001"
                    + "\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001"
                    + "\u0087\u0001\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0003"
                    + "\u0088\u0823\b\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0001"
                    + "\u0089\u0001\u0089\u0003\u0089\u082b\b\u0089\u0001\u0089\u0001\u0089\u0001"
                    + "\u008a\u0001\u008a\u0003\u008a\u0831\b\u008a\u0001\u008b\u0001\u008b\u0003"
                    + "\u008b\u0835\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001"
                    + "\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0005\u008d\u0840"
                    + "\b\u008d\n\u008d\f\u008d\u0843\t\u008d\u0001\u008d\u0001\u008d\u0001\u008e"
                    + "\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e"
                    + "\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0852\b\u008e"
                    + "\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f"
                    + "\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f"
                    + "\u0001\u008f\u0001\u008f\u0003\u008f\u0862\b\u008f\u0001\u0090\u0001\u0090"
                    + "\u0003\u0090\u0866\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0092"
                    + "\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"
                    + "\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0875\b\u0093\u0001\u0094"
                    + "\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u087b\b\u0094\u0001\u0094"
                    + "\u0003\u0094\u087e\b\u0094\u0001\u0094\u0003\u0094\u0881\b\u0094\u0001"
                    + "\u0094\u0003\u0094\u0884\b\u0094\u0001\u0094\u0003\u0094\u0887\b\u0094"
                    + "\u0001\u0095\u0001\u0095\u0003\u0095\u088b\b\u0095\u0001\u0096\u0001\u0096"
                    + "\u0001\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0098"
                    + "\u0001\u0098\u0001\u0098\u0005\u0098\u0897\b\u0098\n\u0098\f\u0098\u089a"
                    + "\t\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0005\u0098\u089f\b\u0098"
                    + "\n\u0098\f\u0098\u08a2\t\u0098\u0003\u0098\u08a4\b\u0098\u0001\u0099\u0001"
                    + "\u0099\u0001\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001\u009b\u0001"
                    + "\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003"
                    + "\u009b\u08b3\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"
                    + "\u009c\u0001\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"
                    + "\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"
                    + "\u009e\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"
                    + "\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"
                    + "\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u08d5\b\u00a0\u0001"
                    + "\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003"
                    + "\u00a0\u08dd\b\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u08e2"
                    + "\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a2\u0001\u00a2\u0001"
                    + "\u00a2\u0005\u00a2\u08ea\b\u00a2\n\u00a2\f\u00a2\u08ed\t\u00a2\u0001\u00a3"
                    + "\u0001\u00a3\u0001\u00a3\u0005\u00a3\u08f2\b\u00a3\n\u00a3\f\u00a3\u08f5"
                    + "\t\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0005\u00a4\u08fa\b\u00a4"
                    + "\n\u00a4\f\u00a4\u08fd\t\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0005"
                    + "\u00a5\u0902\b\u00a5\n\u00a5\f\u00a5\u0905\t\u00a5\u0001\u00a6\u0001\u00a6"
                    + "\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"
                    + "\u0003\u00a7\u090f\b\u00a7\u0005\u00a7\u0911\b\u00a7\n\u00a7\f\u00a7\u0914"
                    + "\t\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8\u0919\b\u00a8"
                    + "\n\u00a8\f\u00a8\u091c\t\u00a8\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"
                    + "\u00a9\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0924\b\u00aa\u0001\u00aa\u0003"
                    + "\u00aa\u0927\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001\u00ac\u0001"
                    + "\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0930\b\u00ad\u0001\u00ae\u0001"
                    + "\u00ae\u0003\u00ae\u0934\b\u00ae\u0003\u00ae\u0936\b\u00ae\u0001\u00af"
                    + "\u0001\u00af\u0003\u00af\u093a\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af"
                    + "\u093e\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0"
                    + "\u0944\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2"
                    + "\u0003\u00b2\u094b\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2"
                    + "\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0954\b\u00b2\u0001\u00b3"
                    + "\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001\u00b3"
                    + "\u0001\u00b3\u0001\u00b3\u0003\u00b3\u095f\b\u00b3\u0001\u00b4\u0001\u00b4"
                    + "\u0003\u00b4\u0963\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5"
                    + "\u0968\b\u00b5\n\u00b5\f\u00b5\u096b\t\u00b5\u0001\u00b6\u0001\u00b6\u0001"
                    + "\u00b6\u0001\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0005\u00b7\u0974"
                    + "\b\u00b7\n\u00b7\f\u00b7\u0977\t\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b9"
                    + "\u0001\u00b9\u0003\u00b9\u097d\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00bb"
                    + "\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb\u0985\b\u00bb\u0001\u00bc"
                    + "\u0001\u00bc\u0003\u00bc\u0989\b\u00bc\u0001\u00bc\u0003\u00bc\u098c\b"
                    + "\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0005\u00bd\u0991\b\u00bd\n"
                    + "\u00bd\f\u00bd\u0994\t\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0003"
                    + "\u00be\u0999\b\u00be\u0001\u00bf\u0001\u00bf\u0003\u00bf\u099d\b\u00bf"
                    + "\u0001\u00bf\u0003\u00bf\u09a0\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0"
                    + "\u0001\u00c0\u0003\u00c0\u09a6\b\u00c0\u0001\u00c1\u0001\u00c1\u0003\u00c1"
                    + "\u09aa\b\u00c1\u0001\u00c2\u0001\u00c2\u0003\u00c2\u09ae\b\u00c2\u0001"
                    + "\u00c3\u0001\u00c3\u0001\u00c3\u0003\u00c3\u09b3\b\u00c3\u0001\u00c3\u0001"
                    + "\u00c3\u0003\u00c3\u09b7\b\u00c3\u0001\u00c4\u0001\u00c4\u0003\u00c4\u09bb"
                    + "\b\u00c4\u0001\u00c5\u0001\u00c5\u0003\u00c5\u09bf\b\u00c5\u0001\u00c5"
                    + "\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5"
                    + "\u09c7\b\u00c5\u0001\u00c6\u0001\u00c6\u0003\u00c6\u09cb\b\u00c6\u0001"
                    + "\u00c6\u0001\u00c6\u0003\u00c6\u09cf\b\u00c6\u0001\u00c7\u0001\u00c7\u0003"
                    + "\u00c7\u09d3\b\u00c7\u0001\u00c8\u0001\u00c8\u0003\u00c8\u09d7\b\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0003\u00c8\u09df\b\u00c8\u0001\u00c9\u0001\u00c9\u0003\u00c9\u09e3\b"
                    + "\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u09e7\b\u00c9\u0001\u00ca\u0001"
                    + "\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001"
                    + "\u00cd\u0003\u00cd\u09f7\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00cf\u0001"
                    + "\u00cf\u0001\u00cf\u0005\u00cf\u09fe\b\u00cf\n\u00cf\f\u00cf\u0a01\t\u00cf"
                    + "\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0"
                    + "\u0a08\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"
                    + "\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u0a12\b\u00d1\u0001\u00d1"
                    + "\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"
                    + "\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"
                    + "\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u0a24\b\u00d1\u0001\u00d1"
                    + "\u0003\u00d1\u0a27\b\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"
                    + "\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u0a31\b\u00d1"
                    + "\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d3"
                    + "\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001\u00d4"
                    + "\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d5"
                    + "\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001\u00d6"
                    + "\u0001\u00d6\u0001\u00d6\u0003\u00d6\u0a4d\b\u00d6\u0001\u00d6\u0001\u00d6"
                    + "\u0001\u00d6\u0001\u00d6\u0003\u00d6\u0a53\b\u00d6\u0001\u00d6\u0001\u00d6"
                    + "\u0001\u00d6\u0001\u00d6\u0003\u00d6\u0a59\b\u00d6\u0001\u00d6\u0001\u00d6"
                    + "\u0001\u00d6\u0001\u00d6\u0003\u00d6\u0a5f\b\u00d6\u0003\u00d6\u0a61\b"
                    + "\u00d6\u0001\u00d7\u0003\u00d7\u0a64\b\u00d7\u0001\u00d7\u0001\u00d7\u0001"
                    + "\u00d8\u0001\u00d8\u0003\u00d8\u0a6a\b\u00d8\u0001\u00d9\u0001\u00d9\u0001"
                    + "\u00d9\u0001\u00d9\u0005\u00d9\u0a70\b\u00d9\n\u00d9\f\u00d9\u0a73\t\u00d9"
                    + "\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"
                    + "\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0005\u00db\u0a7f\b\u00db"
                    + "\n\u00db\f\u00db\u0a82\t\u00db\u0001\u00dc\u0001\u00dc\u0004\u00dc\u0a86"
                    + "\b\u00dc\u000b\u00dc\f\u00dc\u0a87\u0001\u00dd\u0001\u00dd\u0001\u00dd"
                    + "\u0003\u00dd\u0a8d\b\u00dd\u0001\u00dd\u0003\u00dd\u0a90\b\u00dd\u0001"
                    + "\u00de\u0001\u00de\u0003\u00de\u0a94\b\u00de\u0001\u00de\u0003\u00de\u0a97"
                    + "\b\u00de\u0001\u00de\u0003\u00de\u0a9a\b\u00de\u0001\u00de\u0003\u00de"
                    + "\u0a9d\b\u00de\u0001\u00de\u0003\u00de\u0aa0\b\u00de\u0001\u00de\u0001"
                    + "\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u0aa6\b\u00de\u0001\u00df\u0001"
                    + "\u00df\u0003\u00df\u0aaa\b\u00df\u0001\u00df\u0003\u00df\u0aad\b\u00df"
                    + "\u0001\u00df\u0003\u00df\u0ab0\b\u00df\u0001\u00df\u0003\u00df\u0ab3\b"
                    + "\u00df\u0001\u00df\u0003\u00df\u0ab6\b\u00df\u0001\u00df\u0003\u00df\u0ab9"
                    + "\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0004\u00e0\u0abe\b\u00e0"
                    + "\u000b\u00e0\f\u00e0\u0abf\u0001\u00e1\u0003\u00e1\u0ac3\b\u00e1\u0001"
                    + "\u00e1\u0001\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u0aca"
                    + "\b\u00e2\u0001\u00e2\u0003\u00e2\u0acd\b\u00e2\u0001\u00e2\u0003\u00e2"
                    + "\u0ad0\b\u00e2\u0001\u00e2\u0003\u00e2\u0ad3\b\u00e2\u0001\u00e2\u0003"
                    + "\u00e2\u0ad6\b\u00e2\u0001\u00e2\u0003\u00e2\u0ad9\b\u00e2\u0001\u00e2"
                    + "\u0003\u00e2\u0adc\b\u00e2\u0001\u00e2\u0003\u00e2\u0adf\b\u00e2\u0001"
                    + "\u00e2\u0003\u00e2\u0ae2\b\u00e2\u0001\u00e2\u0003\u00e2\u0ae5\b\u00e2"
                    + "\u0001\u00e2\u0001\u00e2\u0003\u00e2\u0ae9\b\u00e2\u0001\u00e2\u0003\u00e2"
                    + "\u0aec\b\u00e2\u0001\u00e2\u0003\u00e2\u0aef\b\u00e2\u0001\u00e2\u0003"
                    + "\u00e2\u0af2\b\u00e2\u0001\u00e2\u0003\u00e2\u0af5\b\u00e2\u0001\u00e2"
                    + "\u0003\u00e2\u0af8\b\u00e2\u0001\u00e2\u0003\u00e2\u0afb\b\u00e2\u0001"
                    + "\u00e2\u0003\u00e2\u0afe\b\u00e2\u0001\u00e2\u0003\u00e2\u0b01\b\u00e2"
                    + "\u0001\u00e2\u0003\u00e2\u0b04\b\u00e2\u0003\u00e2\u0b06\b\u00e2\u0001"
                    + "\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u0b0c\b\u00e3\u0001"
                    + "\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u0b11\b\u00e3\u0001\u00e3\u0001"
                    + "\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u0b18\b\u00e3\u0003"
                    + "\u00e3\u0b1a\b\u00e3\u0001\u00e4\u0003\u00e4\u0b1d\b\u00e4\u0001\u00e4"
                    + "\u0001\u00e4\u0001\u00e4\u0003\u00e4\u0b22\b\u00e4\u0001\u00e4\u0003\u00e4"
                    + "\u0b25\b\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u0b29\b\u00e4\u0001"
                    + "\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u0b2e\b\u00e5\u0001\u00e5\u0001"
                    + "\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0003\u00e5\u0b35\b\u00e5\u0001"
                    + "\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003\u00e6\u0b3b\b\u00e6\u0001"
                    + "\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e8\u0001\u00e8\u0001"
                    + "\u00e8\u0001\u00e8\u0005\u00e8\u0b45\b\u00e8\n\u00e8\f\u00e8\u0b48\t\u00e8"
                    + "\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u0b4e\b\u00e9"
                    + "\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u0b54\b\u00ea"
                    + "\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0005\u00eb"
                    + "\u0b5b\b\u00eb\n\u00eb\f\u00eb\u0b5e\t\u00eb\u0003\u00eb\u0b60\b\u00eb"
                    + "\u0001\u00ec\u0001\u00ec\u0003\u00ec\u0b64\b\u00ec\u0001\u00ed\u0001\u00ed"
                    + "\u0001\u00ed\u0001\u00ed\u0003\u00ed\u0b6a\b\u00ed\u0001\u00ee\u0001\u00ee"
                    + "\u0001\u00ee\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00f0\u0001\u00f0"
                    + "\u0003\u00f0\u0b74\b\u00f0\u0001\u00f1\u0001\u00f1\u0003\u00f1\u0b78\b"
                    + "\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001"
                    + "\u00f3\u0001\u00f3\u0004\u00f3\u0b81\b\u00f3\u000b\u00f3\f\u00f3\u0b82"
                    + "\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u0b89\b\u00f4"
                    + "\u0001\u00f4\u0003\u00f4\u0b8c\b\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4"
                    + "\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0005\u00f5"
                    + "\u0b96\b\u00f5\n\u00f5\f\u00f5\u0b99\t\u00f5\u0001\u00f5\u0003\u00f5\u0b9c"
                    + "\b\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0003"
                    + "\u00f6\u0ba3\b\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001"
                    + "\u00f6\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001"
                    + "\u00f7\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001"
                    + "\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0003\u00f9\u0bb9\b\u00f9\u0001"
                    + "\u00fa\u0001\u00fa\u0001\u00fa\u0004\u00fa\u0bbe\b\u00fa\u000b\u00fa\f"
                    + "\u00fa\u0bbf\u0001\u00fb\u0001\u00fb\u0003\u00fb\u0bc4\b\u00fb\u0001\u00fb"
                    + "\u0003\u00fb\u0bc7\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb"
                    + "\u0bcc\b\u00fb\u0001\u00fb\u0003\u00fb\u0bcf\b\u00fb\u0001\u00fc\u0001"
                    + "\u00fc\u0001\u00fc\u0005\u00fc\u0bd4\b\u00fc\n\u00fc\f\u00fc\u0bd7\t\u00fc"
                    + "\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd\u0bdd\b\u00fd"
                    + "\u0001\u00fd\u0003\u00fd\u0be0\b\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"
                    + "\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd\u0be8\b\u00fd\u0001\u00fd"
                    + "\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0003\u00fd\u0bee\b\u00fd\u0003\u00fd"
                    + "\u0bf0\b\u00fd\u0003\u00fd\u0bf2\b\u00fd\u0001\u00fd\u0003\u00fd\u0bf5"
                    + "\b\u00fd\u0001\u00fd\u0003\u00fd\u0bf8\b\u00fd\u0001\u00fe\u0001\u00fe"
                    + "\u0001\u00fe\u0003\u00fe\u0bfd\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"
                    + "\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0005\u00fe\u0c05\b\u00fe\n\u00fe"
                    + "\f\u00fe\u0c08\t\u00fe\u0001\u00fe\u0001\u00fe\u0003\u00fe\u0c0c\b\u00fe"
                    + "\u0003\u00fe\u0c0e\b\u00fe\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"
                    + "\u0003\u00ff\u0c14\b\u00ff\u0001\u00ff\u0003\u00ff\u0c17\b\u00ff\u0001"
                    + "\u00ff\u0003\u00ff\u0c1a\b\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001"
                    + "\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u0c22\b\u00ff\u0001\u00ff\u0001"
                    + "\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u0c28\b\u00ff\u0003\u00ff\u0c2a"
                    + "\b\u00ff\u0003\u00ff\u0c2c\b\u00ff\u0001\u00ff\u0003\u00ff\u0c2f\b\u00ff"
                    + "\u0001\u00ff\u0003\u00ff\u0c32\b\u00ff\u0001\u0100\u0001\u0100\u0003\u0100"
                    + "\u0c36\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0005\u0101\u0c3b\b"
                    + "\u0101\n\u0101\f\u0101\u0c3e\t\u0101\u0001\u0102\u0001\u0102\u0001\u0102"
                    + "\u0001\u0102\u0005\u0102\u0c44\b\u0102\n\u0102\f\u0102\u0c47\t\u0102\u0001"
                    + "\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0104\u0001\u0104\u0001"
                    + "\u0104\u0003\u0104\u0c50\b\u0104\u0001\u0104\u0003\u0104\u0c53\b\u0104"
                    + "\u0001\u0104\u0003\u0104\u0c56\b\u0104\u0001\u0104\u0003\u0104\u0c59\b"
                    + "\u0104\u0001\u0105\u0001\u0105\u0003\u0105\u0c5d\b\u0105\u0001\u0106\u0001"
                    + "\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001"
                    + "\u0106\u0003\u0106\u0c67\b\u0106\u0001\u0107\u0001\u0107\u0001\u0107\u0001"
                    + "\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0003\u0107\u0c71"
                    + "\b\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001"
                    + "\u0108\u0003\u0108\u0c79\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109\u0001"
                    + "\u0109\u0001\u0109\u0001\u0109\u0003\u0109\u0c81\b\u0109\u0001\u010a\u0001"
                    + "\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0003\u010a\u0c88\b\u010a\u0001"
                    + "\u010b\u0001\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0005\u010c\u0c8f"
                    + "\b\u010c\n\u010c\f\u010c\u0c92\t\u010c\u0001\u010d\u0001\u010d\u0001\u010d"
                    + "\u0005\u010d\u0c97\b\u010d\n\u010d\f\u010d\u0c9a\t\u010d\u0001\u010e\u0001"
                    + "\u010e\u0001\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0001\u010f\u0004"
                    + "\u010f\u0ca3\b\u010f\u000b\u010f\f\u010f\u0ca4\u0001\u010f\u0003\u010f"
                    + "\u0ca8\b\u010f\u0001\u0110\u0001\u0110\u0005\u0110\u0cac\b\u0110\n\u0110"
                    + "\f\u0110\u0caf\t\u0110\u0001\u0110\u0001\u0110\u0005\u0110\u0cb3\b\u0110"
                    + "\n\u0110\f\u0110\u0cb6\t\u0110\u0001\u0110\u0001\u0110\u0005\u0110\u0cba"
                    + "\b\u0110\n\u0110\f\u0110\u0cbd\t\u0110\u0001\u0110\u0001\u0110\u0005\u0110"
                    + "\u0cc1\b\u0110\n\u0110\f\u0110\u0cc4\t\u0110\u0001\u0110\u0001\u0110\u0001"
                    + "\u0110\u0001\u0110\u0003\u0110\u0cca\b\u0110\u0001\u0111\u0001\u0111\u0001"
                    + "\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0003\u0111\u0cd3"
                    + "\b\u0111\u0005\u0111\u0cd5\b\u0111\n\u0111\f\u0111\u0cd8\t\u0111\u0001"
                    + "\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u0cde\b\u0112\u0001"
                    + "\u0112\u0005\u0112\u0ce1\b\u0112\n\u0112\f\u0112\u0ce4\t\u0112\u0001\u0113"
                    + "\u0003\u0113\u0ce7\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0114"
                    + "\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0115\u0001\u0115\u0001\u0116"
                    + "\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116"
                    + "\u0001\u0116\u0003\u0116\u0cfa\b\u0116\u0001\u0116\u0001\u0116\u0001\u0116"
                    + "\u0003\u0116\u0cff\b\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116"
                    + "\u0d04\b\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0001\u0116\u0003\u0116"
                    + "\u0d0a\b\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117"
                    + "\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0005\u0117\u0d15\b\u0117"
                    + "\n\u0117\f\u0117\u0d18\t\u0117\u0003\u0117\u0d1a\b\u0117\u0001\u0117\u0003"
                    + "\u0117\u0d1d\b\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"
                    + "\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0005\u0117\u0d27\b\u0117\n"
                    + "\u0117\f\u0117\u0d2a\t\u0117\u0003\u0117\u0d2c\b\u0117\u0001\u0117\u0003"
                    + "\u0117\u0d2f\b\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"
                    + "\u0117\u0001\u0117\u0003\u0117\u0d37\b\u0117\u0001\u0117\u0001\u0117\u0001"
                    + "\u0117\u0001\u0117\u0001\u0117\u0005\u0117\u0d3e\b\u0117\n\u0117\f\u0117"
                    + "\u0d41\t\u0117\u0001\u0117\u0001\u0117\u0003\u0117\u0d45\b\u0117\u0003"
                    + "\u0117\u0d47\b\u0117\u0001\u0118\u0001\u0118\u0001\u0119\u0001\u0119\u0001"
                    + "\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0001"
                    + "\u0119\u0001\u0119\u0001\u0119\u0005\u0119\u0d56\b\u0119\n\u0119\f\u0119"
                    + "\u0d59\t\u0119\u0003\u0119\u0d5b\b\u0119\u0001\u0119\u0001\u0119\u0001"
                    + "\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"
                    + "\u011a\u0001\u011a\u0001\u011a\u0003\u011a\u0d68\b\u011a\u0001\u011b\u0001"
                    + "\u011b\u0003\u011b\u0d6c\b\u011b\u0001\u011c\u0001\u011c\u0003\u011c\u0d70"
                    + "\b\u011c\u0001\u011c\u0003\u011c\u0d73\b\u011c\u0001\u011c\u0003\u011c"
                    + "\u0d76\b\u011c\u0001\u011c\u0003\u011c\u0d79\b\u011c\u0001\u011d\u0001"
                    + "\u011d\u0003\u011d\u0d7d\b\u011d\u0001\u011d\u0003\u011d\u0d80\b\u011d"
                    + "\u0001\u011d\u0003\u011d\u0d83\b\u011d\u0001\u011e\u0001\u011e\u0001\u011e"
                    + "\u0001\u011e\u0001\u011e\u0003\u011e\u0d8a\b\u011e\u0001\u011f\u0001\u011f"
                    + "\u0001\u011f\u0003\u011f\u0d8f\b\u011f\u0001\u011f\u0001\u011f\u0001\u0120"
                    + "\u0001\u0120\u0001\u0120\u0001\u0120\u0003\u0120\u0d97\b\u0120\u0001\u0120"
                    + "\u0001\u0120\u0001\u0121\u0001\u0121\u0003\u0121\u0d9d\b\u0121\u0001\u0121"
                    + "\u0001\u0121\u0001\u0121\u0003\u0121\u0da2\b\u0121\u0001\u0121\u0001\u0121"
                    + "\u0003\u0121\u0da6\b\u0121\u0001\u0122\u0001\u0122\u0001\u0122\u0003\u0122"
                    + "\u0dab\b\u0122\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"
                    + "\u0003\u0123\u0db2\b\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"
                    + "\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"
                    + "\u0005\u0123\u0dbe\b\u0123\n\u0123\f\u0123\u0dc1\t\u0123\u0003\u0123\u0dc3"
                    + "\b\u0123\u0001\u0123\u0001\u0123\u0003\u0123\u0dc7\b\u0123\u0001\u0124"
                    + "\u0001\u0124\u0001\u0124\u0001\u0125\u0001\u0125\u0001\u0126\u0001\u0126"
                    + "\u0001\u0126\u0001\u0127\u0001\u0127\u0001\u0127\u0005\u0127\u0dd4\b\u0127"
                    + "\n\u0127\f\u0127\u0dd7\t\u0127\u0001\u0128\u0001\u0128\u0001\u0129\u0001"
                    + "\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u0de0\b\u0129\u0001"
                    + "\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0005\u0129\u0de7"
                    + "\b\u0129\n\u0129\f\u0129\u0dea\t\u0129\u0003\u0129\u0dec\b\u0129\u0001"
                    + "\u0129\u0001\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001"
                    + "\u012b\u0001\u012b\u0001\u012b\u0003\u012b\u0df7\b\u012b\u0001\u012c\u0001"
                    + "\u012c\u0001\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001"
                    + "\u012d\u0005\u012d\u0e01\b\u012d\n\u012d\f\u012d\u0e04\t\u012d\u0001\u012d"
                    + "\u0001\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e"
                    + "\u0003\u012e\u0e0d\b\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e"
                    + "\u0001\u012e\u0001\u012e\u0005\u012e\u0e15\b\u012e\n\u012e\f\u012e\u0e18"
                    + "\t\u012e\u0001\u012e\u0001\u012e\u0003\u012e\u0e1c\b\u012e\u0001\u012f"
                    + "\u0001\u012f\u0003\u012f\u0e20\b\u012f\u0001\u0130\u0001\u0130\u0003\u0130"
                    + "\u0e24\b\u0130\u0001\u0130\u0001\u0130\u0005\u0130\u0e28\b\u0130\n\u0130"
                    + "\f\u0130\u0e2b\t\u0130\u0001\u0130\u0001\u0130\u0001\u0131\u0001\u0131"
                    + "\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0133\u0001\u0133\u0001\u0134"
                    + "\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0135\u0001\u0135\u0003\u0135"
                    + "\u0e3c\b\u0135\u0001\u0136\u0001\u0136\u0004\u0136\u0e40\b\u0136\u000b"
                    + "\u0136\f\u0136\u0e41\u0001\u0137\u0001\u0137\u0003\u0137\u0e46\b\u0137"
                    + "\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0005\u0138\u0e4c\b\u0138"
                    + "\n\u0138\f\u0138\u0e4f\t\u0138\u0001\u0138\u0001\u0138\u0001\u0139\u0001"
                    + "\u0139\u0001\u0139\u0005\u0139\u0e56\b\u0139\n\u0139\f\u0139\u0e59\t\u0139"
                    + "\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0001\u013a\u0005\u013a"
                    + "\u0e60\b\u013a\n\u013a\f\u013a\u0e63\t\u013a\u0001\u013b\u0001\u013b\u0001"
                    + "\u013b\u0001\u013b\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"
                    + "\u013d\u0001\u013d\u0001\u013d\u0001\u013d\u0001\u013e\u0001\u013e\u0001"
                    + "\u013e\u0001\u013e\u0003\u013e\u0e75\b\u013e\u0001\u013f\u0001\u013f\u0001"
                    + "\u013f\u0001\u013f\u0003\u013f\u0e7b\b\u013f\u0001\u013f\u0001\u013f\u0001"
                    + "\u013f\u0005\u013f\u0e80\b\u013f\n\u013f\f\u013f\u0e83\t\u013f\u0003\u013f"
                    + "\u0e85\b\u013f\u0003\u013f\u0e87\b\u013f\u0001\u013f\u0001\u013f\u0001"
                    + "\u013f\u0003\u013f\u0e8c\b\u013f\u0001\u0140\u0001\u0140\u0003\u0140\u0e90"
                    + "\b\u0140\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001"
                    + "\u0141\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001"
                    + "\u0142\u0001\u0142\u0001\u0142\u0004\u0142\u0ea0\b\u0142\u000b\u0142\f"
                    + "\u0142\u0ea1\u0001\u0142\u0001\u0142\u0003\u0142\u0ea6\b\u0142\u0001\u0142"
                    + "\u0001\u0142\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143"
                    + "\u0001\u0143\u0004\u0143\u0eb0\b\u0143\u000b\u0143\f\u0143\u0eb1\u0001"
                    + "\u0143\u0001\u0143\u0003\u0143\u0eb6\b\u0143\u0001\u0143\u0001\u0143\u0001"
                    + "\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144\u0ebf"
                    + "\b\u0144\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001\u0146\u0001"
                    + "\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"
                    + "\u0147\u0001\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001"
                    + "\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001"
                    + "\u0148\u0001\u0148\u0003\u0148\u0eda\b\u0148\u0001\u0149\u0001\u0149\u0004"
                    + "\u0149\u0ede\b\u0149\u000b\u0149\f\u0149\u0edf\u0001\u014a\u0001\u014a"
                    + "\u0001\u014a\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u0ee8\b\u014b"
                    + "\u0001\u014c\u0001\u014c\u0001\u014c\u0003\u014c\u0eed\b\u014c\u0001\u014d"
                    + "\u0001\u014d\u0001\u014d\u0001\u014e\u0001\u014e\u0001\u014f\u0001\u014f"
                    + "\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"
                    + "\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"
                    + "\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150\u0003\u0150\u0f06\b\u0150"
                    + "\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"
                    + "\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151"
                    + "\u0003\u0151\u0f14\b\u0151\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"
                    + "\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0001\u0152"
                    + "\u0001\u0152\u0003\u0152\u0f21\b\u0152\u0001\u0153\u0001\u0153\u0001\u0154"
                    + "\u0003\u0154\u0f26\b\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001\u0154"
                    + "\u0001\u0154\u0003\u0154\u0f2d\b\u0154\u0001\u0155\u0001\u0155\u0001\u0156"
                    + "\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0158\u0001\u0158\u0001\u0159"
                    + "\u0001\u0159\u0001\u015a\u0001\u015a\u0001\u015b\u0001\u015b\u0001\u015c"
                    + "\u0001\u015c\u0001\u015d\u0001\u015d\u0001\u015e\u0001\u015e\u0001\u015f"
                    + "\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0003\u015f"
                    + "\u0f49\b\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0005\u015f"
                    + "\u0f4f\b\u015f\n\u015f\f\u015f\u0f52\t\u015f\u0001\u0160\u0001\u0160\u0001"
                    + "\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0005"
                    + "\u0160\u0f5c\b\u0160\n\u0160\f\u0160\u0f5f\t\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0003\u0160\u0f69\b\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0003\u0160\u0f89\b\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u0f90\b\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u0f9c\b\u0160\u0001\u0160"
                    + "\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u0fa3\b\u0160"
                    + "\u0001\u0160\u0001\u0160\u0005\u0160\u0fa7\b\u0160\n\u0160\f\u0160\u0faa"
                    + "\t\u0160\u0001\u0161\u0001\u0161\u0003\u0161\u0fae\b\u0161\u0001\u0162"
                    + "\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0163\u0001\u0163\u0001\u0164"
                    + "\u0001\u0164\u0001\u0165\u0001\u0165\u0003\u0165\u0fba\b\u0165\u0001\u0166"
                    + "\u0001\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0005\u0166\u0fc1\b\u0166"
                    + "\n\u0166\f\u0166\u0fc4\t\u0166\u0001\u0166\u0001\u0166\u0001\u0167\u0001"
                    + "\u0167\u0001\u0167\u0003\u0167\u0fcb\b\u0167\u0001\u0168\u0001\u0168\u0001"
                    + "\u0168\u0001\u0168\u0001\u0168\u0005\u0168\u0fd2\b\u0168\n\u0168\f\u0168"
                    + "\u0fd5\t\u0168\u0001\u0168\u0001\u0168\u0001\u0169\u0001\u0169\u0001\u0169"
                    + "\u0001\u0169\u0001\u016a\u0001\u016a\u0001\u016b\u0001\u016b\u0001\u016c"
                    + "\u0001\u016c\u0001\u016c\u0003\u016c\u0fe4\b\u016c\u0001\u016d\u0001\u016d"
                    + "\u0003\u016d\u0fe8\b\u016d\u0001\u016e\u0001\u016e\u0001\u016e\u0001\u016e"
                    + "\u0001\u016e\u0003\u016e\u0fef\b\u016e\u0001\u016f\u0001\u016f\u0003\u016f"
                    + "\u0ff3\b\u016f\u0001\u0170\u0001\u0170\u0001\u0171\u0001\u0171\u0001\u0171"
                    + "\u0000\u0002\u02be\u02c0\u0172\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"
                    + "\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPR"
                    + "TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"
                    + "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"
                    + "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"
                    + "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"
                    + "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"
                    + "\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"
                    + "\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"
                    + "\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"
                    + "\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"
                    + "\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"
                    + "\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"
                    + "\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"
                    + "\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"
                    + "\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"
                    + "\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"
                    + "\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"
                    + "\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"
                    + "\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"
                    + "\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"
                    + "\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"
                    + "\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"
                    + "\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"
                    + "\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"
                    + "\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"
                    + "\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"
                    + "\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u0000\"\u0001"
                    + "\u0000\u0133\u0136\u0001\u0000\u00e1\u00e2\u0002\u0000\u00b5\u00b5\u00b8"
                    + "\u00b8\u0001\u0000\u0086\u0087\u0002\u0000\r\rHH\u0001\u0000\u0090\u0091"
                    + "\u0002\u0000\u00b6\u00b6\u00b9\u00b9\u0002\u0000\u0015\u0015\u00b4\u00b4"
                    + "\u0001\u0000\u00c1\u00c2\t\u0000\u0003\u0003\u0017\u0017\u0019\u0019A"
                    + "ACCII\u00ad\u00ad\u00be\u00be\u00df\u00e0\u0003\u0000II\u0086\u0086\u014b"
                    + "\u014b\u0002\u0000\u008d\u008e\u00d8\u00d8\u0001\u0000}~\u0001\u0000\u0124"
                    + "\u0125\u0001\u0000\f\r\u0002\u0000\u0003\u0003\u0018\u0018\u0001\u0000"
                    + "\u00ea\u00eb\u0002\u0000kk\u0084\u0084\u0001\u0000\u00e4\u00e5\u0003\u0000"
                    + "\u0109\u0109\u010b\u010e\u0110\u0112\u0002\u0000\u0109\u0109\u010b\u0112"
                    + "\u0002\u0000\u016a\u016a\u016f\u016f\u0002\u0000\u015e\u015f\u0164\u0164"
                    + "\u0002\u0000\u015d\u015d\u0160\u0162\u0001\u0000\u015e\u015f\u0002\u0000"
                    + "\b\b\u0088\u0089\u0001\u0000\u0156\u015c\u0001\u0000\u0005\u0006\u0002"
                    + "\u0000\u0003\u0003\t\t\u0001\u0000\u0001\u0002\u0002\u0000\u0156\u0156"
                    + "\u0158\u015c\r\u0000\u0005\b\n\nMS]]`c\u0088\u0089\u00a2\u00a3\u00b4\u00b4"
                    + "\u00cc\u00cc\u00ce\u00ce\u012c\u012c\u0156\u0165\u0167\u01674\u0000\f"
                    + "\u000f\u001a\u001a$$&/3589;>DDFGJJLLNNVVZZ]]aaccegiil\u007f\u0081\u0081"
                    + "\u0086\u0087\u008a\u008a\u008d\u008f\u0091\u0094\u0096\u009a\u009c\u00a1"
                    + "\u00a7\u00ac\u00ae\u00ae\u00b2\u00b3\u00b6\u00b9\u00bc\u00c2\u00c4\u00c6"
                    + "\u00c8\u00c8\u00ca\u00cb\u00d0\u00d0\u00d3\u00d5\u00d7\u00df\u00e1\u00e3"
                    + "\u00e6\u00e6\u00f3\u00f3\u00f5\u00f5\u00f7\u00f8\u00fb\u0103\u0105\u0105"
                    + "\u0108\u0112\u0114\u0114\u0117\u0117\u0119\u011e\u0123\u0127\u0129\u012a"
                    + "\u012e\u0149\n\u0000\n\nMMOSUUWW``bb\u00ce\u00ce\u00ed\u00ee\u00f2\u00f2"
                    + "\u1145\u0000\u02e9\u0001\u0000\u0000\u0000\u0002\u02f0\u0001\u0000\u0000"
                    + "\u0000\u0004\u02f4\u0001\u0000\u0000\u0000\u0006\u02f6\u0001\u0000\u0000"
                    + "\u0000\b\u0310\u0001\u0000\u0000\u0000\n\u0312\u0001\u0000\u0000\u0000"
                    + "\f\u0314\u0001\u0000\u0000\u0000\u000e\u0322\u0001\u0000\u0000\u0000\u0010"
                    + "\u0324\u0001\u0000\u0000\u0000\u0012\u0334\u0001\u0000\u0000\u0000\u0014"
                    + "\u033d\u0001\u0000\u0000\u0000\u0016\u0345\u0001\u0000\u0000\u0000\u0018"
                    + "\u0352\u0001\u0000\u0000\u0000\u001a\u0369\u0001\u0000\u0000\u0000\u001c"
                    + "\u0378\u0001\u0000\u0000\u0000\u001e\u037c\u0001\u0000\u0000\u0000 \u0384"
                    + "\u0001\u0000\u0000\u0000\"\u03b7\u0001\u0000\u0000\u0000$\u03b9\u0001"
                    + "\u0000\u0000\u0000&\u03bc\u0001\u0000\u0000\u0000(\u03be\u0001\u0000\u0000"
                    + "\u0000*\u03c2\u0001\u0000\u0000\u0000,\u03c5\u0001\u0000\u0000\u0000."
                    + "\u03c8\u0001\u0000\u0000\u00000\u03cc\u0001\u0000\u0000\u00002\u03cf\u0001"
                    + "\u0000\u0000\u00004\u03e0\u0001\u0000\u0000\u00006\u03e3\u0001\u0000\u0000"
                    + "\u00008\u03e7\u0001\u0000\u0000\u0000:\u03ef\u0001\u0000\u0000\u0000<"
                    + "\u03f2\u0001\u0000\u0000\u0000>\u03fb\u0001\u0000\u0000\u0000@\u03fe\u0001"
                    + "\u0000\u0000\u0000B\u043c\u0001\u0000\u0000\u0000D\u0446\u0001\u0000\u0000"
                    + "\u0000F\u046b\u0001\u0000\u0000\u0000H\u047e\u0001\u0000\u0000\u0000J"
                    + "\u048d\u0001\u0000\u0000\u0000L\u048f\u0001\u0000\u0000\u0000N\u049a\u0001"
                    + "\u0000\u0000\u0000P\u049e\u0001\u0000\u0000\u0000R\u04a3\u0001\u0000\u0000"
                    + "\u0000T\u04a5\u0001\u0000\u0000\u0000V\u04aa\u0001\u0000\u0000\u0000X"
                    + "\u04af\u0001\u0000\u0000\u0000Z\u04b4\u0001\u0000\u0000\u0000\\\u04b8"
                    + "\u0001\u0000\u0000\u0000^\u04c0\u0001\u0000\u0000\u0000`\u04c5\u0001\u0000"
                    + "\u0000\u0000b\u04c9\u0001\u0000\u0000\u0000d\u04dd\u0001\u0000\u0000\u0000"
                    + "f\u04ea\u0001\u0000\u0000\u0000h\u04f2\u0001\u0000\u0000\u0000j\u04f4"
                    + "\u0001\u0000\u0000\u0000l\u04fd\u0001\u0000\u0000\u0000n\u0501\u0001\u0000"
                    + "\u0000\u0000p\u0508\u0001\u0000\u0000\u0000r\u050f\u0001\u0000\u0000\u0000"
                    + "t\u0516\u0001\u0000\u0000\u0000v\u0519\u0001\u0000\u0000\u0000x\u0534"
                    + "\u0001\u0000\u0000\u0000z\u053f\u0001\u0000\u0000\u0000|\u0543\u0001\u0000"
                    + "\u0000\u0000~\u0545\u0001\u0000\u0000\u0000\u0080\u0552\u0001\u0000\u0000"
                    + "\u0000\u0082\u0554\u0001\u0000\u0000\u0000\u0084\u055c\u0001\u0000\u0000"
                    + "\u0000\u0086\u0565\u0001\u0000\u0000\u0000\u0088\u0567\u0001\u0000\u0000"
                    + "\u0000\u008a\u056c\u0001\u0000\u0000\u0000\u008c\u0570\u0001\u0000\u0000"
                    + "\u0000\u008e\u0578\u0001\u0000\u0000\u0000\u0090\u057c\u0001\u0000\u0000"
                    + "\u0000\u0092\u0585\u0001\u0000\u0000\u0000\u0094\u0587\u0001\u0000\u0000"
                    + "\u0000\u0096\u058d\u0001\u0000\u0000\u0000\u0098\u0591\u0001\u0000\u0000"
                    + "\u0000\u009a\u059e\u0001\u0000\u0000\u0000\u009c\u05a0\u0001\u0000\u0000"
                    + "\u0000\u009e\u05a4\u0001\u0000\u0000\u0000\u00a0\u05d0\u0001\u0000\u0000"
                    + "\u0000\u00a2\u05d8\u0001\u0000\u0000\u0000\u00a4\u05de\u0001\u0000\u0000"
                    + "\u0000\u00a6\u05e2\u0001\u0000\u0000\u0000\u00a8\u05e5\u0001\u0000\u0000"
                    + "\u0000\u00aa\u05f0\u0001\u0000\u0000\u0000\u00ac\u0601\u0001\u0000\u0000"
                    + "\u0000\u00ae\u0603\u0001\u0000\u0000\u0000\u00b0\u0608\u0001\u0000\u0000"
                    + "\u0000\u00b2\u061c\u0001\u0000\u0000\u0000\u00b4\u0620\u0001\u0000\u0000"
                    + "\u0000\u00b6\u0627\u0001\u0000\u0000\u0000\u00b8\u0637\u0001\u0000\u0000"
                    + "\u0000\u00ba\u06c3\u0001\u0000\u0000\u0000\u00bc\u06c5\u0001\u0000\u0000"
                    + "\u0000\u00be\u06cd\u0001\u0000\u0000\u0000\u00c0\u06d2\u0001\u0000\u0000"
                    + "\u0000\u00c2\u06d4\u0001\u0000\u0000\u0000\u00c4\u06da\u0001\u0000\u0000"
                    + "\u0000\u00c6\u06de\u0001\u0000\u0000\u0000\u00c8\u06e2\u0001\u0000\u0000"
                    + "\u0000\u00ca\u06e6\u0001\u0000\u0000\u0000\u00cc\u06f0\u0001\u0000\u0000"
                    + "\u0000\u00ce\u06fb\u0001\u0000\u0000\u0000\u00d0\u070c\u0001\u0000\u0000"
                    + "\u0000\u00d2\u071e\u0001\u0000\u0000\u0000\u00d4\u0723\u0001\u0000\u0000"
                    + "\u0000\u00d6\u0726\u0001\u0000\u0000\u0000\u00d8\u072a\u0001\u0000\u0000"
                    + "\u0000\u00da\u0731\u0001\u0000\u0000\u0000\u00dc\u073a\u0001\u0000\u0000"
                    + "\u0000\u00de\u0740\u0001\u0000\u0000\u0000\u00e0\u0742\u0001\u0000\u0000"
                    + "\u0000\u00e2\u0752\u0001\u0000\u0000\u0000\u00e4\u0767\u0001\u0000\u0000"
                    + "\u0000\u00e6\u0769\u0001\u0000\u0000\u0000\u00e8\u0771\u0001\u0000\u0000"
                    + "\u0000\u00ea\u0778\u0001\u0000\u0000\u0000\u00ec\u077a\u0001\u0000\u0000"
                    + "\u0000\u00ee\u0788\u0001\u0000\u0000\u0000\u00f0\u078a\u0001\u0000\u0000"
                    + "\u0000\u00f2\u078e\u0001\u0000\u0000\u0000\u00f4\u0792\u0001\u0000\u0000"
                    + "\u0000\u00f6\u0796\u0001\u0000\u0000\u0000\u00f8\u079a\u0001\u0000\u0000"
                    + "\u0000\u00fa\u07a9\u0001\u0000\u0000\u0000\u00fc\u07b1\u0001\u0000\u0000"
                    + "\u0000\u00fe\u07b4\u0001\u0000\u0000\u0000\u0100\u07b6\u0001\u0000\u0000"
                    + "\u0000\u0102\u07c2\u0001\u0000\u0000\u0000\u0104\u07cc\u0001\u0000\u0000"
                    + "\u0000\u0106\u07cf\u0001\u0000\u0000\u0000\u0108\u07da\u0001\u0000\u0000"
                    + "\u0000\u010a\u07e2\u0001\u0000\u0000\u0000\u010c\u07fd\u0001\u0000\u0000"
                    + "\u0000\u010e\u0819\u0001\u0000\u0000\u0000\u0110\u081f\u0001\u0000\u0000"
                    + "\u0000\u0112\u0826\u0001\u0000\u0000\u0000\u0114\u0830\u0001\u0000\u0000"
                    + "\u0000\u0116\u0834\u0001\u0000\u0000\u0000\u0118\u0836\u0001\u0000\u0000"
                    + "\u0000\u011a\u0839\u0001\u0000\u0000\u0000\u011c\u0846\u0001\u0000\u0000"
                    + "\u0000\u011e\u0857\u0001\u0000\u0000\u0000\u0120\u0865\u0001\u0000\u0000"
                    + "\u0000\u0122\u0867\u0001\u0000\u0000\u0000\u0124\u086a\u0001\u0000\u0000"
                    + "\u0000\u0126\u086d\u0001\u0000\u0000\u0000\u0128\u0876\u0001\u0000\u0000"
                    + "\u0000\u012a\u088a\u0001\u0000\u0000\u0000\u012c\u088c\u0001\u0000\u0000"
                    + "\u0000\u012e\u088f\u0001\u0000\u0000\u0000\u0130\u08a3\u0001\u0000\u0000"
                    + "\u0000\u0132\u08a5\u0001\u0000\u0000\u0000\u0134\u08a9\u0001\u0000\u0000"
                    + "\u0000\u0136\u08ab\u0001\u0000\u0000\u0000\u0138\u08b4\u0001\u0000\u0000"
                    + "\u0000\u013a\u08ba\u0001\u0000\u0000\u0000\u013c\u08c0\u0001\u0000\u0000"
                    + "\u0000\u013e\u08c5\u0001\u0000\u0000\u0000\u0140\u08e1\u0001\u0000\u0000"
                    + "\u0000\u0142\u08e3\u0001\u0000\u0000\u0000\u0144\u08e6\u0001\u0000\u0000"
                    + "\u0000\u0146\u08ee\u0001\u0000\u0000\u0000\u0148\u08f6\u0001\u0000\u0000"
                    + "\u0000\u014a\u08fe\u0001\u0000\u0000\u0000\u014c\u0906\u0001\u0000\u0000"
                    + "\u0000\u014e\u0908\u0001\u0000\u0000\u0000\u0150\u0915\u0001\u0000\u0000"
                    + "\u0000\u0152\u091d\u0001\u0000\u0000\u0000\u0154\u0926\u0001\u0000\u0000"
                    + "\u0000\u0156\u0928\u0001\u0000\u0000\u0000\u0158\u092a\u0001\u0000\u0000"
                    + "\u0000\u015a\u092f\u0001\u0000\u0000\u0000\u015c\u0935\u0001\u0000\u0000"
                    + "\u0000\u015e\u0939\u0001\u0000\u0000\u0000\u0160\u093f\u0001\u0000\u0000"
                    + "\u0000\u0162\u0945\u0001\u0000\u0000\u0000\u0164\u094a\u0001\u0000\u0000"
                    + "\u0000\u0166\u0955\u0001\u0000\u0000\u0000\u0168\u0962\u0001\u0000\u0000"
                    + "\u0000\u016a\u0964\u0001\u0000\u0000\u0000\u016c\u096c\u0001\u0000\u0000"
                    + "\u0000\u016e\u0970\u0001\u0000\u0000\u0000\u0170\u0978\u0001\u0000\u0000"
                    + "\u0000\u0172\u097c\u0001\u0000\u0000\u0000\u0174\u097e\u0001\u0000\u0000"
                    + "\u0000\u0176\u0984\u0001\u0000\u0000\u0000\u0178\u0986\u0001\u0000\u0000"
                    + "\u0000\u017a\u098d\u0001\u0000\u0000\u0000\u017c\u0995\u0001\u0000\u0000"
                    + "\u0000\u017e\u099a\u0001\u0000\u0000\u0000\u0180\u09a1\u0001\u0000\u0000"
                    + "\u0000\u0182\u09a9\u0001\u0000\u0000\u0000\u0184\u09ad\u0001\u0000\u0000"
                    + "\u0000\u0186\u09af\u0001\u0000\u0000\u0000\u0188\u09ba\u0001\u0000\u0000"
                    + "\u0000\u018a\u09be\u0001\u0000\u0000\u0000\u018c\u09ca\u0001\u0000\u0000"
                    + "\u0000\u018e\u09d2\u0001\u0000\u0000\u0000\u0190\u09d6\u0001\u0000\u0000"
                    + "\u0000\u0192\u09e2\u0001\u0000\u0000\u0000\u0194\u09e8\u0001\u0000\u0000"
                    + "\u0000\u0196\u09eb\u0001\u0000\u0000\u0000\u0198\u09ee\u0001\u0000\u0000"
                    + "\u0000\u019a\u09f1\u0001\u0000\u0000\u0000\u019c\u09f8\u0001\u0000\u0000"
                    + "\u0000\u019e\u09fa\u0001\u0000\u0000\u0000\u01a0\u0a07\u0001\u0000\u0000"
                    + "\u0000\u01a2\u0a30\u0001\u0000\u0000\u0000\u01a4\u0a32\u0001\u0000\u0000"
                    + "\u0000\u01a6\u0a37\u0001\u0000\u0000\u0000\u01a8\u0a3c\u0001\u0000\u0000"
                    + "\u0000\u01aa\u0a43\u0001\u0000\u0000\u0000\u01ac\u0a60\u0001\u0000\u0000"
                    + "\u0000\u01ae\u0a63\u0001\u0000\u0000\u0000\u01b0\u0a69\u0001\u0000\u0000"
                    + "\u0000\u01b2\u0a6b\u0001\u0000\u0000\u0000\u01b4\u0a74\u0001\u0000\u0000"
                    + "\u0000\u01b6\u0a7a\u0001\u0000\u0000\u0000\u01b8\u0a83\u0001\u0000\u0000"
                    + "\u0000\u01ba\u0a8f\u0001\u0000\u0000\u0000\u01bc\u0aa5\u0001\u0000\u0000"
                    + "\u0000\u01be\u0aa7\u0001\u0000\u0000\u0000\u01c0\u0abd\u0001\u0000\u0000"
                    + "\u0000\u01c2\u0ac2\u0001\u0000\u0000\u0000\u01c4\u0b05\u0001\u0000\u0000"
                    + "\u0000\u01c6\u0b19\u0001\u0000\u0000\u0000\u01c8\u0b28\u0001\u0000\u0000"
                    + "\u0000\u01ca\u0b34\u0001\u0000\u0000\u0000\u01cc\u0b36\u0001\u0000\u0000"
                    + "\u0000\u01ce\u0b3c\u0001\u0000\u0000\u0000\u01d0\u0b40\u0001\u0000\u0000"
                    + "\u0000\u01d2\u0b49\u0001\u0000\u0000\u0000\u01d4\u0b53\u0001\u0000\u0000"
                    + "\u0000\u01d6\u0b55\u0001\u0000\u0000\u0000\u01d8\u0b63\u0001\u0000\u0000"
                    + "\u0000\u01da\u0b69\u0001\u0000\u0000\u0000\u01dc\u0b6b\u0001\u0000\u0000"
                    + "\u0000\u01de\u0b6f\u0001\u0000\u0000\u0000\u01e0\u0b71\u0001\u0000\u0000"
                    + "\u0000\u01e2\u0b75\u0001\u0000\u0000\u0000\u01e4\u0b79\u0001\u0000\u0000"
                    + "\u0000\u01e6\u0b7d\u0001\u0000\u0000\u0000\u01e8\u0b84\u0001\u0000\u0000"
                    + "\u0000\u01ea\u0b97\u0001\u0000\u0000\u0000\u01ec\u0b9d\u0001\u0000\u0000"
                    + "\u0000\u01ee\u0ba9\u0001\u0000\u0000\u0000\u01f0\u0bb0\u0001\u0000\u0000"
                    + "\u0000\u01f2\u0bb8\u0001\u0000\u0000\u0000\u01f4\u0bba\u0001\u0000\u0000"
                    + "\u0000\u01f6\u0bce\u0001\u0000\u0000\u0000\u01f8\u0bd0\u0001\u0000\u0000"
                    + "\u0000\u01fa\u0bd8\u0001\u0000\u0000\u0000\u01fc\u0c0d\u0001\u0000\u0000"
                    + "\u0000\u01fe\u0c13\u0001\u0000\u0000\u0000\u0200\u0c35\u0001\u0000\u0000"
                    + "\u0000\u0202\u0c37\u0001\u0000\u0000\u0000\u0204\u0c3f\u0001\u0000\u0000"
                    + "\u0000\u0206\u0c48\u0001\u0000\u0000\u0000\u0208\u0c58\u0001\u0000\u0000"
                    + "\u0000\u020a\u0c5c\u0001\u0000\u0000\u0000\u020c\u0c66\u0001\u0000\u0000"
                    + "\u0000\u020e\u0c70\u0001\u0000\u0000\u0000\u0210\u0c78\u0001\u0000\u0000"
                    + "\u0000\u0212\u0c80\u0001\u0000\u0000\u0000\u0214\u0c87\u0001\u0000\u0000"
                    + "\u0000\u0216\u0c89\u0001\u0000\u0000\u0000\u0218\u0c8b\u0001\u0000\u0000"
                    + "\u0000\u021a\u0c93\u0001\u0000\u0000\u0000\u021c\u0c9b\u0001\u0000\u0000"
                    + "\u0000\u021e\u0ca7\u0001\u0000\u0000\u0000\u0220\u0cc9\u0001\u0000\u0000"
                    + "\u0000\u0222\u0ccb\u0001\u0000\u0000\u0000\u0224\u0cdd\u0001\u0000\u0000"
                    + "\u0000\u0226\u0ce6\u0001\u0000\u0000\u0000\u0228\u0ceb\u0001\u0000\u0000"
                    + "\u0000\u022a\u0cef\u0001\u0000\u0000\u0000\u022c\u0d09\u0001\u0000\u0000"
                    + "\u0000\u022e\u0d46\u0001\u0000\u0000\u0000\u0230\u0d48\u0001\u0000\u0000"
                    + "\u0000\u0232\u0d4a\u0001\u0000\u0000\u0000\u0234\u0d67\u0001\u0000\u0000"
                    + "\u0000\u0236\u0d6b\u0001\u0000\u0000\u0000\u0238\u0d6d\u0001\u0000\u0000"
                    + "\u0000\u023a\u0d7a\u0001\u0000\u0000\u0000\u023c\u0d89\u0001\u0000\u0000"
                    + "\u0000\u023e\u0d8e\u0001\u0000\u0000\u0000\u0240\u0d92\u0001\u0000\u0000"
                    + "\u0000\u0242\u0da5\u0001\u0000\u0000\u0000\u0244\u0daa\u0001\u0000\u0000"
                    + "\u0000\u0246\u0dac\u0001\u0000\u0000\u0000\u0248\u0dc8\u0001\u0000\u0000"
                    + "\u0000\u024a\u0dcb\u0001\u0000\u0000\u0000\u024c\u0dcd\u0001\u0000\u0000"
                    + "\u0000\u024e\u0dd0\u0001\u0000\u0000\u0000\u0250\u0dd8\u0001\u0000\u0000"
                    + "\u0000\u0252\u0dda\u0001\u0000\u0000\u0000\u0254\u0def\u0001\u0000\u0000"
                    + "\u0000\u0256\u0df6\u0001\u0000\u0000\u0000\u0258\u0df8\u0001\u0000\u0000"
                    + "\u0000\u025a\u0dfb\u0001\u0000\u0000\u0000\u025c\u0e07\u0001\u0000\u0000"
                    + "\u0000\u025e\u0e1f\u0001\u0000\u0000\u0000\u0260\u0e21\u0001\u0000\u0000"
                    + "\u0000\u0262\u0e2e\u0001\u0000\u0000\u0000\u0264\u0e30\u0001\u0000\u0000"
                    + "\u0000\u0266\u0e33\u0001\u0000\u0000\u0000\u0268\u0e35\u0001\u0000\u0000"
                    + "\u0000\u026a\u0e39\u0001\u0000\u0000\u0000\u026c\u0e3f\u0001\u0000\u0000"
                    + "\u0000\u026e\u0e45\u0001\u0000\u0000\u0000\u0270\u0e47\u0001\u0000\u0000"
                    + "\u0000\u0272\u0e52\u0001\u0000\u0000\u0000\u0274\u0e5a\u0001\u0000\u0000"
                    + "\u0000\u0276\u0e64\u0001\u0000\u0000\u0000\u0278\u0e68\u0001\u0000\u0000"
                    + "\u0000\u027a\u0e6c\u0001\u0000\u0000\u0000\u027c\u0e70\u0001\u0000\u0000"
                    + "\u0000\u027e\u0e76\u0001\u0000\u0000\u0000\u0280\u0e8f\u0001\u0000\u0000"
                    + "\u0000\u0282\u0e91\u0001\u0000\u0000\u0000\u0284\u0e98\u0001\u0000\u0000"
                    + "\u0000\u0286\u0ea9\u0001\u0000\u0000\u0000\u0288\u0eb9\u0001\u0000\u0000"
                    + "\u0000\u028a\u0ec2\u0001\u0000\u0000\u0000\u028c\u0ec4\u0001\u0000\u0000"
                    + "\u0000\u028e\u0ecb\u0001\u0000\u0000\u0000\u0290\u0ed9\u0001\u0000\u0000"
                    + "\u0000\u0292\u0edb\u0001\u0000\u0000\u0000\u0294\u0ee1\u0001\u0000\u0000"
                    + "\u0000\u0296\u0ee7\u0001\u0000\u0000\u0000\u0298\u0eec\u0001\u0000\u0000"
                    + "\u0000\u029a\u0eee\u0001\u0000\u0000\u0000\u029c\u0ef1\u0001\u0000\u0000"
                    + "\u0000\u029e\u0ef3\u0001\u0000\u0000\u0000\u02a0\u0f05\u0001\u0000\u0000"
                    + "\u0000\u02a2\u0f13\u0001\u0000\u0000\u0000\u02a4\u0f20\u0001\u0000\u0000"
                    + "\u0000\u02a6\u0f22\u0001\u0000\u0000\u0000\u02a8\u0f25\u0001\u0000\u0000"
                    + "\u0000\u02aa\u0f2e\u0001\u0000\u0000\u0000\u02ac\u0f30\u0001\u0000\u0000"
                    + "\u0000\u02ae\u0f32\u0001\u0000\u0000\u0000\u02b0\u0f34\u0001\u0000\u0000"
                    + "\u0000\u02b2\u0f36\u0001\u0000\u0000\u0000\u02b4\u0f38\u0001\u0000\u0000"
                    + "\u0000\u02b6\u0f3a\u0001\u0000\u0000\u0000\u02b8\u0f3c\u0001\u0000\u0000"
                    + "\u0000\u02ba\u0f3e\u0001\u0000\u0000\u0000\u02bc\u0f40\u0001\u0000\u0000"
                    + "\u0000\u02be\u0f48\u0001\u0000\u0000\u0000\u02c0\u0f68\u0001\u0000\u0000"
                    + "\u0000\u02c2\u0fad\u0001\u0000\u0000\u0000\u02c4\u0faf\u0001\u0000\u0000"
                    + "\u0000\u02c6\u0fb3\u0001\u0000\u0000\u0000\u02c8\u0fb5\u0001\u0000\u0000"
                    + "\u0000\u02ca\u0fb7\u0001\u0000\u0000\u0000\u02cc\u0fbb\u0001\u0000\u0000"
                    + "\u0000\u02ce\u0fc7\u0001\u0000\u0000\u0000\u02d0\u0fcc\u0001\u0000\u0000"
                    + "\u0000\u02d2\u0fd8\u0001\u0000\u0000\u0000\u02d4\u0fdc\u0001\u0000\u0000"
                    + "\u0000\u02d6\u0fde\u0001\u0000\u0000\u0000\u02d8\u0fe3\u0001\u0000\u0000"
                    + "\u0000\u02da\u0fe7\u0001\u0000\u0000\u0000\u02dc\u0fee\u0001\u0000\u0000"
                    + "\u0000\u02de\u0ff2\u0001\u0000\u0000\u0000\u02e0\u0ff4\u0001\u0000\u0000"
                    + "\u0000\u02e2\u0ff6\u0001\u0000\u0000\u0000\u02e4\u02e5\u0003\u0004\u0002"
                    + "\u0000\u02e5\u02e6\u0003\u0002\u0001\u0000\u02e6\u02e8\u0001\u0000\u0000"
                    + "\u0000\u02e7\u02e4\u0001\u0000\u0000\u0000\u02e8\u02eb\u0001\u0000\u0000"
                    + "\u0000\u02e9\u02e7\u0001\u0000\u0000\u0000\u02e9\u02ea\u0001\u0000\u0000"
                    + "\u0000\u02ea\u02ec\u0001\u0000\u0000\u0000\u02eb\u02e9\u0001\u0000\u0000"
                    + "\u0000\u02ec\u02ed\u0005\u0000\u0000\u0001\u02ed\u0001\u0001\u0000\u0000"
                    + "\u0000\u02ee\u02f1\u0005\u014f\u0000\u0000\u02ef\u02f1\u0001\u0000\u0000"
                    + "\u0000\u02f0\u02ee\u0001\u0000\u0000\u0000\u02f0\u02ef\u0001\u0000\u0000"
                    + "\u0000\u02f1\u0003\u0001\u0000\u0000\u0000\u02f2\u02f5\u0003\u0006\u0003"
                    + "\u0000\u02f3\u02f5\u0003\u000e\u0007\u0000\u02f4\u02f2\u0001\u0000\u0000"
                    + "\u0000\u02f4\u02f3\u0001\u0000\u0000\u0000\u02f5\u0005\u0001\u0000\u0000"
                    + "\u0000\u02f6\u0300\u0005\u008f\u0000\u0000\u02f7\u02f9\u0003\b\u0004\u0000"
                    + "\u02f8\u02f7\u0001\u0000\u0000\u0000\u02f9\u02fc\u0001\u0000\u0000\u0000"
                    + "\u02fa\u02f8\u0001\u0000\u0000\u0000\u02fa\u02fb\u0001\u0000\u0000\u0000"
                    + "\u02fb\u02fd\u0001\u0000\u0000\u0000\u02fc\u02fa\u0001\u0000\u0000\u0000"
                    + "\u02fd\u0301\u0003\u000e\u0007\u0000\u02fe\u02ff\u0005\u0103\u0000\u0000"
                    + "\u02ff\u0301\u0003\u01ae\u00d7\u0000\u0300\u02fa\u0001\u0000\u0000\u0000"
                    + "\u0300\u02fe\u0001\u0000\u0000\u0000\u0301\u0007\u0001\u0000\u0000\u0000"
                    + "\u0302\u0311\u0005\u0090\u0000\u0000\u0303\u0311\u0005\u0091\u0000\u0000"
                    + "\u0304\u0311\u0005\u0092\u0000\u0000\u0305\u0311\u0005\u0093\u0000\u0000"
                    + "\u0306\u0311\u0005\u0104\u0000\u0000\u0307\u0311\u0005\u00ca\u0000\u0000"
                    + "\u0308\u0311\u0005\u0105\u0000\u0000\u0309\u030b\u0005\u0132\u0000\u0000"
                    + "\u030a\u030c\u0003\n\u0005\u0000\u030b\u030a\u0001\u0000\u0000\u0000\u030b"
                    + "\u030c\u0001\u0000\u0000\u0000\u030c\u030e\u0001\u0000\u0000\u0000\u030d"
                    + "\u030f\u0003\f\u0006\u0000\u030e\u030d\u0001\u0000\u0000\u0000\u030e\u030f"
                    + "\u0001\u0000\u0000\u0000\u030f\u0311\u0001\u0000\u0000\u0000\u0310\u0302"
                    + "\u0001\u0000\u0000\u0000\u0310\u0303\u0001\u0000\u0000\u0000\u0310\u0304"
                    + "\u0001\u0000\u0000\u0000\u0310\u0305\u0001\u0000\u0000\u0000\u0310\u0306"
                    + "\u0001\u0000\u0000\u0000\u0310\u0307\u0001\u0000\u0000\u0000\u0310\u0308"
                    + "\u0001\u0000\u0000\u0000\u0310\u0309\u0001\u0000\u0000\u0000\u0311\t\u0001"
                    + "\u0000\u0000\u0000\u0312\u0313\u0005\u0118\u0000\u0000\u0313\u000b\u0001"
                    + "\u0000\u0000\u0000\u0314\u0315\u0007\u0000\u0000\u0000\u0315\r\u0001\u0000"
                    + "\u0000\u0000\u0316\u0323\u0003\u01ae\u00d7\u0000\u0317\u0323\u0003\u0010"
                    + "\b\u0000\u0318\u0323\u0003\u0014\n\u0000\u0319\u0323\u0003\u0016\u000b"
                    + "\u0000\u031a\u0323\u0003\u0018\f\u0000\u031b\u0323\u0003\u001a\r\u0000"
                    + "\u031c\u0323\u0003 \u0010\u0000\u031d\u0323\u0003\"\u0011\u0000\u031e"
                    + "\u0323\u0003\u01cc\u00e6\u0000\u031f\u0323\u0003\u01d2\u00e9\u0000\u0320"
                    + "\u0323\u0003\u01d4\u00ea\u0000\u0321\u0323\u0003\u01e8\u00f4\u0000\u0322"
                    + "\u0316\u0001\u0000\u0000\u0000\u0322\u0317\u0001\u0000\u0000\u0000\u0322"
                    + "\u0318\u0001\u0000\u0000\u0000\u0322\u0319\u0001\u0000\u0000\u0000\u0322"
                    + "\u031a\u0001\u0000\u0000\u0000\u0322\u031b\u0001\u0000\u0000\u0000\u0322"
                    + "\u031c\u0001\u0000\u0000\u0000\u0322\u031d\u0001\u0000\u0000\u0000\u0322"
                    + "\u031e\u0001\u0000\u0000\u0000\u0322\u031f\u0001\u0000\u0000\u0000\u0322"
                    + "\u0320\u0001\u0000\u0000\u0000\u0322\u0321\u0001\u0000\u0000\u0000\u0323"
                    + "\u000f\u0001\u0000\u0000\u0000\u0324\u0325\u00058\u0000\u0000\u0325\u0327"
                    + "\u0005=\u0000\u0000\u0326\u0328\u00050\u0000\u0000\u0327\u0326\u0001\u0000"
                    + "\u0000\u0000\u0327\u0328\u0001\u0000\u0000\u0000\u0328\u0329\u0001\u0000"
                    + "\u0000\u0000\u0329\u032a\u0005>\u0000\u0000\u032a\u032c\u0005\u016a\u0000"
                    + "\u0000\u032b\u032d\u0005\u001a\u0000\u0000\u032c\u032b\u0001\u0000\u0000"
                    + "\u0000\u032c\u032d\u0001\u0000\u0000\u0000\u032d\u032e\u0001\u0000\u0000"
                    + "\u0000\u032e\u032f\u0005h\u0000\u0000\u032f\u0330\u0005%\u0000\u0000\u0330"
                    + "\u0332\u0003\u02ca\u0165\u0000\u0331\u0333\u0003\u00aeW\u0000\u0332\u0331"
                    + "\u0001\u0000\u0000\u0000\u0332\u0333\u0001\u0000\u0000\u0000\u0333\u0011"
                    + "\u0001\u0000\u0000\u0000\u0334\u0336\u0005\u00e7\u0000\u0000\u0335\u0337"
                    + "\u0005<\u0000\u0000\u0336\u0335\u0001\u0000\u0000\u0000\u0336\u0337\u0001"
                    + "\u0000\u0000\u0000\u0337\u0338\u0001\u0000\u0000\u0000\u0338\u0339\u0005"
                    + ";\u0000\u0000\u0339\u033a\u0005\u0150\u0000\u0000\u033a\u033b\u0005\u016a"
                    + "\u0000\u0000\u033b\u033c\u0005\u0151\u0000\u0000\u033c\u0013\u0001\u0000"
                    + "\u0000\u0000\u033d\u033e\u00059\u0000\u0000\u033e\u033f\u0005%\u0000\u0000"
                    + "\u033f\u0340\u0003\u02ca\u0165\u0000\u0340\u0341\u0005K\u0000\u0000\u0341"
                    + "\u0343\u0005\u016a\u0000\u0000\u0342\u0344\u0003\u0012\t\u0000\u0343\u0342"
                    + "\u0001\u0000\u0000\u0000\u0343\u0344\u0001\u0000\u0000\u0000\u0344\u0015"
                    + "\u0001\u0000\u0000\u0000\u0345\u034b\u0005:\u0000\u0000\u0346\u0348\u0005"
                    + "B\u0000\u0000\u0347\u0346\u0001\u0000\u0000\u0000\u0347\u0348\u0001\u0000"
                    + "\u0000\u0000\u0348\u0349\u0001\u0000\u0000\u0000\u0349\u034a\u0005%\u0000"
                    + "\u0000\u034a\u034c\u0003\u02ca\u0165\u0000\u034b\u0347\u0001\u0000\u0000"
                    + "\u0000\u034b\u034c\u0001\u0000\u0000\u0000\u034c\u034d\u0001\u0000\u0000"
                    + "\u0000\u034d\u034e\u0005\u0015\u0000\u0000\u034e\u0350\u0005\u016a\u0000"
                    + "\u0000\u034f\u0351\u0003\u0142\u00a1\u0000\u0350\u034f\u0001\u0000\u0000"
                    + "\u0000\u0350\u0351\u0001\u0000\u0000\u0000\u0351\u0017\u0001\u0000\u0000"
                    + "\u0000\u0352\u0353\u0005\u012f\u0000\u0000\u0353\u0354\u0005\u0130\u0000"
                    + "\u0000\u0354\u0357\u0003\u02da\u016d\u0000\u0355\u0356\u0005\u014c\u0000"
                    + "\u0000\u0356\u0358\u0003\u02da\u016d\u0000\u0357\u0355\u0001\u0000\u0000"
                    + "\u0000\u0357\u0358\u0001\u0000\u0000\u0000\u0358\u0363\u0001\u0000\u0000"
                    + "\u0000\u0359\u035a\u0005\u0015\u0000\u0000\u035a\u035d\u0005\u016f\u0000"
                    + "\u0000\u035b\u035c\u0005K\u0000\u0000\u035c\u035e\u0005\u016f\u0000\u0000"
                    + "\u035d\u035b\u0001\u0000\u0000\u0000\u035d\u035e\u0001\u0000\u0000\u0000"
                    + "\u035e\u0361\u0001\u0000\u0000\u0000\u035f\u0360\u0005\u0099\u0000\u0000"
                    + "\u0360\u0362\u0005\u016f\u0000\u0000\u0361\u035f\u0001\u0000\u0000\u0000"
                    + "\u0361\u0362\u0001\u0000\u0000\u0000\u0362\u0364\u0001\u0000\u0000\u0000"
                    + "\u0363\u0359\u0001\u0000\u0000\u0000\u0363\u0364\u0001\u0000\u0000\u0000"
                    + "\u0364\u0367\u0001\u0000\u0000\u0000\u0365\u0366\u0005\u0095\u0000\u0000"
                    + "\u0366\u0368\u0003\u001c\u000e\u0000\u0367\u0365\u0001\u0000\u0000\u0000"
                    + "\u0367\u0368\u0001\u0000\u0000\u0000\u0368\u0019\u0001\u0000\u0000\u0000"
                    + "\u0369\u036a\u0005\u012f\u0000\u0000\u036a\u0370\u00058\u0000\u0000\u036b"
                    + "\u036e\u0003\u02da\u016d\u0000\u036c\u036d\u0005\u014c\u0000\u0000\u036d"
                    + "\u036f\u0003\u02da\u016d\u0000\u036e\u036c\u0001\u0000\u0000\u0000\u036e"
                    + "\u036f\u0001\u0000\u0000\u0000\u036f\u0371\u0001\u0000\u0000\u0000\u0370"
                    + "\u036b\u0001\u0000\u0000\u0000\u0370\u0371\u0001\u0000\u0000\u0000\u0371"
                    + "\u0372\u0001\u0000\u0000\u0000\u0372\u0373\u0005\u0015\u0000\u0000\u0373"
                    + "\u0376\u0005\u016a\u0000\u0000\u0374\u0375\u0005\u0095\u0000\u0000\u0375"
                    + "\u0377\u0003\u001c\u000e\u0000\u0376\u0374\u0001\u0000\u0000\u0000\u0376"
                    + "\u0377\u0001\u0000\u0000\u0000\u0377\u001b\u0001\u0000\u0000\u0000\u0378"
                    + "\u0379\u0005\u0150\u0000\u0000\u0379\u037a\u0003\u001e\u000f\u0000\u037a"
                    + "\u037b\u0005\u0151\u0000\u0000\u037b\u001d\u0001\u0000\u0000\u0000\u037c"
                    + "\u0381\u0003\u0132\u0099\u0000\u037d\u037e\u0005\u014e\u0000\u0000\u037e"
                    + "\u0380\u0003\u0132\u0099\u0000\u037f\u037d\u0001\u0000\u0000\u0000\u0380"
                    + "\u0383\u0001\u0000\u0000\u0000\u0381\u037f\u0001\u0000\u0000\u0000\u0381"
                    + "\u0382\u0001\u0000\u0000\u0000\u0382\u001f\u0001\u0000\u0000\u0000\u0383"
                    + "\u0381\u0001\u0000\u0000\u0000\u0384\u0385\u0005\u012f\u0000\u0000\u0385"
                    + "\u0386\u0005\u0131\u0000\u0000\u0386\u0389\u0003\u02da\u016d\u0000\u0387"
                    + "\u0388\u0005\u014c\u0000\u0000\u0388\u038a\u0003\u02da\u016d\u0000\u0389"
                    + "\u0387\u0001\u0000\u0000\u0000\u0389\u038a\u0001\u0000\u0000\u0000\u038a"
                    + "\u038d\u0001\u0000\u0000\u0000\u038b\u038c\u0005\u0095\u0000\u0000\u038c"
                    + "\u038e\u0003\u001c\u000e\u0000\u038d\u038b\u0001\u0000\u0000\u0000\u038d"
                    + "\u038e\u0001\u0000\u0000\u0000\u038e!\u0001\u0000\u0000\u0000\u038f\u03b8"
                    + "\u00032\u0019\u0000\u0390\u03b8\u0003:\u001d\u0000\u0391\u03b8\u0003<"
                    + "\u001e\u0000\u0392\u03b8\u0003@ \u0000\u0393\u03b8\u0003D\"\u0000\u0394"
                    + "\u03b8\u0003B!\u0000\u0395\u03b8\u0003F#\u0000\u0396\u03b8\u0003\u00b6"
                    + "[\u0000\u0397\u03b8\u0003\u00ba]\u0000\u0398\u03b8\u0003\u00f8|\u0000"
                    + "\u0399\u03b8\u0003\u010a\u0085\u0000\u039a\u03b8\u0003\u010c\u0086\u0000"
                    + "\u039b\u03b8\u0003\u0110\u0088\u0000\u039c\u03b8\u0003\u0112\u0089\u0000"
                    + "\u039d\u03b8\u0003\u0100\u0080\u0000\u039e\u03b8\u0003\u0106\u0083\u0000"
                    + "\u039f\u03b8\u0003\u0102\u0081\u0000\u03a0\u03b8\u0003\u0104\u0082\u0000"
                    + "\u03a1\u03b8\u0003\u0108\u0084\u0000\u03a2\u03b8\u0003\u00b8\\\u0000\u03a3"
                    + "\u03b8\u0003\u00bc^\u0000\u03a4\u03b8\u0003\u00c2a\u0000\u03a5\u03b8\u0003"
                    + "\u00be_\u0000\u03a6\u03b8\u0003\u00c4b\u0000\u03a7\u03b8\u0003\u00c6c"
                    + "\u0000\u03a8\u03b8\u0003\u00c8d\u0000\u03a9\u03b8\u0003\u00cae\u0000\u03aa"
                    + "\u03b8\u0003\u00ccf\u0000\u03ab\u03b8\u0003\u00dam\u0000\u03ac\u03b8\u0003"
                    + "\u00d2i\u0000\u03ad\u03b8\u0003\u00dcn\u0000\u03ae\u03b8\u0003\u00d4j"
                    + "\u0000\u03af\u03b8\u0003\u00ceg\u0000\u03b0\u03b8\u0003\u00d0h\u0000\u03b1"
                    + "\u03b8\u0003\u00d8l\u0000\u03b2\u03b8\u0003\u00d6k\u0000\u03b3\u03b8\u0003"
                    + "\u01e6\u00f3\u0000\u03b4\u03b8\u0003\u01f4\u00fa\u0000\u03b5\u03b8\u0003"
                    + "\u009eO\u0000\u03b6\u03b8\u0003\u00a2Q\u0000\u03b7\u038f\u0001\u0000\u0000"
                    + "\u0000\u03b7\u0390\u0001\u0000\u0000\u0000\u03b7\u0391\u0001\u0000\u0000"
                    + "\u0000\u03b7\u0392\u0001\u0000\u0000\u0000\u03b7\u0393\u0001\u0000\u0000"
                    + "\u0000\u03b7\u0394\u0001\u0000\u0000\u0000\u03b7\u0395\u0001\u0000\u0000"
                    + "\u0000\u03b7\u0396\u0001\u0000\u0000\u0000\u03b7\u0397\u0001\u0000\u0000"
                    + "\u0000\u03b7\u0398\u0001\u0000\u0000\u0000\u03b7\u0399\u0001\u0000\u0000"
                    + "\u0000\u03b7\u039a\u0001\u0000\u0000\u0000\u03b7\u039b\u0001\u0000\u0000"
                    + "\u0000\u03b7\u039c\u0001\u0000\u0000\u0000\u03b7\u039d\u0001\u0000\u0000"
                    + "\u0000\u03b7\u039e\u0001\u0000\u0000\u0000\u03b7\u039f\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03a0\u0001\u0000\u0000\u0000\u03b7\u03a1\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03a2\u0001\u0000\u0000\u0000\u03b7\u03a3\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03a4\u0001\u0000\u0000\u0000\u03b7\u03a5\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03a6\u0001\u0000\u0000\u0000\u03b7\u03a7\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03a8\u0001\u0000\u0000\u0000\u03b7\u03a9\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03aa\u0001\u0000\u0000\u0000\u03b7\u03ab\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03ac\u0001\u0000\u0000\u0000\u03b7\u03ad\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03ae\u0001\u0000\u0000\u0000\u03b7\u03af\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03b0\u0001\u0000\u0000\u0000\u03b7\u03b1\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03b2\u0001\u0000\u0000\u0000\u03b7\u03b3\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03b4\u0001\u0000\u0000\u0000\u03b7\u03b5\u0001\u0000\u0000"
                    + "\u0000\u03b7\u03b6\u0001\u0000\u0000\u0000\u03b8#\u0001\u0000\u0000\u0000"
                    + "\u03b9\u03ba\u0005\n\u0000\u0000\u03ba\u03bb\u0005\u000b\u0000\u0000\u03bb"
                    + "%\u0001\u0000\u0000\u0000\u03bc\u03bd\u0007\u0001\u0000\u0000\u03bd\'"
                    + "\u0001\u0000\u0000\u0000\u03be\u03bf\u0005\n\u0000\u0000\u03bf\u03c0\u0005"
                    + "\u0007\u0000\u0000\u03c0\u03c1\u0005\u000b\u0000\u0000\u03c1)\u0001\u0000"
                    + "\u0000\u0000\u03c2\u03c3\u0005}\u0000\u0000\u03c3\u03c4\u0005\u0103\u0000"
                    + "\u0000\u03c4+\u0001\u0000\u0000\u0000\u03c5\u03c6\u0005~\u0000\u0000\u03c6"
                    + "\u03c7\u0005\u0103\u0000\u0000\u03c7-\u0001\u0000\u0000\u0000\u03c8\u03c9"
                    + "\u0005w\u0000\u0000\u03c9\u03ca\u0005\u0016\u0000\u0000\u03ca\u03cb\u0005"
                    + "\u00e6\u0000\u0000\u03cb/\u0001\u0000\u0000\u0000\u03cc\u03cd\u0005\u0006"
                    + "\u0000\u0000\u03cd\u03ce\u0005\u0087\u0000\u0000\u03ce1\u0001\u0000\u0000"
                    + "\u0000\u03cf\u03d0\u0005A\u0000\u0000\u03d0\u03d2\u0007\u0002\u0000\u0000"
                    + "\u03d1\u03d3\u0003(\u0014\u0000\u03d2\u03d1\u0001\u0000\u0000\u0000\u03d2"
                    + "\u03d3\u0001\u0000\u0000\u0000\u03d3\u03d4\u0001\u0000\u0000\u0000\u03d4"
                    + "\u03d6\u0003\u02da\u016d\u0000\u03d5\u03d7\u0003>\u001f\u0000\u03d6\u03d5"
                    + "\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000\u0000\u03d7\u03d9"
                    + "\u0001\u0000\u0000\u0000\u03d8\u03da\u00034\u001a\u0000\u03d9\u03d8\u0001"
                    + "\u0000\u0000\u0000\u03d9\u03da\u0001\u0000\u0000\u0000\u03da\u03de\u0001"
                    + "\u0000\u0000\u0000\u03db\u03dc\u0005\u0095\u0000\u0000\u03dc\u03dd\u0005"
                    + "\u0098\u0000\u0000\u03dd\u03df\u00036\u001b\u0000\u03de\u03db\u0001\u0000"
                    + "\u0000\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df3\u0001\u0000\u0000"
                    + "\u0000\u03e0\u03e1\u0005\u007f\u0000\u0000\u03e1\u03e2\u0005\u016a\u0000"
                    + "\u0000\u03e25\u0001\u0000\u0000\u0000\u03e3\u03e4\u0005\u0150\u0000\u0000"
                    + "\u03e4\u03e5\u00038\u001c\u0000\u03e5\u03e6\u0005\u0151\u0000\u0000\u03e6"
                    + "7\u0001\u0000\u0000\u0000\u03e7\u03ec\u0003\u0132\u0099\u0000\u03e8\u03e9"
                    + "\u0005\u014e\u0000\u0000\u03e9\u03eb\u0003\u0132\u0099\u0000\u03ea\u03e8"
                    + "\u0001\u0000\u0000\u0000\u03eb\u03ee\u0001\u0000\u0000\u0000\u03ec\u03ea"
                    + "\u0001\u0000\u0000\u0000\u03ec\u03ed\u0001\u0000\u0000\u0000\u03ed9\u0001"
                    + "\u0000\u0000\u0000\u03ee\u03ec\u0001\u0000\u0000\u0000\u03ef\u03f0\u0005"
                    + "\u00dc\u0000\u0000\u03f0\u03f1\u0003\u02da\u016d\u0000\u03f1;\u0001\u0000"
                    + "\u0000\u0000\u03f2\u03f3\u0005I\u0000\u0000\u03f3\u03f5\u0007\u0002\u0000"
                    + "\u0000\u03f4\u03f6\u0003$\u0012\u0000\u03f5\u03f4\u0001\u0000\u0000\u0000"
                    + "\u03f5\u03f6\u0001\u0000\u0000\u0000\u03f6\u03f7\u0001\u0000\u0000\u0000"
                    + "\u03f7\u03f9\u0003\u02da\u016d\u0000\u03f8\u03fa\u0003&\u0013\u0000\u03f9"
                    + "\u03f8\u0001\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000\u0000\u03fa"
                    + "=\u0001\u0000\u0000\u0000\u03fb\u03fc\u0005L\u0000\u0000\u03fc\u03fd\u0005"
                    + "\u016a\u0000\u0000\u03fd?\u0001\u0000\u0000\u0000\u03fe\u0400\u0005A\u0000"
                    + "\u0000\u03ff\u0401\u0005\u008a\u0000\u0000\u0400\u03ff\u0001\u0000\u0000"
                    + "\u0000\u0400\u0401\u0001\u0000\u0000\u0000\u0401\u0403\u0001\u0000\u0000"
                    + "\u0000\u0402\u0404\u0005B\u0000\u0000\u0403\u0402\u0001\u0000\u0000\u0000"
                    + "\u0403\u0404\u0001\u0000\u0000\u0000\u0404\u0405\u0001\u0000\u0000\u0000"
                    + "\u0405\u0407\u0005%\u0000\u0000\u0406\u0408\u0003(\u0014\u0000\u0407\u0406"
                    + "\u0001\u0000\u0000\u0000\u0407\u0408\u0001\u0000\u0000\u0000\u0408\u0409"
                    + "\u0001\u0000\u0000\u0000\u0409\u043a\u0003\u023c\u011e\u0000\u040a\u040b"
                    + "\u0005\b\u0000\u0000\u040b\u040d\u0003\u023c\u011e\u0000\u040c\u040e\u0003"
                    + "\u012a\u0095\u0000\u040d\u040c\u0001\u0000\u0000\u0000\u040d\u040e\u0001"
                    + "\u0000\u0000\u0000\u040e\u0410\u0001\u0000\u0000\u0000\u040f\u0411\u0003"
                    + "\u0140\u00a0\u0000\u0410\u040f\u0001\u0000\u0000\u0000\u0410\u0411\u0001"
                    + "\u0000\u0000\u0000\u0411\u0413\u0001\u0000\u0000\u0000\u0412\u0414\u0003"
                    + "\u0142\u00a1\u0000\u0413\u0412\u0001\u0000\u0000\u0000\u0413\u0414\u0001"
                    + "\u0000\u0000\u0000\u0414\u0416\u0001\u0000\u0000\u0000\u0415\u0417\u0003"
                    + "\u012c\u0096\u0000\u0416\u0415\u0001\u0000\u0000\u0000\u0416\u0417\u0001"
                    + "\u0000\u0000\u0000\u0417\u043b\u0001\u0000\u0000\u0000\u0418\u0419\u0005"
                    + "\u0150\u0000\u0000\u0419\u041a\u0003\u0146\u00a3\u0000\u041a\u041b\u0005"
                    + "\u0151\u0000\u0000\u041b\u041d\u0001\u0000\u0000\u0000\u041c\u0418\u0001"
                    + "\u0000\u0000\u0000\u041c\u041d\u0001\u0000\u0000\u0000\u041d\u041f\u0001"
                    + "\u0000\u0000\u0000\u041e\u0420\u0003\u0118\u008c\u0000\u041f\u041e\u0001"
                    + "\u0000\u0000\u0000\u041f\u0420\u0001\u0000\u0000\u0000\u0420\u0422\u0001"
                    + "\u0000\u0000\u0000\u0421\u0423\u0003\u011a\u008d\u0000\u0422\u0421\u0001"
                    + "\u0000\u0000\u0000\u0422\u0423\u0001\u0000\u0000\u0000\u0423\u0425\u0001"
                    + "\u0000\u0000\u0000\u0424\u0426\u0003\u011c\u008e\u0000\u0425\u0424\u0001"
                    + "\u0000\u0000\u0000\u0425\u0426\u0001\u0000\u0000\u0000\u0426\u0428\u0001"
                    + "\u0000\u0000\u0000\u0427\u0429\u0003\u011e\u008f\u0000\u0428\u0427\u0001"
                    + "\u0000\u0000\u0000\u0428\u0429\u0001\u0000\u0000\u0000\u0429\u042b\u0001"
                    + "\u0000\u0000\u0000\u042a\u042c\u0003\u012a\u0095\u0000\u042b\u042a\u0001"
                    + "\u0000\u0000\u0000\u042b\u042c\u0001\u0000\u0000\u0000\u042c\u042e\u0001"
                    + "\u0000\u0000\u0000\u042d\u042f\u0003\u0140\u00a0\u0000\u042e\u042d\u0001"
                    + "\u0000\u0000\u0000\u042e\u042f\u0001\u0000\u0000\u0000\u042f\u0431\u0001"
                    + "\u0000\u0000\u0000\u0430\u0432\u0003\u0142\u00a1\u0000\u0431\u0430\u0001"
                    + "\u0000\u0000\u0000\u0431\u0432\u0001\u0000\u0000\u0000\u0432\u0434\u0001"
                    + "\u0000\u0000\u0000\u0433\u0435\u0003\u012c\u0096\u0000\u0434\u0433\u0001"
                    + "\u0000\u0000\u0000\u0434\u0435\u0001\u0000\u0000\u0000\u0435\u0438\u0001"
                    + "\u0000\u0000\u0000\u0436\u0437\u0005\u0016\u0000\u0000\u0437\u0439\u0003"
                    + "\u01c2\u00e1\u0000\u0438\u0436\u0001\u0000\u0000\u0000\u0438\u0439\u0001"
                    + "\u0000\u0000\u0000\u0439\u043b\u0001\u0000\u0000\u0000\u043a\u040a\u0001"
                    + "\u0000\u0000\u0000\u043a\u041c\u0001\u0000\u0000\u0000\u043bA\u0001\u0000"
                    + "\u0000\u0000\u043c\u043d\u0005\u00f4\u0000\u0000\u043d\u043e\u0005%\u0000"
                    + "\u0000\u043e\u0444\u0003\u00a4R\u0000\u043f\u0440\u0005\'\u0000\u0000"
                    + "\u0440\u0441\u0005\u0150\u0000\u0000\u0441\u0442\u0003\u014a\u00a5\u0000"
                    + "\u0442\u0443\u0005\u0151\u0000\u0000\u0443\u0445\u0001\u0000\u0000\u0000"
                    + "\u0444\u043f\u0001\u0000\u0000\u0000\u0444\u0445\u0001\u0000\u0000\u0000"
                    + "\u0445C\u0001\u0000\u0000\u0000\u0446\u0447\u0005I\u0000\u0000\u0447\u0449"
                    + "\u0005%\u0000\u0000\u0448\u044a\u0003$\u0012\u0000\u0449\u0448\u0001\u0000"
                    + "\u0000\u0000\u0449\u044a\u0001\u0000\u0000\u0000\u044a\u044b\u0001\u0000"
                    + "\u0000\u0000\u044b\u044d\u0003\u023c\u011e\u0000\u044c\u044e\u0005\u00c8"
                    + "\u0000\u0000\u044d\u044c\u0001\u0000\u0000\u0000\u044d\u044e\u0001\u0000"
                    + "\u0000\u0000\u044e\u0450\u0001\u0000\u0000\u0000\u044f\u0451\u0003\u0012"
                    + "\t\u0000\u0450\u044f\u0001\u0000\u0000\u0000\u0450\u0451\u0001\u0000\u0000"
                    + "\u0000\u0451E\u0001\u0000\u0000\u0000\u0452\u0453\u0005C\u0000\u0000\u0453"
                    + "\u0454\u0005%\u0000\u0000\u0454\u0455\u0003\u023c\u011e\u0000\u0455\u0456"
                    + "\u0003H$\u0000\u0456\u046c\u0001\u0000\u0000\u0000\u0457\u0458\u0005C"
                    + "\u0000\u0000\u0458\u0459\u0005\u00b2\u0000\u0000\u0459\u045b\u0003\u023c"
                    + "\u011e\u0000\u045a\u045c\u0005\u0016\u0000\u0000\u045b\u045a\u0001\u0000"
                    + "\u0000\u0000\u045b\u045c\u0001\u0000\u0000\u0000\u045c\u045d\u0001\u0000"
                    + "\u0000\u0000\u045d\u045e\u0003N\'\u0000\u045e\u046c\u0001\u0000\u0000"
                    + "\u0000\u045f\u0460\u0005C\u0000\u0000\u0460\u0461\u0005\u00b7\u0000\u0000"
                    + "\u0461\u0462\u0005\u00b2\u0000\u0000\u0462\u0463\u0003\u023c\u011e\u0000"
                    + "\u0463\u0464\u0003P(\u0000\u0464\u046c\u0001\u0000\u0000\u0000\u0465\u0466"
                    + "\u0005C\u0000\u0000\u0466\u0467\u0007\u0002\u0000\u0000\u0467\u046c\u0003"
                    + "R)\u0000\u0468\u0469\u0005C\u0000\u0000\u0469\u046a\u0005(\u0000\u0000"
                    + "\u046a\u046c\u0003\u0082A\u0000\u046b\u0452\u0001\u0000\u0000\u0000\u046b"
                    + "\u0457\u0001\u0000\u0000\u0000\u046b\u045f\u0001\u0000\u0000\u0000\u046b"
                    + "\u0465\u0001\u0000\u0000\u0000\u046b\u0468\u0001\u0000\u0000\u0000\u046c"
                    + "G\u0001\u0000\u0000\u0000\u046d\u047f\u0003Z-\u0000\u046e\u047f\u0003"
                    + "v;\u0000\u046f\u047f\u0003j5\u0000\u0470\u047f\u0003n7\u0000\u0471\u047f"
                    + "\u0003p8\u0000\u0472\u047f\u0003r9\u0000\u0473\u047f\u0003x<\u0000\u0474"
                    + "\u047f\u0003\u0092I\u0000\u0475\u047f\u0003\u0094J\u0000\u0476\u047f\u0003"
                    + "L&\u0000\u0477\u047f\u0003`0\u0000\u0478\u047f\u0003^/\u0000\u0479\u047b"
                    + "\u0003\u02cc\u0166\u0000\u047a\u0479\u0001\u0000\u0000\u0000\u047a\u047b"
                    + "\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000\u0000\u047c\u047f"
                    + "\u0003J%\u0000\u047d\u047f\u0003\u00aaU\u0000\u047e\u046d\u0001\u0000"
                    + "\u0000\u0000\u047e\u046e\u0001\u0000\u0000\u0000\u047e\u046f\u0001\u0000"
                    + "\u0000\u0000\u047e\u0470\u0001\u0000\u0000\u0000\u047e\u0471\u0001\u0000"
                    + "\u0000\u0000\u047e\u0472\u0001\u0000\u0000\u0000\u047e\u0473\u0001\u0000"
                    + "\u0000\u0000\u047e\u0474\u0001\u0000\u0000\u0000\u047e\u0475\u0001\u0000"
                    + "\u0000\u0000\u047e\u0476\u0001\u0000\u0000\u0000\u047e\u0477\u0001\u0000"
                    + "\u0000\u0000\u047e\u0478\u0001\u0000\u0000\u0000\u047e\u047a\u0001\u0000"
                    + "\u0000\u0000\u047e\u047d\u0001\u0000\u0000\u0000\u047fI\u0001\u0000\u0000"
                    + "\u0000\u0480\u048e\u0003\u0084B\u0000\u0481\u048e\u0003\u0090H\u0000\u0482"
                    + "\u048e\u0003\u009aM\u0000\u0483\u048e\u0003\u0080@\u0000\u0484\u048e\u0003"
                    + "\u0096K\u0000\u0485\u048e\u0003\u009cN\u0000\u0486\u048e\u0003\u0088D"
                    + "\u0000\u0487\u048e\u0003\u0086C\u0000\u0488\u048e\u0003\u00a8T\u0000\u0489"
                    + "\u048e\u0003d2\u0000\u048a\u048e\u0003f3\u0000\u048b\u048e\u0003b1\u0000"
                    + "\u048c\u048e\u0003\\.\u0000\u048d\u0480\u0001\u0000\u0000\u0000\u048d"
                    + "\u0481\u0001\u0000\u0000\u0000\u048d\u0482\u0001\u0000\u0000\u0000\u048d"
                    + "\u0483\u0001\u0000\u0000\u0000\u048d\u0484\u0001\u0000\u0000\u0000\u048d"
                    + "\u0485\u0001\u0000\u0000\u0000\u048d\u0486\u0001\u0000\u0000\u0000\u048d"
                    + "\u0487\u0001\u0000\u0000\u0000\u048d\u0488\u0001\u0000\u0000\u0000\u048d"
                    + "\u0489\u0001\u0000\u0000\u0000\u048d\u048a\u0001\u0000\u0000\u0000\u048d"
                    + "\u048b\u0001\u0000\u0000\u0000\u048d\u048c\u0001\u0000\u0000\u0000\u048e"
                    + "K\u0001\u0000\u0000\u0000\u048f\u0490\u0005#\u0000\u0000\u0490\u0491\u0005"
                    + "E\u0000\u0000\u0491\u0492\u0005\u0150\u0000\u0000\u0492\u0493\u0003\u0180"
                    + "\u00c0\u0000\u0493\u0494\u0005\u0151\u0000\u0000\u0494M\u0001\u0000\u0000"
                    + "\u0000\u0495\u049b\u0003z=\u0000\u0496\u049b\u0003Z-\u0000\u0497\u049b"
                    + "\u0003j5\u0000\u0498\u049b\u0003v;\u0000\u0499\u049b\u0003\u01c2\u00e1"
                    + "\u0000\u049a\u0495\u0001\u0000\u0000\u0000\u049a\u0496\u0001\u0000\u0000"
                    + "\u0000\u049a\u0497\u0001\u0000\u0000\u0000\u049a\u0498\u0001\u0000\u0000"
                    + "\u0000\u049a\u0499\u0001\u0000\u0000\u0000\u049bO\u0001\u0000\u0000\u0000"
                    + "\u049c\u049f\u0003|>\u0000\u049d\u049f\u0003~?\u0000\u049e\u049c\u0001"
                    + "\u0000\u0000\u0000\u049e\u049d\u0001\u0000\u0000\u0000\u049fQ\u0001\u0000"
                    + "\u0000\u0000\u04a0\u04a4\u0003T*\u0000\u04a1\u04a4\u0003V+\u0000\u04a2"
                    + "\u04a4\u0003X,\u0000\u04a3\u04a0\u0001\u0000\u0000\u0000\u04a3\u04a1\u0001"
                    + "\u0000\u0000\u0000\u04a3\u04a2\u0001\u0000\u0000\u0000\u04a4S\u0001\u0000"
                    + "\u0000\u0000\u04a5\u04a6\u0003\u02da\u016d\u0000\u04a6\u04a7\u0005\u009b"
                    + "\u0000\u0000\u04a7\u04a8\u0005\u0098\u0000\u0000\u04a8\u04a9\u00036\u001b"
                    + "\u0000\u04a9U\u0001\u0000\u0000\u0000\u04aa\u04ab\u0003\u02da\u016d\u0000"
                    + "\u04ab\u04ac\u0005\u009b\u0000\u0000\u04ac\u04ad\u0005\u00fe\u0000\u0000"
                    + "\u04ad\u04ae\u0003\u00eew\u0000\u04aeW\u0001\u0000\u0000\u0000\u04af\u04b0"
                    + "\u0003\u02da\u016d\u0000\u04b0\u04b1\u0005\u009b\u0000\u0000\u04b1\u04b2"
                    + "\u0005\u007f\u0000\u0000\u04b2\u04b3\u0005\u016a\u0000\u0000\u04b3Y\u0001"
                    + "\u0000\u0000\u0000\u04b4\u04b5\u0005J\u0000\u0000\u04b5\u04b6\u0005K\u0000"
                    + "\u0000\u04b6\u04b7\u0003\u023c\u011e\u0000\u04b7[\u0001\u0000\u0000\u0000"
                    + "\u04b8\u04b9\u0007\u0003\u0000\u0000\u04b9\u04ba\u0005\'\u0000\u0000\u04ba"
                    + "\u04bb\u0005\u0150\u0000\u0000\u04bb\u04bc\u0003\u0144\u00a2\u0000\u04bc"
                    + "\u04be\u0005\u0151\u0000\u0000\u04bd\u04bf\u0003&\u0013\u0000\u04be\u04bd"
                    + "\u0001\u0000\u0000\u0000\u04be\u04bf\u0001\u0000\u0000\u0000\u04bf]\u0001"
                    + "\u0000\u0000\u0000\u04c0\u04c3\u0005\u0086\u0000\u0000\u04c1\u04c4\u0003"
                    + "\u0166\u00b3\u0000\u04c2\u04c4\u0003\u0160\u00b0\u0000\u04c3\u04c1\u0001"
                    + "\u0000\u0000\u0000\u04c3\u04c2\u0001\u0000\u0000\u0000\u04c4_\u0001\u0000"
                    + "\u0000\u0000\u04c5\u04c6\u0005I\u0000\u0000\u04c6\u04c7\u0005\u0122\u0000"
                    + "\u0000\u04c7\u04c8\u0003\u02da\u016d\u0000\u04c8a\u0001\u0000\u0000\u0000"
                    + "\u04c9\u04cb\u0005D\u0000\u0000\u04ca\u04cc\u0005E\u0000\u0000\u04cb\u04ca"
                    + "\u0001\u0000\u0000\u0000\u04cb\u04cc\u0001\u0000\u0000\u0000\u04cc\u04cd"
                    + "\u0001\u0000\u0000\u0000\u04cd\u04ce\u0003\u02da\u016d\u0000\u04ce\u04cf"
                    + "\u0003\u02da\u016d\u0000\u04cf\u04d1\u0003\u019c\u00ce\u0000\u04d0\u04d2"
                    + "\u0003\u018e\u00c7\u0000\u04d1\u04d0\u0001\u0000\u0000\u0000\u04d1\u04d2"
                    + "\u0001\u0000\u0000\u0000\u04d2\u04d5\u0001\u0000\u0000\u0000\u04d3\u04d4"
                    + "\u0005L\u0000\u0000\u04d4\u04d6\u0005\u016a\u0000\u0000\u04d5\u04d3\u0001"
                    + "\u0000\u0000\u0000\u04d5\u04d6\u0001\u0000\u0000\u0000\u04d6\u04d8\u0001"
                    + "\u0000\u0000\u0000\u04d7\u04d9\u0003h4\u0000\u04d8\u04d7\u0001\u0000\u0000"
                    + "\u0000\u04d8\u04d9\u0001\u0000\u0000\u0000\u04d9\u04db\u0001\u0000\u0000"
                    + "\u0000\u04da\u04dc\u0003&\u0013\u0000\u04db\u04da\u0001\u0000\u0000\u0000"
                    + "\u04db\u04dc\u0001\u0000\u0000\u0000\u04dcc\u0001\u0000\u0000\u0000\u04dd"
                    + "\u04de\u0005\u00e0\u0000\u0000\u04de\u04df\u0005\u00db\u0000\u0000\u04df"
                    + "\u04e1\u0005\u00e7\u0000\u0000\u04e0\u04e2\u0005E\u0000\u0000\u04e1\u04e0"
                    + "\u0001\u0000\u0000\u0000\u04e1\u04e2\u0001\u0000\u0000\u0000\u04e2\u04e3"
                    + "\u0001\u0000\u0000\u0000\u04e3\u04e4\u0003\u02da\u016d\u0000\u04e4\u04e5"
                    + "\u0005\u009b\u0000\u0000\u04e5\u04e8\u0003\u012e\u0097\u0000\u04e6\u04e7"
                    + "\u0005L\u0000\u0000\u04e7\u04e9\u0005\u016a\u0000\u0000\u04e8\u04e6\u0001"
                    + "\u0000\u0000\u0000\u04e8\u04e9\u0001\u0000\u0000\u0000\u04e9e\u0001\u0000"
                    + "\u0000\u0000\u04ea\u04eb\u0005\u00e0\u0000\u0000\u04eb\u04ec\u0005\u00db"
                    + "\u0000\u0000\u04ec\u04ed\u0005\u009b\u0000\u0000\u04ed\u04ee\u0003\u012e"
                    + "\u0097\u0000\u04eeg\u0001\u0000\u0000\u0000\u04ef\u04f3\u0005F\u0000\u0000"
                    + "\u04f0\u04f1\u0005G\u0000\u0000\u04f1\u04f3\u0003\u02da\u016d\u0000\u04f2"
                    + "\u04ef\u0001\u0000\u0000\u0000\u04f2\u04f0\u0001\u0000\u0000\u0000\u04f3"
                    + "i\u0001\u0000\u0000\u0000\u04f4\u04f6\u0005\u0086\u0000\u0000\u04f5\u04f7"
                    + "\u0003(\u0014\u0000\u04f6\u04f5\u0001\u0000\u0000\u0000\u04f6\u04f7\u0001"
                    + "\u0000\u0000\u0000\u04f7\u04f9\u0001\u0000\u0000\u0000\u04f8\u04fa\u0003"
                    + "l6\u0000\u04f9\u04f8\u0001\u0000\u0000\u0000\u04fa\u04fb\u0001\u0000\u0000"
                    + "\u0000\u04fb\u04f9\u0001\u0000\u0000\u0000\u04fb\u04fc\u0001\u0000\u0000"
                    + "\u0000\u04fck\u0001\u0000\u0000\u0000\u04fd\u04ff\u0003\u02cc\u0166\u0000"
                    + "\u04fe\u0500\u0003t:\u0000\u04ff\u04fe\u0001\u0000\u0000\u0000\u04ff\u0500"
                    + "\u0001\u0000\u0000\u0000\u0500m\u0001\u0000\u0000\u0000\u0501\u0505\u0005"
                    + "\u00d7\u0000\u0000\u0502\u0504\u0003\u02cc\u0166\u0000\u0503\u0502\u0001"
                    + "\u0000\u0000\u0000\u0504\u0507\u0001\u0000\u0000\u0000\u0505\u0503\u0001"
                    + "\u0000\u0000\u0000\u0505\u0506\u0001\u0000\u0000\u0000\u0506o\u0001\u0000"
                    + "\u0000\u0000\u0507\u0505\u0001\u0000\u0000\u0000\u0508\u050c\u0005\u00d8"
                    + "\u0000\u0000\u0509\u050b\u0003\u02cc\u0166\u0000\u050a\u0509\u0001\u0000"
                    + "\u0000\u0000\u050b\u050e\u0001\u0000\u0000\u0000\u050c\u050a\u0001\u0000"
                    + "\u0000\u0000\u050c\u050d\u0001\u0000\u0000\u0000\u050dq\u0001\u0000\u0000"
                    + "\u0000\u050e\u050c\u0001\u0000\u0000\u0000\u050f\u0513\u0005\u00d9\u0000"
                    + "\u0000\u0510\u0512\u0003\u02cc\u0166\u0000\u0511\u0510\u0001\u0000\u0000"
                    + "\u0000\u0512\u0515\u0001\u0000\u0000\u0000\u0513\u0511\u0001\u0000\u0000"
                    + "\u0000\u0513\u0514\u0001\u0000\u0000\u0000\u0514s\u0001\u0000\u0000\u0000"
                    + "\u0515\u0513\u0001\u0000\u0000\u0000\u0516\u0517\u0005\u007f\u0000\u0000"
                    + "\u0517\u0518\u0005\u016a\u0000\u0000\u0518u\u0001\u0000\u0000\u0000\u0519"
                    + "\u051b\u0005I\u0000\u0000\u051a\u051c\u0003$\u0012\u0000\u051b\u051a\u0001"
                    + "\u0000\u0000\u0000\u051b\u051c\u0001\u0000\u0000\u0000\u051c\u051d\u0001"
                    + "\u0000\u0000\u0000\u051d\u0522\u0003\u02d0\u0168\u0000\u051e\u051f\u0005"
                    + "\u014e\u0000\u0000\u051f\u0521\u0003\u02d0\u0168\u0000\u0520\u051e\u0001"
                    + "\u0000\u0000\u0000\u0521\u0524\u0001\u0000\u0000\u0000\u0522\u0520\u0001"
                    + "\u0000\u0000\u0000\u0522\u0523\u0001\u0000\u0000\u0000\u0523\u0526\u0001"
                    + "\u0000\u0000\u0000\u0524\u0522\u0001\u0000\u0000\u0000\u0525\u0527\u0005"
                    + "\u00c8\u0000\u0000\u0526\u0525\u0001\u0000\u0000\u0000\u0526\u0527\u0001"
                    + "\u0000\u0000\u0000\u0527\u0529\u0001\u0000\u0000\u0000\u0528\u052a\u0003"
                    + "\u0012\t\u0000\u0529\u0528\u0001\u0000\u0000\u0000\u0529\u052a\u0001\u0000"
                    + "\u0000\u0000\u052aw\u0001\u0000\u0000\u0000\u052b\u052c\u0005\u009b\u0000"
                    + "\u0000\u052c\u052d\u0005\u009d\u0000\u0000\u052d\u0535\u0003\u012e\u0097"
                    + "\u0000\u052e\u052f\u0005\u009c\u0000\u0000\u052f\u0531\u0005\u009d\u0000"
                    + "\u0000\u0530\u0532\u0003$\u0012\u0000\u0531\u0530\u0001\u0000\u0000\u0000"
                    + "\u0531\u0532\u0001\u0000\u0000\u0000\u0532\u0533\u0001\u0000\u0000\u0000"
                    + "\u0533\u0535\u0003\u012e\u0097\u0000\u0534\u052b\u0001\u0000\u0000\u0000"
                    + "\u0534\u052e\u0001\u0000\u0000\u0000\u0535y\u0001\u0000\u0000\u0000\u0536"
                    + "\u0537\u0005\u009b\u0000\u0000\u0537\u0538\u0005\u009d\u0000\u0000\u0538"
                    + "\u0540\u0003\u012e\u0097\u0000\u0539\u053a\u0005\u009c\u0000\u0000\u053a"
                    + "\u053c\u0005\u009d\u0000\u0000\u053b\u053d\u0003$\u0012\u0000\u053c\u053b"
                    + "\u0001\u0000\u0000\u0000\u053c\u053d\u0001\u0000\u0000\u0000\u053d\u053e"
                    + "\u0001\u0000\u0000\u0000\u053e\u0540\u0003\u012e\u0097\u0000\u053f\u0536"
                    + "\u0001\u0000\u0000\u0000\u053f\u0539\u0001\u0000\u0000\u0000\u0540{\u0001"
                    + "\u0000\u0000\u0000\u0541\u0544\u0003*\u0015\u0000\u0542\u0544\u0003,\u0016"
                    + "\u0000\u0543\u0541\u0001\u0000\u0000\u0000\u0543\u0542\u0001\u0000\u0000"
                    + "\u0000\u0544}\u0001\u0000\u0000\u0000\u0545\u0546\u0005*\u0000\u0000\u0546"
                    + "\u007f\u0001\u0000\u0000\u0000\u0547\u0548\u0005\u009b\u0000\u0000\u0548"
                    + "\u0549\u0005\u0094\u0000\u0000\u0549\u054d\u0005\u016a\u0000\u0000\u054a"
                    + "\u054b\u0005\u0095\u0000\u0000\u054b\u054c\u0005\u0097\u0000\u0000\u054c"
                    + "\u054e\u0003\u012e\u0097\u0000\u054d\u054a\u0001\u0000\u0000\u0000\u054d"
                    + "\u054e\u0001\u0000\u0000\u0000\u054e\u0553\u0001\u0000\u0000\u0000\u054f"
                    + "\u0550\u0005\u009b\u0000\u0000\u0550\u0551\u0005\u0097\u0000\u0000\u0551"
                    + "\u0553\u0003\u012e\u0097\u0000\u0552\u0547\u0001\u0000\u0000\u0000\u0552"
                    + "\u054f\u0001\u0000\u0000\u0000\u0553\u0081\u0001\u0000\u0000\u0000\u0554"
                    + "\u0555\u0003\u02da\u016d\u0000\u0555\u0556\u0005\"\u0000\u0000\u0556\u0558"
                    + "\u0003\u023c\u011e\u0000\u0557\u0559\u0003\u02cc\u0166\u0000\u0558\u0557"
                    + "\u0001\u0000\u0000\u0000\u0558\u0559\u0001\u0000\u0000\u0000\u0559\u055a"
                    + "\u0001\u0000\u0000\u0000\u055a\u055b\u0005*\u0000\u0000\u055b\u0083\u0001"
                    + "\u0000\u0000\u0000\u055c\u055d\u0005\u009b\u0000\u0000\u055d\u055e\u0005"
                    + "x\u0000\u0000\u055e\u055f\u0003\u00acV\u0000\u055f\u0085\u0001\u0000\u0000"
                    + "\u0000\u0560\u0561\u0005\u0007\u0000\u0000\u0561\u0566\u0005f\u0000\u0000"
                    + "\u0562\u0563\u0005\u0007\u0000\u0000\u0563\u0566\u0005g\u0000\u0000\u0564"
                    + "\u0566\u0003\u011c\u008e\u0000\u0565\u0560\u0001\u0000\u0000\u0000\u0565"
                    + "\u0562\u0001\u0000\u0000\u0000\u0565\u0564\u0001\u0000\u0000\u0000\u0566"
                    + "\u0087\u0001\u0000\u0000\u0000\u0567\u0568\u0005\u009b\u0000\u0000\u0568"
                    + "\u0569\u0005\u00e3\u0000\u0000\u0569\u056a\u0005\u007f\u0000\u0000\u056a"
                    + "\u056b\u0003\u008aE\u0000\u056b\u0089\u0001\u0000\u0000\u0000\u056c\u056d"
                    + "\u0005\u0150\u0000\u0000\u056d\u056e\u0003\u008cF\u0000\u056e\u056f\u0005"
                    + "\u0151\u0000\u0000\u056f\u008b\u0001\u0000\u0000\u0000\u0570\u0575\u0003"
                    + "\u008eG\u0000\u0571\u0572\u0005\u014e\u0000\u0000\u0572\u0574\u0003\u008e"
                    + "G\u0000\u0573\u0571\u0001\u0000\u0000\u0000\u0574\u0577\u0001\u0000\u0000"
                    + "\u0000\u0575\u0573\u0001\u0000\u0000\u0000\u0575\u0576\u0001\u0000\u0000"
                    + "\u0000\u0576\u008d\u0001\u0000\u0000\u0000\u0577\u0575\u0001\u0000\u0000"
                    + "\u0000\u0578\u0579\u0003\u0172\u00b9\u0000\u0579\u057a\u0005\u0156\u0000"
                    + "\u0000\u057a\u057b\u0005\u016a\u0000\u0000\u057b\u008f\u0001\u0000\u0000"
                    + "\u0000\u057c\u057d\u0005\u009b\u0000\u0000\u057d\u057e\u0005\u007f\u0000"
                    + "\u0000\u057e\u057f\u0005\u016a\u0000\u0000\u057f\u0091\u0001\u0000\u0000"
                    + "\u0000\u0580\u0586\u0003\u011e\u008f\u0000\u0581\u0582\u0005\u0007\u0000"
                    + "\u0000\u0582\u0586\u0005\u00e3\u0000\u0000\u0583\u0584\u0005\u0007\u0000"
                    + "\u0000\u0584\u0586\u0003.\u0017\u0000\u0585\u0580\u0001\u0000\u0000\u0000"
                    + "\u0585\u0581\u0001\u0000\u0000\u0000\u0585\u0583\u0001\u0000\u0000\u0000"
                    + "\u0586\u0093\u0001\u0000\u0000\u0000\u0587\u0588\u0005\u00fa\u0000\u0000"
                    + "\u0588\u0589\u0003\u02cc\u0166\u0000\u0589\u058a\u0005\u0095\u0000\u0000"
                    + "\u058a\u058b\u0005%\u0000\u0000\u058b\u058c\u0003\u023c\u011e\u0000\u058c"
                    + "\u0095\u0001\u0000\u0000\u0000\u058d\u058e\u0005J\u0000\u0000\u058e\u058f"
                    + "\u0005K\u0000\u0000\u058f\u0590\u0003\u02cc\u0166\u0000\u0590\u0097\u0001"
                    + "\u0000\u0000\u0000\u0591\u0592\u0005\u00e0\u0000\u0000\u0592\u0593\u0005"
                    + "\u00db\u0000\u0000\u0593\u0595\u0005\u00e7\u0000\u0000\u0594\u0596\u0005"
                    + "E\u0000\u0000\u0595\u0594\u0001\u0000\u0000\u0000\u0595\u0596\u0001\u0000"
                    + "\u0000\u0000\u0596\u0597\u0001\u0000\u0000\u0000\u0597\u0598\u0003\u02da"
                    + "\u016d\u0000\u0598\u0599\u0005\u009b\u0000\u0000\u0599\u059c\u0003\u012e"
                    + "\u0097\u0000\u059a\u059b\u0005L\u0000\u0000\u059b\u059d\u0005\u016a\u0000"
                    + "\u0000\u059c\u059a\u0001\u0000\u0000\u0000\u059c\u059d\u0001\u0000\u0000"
                    + "\u0000\u059d\u0099\u0001\u0000\u0000\u0000\u059e\u059f\u0005\u00de\u0000"
                    + "\u0000\u059f\u009b\u0001\u0000\u0000\u0000\u05a0\u05a1\u0005h\u0000\u0000"
                    + "\u05a1\u05a2\u0005\u016f\u0000\u0000\u05a2\u05a3\u0005i\u0000\u0000\u05a3"
                    + "\u009d\u0001\u0000\u0000\u0000\u05a4\u05a5\u0005A\u0000\u0000\u05a5\u05a6"
                    + "\u0005(\u0000\u0000\u05a6\u05a7\u0003\u02da\u016d\u0000\u05a7\u05a8\u0005"
                    + "\"\u0000\u0000\u05a8\u05a9\u0005%\u0000\u0000\u05a9\u05aa\u0003\u023c"
                    + "\u011e\u0000\u05aa\u05ab\u0003\u0152\u00a9\u0000\u05ab\u05ac\u0005\u0016"
                    + "\u0000\u0000\u05ac\u05b0\u0005\u016a\u0000\u0000\u05ad\u05ae\u0005\u0095"
                    + "\u0000\u0000\u05ae\u05af\u0005\u0096\u0000\u0000\u05af\u05b1\u0005*\u0000"
                    + "\u0000\u05b0\u05ad\u0001\u0000\u0000\u0000\u05b0\u05b1\u0001\u0000\u0000"
                    + "\u0000\u05b1\u05b4\u0001\u0000\u0000\u0000\u05b2\u05b3\u0005\u009e\u0000"
                    + "\u0000\u05b3\u05b5\u0003\u012e\u0097\u0000\u05b4\u05b2\u0001\u0000\u0000"
                    + "\u0000\u05b4\u05b5\u0001\u0000\u0000\u0000\u05b5\u05b9\u0001\u0000\u0000"
                    + "\u0000\u05b6\u05b7\u0005\u00b4\u0000\u0000\u05b7\u05b8\u0005%\u0000\u0000"
                    + "\u05b8\u05ba\u0003\u023c\u011e\u0000\u05b9\u05b6\u0001\u0000\u0000\u0000"
                    + "\u05b9\u05ba\u0001\u0000\u0000\u0000\u05ba\u05be\u0001\u0000\u0000\u0000"
                    + "\u05bb\u05bc\u0005e\u0000\u0000\u05bc\u05bd\u0005\u0012\u0000\u0000\u05bd"
                    + "\u05bf\u0003\u0152\u00a9\u0000\u05be\u05bb\u0001\u0000\u0000\u0000\u05be"
                    + "\u05bf\u0001\u0000\u0000\u0000\u05bf\u05c4\u0001\u0000\u0000\u0000\u05c0"
                    + "\u05c2\u0003\u012a\u0095\u0000\u05c1\u05c0\u0001\u0000\u0000\u0000\u05c1"
                    + "\u05c2\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3"
                    + "\u05c5\u0003\u0140\u00a0\u0000\u05c4\u05c1\u0001\u0000\u0000\u0000\u05c4"
                    + "\u05c5\u0001\u0000\u0000\u0000\u05c5\u05c8\u0001\u0000\u0000\u0000\u05c6"
                    + "\u05c7\u0005\u007f\u0000\u0000\u05c7\u05c9\u0003\u00a0P\u0000\u05c8\u05c6"
                    + "\u0001\u0000\u0000\u0000\u05c8\u05c9\u0001\u0000\u0000\u0000\u05c9\u05cb"
                    + "\u0001\u0000\u0000\u0000\u05ca\u05cc\u0003\u012c\u0096\u0000\u05cb\u05ca"
                    + "\u0001\u0000\u0000\u0000\u05cb\u05cc\u0001\u0000\u0000\u0000\u05cc\u05ce"
                    + "\u0001\u0000\u0000\u0000\u05cd\u05cf\u0003\u0118\u008c\u0000\u05ce\u05cd"
                    + "\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000\u05cf\u009f"
                    + "\u0001\u0000\u0000\u0000\u05d0\u05d5\u0003\u02da\u016d\u0000\u05d1\u05d2"
                    + "\u0005\u014c\u0000\u0000\u05d2\u05d4\u0003\u02da\u016d\u0000\u05d3\u05d1"
                    + "\u0001\u0000\u0000\u0000\u05d4\u05d7\u0001\u0000\u0000\u0000\u05d5\u05d3"
                    + "\u0001\u0000\u0000\u0000\u05d5\u05d6\u0001\u0000\u0000\u0000\u05d6\u00a1"
                    + "\u0001\u0000\u0000\u0000\u05d7\u05d5\u0001\u0000\u0000\u0000\u05d8\u05d9"
                    + "\u0005I\u0000\u0000\u05d9\u05da\u0005(\u0000\u0000\u05da\u05db\u0003\u02da"
                    + "\u016d\u0000\u05db\u05dc\u0005\"\u0000\u0000\u05dc\u05dd\u0003\u023c\u011e"
                    + "\u0000\u05dd\u00a3\u0001\u0000\u0000\u0000\u05de\u05e0\u0003\u023c\u011e"
                    + "\u0000\u05df\u05e1\u0003\u02cc\u0166\u0000\u05e0\u05df\u0001\u0000\u0000"
                    + "\u0000\u05e0\u05e1\u0001\u0000\u0000\u0000\u05e1\u00a5\u0001\u0000\u0000"
                    + "\u0000\u05e2\u05e3\u0005\u0005\u0000\u0000\u05e3\u05e4\u0005\u0137\u0000"
                    + "\u0000\u05e4\u00a7\u0001\u0000\u0000\u0000\u05e5\u05e6\u0005\u0100\u0000"
                    + "\u0000\u05e6\u05e8\u0005\u016a\u0000\u0000\u05e7\u05e9\u0003\u00a6S\u0000"
                    + "\u05e8\u05e7\u0001\u0000\u0000\u0000\u05e8\u05e9\u0001\u0000\u0000\u0000"
                    + "\u05e9\u05ee\u0001\u0000\u0000\u0000\u05ea\u05eb\u0005\u0095\u0000\u0000"
                    + "\u05eb\u05ec\u0005\u001a\u0000\u0000\u05ec\u05ed\u0005\u009d\u0000\u0000"
                    + "\u05ed\u05ef\u0003\u012e\u0097\u0000\u05ee\u05ea\u0001\u0000\u0000\u0000"
                    + "\u05ee\u05ef\u0001\u0000\u0000\u0000\u05ef\u00a9\u0001\u0000\u0000\u0000"
                    + "\u05f0\u05f1\u0005\u009b\u0000\u0000\u05f1\u05f2\u0005\u00fe\u0000\u0000"
                    + "\u05f2\u05f3\u0003\u00eew\u0000\u05f3\u00ab\u0001\u0000\u0000\u0000\u05f4"
                    + "\u05f5\u0005y\u0000\u0000\u05f5\u05f6\u0005\u016a\u0000\u0000\u05f6\u05f7"
                    + "\u0005z\u0000\u0000\u05f7\u05f8\u0005\u016a\u0000\u0000\u05f8\u05f9\u0005"
                    + "\u0094\u0000\u0000\u05f9\u05fe\u0005\u016a\u0000\u0000\u05fa\u05fb\u0005"
                    + "{\u0000\u0000\u05fb\u05fc\u0005\u016a\u0000\u0000\u05fc\u05fd\u0005|\u0000"
                    + "\u0000\u05fd\u05ff\u0005\u016a\u0000\u0000\u05fe\u05fa\u0001\u0000\u0000"
                    + "\u0000\u05fe\u05ff\u0001\u0000\u0000\u0000\u05ff\u0602\u0001\u0000\u0000"
                    + "\u0000\u0600\u0602\u0003\u02da\u016d\u0000\u0601\u05f4\u0001\u0000\u0000"
                    + "\u0000\u0601\u0600\u0001\u0000\u0000\u0000\u0602\u00ad\u0001\u0000\u0000"
                    + "\u0000\u0603\u0604\u0005y\u0000\u0000\u0604\u0605\u0005\u016a\u0000\u0000"
                    + "\u0605\u0606\u0005\u0094\u0000\u0000\u0606\u0607\u0005\u016a\u0000\u0000"
                    + "\u0607\u00af\u0001\u0000\u0000\u0000\u0608\u060b\u0003\u02da\u016d\u0000"
                    + "\u0609\u060a\u0005\u014c\u0000\u0000\u060a\u060c\u0003\u02da\u016d\u0000"
                    + "\u060b\u0609\u0001\u0000\u0000\u0000\u060b\u060c\u0001\u0000\u0000\u0000"
                    + "\u060c\u061a\u0001\u0000\u0000\u0000\u060d\u0617\u0003\u02da\u016d\u0000"
                    + "\u060e\u0613\u0005\u014c\u0000\u0000\u060f\u0614\u0005\u00a0\u0000\u0000"
                    + "\u0610\u0614\u0005t\u0000\u0000\u0611\u0614\u0005\u009f\u0000\u0000\u0612"
                    + "\u0614\u0003\u02da\u016d\u0000\u0613\u060f\u0001\u0000\u0000\u0000\u0613"
                    + "\u0610\u0001\u0000\u0000\u0000\u0613\u0611\u0001\u0000\u0000\u0000\u0613"
                    + "\u0612\u0001\u0000\u0000\u0000\u0614\u0616\u0001\u0000\u0000\u0000\u0615"
                    + "\u060e\u0001\u0000\u0000\u0000\u0616\u0619\u0001\u0000\u0000\u0000\u0617"
                    + "\u0615\u0001\u0000\u0000\u0000\u0617\u0618\u0001\u0000\u0000\u0000\u0618"
                    + "\u061b\u0001\u0000\u0000\u0000\u0619\u0617\u0001\u0000\u0000\u0000\u061a"
                    + "\u060d\u0001\u0000\u0000\u0000\u061a\u061b\u0001\u0000\u0000\u0000\u061b"
                    + "\u00b1\u0001\u0000\u0000\u0000\u061c\u061e\u0003\u00b0X\u0000\u061d\u061f"
                    + "\u0003\u02cc\u0166\u0000\u061e\u061d\u0001\u0000\u0000\u0000\u061e\u061f"
                    + "\u0001\u0000\u0000\u0000\u061f\u00b3\u0001\u0000\u0000\u0000\u0620\u0622"
                    + "\u0003\u023c\u011e\u0000\u0621\u0623\u0003\u02cc\u0166\u0000\u0622\u0621"
                    + "\u0001\u0000\u0000\u0000\u0622\u0623\u0001\u0000\u0000\u0000\u0623\u0625"
                    + "\u0001\u0000\u0000\u0000\u0624\u0626\u0003\u014e\u00a7\u0000\u0625\u0624"
                    + "\u0001\u0000\u0000\u0000\u0625\u0626\u0001\u0000\u0000\u0000\u0626\u00b5"
                    + "\u0001\u0000\u0000\u0000\u0627\u0635\u0007\u0004\u0000\u0000\u0628\u062a"
                    + "\u0007\u0002\u0000\u0000\u0629\u062b\u0005\u0090\u0000\u0000\u062a\u0629"
                    + "\u0001\u0000\u0000\u0000\u062a\u062b\u0001\u0000\u0000\u0000\u062b\u062c"
                    + "\u0001\u0000\u0000\u0000\u062c\u0636\u0003\u02da\u016d\u0000\u062d\u062f"
                    + "\u0005\u008b\u0000\u0000\u062e\u0630\u0005\u0090\u0000\u0000\u062f\u062e"
                    + "\u0001\u0000\u0000\u0000\u062f\u0630\u0001\u0000\u0000\u0000\u0630\u0631"
                    + "\u0001\u0000\u0000\u0000\u0631\u0636\u0003\u02d8\u016c\u0000\u0632\u0633"
                    + "\u0007\u0005\u0000\u0000\u0633\u0636\u0003\u00b4Z\u0000\u0634\u0636\u0003"
                    + "\u00b4Z\u0000\u0635\u0628\u0001\u0000\u0000\u0000\u0635\u062d\u0001\u0000"
                    + "\u0000\u0000\u0635\u0632\u0001\u0000\u0000\u0000\u0635\u0634\u0001\u0000"
                    + "\u0000\u0000\u0636\u00b7\u0001\u0000\u0000\u0000\u0637\u0638\u0005\u00ca"
                    + "\u0000\u0000\u0638\u0639\u0005%\u0000\u0000\u0639\u0646\u0003\u02ca\u0165"
                    + "\u0000\u063a\u063b\u0005\u00da\u0000\u0000\u063b\u0642\u0005\u00db\u0000"
                    + "\u0000\u063c\u0643\u0005\u00f5\u0000\u0000\u063d\u063e\u0005\u00e7\u0000"
                    + "\u0000\u063e\u0640\u0005\'\u0000\u0000\u063f\u0641\u0003\u014a\u00a5\u0000"
                    + "\u0640\u063f\u0001\u0000\u0000\u0000\u0640\u0641\u0001\u0000\u0000\u0000"
                    + "\u0641\u0643\u0001\u0000\u0000\u0000\u0642\u063c\u0001\u0000\u0000\u0000"
                    + "\u0642\u063d\u0001\u0000\u0000\u0000\u0642\u0643\u0001\u0000\u0000\u0000"
                    + "\u0643\u0647\u0001\u0000\u0000\u0000\u0644\u0645\u0005\u011e\u0000\u0000"
                    + "\u0645\u0647\u0005<\u0000\u0000\u0646\u063a\u0001\u0000\u0000\u0000\u0646"
                    + "\u0644\u0001\u0000\u0000\u0000\u0647\u00b9\u0001\u0000\u0000\u0000\u0648"
                    + "\u0649\u0005,\u0000\u0000\u0649\u064c\u0007\u0006\u0000\u0000\u064a\u064b"
                    + "\u0005\b\u0000\u0000\u064b\u064d\u0003\u0116\u008b\u0000\u064c\u064a\u0001"
                    + "\u0000\u0000\u0000\u064c\u064d\u0001\u0000\u0000\u0000\u064d\u06c4\u0001"
                    + "\u0000\u0000\u0000\u064e\u064f\u0005,\u0000\u0000\u064f\u0652\u0005&\u0000"
                    + "\u0000\u0650\u0651\u0007\u0007\u0000\u0000\u0651\u0653\u0003\u02da\u016d"
                    + "\u0000\u0652\u0650\u0001\u0000\u0000\u0000\u0652\u0653\u0001\u0000\u0000"
                    + "\u0000\u0653\u0657\u0001\u0000\u0000\u0000\u0654\u0655\u0005\b\u0000\u0000"
                    + "\u0655\u0658\u0003\u0116\u008b\u0000\u0656\u0658\u0003\u0116\u008b\u0000"
                    + "\u0657\u0654\u0001\u0000\u0000\u0000\u0657\u0656\u0001\u0000\u0000\u0000"
                    + "\u0657\u0658\u0001\u0000\u0000\u0000\u0658\u06c4\u0001\u0000\u0000\u0000"
                    + "\u0659\u065a\u0005,\u0000\u0000\u065a\u065d\u0005\u00b3\u0000\u0000\u065b"
                    + "\u065c\u0007\u0007\u0000\u0000\u065c\u065e\u0003\u02da\u016d\u0000\u065d"
                    + "\u065b\u0001\u0000\u0000\u0000\u065d\u065e\u0001\u0000\u0000\u0000\u065e"
                    + "\u0662\u0001\u0000\u0000\u0000\u065f\u0660\u0005\b\u0000\u0000\u0660\u0663"
                    + "\u0003\u0116\u008b\u0000\u0661\u0663\u0003\u0116\u008b\u0000\u0662\u065f"
                    + "\u0001\u0000\u0000\u0000\u0662\u0661\u0001\u0000\u0000\u0000\u0662\u0663"
                    + "\u0001\u0000\u0000\u0000\u0663\u06c4\u0001\u0000\u0000\u0000\u0664\u0665"
                    + "\u0005,\u0000\u0000\u0665\u0666\u0005\u00b7\u0000\u0000\u0666\u0669\u0005"
                    + "\u00b3\u0000\u0000\u0667\u0668\u0007\u0007\u0000\u0000\u0668\u066a\u0003"
                    + "\u02da\u016d\u0000\u0669\u0667\u0001\u0000\u0000\u0000\u0669\u066a\u0001"
                    + "\u0000\u0000\u0000\u066a\u066e\u0001\u0000\u0000\u0000\u066b\u066c\u0005"
                    + "\b\u0000\u0000\u066c\u066f\u0003\u0116\u008b\u0000\u066d\u066f\u0003\u0116"
                    + "\u008b\u0000\u066e\u066b\u0001\u0000\u0000\u0000\u066e\u066d\u0001\u0000"
                    + "\u0000\u0000\u066e\u066f\u0001\u0000\u0000\u0000\u066f\u06c4\u0001\u0000"
                    + "\u0000\u0000\u0670\u0671\u0005,\u0000\u0000\u0671\u0672\u0005\'\u0000"
                    + "\u0000\u0672\u0673\u0007\u0007\u0000\u0000\u0673\u0676\u0003\u023c\u011e"
                    + "\u0000\u0674\u0675\u0007\u0007\u0000\u0000\u0675\u0677\u0003\u02da\u016d"
                    + "\u0000\u0676\u0674\u0001\u0000\u0000\u0000\u0676\u0677\u0001\u0000\u0000"
                    + "\u0000\u0677\u067b\u0001\u0000\u0000\u0000\u0678\u0679\u0005\b\u0000\u0000"
                    + "\u0679\u067c\u0003\u0116\u008b\u0000\u067a\u067c\u0003\u0116\u008b\u0000"
                    + "\u067b\u0678\u0001\u0000\u0000\u0000\u067b\u067a\u0001\u0000\u0000\u0000"
                    + "\u067b\u067c\u0001\u0000\u0000\u0000\u067c\u06c4\u0001\u0000\u0000\u0000"
                    + "\u067d\u067e\u0005,\u0000\u0000\u067e\u0682\u0005+\u0000\u0000\u067f\u0680"
                    + "\u0005\b\u0000\u0000\u0680\u0683\u0003\u0114\u008a\u0000\u0681\u0683\u0003"
                    + "\u0114\u008a\u0000\u0682\u067f\u0001\u0000\u0000\u0000\u0682\u0681\u0001"
                    + "\u0000\u0000\u0000\u0682\u0683\u0001\u0000\u0000\u0000\u0683\u06c4\u0001"
                    + "\u0000\u0000\u0000\u0684\u0685\u0005,\u0000\u0000\u0685\u0686\u0005$\u0000"
                    + "\u0000\u0686\u0688\u0003\u023c\u011e\u0000\u0687\u0689\u0003\u02cc\u0166"
                    + "\u0000\u0688\u0687\u0001\u0000\u0000\u0000\u0688\u0689\u0001\u0000\u0000"
                    + "\u0000\u0689\u06c4\u0001\u0000\u0000\u0000\u068a\u068b\u0005,\u0000\u0000"
                    + "\u068b\u0690\u0005A\u0000\u0000\u068c\u068d\u0007\u0002\u0000\u0000\u068d"
                    + "\u0691\u0003\u02da\u016d\u0000\u068e\u068f\u0005%\u0000\u0000\u068f\u0691"
                    + "\u0003\u023c\u011e\u0000\u0690\u068c\u0001\u0000\u0000\u0000\u0690\u068e"
                    + "\u0001\u0000\u0000\u0000\u0691\u06c4\u0001\u0000\u0000\u0000\u0692\u0693"
                    + "\u0005,\u0000\u0000\u0693\u0694\u0005%\u0000\u0000\u0694\u0697\u0005\u0090"
                    + "\u0000\u0000\u0695\u0696\u0007\u0007\u0000\u0000\u0696\u0698\u0003\u02da"
                    + "\u016d\u0000\u0697\u0695\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000"
                    + "\u0000\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069a\u0005\b\u0000"
                    + "\u0000\u069a\u069c\u0003\u0116\u008b\u0000\u069b\u069d\u0003\u02cc\u0166"
                    + "\u0000\u069c\u069b\u0001\u0000\u0000\u0000\u069c\u069d\u0001\u0000\u0000"
                    + "\u0000\u069d\u06c4\u0001\u0000\u0000\u0000\u069e\u069f\u0005,\u0000\u0000"
                    + "\u069f\u06a0\u0005\u009d\u0000\u0000\u06a0\u06a4\u0003\u023c\u011e\u0000"
                    + "\u06a1\u06a2\u0005\u0150\u0000\u0000\u06a2\u06a3\u0005\u016a\u0000\u0000"
                    + "\u06a3\u06a5\u0005\u0151\u0000\u0000\u06a4\u06a1\u0001\u0000\u0000\u0000"
                    + "\u06a4\u06a5\u0001\u0000\u0000\u0000\u06a5\u06c4\u0001\u0000\u0000\u0000"
                    + "\u06a6\u06a7\u0005,\u0000\u0000\u06a7\u06b3\u0005\u00bf\u0000\u0000\u06a8"
                    + "\u06a9\u0007\u0002\u0000\u0000\u06a9\u06ab\u0003\u02da\u016d\u0000\u06aa"
                    + "\u06ac\u0005\u0090\u0000\u0000\u06ab\u06aa\u0001\u0000\u0000\u0000\u06ab"
                    + "\u06ac\u0001\u0000\u0000\u0000\u06ac\u06b4\u0001\u0000\u0000\u0000\u06ad"
                    + "\u06af\u0003\u00b2Y\u0000\u06ae\u06ad\u0001\u0000\u0000\u0000\u06ae\u06af"
                    + "\u0001\u0000\u0000\u0000\u06af\u06b1\u0001\u0000\u0000\u0000\u06b0\u06b2"
                    + "\u0005\u0090\u0000\u0000\u06b1\u06b0\u0001\u0000\u0000\u0000\u06b1\u06b2"
                    + "\u0001\u0000\u0000\u0000\u06b2\u06b4\u0001\u0000\u0000\u0000\u06b3\u06a8"
                    + "\u0001\u0000\u0000\u0000\u06b3\u06ae\u0001\u0000\u0000\u0000\u06b4\u06c4"
                    + "\u0001\u0000\u0000\u0000\u06b5\u06b6\u0005,\u0000\u0000\u06b6\u06c4\u0005"
                    + "\u0101\u0000\u0000\u06b7\u06b8\u0005,\u0000\u0000\u06b8\u06c4\u0005\u0102"
                    + "\u0000\u0000\u06b9\u06ba\u0005,\u0000\u0000\u06ba\u06bb\u0005\u0106\u0000"
                    + "\u0000\u06bb\u06c4\u0005\u016a\u0000\u0000\u06bc\u06bd\u0005,\u0000\u0000"
                    + "\u06bd\u06c1\u0005\u0138\u0000\u0000\u06be\u06bf\u0005\u0139\u0000\u0000"
                    + "\u06bf\u06c2\u0003\u02da\u016d\u0000\u06c0\u06c2\u0005\u013b\u0000\u0000"
                    + "\u06c1\u06be\u0001\u0000\u0000\u0000\u06c1\u06c0\u0001\u0000\u0000\u0000"
                    + "\u06c2\u06c4\u0001\u0000\u0000\u0000\u06c3\u0648\u0001\u0000\u0000\u0000"
                    + "\u06c3\u064e\u0001\u0000\u0000\u0000\u06c3\u0659\u0001\u0000\u0000\u0000"
                    + "\u06c3\u0664\u0001\u0000\u0000\u0000\u06c3\u0670\u0001\u0000\u0000\u0000"
                    + "\u06c3\u067d\u0001\u0000\u0000\u0000\u06c3\u0684\u0001\u0000\u0000\u0000"
                    + "\u06c3\u068a\u0001\u0000\u0000\u0000\u06c3\u0692\u0001\u0000\u0000\u0000"
                    + "\u06c3\u069e\u0001\u0000\u0000\u0000\u06c3\u06a6\u0001\u0000\u0000\u0000"
                    + "\u06c3\u06b5\u0001\u0000\u0000\u0000\u06c3\u06b7\u0001\u0000\u0000\u0000"
                    + "\u06c3\u06b9\u0001\u0000\u0000\u0000\u06c3\u06bc\u0001\u0000\u0000\u0000"
                    + "\u06c4\u00bb\u0001\u0000\u0000\u0000\u06c5\u06c6\u0005\u00be\u0000\u0000"
                    + "\u06c6\u06c7\u0005%\u0000\u0000\u06c7\u06c9\u0003\u023c\u011e\u0000\u06c8"
                    + "\u06ca\u0003\u02cc\u0166\u0000\u06c9\u06c8\u0001\u0000\u0000\u0000\u06c9"
                    + "\u06ca\u0001\u0000\u0000\u0000\u06ca\u06cb\u0001\u0000\u0000\u0000\u06cb"
                    + "\u06cc\u0003\u00c0`\u0000\u06cc\u00bd\u0001\u0000\u0000\u0000\u06cd\u06ce"
                    + "\u0005\u00be\u0000\u0000\u06ce\u06cf\u0007\u0002\u0000\u0000\u06cf\u06d0"
                    + "\u0003\u02da\u016d\u0000\u06d0\u06d1\u0003\u00c0`\u0000\u06d1\u00bf\u0001"
                    + "\u0000\u0000\u0000\u06d2\u06d3\u0007\b\u0000\u0000\u06d3\u00c1\u0001\u0000"
                    + "\u0000\u0000\u06d4\u06d5\u0005\u00c0\u0000\u0000\u06d5\u06d6\u0005%\u0000"
                    + "\u0000\u06d6\u06d8\u0003\u023c\u011e\u0000\u06d7\u06d9\u0003\u02cc\u0166"
                    + "\u0000\u06d8\u06d7\u0001\u0000\u0000\u0000\u06d8\u06d9\u0001\u0000\u0000"
                    + "\u0000\u06d9\u00c3\u0001\u0000\u0000\u0000\u06da\u06db\u0005\u00c0\u0000"
                    + "\u0000\u06db\u06dc\u0007\u0002\u0000\u0000\u06dc\u06dd\u0003\u02da\u016d"
                    + "\u0000\u06dd\u00c5\u0001\u0000\u0000\u0000\u06de\u06df\u0005A\u0000\u0000"
                    + "\u06df\u06e0\u0005\u00f7\u0000\u0000\u06e0\u06e1\u0003\u02da\u016d\u0000"
                    + "\u06e1\u00c7\u0001\u0000\u0000\u0000\u06e2\u06e3\u0005I\u0000\u0000\u06e3"
                    + "\u06e4\u0005\u00f7\u0000\u0000\u06e4\u06e5\u0003\u02da\u016d\u0000\u06e5"
                    + "\u00c9\u0001\u0000\u0000\u0000\u06e6\u06e7\u0005\u00ba\u0000\u0000\u06e7"
                    + "\u06e9\u0003\u00e6s\u0000\u06e8\u06ea\u0003\u00e0p\u0000\u06e9\u06e8\u0001"
                    + "\u0000\u0000\u0000\u06e9\u06ea\u0001\u0000\u0000\u0000\u06ea\u06eb\u0001"
                    + "\u0000\u0000\u0000\u06eb\u06ec\u0005K\u0000\u0000\u06ec\u06ee\u0003\u00ec"
                    + "v\u0000\u06ed\u06ef\u0003\u00f0x\u0000\u06ee\u06ed\u0001\u0000\u0000\u0000"
                    + "\u06ee\u06ef\u0001\u0000\u0000\u0000\u06ef\u00cb\u0001\u0000\u0000\u0000"
                    + "\u06f0\u06f2\u0005\u00bb\u0000\u0000\u06f1\u06f3\u0003\u00f2y\u0000\u06f2"
                    + "\u06f1\u0001\u0000\u0000\u0000\u06f2\u06f3\u0001\u0000\u0000\u0000\u06f3"
                    + "\u06f4\u0001\u0000\u0000\u0000\u06f4\u06f6\u0003\u00e6s\u0000\u06f5\u06f7"
                    + "\u0003\u00e0p\u0000\u06f6\u06f5\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001"
                    + "\u0000\u0000\u0000\u06f7\u06f8\u0001\u0000\u0000\u0000\u06f8\u06f9\u0005"
                    + "\u0015\u0000\u0000\u06f9\u06fa\u0003\u00ecv\u0000\u06fa\u00cd\u0001\u0000"
                    + "\u0000\u0000\u06fb\u06fd\u0005\u00ba\u0000\u0000\u06fc\u06fe\u0005\u00f7"
                    + "\u0000\u0000\u06fd\u06fc\u0001\u0000\u0000\u0000\u06fd\u06fe\u0001\u0000"
                    + "\u0000\u0000\u06fe\u06ff\u0001\u0000\u0000\u0000\u06ff\u0704\u0003\u02da"
                    + "\u016d\u0000\u0700\u0701\u0005\u014e\u0000\u0000\u0701\u0703\u0003\u02da"
                    + "\u016d\u0000\u0702\u0700\u0001\u0000\u0000\u0000\u0703\u0706\u0001\u0000"
                    + "\u0000\u0000\u0704\u0702\u0001\u0000\u0000\u0000\u0704\u0705\u0001\u0000"
                    + "\u0000\u0000\u0705\u0707\u0001\u0000\u0000\u0000\u0706\u0704\u0001\u0000"
                    + "\u0000\u0000\u0707\u0708\u0005K\u0000\u0000\u0708\u070a\u0003\u00ecv\u0000"
                    + "\u0709\u070b\u0003\u00f6{\u0000\u070a\u0709\u0001\u0000\u0000\u0000\u070a"
                    + "\u070b\u0001\u0000\u0000\u0000\u070b\u00cf\u0001\u0000\u0000\u0000\u070c"
                    + "\u070e\u0005\u00bb\u0000\u0000\u070d\u070f\u0003\u00f4z\u0000\u070e\u070d"
                    + "\u0001\u0000\u0000\u0000\u070e\u070f\u0001\u0000\u0000\u0000\u070f\u0711"
                    + "\u0001\u0000\u0000\u0000\u0710\u0712\u0005\u00f7\u0000\u0000\u0711\u0710"
                    + "\u0001\u0000\u0000\u0000\u0711\u0712\u0001\u0000\u0000\u0000\u0712\u0713"
                    + "\u0001\u0000\u0000\u0000\u0713\u0718\u0003\u02da\u016d\u0000\u0714\u0715"
                    + "\u0005\u014e\u0000\u0000\u0715\u0717\u0003\u02da\u016d\u0000\u0716\u0714"
                    + "\u0001\u0000\u0000\u0000\u0717\u071a\u0001\u0000\u0000\u0000\u0718\u0716"
                    + "\u0001\u0000\u0000\u0000\u0718\u0719\u0001\u0000\u0000\u0000\u0719\u071b"
                    + "\u0001\u0000\u0000\u0000\u071a\u0718\u0001\u0000\u0000\u0000\u071b\u071c"
                    + "\u0005\u0015\u0000\u0000\u071c\u071d\u0003\u00ecv\u0000\u071d\u00d1\u0001"
                    + "\u0000\u0000\u0000\u071e\u071f\u0005,\u0000\u0000\u071f\u0720\u0005\u00f7"
                    + "\u0000\u0000\u0720\u0721\u0005\u00ba\u0000\u0000\u0721\u0722\u0003\u00ee"
                    + "w\u0000\u0722\u00d3\u0001\u0000\u0000\u0000\u0723\u0724\u0005,\u0000\u0000"
                    + "\u0724\u0725\u0005\u00f8\u0000\u0000\u0725\u00d5\u0001\u0000\u0000\u0000"
                    + "\u0726\u0727\u0005,\u0000\u0000\u0727\u0728\u0005\u00ec\u0000\u0000\u0728"
                    + "\u0729\u0005\u00f8\u0000\u0000\u0729\u00d7\u0001\u0000\u0000\u0000\u072a"
                    + "\u072b\u0005\u009b\u0000\u0000\u072b\u072f\u0005\u00f7\u0000\u0000\u072c"
                    + "\u0730\u0005\u0003\u0000\u0000\u072d\u0730\u0005\u0004\u0000\u0000\u072e"
                    + "\u0730\u0003\u02da\u016d\u0000\u072f\u072c\u0001\u0000\u0000\u0000\u072f"
                    + "\u072d\u0001\u0000\u0000\u0000\u072f\u072e\u0001\u0000\u0000\u0000\u0730"
                    + "\u00d9\u0001\u0000\u0000\u0000\u0731\u0732\u0005,\u0000\u0000\u0732\u0734"
                    + "\u0005\u00ba\u0000\u0000\u0733\u0735\u0003\u00eew\u0000\u0734\u0733\u0001"
                    + "\u0000\u0000\u0000\u0734\u0735\u0001\u0000\u0000\u0000\u0735\u0738\u0001"
                    + "\u0000\u0000\u0000\u0736\u0737\u0005\"\u0000\u0000\u0737\u0739\u0003\u00de"
                    + "o\u0000\u0738\u0736\u0001\u0000\u0000\u0000\u0738\u0739\u0001\u0000\u0000"
                    + "\u0000\u0739\u00db\u0001\u0000\u0000\u0000\u073a\u073b\u0005,\u0000\u0000"
                    + "\u073b\u073c\u0005\u00ff\u0000\u0000\u073c\u073d\u0003\u02da\u016d\u0000"
                    + "\u073d\u00dd\u0001\u0000\u0000\u0000\u073e\u0741\u0005\u0003\u0000\u0000"
                    + "\u073f\u0741\u0003\u00e4r\u0000\u0740\u073e\u0001\u0000\u0000\u0000\u0740"
                    + "\u073f\u0001\u0000\u0000\u0000\u0741\u00df\u0001\u0000\u0000\u0000\u0742"
                    + "\u0743\u0005\"\u0000\u0000\u0743\u0744\u0003\u00e2q\u0000\u0744\u00e1"
                    + "\u0001\u0000\u0000\u0000\u0745\u0746\u0007\u0002\u0000\u0000\u0746\u0753"
                    + "\u0003\u02da\u016d\u0000\u0747\u0749\u0005%\u0000\u0000\u0748\u0747\u0001"
                    + "\u0000\u0000\u0000\u0748\u0749\u0001\u0000\u0000\u0000\u0749\u074a\u0001"
                    + "\u0000\u0000\u0000\u074a\u074c\u0003\u023c\u011e\u0000\u074b\u074d\u0003"
                    + "\u02cc\u0166\u0000\u074c\u074b\u0001\u0000\u0000\u0000\u074c\u074d\u0001"
                    + "\u0000\u0000\u0000\u074d\u0753\u0001\u0000\u0000\u0000\u074e\u074f\u0005"
                    + "\u00fb\u0000\u0000\u074f\u0753\u0005\u016a\u0000\u0000\u0750\u0751\u0005"
                    + "\u00fc\u0000\u0000\u0751\u0753\u0003\u02da\u016d\u0000\u0752\u0745\u0001"
                    + "\u0000\u0000\u0000\u0752\u0748\u0001\u0000\u0000\u0000\u0752\u074e\u0001"
                    + "\u0000\u0000\u0000\u0752\u0750\u0001\u0000\u0000\u0000\u0753\u00e3\u0001"
                    + "\u0000\u0000\u0000\u0754\u0755\u0007\u0002\u0000\u0000\u0755\u0768\u0003"
                    + "\u02da\u016d\u0000\u0756\u0758\u0005%\u0000\u0000\u0757\u0756\u0001\u0000"
                    + "\u0000\u0000\u0757\u0758\u0001\u0000\u0000\u0000\u0758\u0759\u0001\u0000"
                    + "\u0000\u0000\u0759\u075e\u0003\u023c\u011e\u0000\u075a\u075b\u0005\u0150"
                    + "\u0000\u0000\u075b\u075c\u0003\u014a\u00a5\u0000\u075c\u075d\u0005\u0151"
                    + "\u0000\u0000\u075d\u075f\u0001\u0000\u0000\u0000\u075e\u075a\u0001\u0000"
                    + "\u0000\u0000\u075e\u075f\u0001\u0000\u0000\u0000\u075f\u0761\u0001\u0000"
                    + "\u0000\u0000\u0760\u0762\u0003\u02cc\u0166\u0000\u0761\u0760\u0001\u0000"
                    + "\u0000\u0000\u0761\u0762\u0001\u0000\u0000\u0000\u0762\u0768\u0001\u0000"
                    + "\u0000\u0000\u0763\u0764\u0005\u00fb\u0000\u0000\u0764\u0768\u0005\u016a"
                    + "\u0000\u0000\u0765\u0766\u0005\u00fc\u0000\u0000\u0766\u0768\u0003\u02da"
                    + "\u016d\u0000\u0767\u0754\u0001\u0000\u0000\u0000\u0767\u0757\u0001\u0000"
                    + "\u0000\u0000\u0767\u0763\u0001\u0000\u0000\u0000\u0767\u0765\u0001\u0000"
                    + "\u0000\u0000\u0768\u00e5\u0001\u0000\u0000\u0000\u0769\u076e\u0003\u00e8"
                    + "t\u0000\u076a\u076b\u0005\u014e\u0000\u0000\u076b\u076d\u0003\u00e8t\u0000"
                    + "\u076c\u076a\u0001\u0000\u0000\u0000\u076d\u0770\u0001\u0000\u0000\u0000"
                    + "\u076e\u076c\u0001\u0000\u0000\u0000\u076e\u076f\u0001\u0000\u0000\u0000"
                    + "\u076f\u00e7\u0001\u0000\u0000\u0000\u0770\u076e\u0001\u0000\u0000\u0000"
                    + "\u0771\u0776\u0003\u00eau\u0000\u0772\u0773\u0005\u0150\u0000\u0000\u0773"
                    + "\u0774\u0003\u014a\u00a5\u0000\u0774\u0775\u0005\u0151\u0000\u0000\u0775"
                    + "\u0777\u0001\u0000\u0000\u0000\u0776\u0772\u0001\u0000\u0000\u0000\u0776"
                    + "\u0777\u0001\u0000\u0000\u0000\u0777\u00e9\u0001\u0000\u0000\u0000\u0778"
                    + "\u0779\u0007\t\u0000\u0000\u0779\u00eb\u0001\u0000\u0000\u0000\u077a\u077f"
                    + "\u0003\u00eew\u0000\u077b\u077c\u0005\u014e\u0000\u0000\u077c\u077e\u0003"
                    + "\u00eew\u0000\u077d\u077b\u0001\u0000\u0000\u0000\u077e\u0781\u0001\u0000"
                    + "\u0000\u0000\u077f\u077d\u0001\u0000\u0000\u0000\u077f\u0780\u0001\u0000"
                    + "\u0000\u0000\u0780\u00ed\u0001\u0000\u0000\u0000\u0781\u077f\u0001\u0000"
                    + "\u0000\u0000\u0782\u0783\u0005\u00f6\u0000\u0000\u0783\u0789\u0003\u02de"
                    + "\u016f\u0000\u0784\u0785\u0005\u0011\u0000\u0000\u0785\u0789\u0003\u02de"
                    + "\u016f\u0000\u0786\u0787\u0005\u00f7\u0000\u0000\u0787\u0789\u0003\u02da"
                    + "\u016d\u0000\u0788\u0782\u0001\u0000\u0000\u0000\u0788\u0784\u0001\u0000"
                    + "\u0000\u0000\u0788\u0786\u0001\u0000\u0000\u0000\u0789\u00ef\u0001\u0000"
                    + "\u0000\u0000\u078a\u078b\u0005\u0095\u0000\u0000\u078b\u078c\u0005\u00ba"
                    + "\u0000\u0000\u078c\u078d\u0005\u00dd\u0000\u0000\u078d\u00f1\u0001\u0000"
                    + "\u0000\u0000\u078e\u078f\u0005\u00ba\u0000\u0000\u078f\u0790\u0005\u00dd"
                    + "\u0000\u0000\u0790\u0791\u0005\u00e7\u0000\u0000\u0791\u00f3\u0001\u0000"
                    + "\u0000\u0000\u0792\u0793\u0005\u00fd\u0000\u0000\u0793\u0794\u0005\u00dd"
                    + "\u0000\u0000\u0794\u0795\u0005\u00e7\u0000\u0000\u0795\u00f5\u0001\u0000"
                    + "\u0000\u0000\u0796\u0797\u0005\u0095\u0000\u0000\u0797\u0798\u0005\u00fd"
                    + "\u0000\u0000\u0798\u0799\u0005\u00dd\u0000\u0000\u0799\u00f7\u0001\u0000"
                    + "\u0000\u0000\u079a\u079c\u0005-\u0000\u0000\u079b\u079d\u0005.\u0000\u0000"
                    + "\u079c\u079b\u0001\u0000\u0000\u0000\u079c\u079d\u0001\u0000\u0000\u0000"
                    + "\u079d\u07a7\u0001\u0000\u0000\u0000\u079e\u079f\u0005%\u0000\u0000\u079f"
                    + "\u07a2\u0003\u023c\u011e\u0000\u07a0\u07a1\u0007\n\u0000\u0000\u07a1\u07a3"
                    + "\u0005$\u0000\u0000\u07a2\u07a0\u0001\u0000\u0000\u0000\u07a2\u07a3\u0001"
                    + "\u0000\u0000\u0000\u07a3\u07a8\u0001\u0000\u0000\u0000\u07a4\u07a6\u0003"
                    + "\u02cc\u0166\u0000\u07a5\u07a4\u0001\u0000\u0000\u0000\u07a5\u07a6\u0001"
                    + "\u0000\u0000\u0000\u07a6\u07a8\u0001\u0000\u0000\u0000\u07a7\u079e\u0001"
                    + "\u0000\u0000\u0000\u07a7\u07a5\u0001\u0000\u0000\u0000\u07a8\u00f9\u0001"
                    + "\u0000\u0000\u0000\u07a9\u07ae\u0003\u00fc~\u0000\u07aa\u07ab\u0005\u014e"
                    + "\u0000\u0000\u07ab\u07ad\u0003\u00fc~\u0000\u07ac\u07aa\u0001\u0000\u0000"
                    + "\u0000\u07ad\u07b0\u0001\u0000\u0000\u0000\u07ae\u07ac\u0001\u0000\u0000"
                    + "\u0000\u07ae\u07af\u0001\u0000\u0000\u0000\u07af\u00fb\u0001\u0000\u0000"
                    + "\u0000\u07b0\u07ae\u0001\u0000\u0000\u0000\u07b1\u07b2\u0003\u00fe\u007f"
                    + "\u0000\u07b2\u07b3\u0005\u016a\u0000\u0000\u07b3\u00fd\u0001\u0000\u0000"
                    + "\u0000\u07b4\u07b5\u0007\u000b\u0000\u0000\u07b5\u00ff\u0001\u0000\u0000"
                    + "\u0000\u07b6\u07b8\u0005A\u0000\u0000\u07b7\u07b9\u0005\u008a\u0000\u0000"
                    + "\u07b8\u07b7\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001\u0000\u0000\u0000"
                    + "\u07b9\u07ba\u0001\u0000\u0000\u0000\u07ba\u07bb\u0005\u008b\u0000\u0000"
                    + "\u07bb\u07bc\u0003\u02dc\u016e\u0000\u07bc\u07bd\u0005\u0016\u0000\u0000"
                    + "\u07bd\u07c0\u0005\u016a\u0000\u0000\u07be\u07bf\u00052\u0000\u0000\u07bf"
                    + "\u07c1\u0003\u00fa}\u0000\u07c0\u07be\u0001\u0000\u0000\u0000\u07c0\u07c1"
                    + "\u0001\u0000\u0000\u0000\u07c1\u0101\u0001\u0000\u0000\u0000\u07c2\u07c4"
                    + "\u0005I\u0000\u0000\u07c3\u07c5\u0005\u008a\u0000\u0000\u07c4\u07c3\u0001"
                    + "\u0000\u0000\u0000\u07c4\u07c5\u0001\u0000\u0000\u0000\u07c5\u07c6\u0001"
                    + "\u0000\u0000\u0000\u07c6\u07c8\u0005\u008b\u0000\u0000\u07c7\u07c9\u0003"
                    + "$\u0012\u0000\u07c8\u07c7\u0001\u0000\u0000\u0000\u07c8\u07c9\u0001\u0000"
                    + "\u0000\u0000\u07c9\u07ca\u0001\u0000\u0000\u0000\u07ca\u07cb\u0003\u02dc"
                    + "\u016e\u0000\u07cb\u0103\u0001\u0000\u0000\u0000\u07cc\u07cd\u0005\u0108"
                    + "\u0000\u0000\u07cd\u07ce\u0005\u008b\u0000\u0000\u07ce\u0105\u0001\u0000"
                    + "\u0000\u0000\u07cf\u07d0\u0005A\u0000\u0000\u07d0\u07d1\u0005\u008a\u0000"
                    + "\u0000\u07d1\u07d2\u0005\u008c\u0000\u0000\u07d2\u07d3\u0005\u0170\u0000"
                    + "\u0000\u07d3\u07d5\u0005\u0150\u0000\u0000\u07d4\u07d6\u0003\u0144\u00a2"
                    + "\u0000\u07d5\u07d4\u0001\u0000\u0000\u0000\u07d5\u07d6\u0001\u0000\u0000"
                    + "\u0000\u07d6\u07d7\u0001\u0000\u0000\u0000\u07d7\u07d8\u0005\u0151\u0000"
                    + "\u0000\u07d8\u07d9\u0003\u02be\u015f\u0000\u07d9\u0107\u0001\u0000\u0000"
                    + "\u0000\u07da\u07db\u0005I\u0000\u0000\u07db\u07dc\u0005\u008a\u0000\u0000"
                    + "\u07dc\u07de\u0005\u008c\u0000\u0000\u07dd\u07df\u0003$\u0012\u0000\u07de"
                    + "\u07dd\u0001\u0000\u0000\u0000\u07de\u07df\u0001\u0000\u0000\u0000\u07df"
                    + "\u07e0\u0001\u0000\u0000\u0000\u07e0\u07e1\u0005\u0170\u0000\u0000\u07e1"
                    + "\u0109\u0001\u0000\u0000\u0000\u07e2\u07e4\u0005A\u0000\u0000\u07e3\u07e5"
                    + "\u00030\u0018\u0000\u07e4\u07e3\u0001\u0000\u0000\u0000\u07e4\u07e5\u0001"
                    + "\u0000\u0000\u0000\u07e5\u07e6\u0001\u0000\u0000\u0000\u07e6\u07e8\u0005"
                    + "\u00b2\u0000\u0000\u07e7\u07e9\u0003(\u0014\u0000\u07e8\u07e7\u0001\u0000"
                    + "\u0000\u0000\u07e8\u07e9\u0001\u0000\u0000\u0000\u07e9\u07ea\u0001\u0000"
                    + "\u0000\u0000\u07ea\u07ef\u0003\u023c\u011e\u0000\u07eb\u07ec\u0005\u0150"
                    + "\u0000\u0000\u07ec\u07ed\u0003\u017a\u00bd\u0000\u07ed\u07ee\u0005\u0151"
                    + "\u0000\u0000\u07ee\u07f0\u0001\u0000\u0000\u0000\u07ef\u07eb\u0001\u0000"
                    + "\u0000\u0000\u07ef\u07f0\u0001\u0000\u0000\u0000\u07f0\u07f2\u0001\u0000"
                    + "\u0000\u0000\u07f1\u07f3\u0003\u0118\u008c\u0000\u07f2\u07f1\u0001\u0000"
                    + "\u0000\u0000\u07f2\u07f3\u0001\u0000\u0000\u0000\u07f3\u07f5\u0001\u0000"
                    + "\u0000\u0000\u07f4\u07f6\u0003\u010e\u0087\u0000\u07f5\u07f4\u0001\u0000"
                    + "\u0000\u0000\u07f5\u07f6\u0001\u0000\u0000\u0000\u07f6\u07f8\u0001\u0000"
                    + "\u0000\u0000\u07f7\u07f9\u0003\u012c\u0096\u0000\u07f8\u07f7\u0001\u0000"
                    + "\u0000\u0000\u07f8\u07f9\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000"
                    + "\u0000\u0000\u07fa\u07fb\u0005\u0016\u0000\u0000\u07fb\u07fc\u0003\u01c2"
                    + "\u00e1\u0000\u07fc\u010b\u0001\u0000\u0000\u0000\u07fd\u07fe\u0005A\u0000"
                    + "\u0000\u07fe\u07ff\u0005\u00b7\u0000\u0000\u07ff\u0801\u0005\u00b2\u0000"
                    + "\u0000\u0800\u0802\u0003(\u0014\u0000\u0801\u0800\u0001\u0000\u0000\u0000"
                    + "\u0801\u0802\u0001\u0000\u0000\u0000\u0802\u0803\u0001\u0000\u0000\u0000"
                    + "\u0803\u0805\u0003\u023c\u011e\u0000\u0804\u0806\u0003,\u0016\u0000\u0805"
                    + "\u0804\u0001\u0000\u0000\u0000\u0805\u0806\u0001\u0000\u0000\u0000\u0806"
                    + "\u0808\u0001\u0000\u0000\u0000\u0807\u0809\u0003\u0118\u008c\u0000\u0808"
                    + "\u0807\u0001\u0000\u0000\u0000\u0808\u0809\u0001\u0000\u0000\u0000\u0809"
                    + "\u080b\u0001\u0000\u0000\u0000\u080a\u080c\u0003\u012a\u0095\u0000\u080b"
                    + "\u080a\u0001\u0000\u0000\u0000\u080b\u080c\u0001\u0000\u0000\u0000\u080c"
                    + "\u080e\u0001\u0000\u0000\u0000\u080d\u080f\u0003\u0140\u00a0\u0000\u080e"
                    + "\u080d\u0001\u0000\u0000\u0000\u080e\u080f\u0001\u0000\u0000\u0000\u080f"
                    + "\u0811\u0001\u0000\u0000\u0000\u0810\u0812\u0003\u0142\u00a1\u0000\u0811"
                    + "\u0810\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812"
                    + "\u0814\u0001\u0000\u0000\u0000\u0813\u0815\u0003\u012c\u0096\u0000\u0814"
                    + "\u0813\u0001\u0000\u0000\u0000\u0814\u0815\u0001\u0000\u0000\u0000\u0815"
                    + "\u0816\u0001\u0000\u0000\u0000\u0816\u0817\u0005\u0016\u0000\u0000\u0817"
                    + "\u0818\u0003\u01c2\u00e1\u0000\u0818\u010d\u0001\u0000\u0000\u0000\u0819"
                    + "\u081a\u0005e\u0000\u0000\u081a\u081b\u0005\"\u0000\u0000\u081b\u081c"
                    + "\u0005\u0150\u0000\u0000\u081c\u081d\u0003\u014a\u00a5\u0000\u081d\u081e"
                    + "\u0005\u0151\u0000\u0000\u081e\u010f\u0001\u0000\u0000\u0000\u081f\u0820"
                    + "\u0005I\u0000\u0000\u0820\u0822\u0005\u00b2\u0000\u0000\u0821\u0823\u0003"
                    + "$\u0012\u0000\u0822\u0821\u0001\u0000\u0000\u0000\u0822\u0823\u0001\u0000"
                    + "\u0000\u0000\u0823\u0824\u0001\u0000\u0000\u0000\u0824\u0825\u0003\u023e"
                    + "\u011f\u0000\u0825\u0111\u0001\u0000\u0000\u0000\u0826\u0827\u0005I\u0000"
                    + "\u0000\u0827\u0828\u0005\u00b7\u0000\u0000\u0828\u082a\u0005\u00b2\u0000"
                    + "\u0000\u0829\u082b\u0003$\u0012\u0000\u082a\u0829\u0001\u0000\u0000\u0000"
                    + "\u082a\u082b\u0001\u0000\u0000\u0000\u082b\u082c\u0001\u0000\u0000\u0000"
                    + "\u082c\u082d\u0003\u023e\u011f\u0000\u082d\u0113\u0001\u0000\u0000\u0000"
                    + "\u082e\u0831\u0003\u02dc\u016e\u0000\u082f\u0831\u0005\u016a\u0000\u0000"
                    + "\u0830\u082e\u0001\u0000\u0000\u0000\u0830\u082f\u0001\u0000\u0000\u0000"
                    + "\u0831\u0115\u0001\u0000\u0000\u0000\u0832\u0835\u0003\u02da\u016d\u0000"
                    + "\u0833\u0835\u0005\u016a\u0000\u0000\u0834\u0832\u0001\u0000\u0000\u0000"
                    + "\u0834\u0833\u0001\u0000\u0000\u0000\u0835\u0117\u0001\u0000\u0000\u0000"
                    + "\u0836\u0837\u0005L\u0000\u0000\u0837\u0838\u0005\u016a\u0000\u0000\u0838"
                    + "\u0119\u0001\u0000\u0000\u0000\u0839\u083a\u0005e\u0000\u0000\u083a\u083b"
                    + "\u0005\u0012\u0000\u0000\u083b\u083c\u0005\u0150\u0000\u0000\u083c\u0841"
                    + "\u0003\u0186\u00c3\u0000\u083d\u083e\u0005\u014e\u0000\u0000\u083e\u0840"
                    + "\u0003\u0186\u00c3\u0000\u083f\u083d\u0001\u0000\u0000\u0000\u0840\u0843"
                    + "\u0001\u0000\u0000\u0000\u0841\u083f\u0001\u0000\u0000\u0000\u0841\u0842"
                    + "\u0001\u0000\u0000\u0000\u0842\u0844\u0001\u0000\u0000\u0000\u0843";
    private static final String _serializedATNSegment1 =
            "\u0841\u0001\u0000\u0000\u0000\u0844\u0845\u0005\u0151\u0000\u0000\u0845"
                    + "\u011b\u0001\u0000\u0000\u0000\u0846\u0847\u0005f\u0000\u0000\u0847\u0848"
                    + "\u0005\u0012\u0000\u0000\u0848\u0849\u0005\u0150\u0000\u0000\u0849\u084a"
                    + "\u0003\u014a\u00a5\u0000\u084a\u0851\u0005\u0151\u0000\u0000\u084b\u084c"
                    + "\u0005g\u0000\u0000\u084c\u084d\u0005\u0012\u0000\u0000\u084d\u084e\u0005"
                    + "\u0150\u0000\u0000\u084e\u084f\u0003\u0150\u00a8\u0000\u084f\u0850\u0005"
                    + "\u0151\u0000\u0000\u0850\u0852\u0001\u0000\u0000\u0000\u0851\u084b\u0001"
                    + "\u0000\u0000\u0000\u0851\u0852\u0001\u0000\u0000\u0000\u0852\u0853\u0001"
                    + "\u0000\u0000\u0000\u0853\u0854\u0005h\u0000\u0000\u0854\u0855\u0005\u016f"
                    + "\u0000\u0000\u0855\u0856\u0005i\u0000\u0000\u0856\u011d\u0001\u0000\u0000"
                    + "\u0000\u0857\u0858\u0005\u00e3\u0000\u0000\u0858\u0859\u0005\u0012\u0000"
                    + "\u0000\u0859\u085a\u0005\u0150\u0000\u0000\u085a\u085b\u0003\u014a\u00a5"
                    + "\u0000\u085b\u085c\u0005\u0151\u0000\u0000\u085c\u085d\u0005\"\u0000\u0000"
                    + "\u085d\u085e\u0005\u0150\u0000\u0000\u085e\u085f\u0003\u0168\u00b4\u0000"
                    + "\u085f\u0861\u0005\u0151\u0000\u0000\u0860\u0862\u0003.\u0017\u0000\u0861"
                    + "\u0860\u0001\u0000\u0000\u0000\u0861\u0862\u0001\u0000\u0000\u0000\u0862"
                    + "\u011f\u0001\u0000\u0000\u0000\u0863\u0866\u0003\u0126\u0093\u0000\u0864"
                    + "\u0866\u0003\u0128\u0094\u0000\u0865\u0863\u0001\u0000\u0000\u0000\u0865"
                    + "\u0864\u0001\u0000\u0000\u0000\u0866\u0121\u0001\u0000\u0000\u0000\u0867"
                    + "\u0868\u0005\u00d3\u0000\u0000\u0868\u0869\u0005\u016a\u0000\u0000\u0869"
                    + "\u0123\u0001\u0000\u0000\u0000\u086a\u086b\u0005\u00d4\u0000\u0000\u086b"
                    + "\u086c\u0005\u016a\u0000\u0000\u086c\u0125\u0001\u0000\u0000\u0000\u086d"
                    + "\u086e\u0005j\u0000\u0000\u086e\u086f\u0005l\u0000\u0000\u086f\u0870\u0005"
                    + "\u0094\u0000\u0000\u0870\u0874\u0005\u016a\u0000\u0000\u0871\u0872\u0005"
                    + "\u0095\u0000\u0000\u0872\u0873\u0005\u0097\u0000\u0000\u0873\u0875\u0003"
                    + "\u012e\u0097\u0000\u0874\u0871\u0001\u0000\u0000\u0000\u0874\u0875\u0001"
                    + "\u0000\u0000\u0000\u0875\u0127\u0001\u0000\u0000\u0000\u0876\u0877\u0005"
                    + "j\u0000\u0000\u0877\u0878\u0005l\u0000\u0000\u0878\u087a\u0005m\u0000"
                    + "\u0000\u0879\u087b\u0003\u0136\u009b\u0000\u087a\u0879\u0001\u0000\u0000"
                    + "\u0000\u087a\u087b\u0001\u0000\u0000\u0000\u087b\u087d\u0001\u0000\u0000"
                    + "\u0000\u087c\u087e\u0003\u0138\u009c\u0000\u087d\u087c\u0001\u0000\u0000"
                    + "\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e\u0880\u0001\u0000\u0000"
                    + "\u0000\u087f\u0881\u0003\u013a\u009d\u0000\u0880\u087f\u0001\u0000\u0000"
                    + "\u0000\u0880\u0881\u0001\u0000\u0000\u0000\u0881\u0883\u0001\u0000\u0000"
                    + "\u0000\u0882\u0884\u0003\u013c\u009e\u0000\u0883\u0882\u0001\u0000\u0000"
                    + "\u0000\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0886\u0001\u0000\u0000"
                    + "\u0000\u0885\u0887\u0003\u013e\u009f\u0000\u0886\u0885\u0001\u0000\u0000"
                    + "\u0000\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u0129\u0001\u0000\u0000"
                    + "\u0000\u0888\u088b\u0003\u0128\u0094\u0000\u0889\u088b\u0003\u0126\u0093"
                    + "\u0000\u088a\u0888\u0001\u0000\u0000\u0000\u088a\u0889\u0001\u0000\u0000"
                    + "\u0000\u088b\u012b\u0001\u0000\u0000\u0000\u088c\u088d\u0005\u009d\u0000"
                    + "\u0000\u088d\u088e\u0003\u012e\u0097\u0000\u088e\u012d\u0001\u0000\u0000"
                    + "\u0000\u088f\u0890\u0005\u0150\u0000\u0000\u0890\u0891\u0003\u0130\u0098"
                    + "\u0000\u0891\u0892\u0005\u0151\u0000\u0000\u0892\u012f\u0001\u0000\u0000"
                    + "\u0000\u0893\u0898\u0003\u0132\u0099\u0000\u0894\u0895\u0005\u014e\u0000"
                    + "\u0000\u0895\u0897\u0003\u0132\u0099\u0000\u0896\u0894\u0001\u0000\u0000"
                    + "\u0000\u0897\u089a\u0001\u0000\u0000\u0000\u0898\u0896\u0001\u0000\u0000"
                    + "\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u08a4\u0001\u0000\u0000"
                    + "\u0000\u089a\u0898\u0001\u0000\u0000\u0000\u089b\u08a0\u0003\u0134\u009a"
                    + "\u0000\u089c\u089d\u0005\u014e\u0000\u0000\u089d\u089f\u0003\u0134\u009a"
                    + "\u0000\u089e\u089c\u0001\u0000\u0000\u0000\u089f\u08a2\u0001\u0000\u0000"
                    + "\u0000\u08a0\u089e\u0001\u0000\u0000\u0000\u08a0\u08a1\u0001\u0000\u0000"
                    + "\u0000\u08a1\u08a4\u0001\u0000\u0000\u0000\u08a2\u08a0\u0001\u0000\u0000"
                    + "\u0000\u08a3\u0893\u0001\u0000\u0000\u0000\u08a3\u089b\u0001\u0000\u0000"
                    + "\u0000\u08a4\u0131\u0001\u0000\u0000\u0000\u08a5\u08a6\u0005\u016a\u0000"
                    + "\u0000\u08a6\u08a7\u0005\u0156\u0000\u0000\u08a7\u08a8\u0005\u016a\u0000"
                    + "\u0000\u08a8\u0133\u0001\u0000\u0000\u0000\u08a9\u08aa\u0005\u016a\u0000"
                    + "\u0000\u08aa\u0135\u0001\u0000\u0000\u0000\u08ab\u08ac\u0005n\u0000\u0000"
                    + "\u08ac\u08ad\u0005o\u0000\u0000\u08ad\u08ae\u0005\u0012\u0000\u0000\u08ae"
                    + "\u08b2\u0005\u016a\u0000\u0000\u08af\u08b0\u0005p\u0000\u0000\u08b0\u08b1"
                    + "\u0005\u0012\u0000\u0000\u08b1\u08b3\u0005\u016a\u0000\u0000\u08b2\u08af"
                    + "\u0001\u0000\u0000\u0000\u08b2\u08b3\u0001\u0000\u0000\u0000\u08b3\u0137"
                    + "\u0001\u0000\u0000\u0000\u08b4\u08b5\u0005q\u0000\u0000\u08b5\u08b6\u0005"
                    + "r\u0000\u0000\u08b6\u08b7\u0005o\u0000\u0000\u08b7\u08b8\u0005\u0012\u0000"
                    + "\u0000\u08b8\u08b9\u0005\u016a\u0000\u0000\u08b9\u0139\u0001\u0000\u0000"
                    + "\u0000\u08ba\u08bb\u0005b\u0000\u0000\u08bb\u08bc\u0005s\u0000\u0000\u08bc"
                    + "\u08bd\u0005o\u0000\u0000\u08bd\u08be\u0005\u0012\u0000\u0000\u08be\u08bf"
                    + "\u0005\u016a\u0000\u0000\u08bf\u013b\u0001\u0000\u0000\u0000\u08c0\u08c1"
                    + "\u0005v\u0000\u0000\u08c1\u08c2\u0005o\u0000\u0000\u08c2\u08c3\u0005\u0012"
                    + "\u0000\u0000\u08c3\u08c4\u0005\u016a\u0000\u0000\u08c4\u013d\u0001\u0000"
                    + "\u0000\u0000\u08c5\u08c6\u0005@\u0000\u0000\u08c6\u08c7\u0005\u00a1\u0000"
                    + "\u0000\u08c7\u08c8\u0005\u0016\u0000\u0000\u08c8\u08c9\u0005\u016a\u0000"
                    + "\u0000\u08c9\u013f\u0001\u0000\u0000\u0000\u08ca\u08cb\u0005w\u0000\u0000"
                    + "\u08cb\u08cc\u0005\u0016\u0000\u0000\u08cc\u08cd\u0005y\u0000\u0000\u08cd"
                    + "\u08ce\u0005\u016a\u0000\u0000\u08ce\u08cf\u0005z\u0000\u0000\u08cf\u08d4"
                    + "\u0005\u016a\u0000\u0000\u08d0\u08d1\u0005{\u0000\u0000\u08d1\u08d2\u0005"
                    + "\u016a\u0000\u0000\u08d2\u08d3\u0005|\u0000\u0000\u08d3\u08d5\u0005\u016a"
                    + "\u0000\u0000\u08d4\u08d0\u0001\u0000\u0000\u0000\u08d4\u08d5\u0001\u0000"
                    + "\u0000\u0000\u08d5\u08e2\u0001\u0000\u0000\u0000\u08d6\u08d7\u0005w\u0000"
                    + "\u0000\u08d7\u08d8\u0005\u0012\u0000\u0000\u08d8\u08dc\u0005\u016a\u0000"
                    + "\u0000\u08d9\u08da\u0005\u0095\u0000\u0000\u08da\u08db\u0005\u0097\u0000"
                    + "\u0000\u08db\u08dd\u0003\u012e\u0097\u0000\u08dc\u08d9\u0001\u0000\u0000"
                    + "\u0000\u08dc\u08dd\u0001\u0000\u0000\u0000\u08dd\u08e2\u0001\u0000\u0000"
                    + "\u0000\u08de\u08df\u0005w\u0000\u0000\u08df\u08e0\u0005\u0016\u0000\u0000"
                    + "\u08e0\u08e2\u0003\u02da\u016d\u0000\u08e1\u08ca\u0001\u0000\u0000\u0000"
                    + "\u08e1\u08d6\u0001\u0000\u0000\u0000\u08e1\u08de\u0001\u0000\u0000\u0000"
                    + "\u08e2\u0141\u0001\u0000\u0000\u0000\u08e3\u08e4\u0005\u007f\u0000\u0000"
                    + "\u08e4\u08e5\u0005\u016a\u0000\u0000\u08e5\u0143\u0001\u0000\u0000\u0000"
                    + "\u08e6\u08eb\u0003\u0180\u00c0\u0000\u08e7\u08e8\u0005\u014e\u0000\u0000"
                    + "\u08e8\u08ea\u0003\u0180\u00c0\u0000\u08e9\u08e7\u0001\u0000\u0000\u0000"
                    + "\u08ea\u08ed\u0001\u0000\u0000\u0000\u08eb\u08e9\u0001\u0000\u0000\u0000"
                    + "\u08eb\u08ec\u0001\u0000\u0000\u0000\u08ec\u0145\u0001\u0000\u0000\u0000"
                    + "\u08ed\u08eb\u0001\u0000\u0000\u0000\u08ee\u08f3\u0003\u0182\u00c1\u0000"
                    + "\u08ef\u08f0\u0005\u014e\u0000\u0000\u08f0\u08f2\u0003\u0182\u00c1\u0000"
                    + "\u08f1\u08ef\u0001\u0000\u0000\u0000\u08f2\u08f5\u0001\u0000\u0000\u0000"
                    + "\u08f3\u08f1\u0001\u0000\u0000\u0000\u08f3\u08f4\u0001\u0000\u0000\u0000"
                    + "\u08f4\u0147\u0001\u0000\u0000\u0000\u08f5\u08f3\u0001\u0000\u0000\u0000"
                    + "\u08f6\u08fb\u0003\u019a\u00cd\u0000\u08f7\u08f8\u0005\u014e\u0000\u0000"
                    + "\u08f8\u08fa\u0003\u019a\u00cd\u0000\u08f9\u08f7\u0001\u0000\u0000\u0000"
                    + "\u08fa\u08fd\u0001\u0000\u0000\u0000\u08fb\u08f9\u0001\u0000\u0000\u0000"
                    + "\u08fb\u08fc\u0001\u0000\u0000\u0000\u08fc\u0149\u0001\u0000\u0000\u0000"
                    + "\u08fd\u08fb\u0001\u0000\u0000\u0000\u08fe\u0903\u0003\u014c\u00a6\u0000"
                    + "\u08ff\u0900\u0005\u014e\u0000\u0000\u0900\u0902\u0003\u014c\u00a6\u0000"
                    + "\u0901\u08ff\u0001\u0000\u0000\u0000\u0902\u0905\u0001\u0000\u0000\u0000"
                    + "\u0903\u0901\u0001\u0000\u0000\u0000\u0903\u0904\u0001\u0000\u0000\u0000"
                    + "\u0904\u014b\u0001\u0000\u0000\u0000\u0905\u0903\u0001\u0000\u0000\u0000"
                    + "\u0906\u0907\u0003\u02da\u016d\u0000\u0907\u014d\u0001\u0000\u0000\u0000"
                    + "\u0908\u0912\u0003\u02da\u016d\u0000\u0909\u090e\u0005\u014c\u0000\u0000"
                    + "\u090a\u090f\u0005\u00a0\u0000\u0000\u090b\u090f\u0005t\u0000\u0000\u090c"
                    + "\u090f\u0005\u009f\u0000\u0000\u090d\u090f\u0003\u02da\u016d\u0000\u090e"
                    + "\u090a\u0001\u0000\u0000\u0000\u090e\u090b\u0001\u0000\u0000\u0000\u090e"
                    + "\u090c\u0001\u0000\u0000\u0000\u090e\u090d\u0001\u0000\u0000\u0000\u090f"
                    + "\u0911\u0001\u0000\u0000\u0000\u0910\u0909\u0001\u0000\u0000\u0000\u0911"
                    + "\u0914\u0001\u0000\u0000\u0000\u0912\u0910\u0001\u0000\u0000\u0000\u0912"
                    + "\u0913\u0001\u0000\u0000\u0000\u0913\u014f\u0001\u0000\u0000\u0000\u0914"
                    + "\u0912\u0001\u0000\u0000\u0000\u0915\u091a\u0003\u0178\u00bc\u0000\u0916"
                    + "\u0917\u0005\u014e\u0000\u0000\u0917\u0919\u0003\u0178\u00bc\u0000\u0918"
                    + "\u0916\u0001\u0000\u0000\u0000\u0919\u091c\u0001\u0000\u0000\u0000\u091a"
                    + "\u0918\u0001\u0000\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000\u091b"
                    + "\u0151\u0001\u0000\u0000\u0000\u091c\u091a\u0001\u0000\u0000\u0000\u091d"
                    + "\u091e\u0005\u0150\u0000\u0000\u091e\u091f\u0003\u014a\u00a5\u0000\u091f"
                    + "\u0920\u0005\u0151\u0000\u0000\u0920\u0153\u0001\u0000\u0000\u0000\u0921"
                    + "\u0923\u0003\u0156\u00ab\u0000\u0922\u0924\u0003\u0158\u00ac\u0000\u0923"
                    + "\u0922\u0001\u0000\u0000\u0000\u0923\u0924\u0001\u0000\u0000\u0000\u0924"
                    + "\u0927\u0001\u0000\u0000\u0000\u0925\u0927\u0003\u015a\u00ad\u0000\u0926"
                    + "\u0921\u0001\u0000\u0000\u0000\u0926\u0925\u0001\u0000\u0000\u0000\u0927"
                    + "\u0155\u0001\u0000\u0000\u0000\u0928\u0929\u0007\f\u0000\u0000\u0929\u0157"
                    + "\u0001\u0000\u0000\u0000\u092a\u092b\u0007\r\u0000\u0000\u092b\u0159\u0001"
                    + "\u0000\u0000\u0000\u092c\u0930\u0005\u0123\u0000\u0000\u092d\u092e\u0005"
                    + "\u0007\u0000\u0000\u092e\u0930\u0005\u0123\u0000\u0000\u092f\u092c\u0001"
                    + "\u0000\u0000\u0000\u092f\u092d\u0001\u0000\u0000\u0000\u0930\u015b\u0001"
                    + "\u0000\u0000\u0000\u0931\u0936\u0005\u0126\u0000\u0000\u0932\u0934\u0005"
                    + "\u0127\u0000\u0000\u0933\u0932\u0001\u0000\u0000\u0000\u0933\u0934\u0001"
                    + "\u0000\u0000\u0000\u0934\u0936\u0001\u0000\u0000\u0000\u0935\u0931\u0001"
                    + "\u0000\u0000\u0000\u0935\u0933\u0001\u0000\u0000\u0000\u0936\u015d\u0001"
                    + "\u0000\u0000\u0000\u0937\u0938\u0005\u0122\u0000\u0000\u0938\u093a\u0003"
                    + "\u02da\u016d\u0000\u0939\u0937\u0001\u0000\u0000\u0000\u0939\u093a\u0001"
                    + "\u0000\u0000\u0000\u093a\u093b\u0001\u0000\u0000\u0000\u093b\u093d\u0003"
                    + "\u0162\u00b1\u0000\u093c\u093e\u0003\u0196\u00cb\u0000\u093d\u093c\u0001"
                    + "\u0000\u0000\u0000\u093d\u093e\u0001\u0000\u0000\u0000\u093e\u015f\u0001"
                    + "\u0000\u0000\u0000\u093f\u0940\u0005\u0122\u0000\u0000\u0940\u0941\u0003"
                    + "\u02da\u016d\u0000\u0941\u0943\u0003\u0162\u00b1\u0000\u0942\u0944\u0003"
                    + "\u0198\u00cc\u0000\u0943\u0942\u0001\u0000\u0000\u0000\u0943\u0944\u0001"
                    + "\u0000\u0000\u0000\u0944\u0161\u0001\u0000\u0000\u0000\u0945\u0946\u0003"
                    + "\u0194\u00ca\u0000\u0946\u0947\u0003\u0152\u00a9\u0000\u0947\u0163\u0001"
                    + "\u0000\u0000\u0000\u0948\u0949\u0005\u0122\u0000\u0000\u0949\u094b\u0003"
                    + "\u02da\u016d\u0000\u094a\u0948\u0001\u0000\u0000\u0000\u094a\u094b\u0001"
                    + "\u0000\u0000\u0000\u094b\u094c\u0001\u0000\u0000\u0000\u094c\u094d\u0005"
                    + "\u0120\u0000\u0000\u094d\u094e\u0005\u0129\u0000\u0000\u094e\u094f\u0003"
                    + "\u0152\u00a9\u0000\u094f\u0950\u0005\u0121\u0000\u0000\u0950\u0951\u0003"
                    + "\u023c\u011e\u0000\u0951\u0953\u0003\u0152\u00a9\u0000\u0952\u0954\u0003"
                    + "\u0196\u00cb\u0000\u0953\u0952\u0001\u0000\u0000\u0000\u0953\u0954\u0001"
                    + "\u0000\u0000\u0000\u0954\u0165\u0001\u0000\u0000\u0000\u0955\u0956\u0005"
                    + "\u0122\u0000\u0000\u0956\u0957\u0003\u02da\u016d\u0000\u0957\u0958\u0005"
                    + "\u0120\u0000\u0000\u0958\u0959\u0005\u0129\u0000\u0000\u0959\u095a\u0003"
                    + "\u0152\u00a9\u0000\u095a\u095b\u0005\u0121\u0000\u0000\u095b\u095c\u0003"
                    + "\u023c\u011e\u0000\u095c\u095e\u0003\u0152\u00a9\u0000\u095d\u095f\u0003"
                    + "\u0198\u00cc\u0000\u095e\u095d\u0001\u0000\u0000\u0000\u095e\u095f\u0001"
                    + "\u0000\u0000\u0000\u095f\u0167\u0001\u0000\u0000\u0000\u0960\u0963\u0003"
                    + "\u016e\u00b7\u0000\u0961\u0963\u0003\u016a\u00b5\u0000\u0962\u0960\u0001"
                    + "\u0000\u0000\u0000\u0962\u0961\u0001\u0000\u0000\u0000\u0963\u0169\u0001"
                    + "\u0000\u0000\u0000\u0964\u0969\u0003\u016c\u00b6\u0000\u0965\u0966\u0005"
                    + "\u014e\u0000\u0000\u0966\u0968\u0003\u016c\u00b6\u0000\u0967\u0965\u0001"
                    + "\u0000\u0000\u0000\u0968\u096b\u0001\u0000\u0000\u0000\u0969\u0967\u0001"
                    + "\u0000\u0000\u0000\u0969\u096a\u0001\u0000\u0000\u0000\u096a\u016b\u0001"
                    + "\u0000\u0000\u0000\u096b\u0969\u0001\u0000\u0000\u0000\u096c\u096d\u0005"
                    + "\u0150\u0000\u0000\u096d\u096e\u0003\u016e\u00b7\u0000\u096e\u096f\u0005"
                    + "\u0151\u0000\u0000\u096f\u016d\u0001\u0000\u0000\u0000\u0970\u0975\u0003"
                    + "\u0170\u00b8\u0000\u0971\u0972\u0005\u014e\u0000\u0000\u0972\u0974\u0003"
                    + "\u0170\u00b8\u0000\u0973\u0971\u0001\u0000\u0000\u0000\u0974\u0977\u0001"
                    + "\u0000\u0000\u0000\u0975\u0973\u0001\u0000\u0000\u0000\u0975\u0976\u0001"
                    + "\u0000\u0000\u0000\u0976\u016f\u0001\u0000\u0000\u0000\u0977\u0975\u0001"
                    + "\u0000\u0000\u0000\u0978\u0979\u0003\u0290\u0148\u0000\u0979\u0171\u0001"
                    + "\u0000\u0000\u0000\u097a\u097d\u0003\u0170\u00b8\u0000\u097b\u097d\u0003"
                    + "\u016c\u00b6\u0000\u097c\u097a\u0001\u0000\u0000\u0000\u097c\u097b\u0001"
                    + "\u0000\u0000\u0000\u097d\u0173\u0001\u0000\u0000\u0000\u097e\u097f\u0007"
                    + "\u000e\u0000\u0000\u097f\u0175\u0001\u0000\u0000\u0000\u0980\u0981\u0005"
                    + "\u000e\u0000\u0000\u0981\u0985\u0005F\u0000\u0000\u0982\u0983\u0005\u000e"
                    + "\u0000\u0000\u0983\u0985\u0005\u000f\u0000\u0000\u0984\u0980\u0001\u0000"
                    + "\u0000\u0000\u0984\u0982\u0001\u0000\u0000\u0000\u0985\u0177\u0001\u0000"
                    + "\u0000\u0000\u0986\u0988\u0003\u02da\u016d\u0000\u0987\u0989\u0003\u0174"
                    + "\u00ba\u0000\u0988\u0987\u0001\u0000\u0000\u0000\u0988\u0989\u0001\u0000"
                    + "\u0000\u0000\u0989\u098b\u0001\u0000\u0000\u0000\u098a\u098c\u0003\u0176"
                    + "\u00bb\u0000\u098b\u098a\u0001\u0000\u0000\u0000\u098b\u098c\u0001\u0000"
                    + "\u0000\u0000\u098c\u0179\u0001\u0000\u0000\u0000\u098d\u0992\u0003\u017c"
                    + "\u00be\u0000\u098e\u098f\u0005\u014e\u0000\u0000\u098f\u0991\u0003\u017c"
                    + "\u00be\u0000\u0990\u098e\u0001\u0000\u0000\u0000\u0991\u0994\u0001\u0000"
                    + "\u0000\u0000\u0992\u0990\u0001\u0000\u0000\u0000\u0992\u0993\u0001\u0000"
                    + "\u0000\u0000\u0993\u017b\u0001\u0000\u0000\u0000\u0994\u0992\u0001\u0000"
                    + "\u0000\u0000\u0995\u0998\u0003\u02da\u016d\u0000\u0996\u0997\u0005L\u0000"
                    + "\u0000\u0997\u0999\u0005\u016a\u0000\u0000\u0998\u0996\u0001\u0000\u0000"
                    + "\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u017d\u0001\u0000\u0000"
                    + "\u0000\u099a\u099c\u0003\u02be\u015f\u0000\u099b\u099d\u0003\u0174\u00ba"
                    + "\u0000\u099c\u099b\u0001\u0000\u0000\u0000\u099c\u099d\u0001\u0000\u0000"
                    + "\u0000\u099d\u099f\u0001\u0000\u0000\u0000\u099e\u09a0\u0003\u0176\u00bb"
                    + "\u0000\u099f\u099e\u0001\u0000\u0000\u0000\u099f\u09a0\u0001\u0000\u0000"
                    + "\u0000\u09a0\u017f\u0001\u0000\u0000\u0000\u09a1\u09a2\u0003\u02da\u016d"
                    + "\u0000\u09a2\u09a5\u0003\u019c\u00ce\u0000\u09a3\u09a4\u0005L\u0000\u0000"
                    + "\u09a4\u09a6\u0005\u016a\u0000\u0000\u09a5\u09a3\u0001\u0000\u0000\u0000"
                    + "\u09a5\u09a6\u0001\u0000\u0000\u0000\u09a6\u0181\u0001\u0000\u0000\u0000"
                    + "\u09a7\u09aa\u0003\u0184\u00c2\u0000\u09a8\u09aa\u0003\u0186\u00c3\u0000"
                    + "\u09a9\u09a7\u0001\u0000\u0000\u0000\u09a9\u09a8\u0001\u0000\u0000\u0000"
                    + "\u09aa\u0183\u0001\u0000\u0000\u0000\u09ab\u09ae\u0003\u0164\u00b2\u0000"
                    + "\u09ac\u09ae\u0003\u015e\u00af\u0000\u09ad\u09ab\u0001\u0000\u0000\u0000"
                    + "\u09ad\u09ac\u0001\u0000\u0000\u0000\u09ae\u0185\u0001\u0000\u0000\u0000"
                    + "\u09af\u09b0\u0003\u02da\u016d\u0000\u09b0\u09b2\u0003\u019c\u00ce\u0000"
                    + "\u09b1\u09b3\u0003\u0188\u00c4\u0000\u09b2\u09b1\u0001\u0000\u0000\u0000"
                    + "\u09b2\u09b3\u0001\u0000\u0000\u0000\u09b3\u09b6\u0001\u0000\u0000\u0000"
                    + "\u09b4\u09b5\u0005L\u0000\u0000\u09b5\u09b7\u0005\u016a\u0000\u0000\u09b6"
                    + "\u09b4\u0001\u0000\u0000\u0000\u09b6\u09b7\u0001\u0000\u0000\u0000\u09b7"
                    + "\u0187\u0001\u0000\u0000\u0000\u09b8\u09bb\u0003\u018a\u00c5\u0000\u09b9"
                    + "\u09bb\u0003\u018c\u00c6\u0000\u09ba\u09b8\u0001\u0000\u0000\u0000\u09ba"
                    + "\u09b9\u0001\u0000\u0000\u0000\u09bb\u0189\u0001\u0000\u0000\u0000\u09bc"
                    + "\u09bd\u0005\u0122\u0000\u0000\u09bd\u09bf\u0003\u02da\u016d\u0000\u09be"
                    + "\u09bc\u0001\u0000\u0000\u0000\u09be\u09bf\u0001\u0000\u0000\u0000\u09bf"
                    + "\u09c0\u0001\u0000\u0000\u0000\u09c0\u09c1\u0005\u0121\u0000\u0000\u09c1"
                    + "\u09c2\u0003\u023c\u011e\u0000\u09c2\u09c3\u0005\u0150\u0000\u0000\u09c3"
                    + "\u09c4\u0003\u014c\u00a6\u0000\u09c4\u09c6\u0005\u0151\u0000\u0000\u09c5"
                    + "\u09c7\u0003\u0196\u00cb\u0000\u09c6\u09c5\u0001\u0000\u0000\u0000\u09c6"
                    + "\u09c7\u0001\u0000\u0000\u0000\u09c7\u018b\u0001\u0000\u0000\u0000\u09c8"
                    + "\u09c9\u0005\u0122\u0000\u0000\u09c9\u09cb\u0003\u02da\u016d\u0000\u09ca"
                    + "\u09c8\u0001\u0000\u0000\u0000\u09ca\u09cb\u0001\u0000\u0000\u0000\u09cb"
                    + "\u09cc\u0001\u0000\u0000\u0000\u09cc\u09ce\u0003\u0194\u00ca\u0000\u09cd"
                    + "\u09cf\u0003\u0196\u00cb\u0000\u09ce\u09cd\u0001\u0000\u0000\u0000\u09ce"
                    + "\u09cf\u0001\u0000\u0000\u0000\u09cf\u018d\u0001\u0000\u0000\u0000\u09d0"
                    + "\u09d3\u0003\u0190\u00c8\u0000\u09d1\u09d3\u0003\u0192\u00c9\u0000\u09d2"
                    + "\u09d0\u0001\u0000\u0000\u0000\u09d2\u09d1\u0001\u0000\u0000\u0000\u09d3"
                    + "\u018f\u0001\u0000\u0000\u0000\u09d4\u09d5\u0005\u0122\u0000\u0000\u09d5"
                    + "\u09d7\u0003\u02da\u016d\u0000\u09d6\u09d4\u0001\u0000\u0000\u0000\u09d6"
                    + "\u09d7\u0001\u0000\u0000\u0000\u09d7\u09d8\u0001\u0000\u0000\u0000\u09d8"
                    + "\u09d9\u0005\u0121\u0000\u0000\u09d9\u09da\u0003\u023c\u011e\u0000\u09da"
                    + "\u09db\u0005\u0150\u0000\u0000\u09db\u09dc\u0003\u014c\u00a6\u0000\u09dc"
                    + "\u09de\u0005\u0151\u0000\u0000\u09dd\u09df\u0003\u0198\u00cc\u0000\u09de"
                    + "\u09dd\u0001\u0000\u0000\u0000\u09de\u09df\u0001\u0000\u0000\u0000\u09df"
                    + "\u0191\u0001\u0000\u0000\u0000\u09e0\u09e1\u0005\u0122\u0000\u0000\u09e1"
                    + "\u09e3\u0003\u02da\u016d\u0000\u09e2\u09e0\u0001\u0000\u0000\u0000\u09e2"
                    + "\u09e3\u0001\u0000\u0000\u0000\u09e3\u09e4\u0001\u0000\u0000\u0000\u09e4"
                    + "\u09e6\u0003\u0194\u00ca\u0000\u09e5\u09e7\u0003\u0198\u00cc\u0000\u09e6"
                    + "\u09e5\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000\u0000\u09e7"
                    + "\u0193\u0001\u0000\u0000\u0000\u09e8\u09e9\u0005\u011f\u0000\u0000\u09e9"
                    + "\u09ea\u0005\u0129\u0000\u0000\u09ea\u0195\u0001\u0000\u0000\u0000\u09eb"
                    + "\u09ec\u0003\u0154\u00aa\u0000\u09ec\u09ed\u0003\u015c\u00ae\u0000\u09ed"
                    + "\u0197\u0001\u0000\u0000\u0000\u09ee\u09ef\u0003\u0154\u00aa\u0000\u09ef"
                    + "\u09f0\u0003\u015c\u00ae\u0000\u09f0\u0199\u0001\u0000\u0000\u0000\u09f1"
                    + "\u09f2\u0003\u02da\u016d\u0000\u09f2\u09f3\u0005\u014d\u0000\u0000\u09f3"
                    + "\u09f6\u0003\u019c\u00ce\u0000\u09f4\u09f5\u0005L\u0000\u0000\u09f5\u09f7"
                    + "\u0005\u016a\u0000\u0000\u09f6\u09f4\u0001\u0000\u0000\u0000\u09f6\u09f7"
                    + "\u0001\u0000\u0000\u0000\u09f7\u019b\u0001\u0000\u0000\u0000\u09f8\u09f9"
                    + "\u0003\u01a0\u00d0\u0000\u09f9\u019d\u0001\u0000\u0000\u0000\u09fa\u09ff"
                    + "\u0003\u019c\u00ce\u0000\u09fb\u09fc\u0005\u014e\u0000\u0000\u09fc\u09fe"
                    + "\u0003\u019c\u00ce\u0000\u09fd\u09fb\u0001\u0000\u0000\u0000\u09fe\u0a01"
                    + "\u0001\u0000\u0000\u0000\u09ff\u09fd\u0001\u0000\u0000\u0000\u09ff\u0a00"
                    + "\u0001\u0000\u0000\u0000\u0a00\u019f\u0001\u0000\u0000\u0000\u0a01\u09ff"
                    + "\u0001\u0000\u0000\u0000\u0a02\u0a08\u0003\u01a2\u00d1\u0000\u0a03\u0a08"
                    + "\u0003\u01a4\u00d2\u0000\u0a04\u0a08\u0003\u01a6\u00d3\u0000\u0a05\u0a08"
                    + "\u0003\u01a8\u00d4\u0000\u0a06\u0a08\u0003\u01aa\u00d5\u0000\u0a07\u0a02"
                    + "\u0001\u0000\u0000\u0000\u0a07\u0a03\u0001\u0000\u0000\u0000\u0a07\u0a04"
                    + "\u0001\u0000\u0000\u0000\u0a07\u0a05\u0001\u0000\u0000\u0000\u0a07\u0a06"
                    + "\u0001\u0000\u0000\u0000\u0a08\u01a1\u0001\u0000\u0000\u0000\u0a09\u0a31"
                    + "\u0005N\u0000\u0000\u0a0a\u0a31\u0005O\u0000\u0000\u0a0b\u0a31\u0005P"
                    + "\u0000\u0000\u0a0c\u0a31\u0005Q\u0000\u0000\u0a0d\u0a31\u0005M\u0000\u0000"
                    + "\u0a0e\u0a31\u0005R\u0000\u0000\u0a0f\u0a11\u0005S\u0000\u0000\u0a10\u0a12"
                    + "\u0005T\u0000\u0000\u0a11\u0a10\u0001\u0000\u0000\u0000\u0a11\u0a12\u0001"
                    + "\u0000\u0000\u0000\u0a12\u0a31\u0001\u0000\u0000\u0000\u0a13\u0a31\u0005"
                    + "U\u0000\u0000\u0a14\u0a31\u0005V\u0000\u0000\u0a15\u0a31\u0005W\u0000"
                    + "\u0000\u0a16\u0a31\u0005X\u0000\u0000\u0a17\u0a18\u0005W\u0000\u0000\u0a18"
                    + "\u0a19\u0005\u0095\u0000\u0000\u0a19\u0a1a\u00050\u0000\u0000\u0a1a\u0a1b"
                    + "\u0005Y\u0000\u0000\u0a1b\u0a31\u0005Z\u0000\u0000\u0a1c\u0a31\u0005]"
                    + "\u0000\u0000\u0a1d\u0a31\u0005\u00ce\u0000\u0000\u0a1e\u0a26\u0005\\\u0000"
                    + "\u0000\u0a1f\u0a20\u0005\u0150\u0000\u0000\u0a20\u0a23\u0005\u016f\u0000"
                    + "\u0000\u0a21\u0a22\u0005\u014e\u0000\u0000\u0a22\u0a24\u0005\u016f\u0000"
                    + "\u0000\u0a23\u0a21\u0001\u0000\u0000\u0000\u0a23\u0a24\u0001\u0000\u0000"
                    + "\u0000\u0a24\u0a25\u0001\u0000\u0000\u0000\u0a25\u0a27\u0005\u0151\u0000"
                    + "\u0000\u0a26\u0a1f\u0001\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000"
                    + "\u0000\u0a27\u0a31\u0001\u0000\u0000\u0000\u0a28\u0a29\u0005_\u0000\u0000"
                    + "\u0a29\u0a2a\u0005\u0150\u0000\u0000\u0a2a\u0a2b\u0005\u016f\u0000\u0000"
                    + "\u0a2b\u0a31\u0005\u0151\u0000\u0000\u0a2c\u0a2d\u0005^\u0000\u0000\u0a2d"
                    + "\u0a2e\u0005\u0150\u0000\u0000\u0a2e\u0a2f\u0005\u016f\u0000\u0000\u0a2f"
                    + "\u0a31\u0005\u0151\u0000\u0000\u0a30\u0a09\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a0a\u0001\u0000\u0000\u0000\u0a30\u0a0b\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a0c\u0001\u0000\u0000\u0000\u0a30\u0a0d\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a0e\u0001\u0000\u0000\u0000\u0a30\u0a0f\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a13\u0001\u0000\u0000\u0000\u0a30\u0a14\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a15\u0001\u0000\u0000\u0000\u0a30\u0a16\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a17\u0001\u0000\u0000\u0000\u0a30\u0a1c\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a1d\u0001\u0000\u0000\u0000\u0a30\u0a1e\u0001\u0000\u0000\u0000\u0a30"
                    + "\u0a28\u0001\u0000\u0000\u0000\u0a30\u0a2c\u0001\u0000\u0000\u0000\u0a31"
                    + "\u01a3\u0001\u0000\u0000\u0000\u0a32\u0a33\u0005`\u0000\u0000\u0a33\u0a34"
                    + "\u0005\u015a\u0000\u0000\u0a34\u0a35\u0003\u01a0\u00d0\u0000\u0a35\u0a36"
                    + "\u0005\u015c\u0000\u0000\u0a36\u01a5\u0001\u0000\u0000\u0000\u0a37\u0a38"
                    + "\u0005a\u0000\u0000\u0a38\u0a39\u0005\u015a\u0000\u0000\u0a39\u0a3a\u0003"
                    + "\u0148\u00a4\u0000\u0a3a\u0a3b\u0005\u015c\u0000\u0000\u0a3b\u01a7\u0001"
                    + "\u0000\u0000\u0000\u0a3c\u0a3d\u0005b\u0000\u0000\u0a3d\u0a3e\u0005\u015a"
                    + "\u0000\u0000\u0a3e\u0a3f\u0003\u01a2\u00d1\u0000\u0a3f\u0a40\u0005\u014e"
                    + "\u0000\u0000\u0a40\u0a41\u0003\u01a0\u00d0\u0000\u0a41\u0a42\u0005\u015c"
                    + "\u0000\u0000\u0a42\u01a9\u0001\u0000\u0000\u0000\u0a43\u0a44\u0005c\u0000"
                    + "\u0000\u0a44\u0a45\u0005\u015a\u0000\u0000\u0a45\u0a46\u0003\u019e\u00cf"
                    + "\u0000\u0a46\u0a47\u0005\u015c\u0000\u0000\u0a47\u01ab\u0001\u0000\u0000"
                    + "\u0000\u0a48\u0a49\u00056\u0000\u0000\u0a49\u0a61\u0005\u0003\u0000\u0000"
                    + "\u0a4a\u0a4c\u00056\u0000\u0000\u0a4b\u0a4d\u0005\u0018\u0000\u0000\u0a4c"
                    + "\u0a4b\u0001\u0000\u0000\u0000\u0a4c\u0a4d\u0001\u0000\u0000\u0000\u0a4d"
                    + "\u0a61\u0001\u0000\u0000\u0000\u0a4e\u0a4f\u0005\u00b1\u0000\u0000\u0a4f"
                    + "\u0a61\u0005\u0003\u0000\u0000\u0a50\u0a52\u0005\u00b1\u0000\u0000\u0a51"
                    + "\u0a53\u0005\u0018\u0000\u0000\u0a52\u0a51\u0001\u0000\u0000\u0000\u0a52"
                    + "\u0a53\u0001\u0000\u0000\u0000\u0a53\u0a61\u0001\u0000\u0000\u0000\u0a54"
                    + "\u0a55\u00057\u0000\u0000\u0a55\u0a61\u0005\u0003\u0000\u0000\u0a56\u0a58"
                    + "\u00057\u0000\u0000\u0a57\u0a59\u0005\u0018\u0000\u0000\u0a58\u0a57\u0001"
                    + "\u0000\u0000\u0000\u0a58\u0a59\u0001\u0000\u0000\u0000\u0a59\u0a61\u0001"
                    + "\u0000\u0000\u0000\u0a5a\u0a5b\u0005\u00af\u0000\u0000\u0a5b\u0a61\u0005"
                    + "\u0003\u0000\u0000\u0a5c\u0a5e\u0005\u00af\u0000\u0000\u0a5d\u0a5f\u0005"
                    + "\u0018\u0000\u0000\u0a5e\u0a5d\u0001\u0000\u0000\u0000\u0a5e\u0a5f\u0001"
                    + "\u0000\u0000\u0000\u0a5f\u0a61\u0001\u0000\u0000\u0000\u0a60\u0a48\u0001"
                    + "\u0000\u0000\u0000\u0a60\u0a4a\u0001\u0000\u0000\u0000\u0a60\u0a4e\u0001"
                    + "\u0000\u0000\u0000\u0a60\u0a50\u0001\u0000\u0000\u0000\u0a60\u0a54\u0001"
                    + "\u0000\u0000\u0000\u0a60\u0a56\u0001\u0000\u0000\u0000\u0a60\u0a5a\u0001"
                    + "\u0000\u0000\u0000\u0a60\u0a5c\u0001\u0000\u0000\u0000\u0a61\u01ad\u0001"
                    + "\u0000\u0000\u0000\u0a62\u0a64\u0003\u01b2\u00d9\u0000\u0a63\u0a62\u0001"
                    + "\u0000\u0000\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64\u0a65\u0001"
                    + "\u0000\u0000\u0000\u0a65\u0a66\u0003\u01b0\u00d8\u0000\u0a66\u01af\u0001"
                    + "\u0000\u0000\u0000\u0a67\u0a6a\u0003\u01b6\u00db\u0000\u0a68\u0a6a\u0003"
                    + "\u01ba\u00dd\u0000\u0a69\u0a67\u0001\u0000\u0000\u0000\u0a69\u0a68\u0001"
                    + "\u0000\u0000\u0000\u0a6a\u01b1\u0001\u0000\u0000\u0000\u0a6b\u0a6c\u0005"
                    + "\u0095\u0000\u0000\u0a6c\u0a71\u0003\u01b4\u00da\u0000\u0a6d\u0a6e\u0005"
                    + "\u014e\u0000\u0000\u0a6e\u0a70\u0003\u01b4\u00da\u0000\u0a6f\u0a6d\u0001"
                    + "\u0000\u0000\u0000\u0a70\u0a73\u0001\u0000\u0000\u0000\u0a71\u0a6f\u0001"
                    + "\u0000\u0000\u0000\u0a71\u0a72\u0001\u0000\u0000\u0000\u0a72\u01b3\u0001"
                    + "\u0000\u0000\u0000\u0a73\u0a71\u0001\u0000\u0000\u0000\u0a74\u0a75\u0003"
                    + "\u02da\u016d\u0000\u0a75\u0a76\u0005\u0016\u0000\u0000\u0a76\u0a77\u0005"
                    + "\u0150\u0000\u0000\u0a77\u0a78\u0003\u01ae\u00d7\u0000\u0a78\u0a79\u0005"
                    + "\u0151\u0000\u0000\u0a79\u01b5\u0001\u0000\u0000\u0000\u0a7a\u0a80\u0003"
                    + "\u01b8\u00dc\u0000\u0a7b\u0a7c\u0003\u01ac\u00d6\u0000\u0a7c\u0a7d\u0003"
                    + "\u01b8\u00dc\u0000\u0a7d\u0a7f\u0001\u0000\u0000\u0000\u0a7e\u0a7b\u0001"
                    + "\u0000\u0000\u0000\u0a7f\u0a82\u0001\u0000\u0000\u0000\u0a80\u0a7e\u0001"
                    + "\u0000\u0000\u0000\u0a80\u0a81\u0001\u0000\u0000\u0000\u0a81\u01b7\u0001"
                    + "\u0000\u0000\u0000\u0a82\u0a80\u0001\u0000\u0000\u0000\u0a83\u0a85\u0003"
                    + "\u021c\u010e\u0000\u0a84\u0a86\u0003\u01c4\u00e2\u0000\u0a85\u0a84\u0001"
                    + "\u0000\u0000\u0000\u0a86\u0a87\u0001\u0000\u0000\u0000\u0a87\u0a85\u0001"
                    + "\u0000\u0000\u0000\u0a87\u0a88\u0001\u0000\u0000\u0000\u0a88\u01b9\u0001"
                    + "\u0000\u0000\u0000\u0a89\u0a8c\u0003\u01c6\u00e3\u0000\u0a8a\u0a8d\u0003"
                    + "\u01be\u00df\u0000\u0a8b\u0a8d\u0003\u024c\u0126\u0000\u0a8c\u0a8a\u0001"
                    + "\u0000\u0000\u0000\u0a8c\u0a8b\u0001\u0000\u0000\u0000\u0a8d\u0a90\u0001"
                    + "\u0000\u0000\u0000\u0a8e\u0a90\u0003\u01be\u00df\u0000\u0a8f\u0a89\u0001"
                    + "\u0000\u0000\u0000\u0a8f\u0a8e\u0001\u0000\u0000\u0000\u0a90\u01bb\u0001"
                    + "\u0000\u0000\u0000\u0a91\u0a93\u0003\u01f6\u00fb\u0000\u0a92\u0a94\u0003"
                    + "\u021c\u010e\u0000\u0a93\u0a92\u0001\u0000\u0000\u0000\u0a93\u0a94\u0001"
                    + "\u0000\u0000\u0000\u0a94\u0a96\u0001\u0000\u0000\u0000\u0a95\u0a97\u0003"
                    + "\u0248\u0124\u0000\u0a96\u0a95\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001"
                    + "\u0000\u0000\u0000\u0a97\u0a99\u0001\u0000\u0000\u0000\u0a98\u0a9a\u0003"
                    + "\u0254\u012a\u0000\u0a99\u0a98\u0001\u0000\u0000\u0000\u0a99\u0a9a\u0001"
                    + "\u0000\u0000\u0000\u0a9a\u0a9c\u0001\u0000\u0000\u0000\u0a9b\u0a9d\u0003"
                    + "\u0264\u0132\u0000\u0a9c\u0a9b\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001"
                    + "\u0000\u0000\u0000\u0a9d\u0a9f\u0001\u0000\u0000\u0000\u0a9e\u0aa0\u0003"
                    + "\u0204\u0102\u0000\u0a9f\u0a9e\u0001\u0000\u0000\u0000\u0a9f\u0aa0\u0001"
                    + "\u0000\u0000\u0000\u0aa0\u0aa6\u0001\u0000\u0000\u0000\u0aa1\u0aa2\u0005"
                    + "\u0150\u0000\u0000\u0aa2\u0aa3\u0003\u01be\u00df\u0000\u0aa3\u0aa4\u0005"
                    + "\u0151\u0000\u0000\u0aa4\u0aa6\u0001\u0000\u0000\u0000\u0aa5\u0a91\u0001"
                    + "\u0000\u0000\u0000\u0aa5\u0aa1\u0001\u0000\u0000\u0000\u0aa6\u01bd\u0001"
                    + "\u0000\u0000\u0000\u0aa7\u0aa9\u0003\u01bc\u00de\u0000\u0aa8\u0aaa\u0003"
                    + "\u01c0\u00e0\u0000\u0aa9\u0aa8\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0001"
                    + "\u0000\u0000\u0000\u0aaa\u0aac\u0001\u0000\u0000\u0000\u0aab\u0aad\u0003"
                    + "\u0274\u013a\u0000\u0aac\u0aab\u0001\u0000\u0000\u0000\u0aac\u0aad\u0001"
                    + "\u0000\u0000\u0000\u0aad\u0aaf\u0001\u0000\u0000\u0000\u0aae\u0ab0\u0003"
                    + "\u0276\u013b\u0000\u0aaf\u0aae\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0001"
                    + "\u0000\u0000\u0000\u0ab0\u0ab2\u0001\u0000\u0000\u0000\u0ab1\u0ab3\u0003"
                    + "\u027a\u013d\u0000\u0ab2\u0ab1\u0001\u0000\u0000\u0000\u0ab2\u0ab3\u0001"
                    + "\u0000\u0000\u0000\u0ab3\u0ab5\u0001\u0000\u0000\u0000\u0ab4\u0ab6\u0003"
                    + "\u027c\u013e\u0000\u0ab5\u0ab4\u0001\u0000\u0000\u0000\u0ab5\u0ab6\u0001"
                    + "\u0000\u0000\u0000\u0ab6\u0ab8\u0001\u0000\u0000\u0000\u0ab7\u0ab9\u0003"
                    + "\u01ca\u00e5\u0000\u0ab8\u0ab7\u0001\u0000\u0000\u0000\u0ab8\u0ab9\u0001"
                    + "\u0000\u0000\u0000\u0ab9\u01bf\u0001\u0000\u0000\u0000\u0aba\u0abb\u0003"
                    + "\u01ac\u00d6\u0000\u0abb\u0abc\u0003\u01bc\u00de\u0000\u0abc\u0abe\u0001"
                    + "\u0000\u0000\u0000\u0abd\u0aba\u0001\u0000\u0000\u0000\u0abe\u0abf\u0001"
                    + "\u0000\u0000\u0000\u0abf\u0abd\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0001"
                    + "\u0000\u0000\u0000\u0ac0\u01c1\u0001\u0000\u0000\u0000\u0ac1\u0ac3\u0003"
                    + "\u01b2\u00d9\u0000\u0ac2\u0ac1\u0001\u0000\u0000\u0000\u0ac2\u0ac3\u0001"
                    + "\u0000\u0000\u0000\u0ac3\u0ac4\u0001\u0000\u0000\u0000\u0ac4\u0ac5\u0003"
                    + "\u01be\u00df\u0000\u0ac5\u01c3\u0001\u0000\u0000\u0000\u0ac6\u0ac7\u0003"
                    + "\u01c6\u00e3\u0000\u0ac7\u0ac9\u0003\u01f6\u00fb\u0000\u0ac8\u0aca\u0003"
                    + "\u022e\u0117\u0000\u0ac9\u0ac8\u0001\u0000\u0000\u0000\u0ac9\u0aca\u0001"
                    + "\u0000\u0000\u0000\u0aca\u0acc\u0001\u0000\u0000\u0000\u0acb\u0acd\u0003"
                    + "\u0248\u0124\u0000\u0acc\u0acb\u0001\u0000\u0000\u0000\u0acc\u0acd\u0001"
                    + "\u0000\u0000\u0000\u0acd\u0acf\u0001\u0000\u0000\u0000\u0ace\u0ad0\u0003"
                    + "\u0254\u012a\u0000\u0acf\u0ace\u0001\u0000\u0000\u0000\u0acf\u0ad0\u0001"
                    + "\u0000\u0000\u0000\u0ad0\u0ad2\u0001\u0000\u0000\u0000\u0ad1\u0ad3\u0003"
                    + "\u0264\u0132\u0000\u0ad2\u0ad1\u0001\u0000\u0000\u0000\u0ad2\u0ad3\u0001"
                    + "\u0000\u0000\u0000\u0ad3\u0ad5\u0001\u0000\u0000\u0000\u0ad4\u0ad6\u0003"
                    + "\u0204\u0102\u0000\u0ad5\u0ad4\u0001\u0000\u0000\u0000\u0ad5\u0ad6\u0001"
                    + "\u0000\u0000\u0000\u0ad6\u0ad8\u0001\u0000\u0000\u0000\u0ad7\u0ad9\u0003"
                    + "\u0274\u013a\u0000\u0ad8\u0ad7\u0001\u0000\u0000\u0000\u0ad8\u0ad9\u0001"
                    + "\u0000\u0000\u0000\u0ad9\u0adb\u0001\u0000\u0000\u0000\u0ada\u0adc\u0003"
                    + "\u0276\u013b\u0000\u0adb\u0ada\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001"
                    + "\u0000\u0000\u0000\u0adc\u0ade\u0001\u0000\u0000\u0000\u0add\u0adf\u0003"
                    + "\u027a\u013d\u0000\u0ade\u0add\u0001\u0000\u0000\u0000\u0ade\u0adf\u0001"
                    + "\u0000\u0000\u0000\u0adf\u0ae1\u0001\u0000\u0000\u0000\u0ae0\u0ae2\u0003"
                    + "\u027c\u013e\u0000\u0ae1\u0ae0\u0001\u0000\u0000\u0000\u0ae1\u0ae2\u0001"
                    + "\u0000\u0000\u0000\u0ae2\u0ae4\u0001\u0000\u0000\u0000\u0ae3\u0ae5\u0003"
                    + "\u01ca\u00e5\u0000\u0ae4\u0ae3\u0001\u0000\u0000\u0000\u0ae4\u0ae5\u0001"
                    + "\u0000\u0000\u0000\u0ae5\u0b06\u0001\u0000\u0000\u0000\u0ae6\u0ae8\u0003"
                    + "\u01f6\u00fb\u0000\u0ae7\u0ae9\u0003\u022e\u0117\u0000\u0ae8\u0ae7\u0001"
                    + "\u0000\u0000\u0000\u0ae8\u0ae9\u0001\u0000\u0000\u0000\u0ae9\u0aeb\u0001"
                    + "\u0000\u0000\u0000\u0aea\u0aec\u0003\u0248\u0124\u0000\u0aeb\u0aea\u0001"
                    + "\u0000\u0000\u0000\u0aeb\u0aec\u0001\u0000\u0000\u0000\u0aec\u0aee\u0001"
                    + "\u0000\u0000\u0000\u0aed\u0aef\u0003\u0254\u012a\u0000\u0aee\u0aed\u0001"
                    + "\u0000\u0000\u0000\u0aee\u0aef\u0001\u0000\u0000\u0000\u0aef\u0af1\u0001"
                    + "\u0000\u0000\u0000\u0af0\u0af2\u0003\u0264\u0132\u0000\u0af1\u0af0\u0001"
                    + "\u0000\u0000\u0000\u0af1\u0af2\u0001\u0000\u0000\u0000\u0af2\u0af4\u0001"
                    + "\u0000\u0000\u0000\u0af3\u0af5\u0003\u0204\u0102\u0000\u0af4\u0af3\u0001"
                    + "\u0000\u0000\u0000\u0af4\u0af5\u0001\u0000\u0000\u0000\u0af5\u0af7\u0001"
                    + "\u0000\u0000\u0000\u0af6\u0af8\u0003\u0274\u013a\u0000\u0af7\u0af6\u0001"
                    + "\u0000\u0000\u0000\u0af7\u0af8\u0001\u0000\u0000\u0000\u0af8\u0afa\u0001"
                    + "\u0000\u0000\u0000\u0af9\u0afb\u0003\u0276\u013b\u0000\u0afa\u0af9\u0001"
                    + "\u0000\u0000\u0000\u0afa\u0afb\u0001\u0000\u0000\u0000\u0afb\u0afd\u0001"
                    + "\u0000\u0000\u0000\u0afc\u0afe\u0003\u027a\u013d\u0000\u0afd\u0afc\u0001"
                    + "\u0000\u0000\u0000\u0afd\u0afe\u0001\u0000\u0000\u0000\u0afe\u0b00\u0001"
                    + "\u0000\u0000\u0000\u0aff\u0b01\u0003\u027c\u013e\u0000\u0b00\u0aff\u0001"
                    + "\u0000\u0000\u0000\u0b00\u0b01\u0001\u0000\u0000\u0000\u0b01\u0b03\u0001"
                    + "\u0000\u0000\u0000\u0b02\u0b04\u0003\u01ca\u00e5\u0000\u0b03\u0b02\u0001"
                    + "\u0000\u0000\u0000\u0b03\u0b04\u0001\u0000\u0000\u0000\u0b04\u0b06\u0001"
                    + "\u0000\u0000\u0000\u0b05\u0ac6\u0001\u0000\u0000\u0000\u0b05\u0ae6\u0001"
                    + "\u0000\u0000\u0000\u0b06\u01c5\u0001\u0000\u0000\u0000\u0b07\u0b08\u0005"
                    + "\u0019\u0000\u0000\u0b08\u0b09\u0005\u001a\u0000\u0000\u0b09\u0b0b\u0003"
                    + "\u01c8\u00e4\u0000\u0b0a\u0b0c\u0003(\u0014\u0000\u0b0b\u0b0a\u0001\u0000"
                    + "\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000\u0000\u0b0c\u0b1a\u0001\u0000"
                    + "\u0000\u0000\u0b0d\u0b0e\u0005\u0019\u0000\u0000\u0b0e\u0b10\u0005h\u0000"
                    + "\u0000\u0b0f\u0b11\u0005%\u0000\u0000\u0b10\u0b0f\u0001\u0000\u0000\u0000"
                    + "\u0b10\u0b11\u0001\u0000\u0000\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000"
                    + "\u0b12\u0b17\u0003\u02ca\u0165\u0000\u0b13\u0b14\u0005\u0150\u0000\u0000"
                    + "\u0b14\u0b15\u0003\u014a\u00a5\u0000\u0b15\u0b16\u0005\u0151\u0000\u0000"
                    + "\u0b16\u0b18\u0001\u0000\u0000\u0000\u0b17\u0b13\u0001\u0000\u0000\u0000"
                    + "\u0b17\u0b18\u0001\u0000\u0000\u0000\u0b18\u0b1a\u0001\u0000\u0000\u0000"
                    + "\u0b19\u0b07\u0001\u0000\u0000\u0000\u0b19\u0b0d\u0001\u0000\u0000\u0000"
                    + "\u0b1a\u01c7\u0001\u0000\u0000\u0000\u0b1b\u0b1d\u00050\u0000\u0000\u0b1c"
                    + "\u0b1b\u0001\u0000\u0000\u0000\u0b1c\u0b1d\u0001\u0000\u0000\u0000\u0b1d"
                    + "\u0b1e\u0001\u0000\u0000\u0000\u0b1e\u0b1f\u0005/\u0000\u0000\u0b1f\u0b21"
                    + "\u0005\u016a\u0000\u0000\u0b20\u0b22\u0003\u012a\u0095\u0000\u0b21\u0b20"
                    + "\u0001\u0000\u0000\u0000\u0b21\u0b22\u0001\u0000\u0000\u0000\u0b22\u0b24"
                    + "\u0001\u0000\u0000\u0000\u0b23\u0b25\u0003\u0140\u00a0\u0000\u0b24\u0b23"
                    + "\u0001\u0000\u0000\u0000\u0b24\u0b25\u0001\u0000\u0000\u0000\u0b25\u0b29"
                    + "\u0001\u0000\u0000\u0000\u0b26\u0b27\u0005%\u0000\u0000\u0b27\u0b29\u0003"
                    + "\u02ca\u0165\u0000\u0b28\u0b1c\u0001\u0000\u0000\u0000\u0b28\u0b26\u0001"
                    + "\u0000\u0000\u0000\u0b29\u01c9\u0001\u0000\u0000\u0000\u0b2a\u0b2d\u0005"
                    + "\u0099\u0000\u0000\u0b2b\u0b2c\u0005\u016f\u0000\u0000\u0b2c\u0b2e\u0005"
                    + "\u014e\u0000\u0000\u0b2d\u0b2b\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0001"
                    + "\u0000\u0000\u0000\u0b2e\u0b2f\u0001\u0000\u0000\u0000\u0b2f\u0b35\u0005"
                    + "\u016f\u0000\u0000\u0b30\u0b31\u0005\u0099\u0000\u0000\u0b31\u0b32\u0005"
                    + "\u016f\u0000\u0000\u0b32\u0b33\u0005\u009a\u0000\u0000\u0b33\u0b35\u0005"
                    + "\u016f\u0000\u0000\u0b34\u0b2a\u0001\u0000\u0000\u0000\u0b34\u0b30\u0001"
                    + "\u0000\u0000\u0000\u0b35\u01cb\u0001\u0000\u0000\u0000\u0b36\u0b37\u0005"
                    + "\u00ad\u0000\u0000\u0b37\u0b38\u0005\u0015\u0000\u0000\u0b38\u0b3a\u0003"
                    + "\u023c\u011e\u0000\u0b39\u0b3b\u0003\u0248\u0124\u0000\u0b3a\u0b39\u0001"
                    + "\u0000\u0000\u0000\u0b3a\u0b3b\u0001\u0000\u0000\u0000\u0b3b\u01cd\u0001"
                    + "\u0000\u0000\u0000\u0b3c\u0b3d\u0003\u0216\u010b\u0000\u0b3d\u0b3e\u0005"
                    + "\u0156\u0000\u0000\u0b3e\u0b3f\u0003\u02be\u015f\u0000\u0b3f\u01cf\u0001"
                    + "\u0000\u0000\u0000\u0b40\u0b41\u0005\u009b\u0000\u0000\u0b41\u0b46\u0003"
                    + "\u01ce\u00e7\u0000\u0b42\u0b43\u0005\u014e\u0000\u0000\u0b43\u0b45\u0003"
                    + "\u01ce\u00e7\u0000\u0b44\u0b42\u0001\u0000\u0000\u0000\u0b45\u0b48\u0001"
                    + "\u0000\u0000\u0000\u0b46\u0b44\u0001\u0000\u0000\u0000\u0b46\u0b47\u0001"
                    + "\u0000\u0000\u0000\u0b47\u01d1\u0001\u0000\u0000\u0000\u0b48\u0b46\u0001"
                    + "\u0000\u0000\u0000\u0b49\u0b4a\u0005\u00e0\u0000\u0000\u0b4a\u0b4b\u0003"
                    + "\u023c\u011e\u0000\u0b4b\u0b4d\u0003\u01d0\u00e8\u0000\u0b4c\u0b4e\u0003"
                    + "\u0248\u0124\u0000\u0b4d\u0b4c\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0001"
                    + "\u0000\u0000\u0000\u0b4e\u01d3\u0001\u0000\u0000\u0000\u0b4f\u0b54\u0003"
                    + "\u01d6\u00eb\u0000\u0b50\u0b54\u0003\u01e0\u00f0\u0000\u0b51\u0b54\u0003"
                    + "\u01e2\u00f1\u0000\u0b52\u0b54\u0003\u01e4\u00f2\u0000\u0b53\u0b4f\u0001"
                    + "\u0000\u0000\u0000\u0b53\u0b50\u0001\u0000\u0000\u0000\u0b53\u0b51\u0001"
                    + "\u0000\u0000\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b54\u01d5\u0001"
                    + "\u0000\u0000\u0000\u0b55\u0b56\u0005\u0113\u0000\u0000\u0b56\u0b5f\u0005"
                    + "\u0114\u0000\u0000\u0b57\u0b5c\u0003\u01d8\u00ec\u0000\u0b58\u0b59\u0005"
                    + "\u014e\u0000\u0000\u0b59\u0b5b\u0003\u01d8\u00ec\u0000\u0b5a\u0b58\u0001"
                    + "\u0000\u0000\u0000\u0b5b\u0b5e\u0001\u0000\u0000\u0000\u0b5c\u0b5a\u0001"
                    + "\u0000\u0000\u0000\u0b5c\u0b5d\u0001\u0000\u0000\u0000\u0b5d\u0b60\u0001"
                    + "\u0000\u0000\u0000\u0b5e\u0b5c\u0001\u0000\u0000\u0000\u0b5f\u0b57\u0001"
                    + "\u0000\u0000\u0000\u0b5f\u0b60\u0001\u0000\u0000\u0000\u0b60\u01d7\u0001"
                    + "\u0000\u0000\u0000\u0b61\u0b64\u0003\u01dc\u00ee\u0000\u0b62\u0b64\u0003"
                    + "\u01da\u00ed\u0000\u0b63\u0b61\u0001\u0000\u0000\u0000\u0b63\u0b62\u0001"
                    + "\u0000\u0000\u0000\u0b64\u01d9\u0001\u0000\u0000\u0000\u0b65\u0b66\u0005"
                    + "\u00c6\u0000\u0000\u0b66\u0b6a\u0005\u0118\u0000\u0000\u0b67\u0b68\u0005"
                    + "\u00c6\u0000\u0000\u0b68\u0b6a\u0005\u0119\u0000\u0000\u0b69\u0b65\u0001"
                    + "\u0000\u0000\u0000\u0b69\u0b67\u0001\u0000\u0000\u0000\u0b6a\u01db\u0001"
                    + "\u0000\u0000\u0000\u0b6b\u0b6c\u0005\u011a\u0000\u0000\u0b6c\u0b6d\u0005"
                    + "\u011b\u0000\u0000\u0b6d\u0b6e\u0003\u01de\u00ef\u0000\u0b6e\u01dd\u0001"
                    + "\u0000\u0000\u0000\u0b6f\u0b70\u0005\u011c\u0000\u0000\u0b70\u01df\u0001"
                    + "\u0000\u0000\u0000\u0b71\u0b73\u0005\u0115\u0000\u0000\u0b72\u0b74\u0005"
                    + "\u0117\u0000\u0000\u0b73\u0b72\u0001\u0000\u0000\u0000\u0b73\u0b74\u0001"
                    + "\u0000\u0000\u0000\u0b74\u01e1\u0001\u0000\u0000\u0000\u0b75\u0b77\u0005"
                    + "\u0116\u0000\u0000\u0b76\u0b78\u0005\u0117\u0000\u0000\u0b77\u0b76\u0001"
                    + "\u0000\u0000\u0000\u0b77\u0b78\u0001\u0000\u0000\u0000\u0b78\u01e3\u0001"
                    + "\u0000\u0000\u0000\u0b79\u0b7a\u0005\u009b\u0000\u0000\u0b7a\u0b7b\u0005"
                    + "\u011d\u0000\u0000\u0b7b\u0b7c\u0003\u02c8\u0164\u0000\u0b7c\u01e5\u0001"
                    + "\u0000\u0000\u0000\u0b7d\u0b7e\u0005\u012a\u0000\u0000\u0b7e\u0b80\u0005"
                    + "\u0102\u0000\u0000\u0b7f\u0b81\u0005\u016f\u0000\u0000\u0b80\u0b7f\u0001"
                    + "\u0000\u0000\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000\u0b82\u0b80\u0001"
                    + "\u0000\u0000\u0000\u0b82\u0b83\u0001\u0000\u0000\u0000\u0b83\u01e7\u0001"
                    + "\u0000\u0000\u0000\u0b84\u0b85\u0005\u012d\u0000\u0000\u0b85\u0b86\u0005"
                    + "h\u0000\u0000\u0b86\u0b8b\u0003\u023c\u011e\u0000\u0b87\u0b89\u0005\u0016"
                    + "\u0000\u0000\u0b88\u0b87\u0001\u0000\u0000\u0000\u0b88\u0b89\u0001\u0000"
                    + "\u0000\u0000\u0b89\u0b8a\u0001\u0000\u0000\u0000\u0b8a\u0b8c\u0003\u02da"
                    + "\u016d\u0000\u0b8b\u0b88\u0001\u0000\u0000\u0000\u0b8b\u0b8c\u0001\u0000"
                    + "\u0000\u0000\u0b8c\u0b8d\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u00052\u0000"
                    + "\u0000\u0b8e\u0b8f\u0003\u0224\u0112\u0000\u0b8f\u0b90\u0005\"\u0000\u0000"
                    + "\u0b90\u0b91\u0003\u02be\u015f\u0000\u0b91\u0b92\u0003\u01ea\u00f5\u0000"
                    + "\u0b92\u01e9\u0001\u0000\u0000\u0000\u0b93\u0b96\u0003\u01ee\u00f7\u0000"
                    + "\u0b94\u0b96\u0003\u01f0\u00f8\u0000\u0b95\u0b93\u0001\u0000\u0000\u0000"
                    + "\u0b95\u0b94\u0001\u0000\u0000\u0000\u0b96\u0b99\u0001\u0000\u0000\u0000"
                    + "\u0b97\u0b95\u0001\u0000\u0000\u0000\u0b97\u0b98\u0001\u0000\u0000\u0000"
                    + "\u0b98\u0b9b\u0001\u0000\u0000\u0000\u0b99\u0b97\u0001\u0000\u0000\u0000"
                    + "\u0b9a\u0b9c\u0003\u01ec\u00f6\u0000\u0b9b\u0b9a\u0001\u0000\u0000\u0000"
                    + "\u0b9b\u0b9c\u0001\u0000\u0000\u0000\u0b9c\u01eb\u0001\u0000\u0000\u0000"
                    + "\u0b9d\u0b9e\u0005\u00a3\u0000\u0000\u0b9e\u0b9f\u0005\u0007\u0000\u0000"
                    + "\u0b9f\u0ba2\u0005\u012e\u0000\u0000\u0ba0\u0ba1\u0005\u0005\u0000\u0000"
                    + "\u0ba1\u0ba3\u0003\u02be\u015f\u0000\u0ba2\u0ba0\u0001\u0000\u0000\u0000"
                    + "\u0ba2\u0ba3\u0001\u0000\u0000\u0000\u0ba3\u0ba4\u0001\u0000\u0000\u0000"
                    + "\u0ba4\u0ba5\u0005\u00a4\u0000\u0000\u0ba5\u0ba6\u0005\u0019\u0000\u0000"
                    + "\u0ba6\u0ba7\u0005\u0107\u0000\u0000\u0ba7\u0ba8\u0003\u0250\u0128\u0000"
                    + "\u0ba8\u01ed\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0005\u00a3\u0000\u0000"
                    + "\u0baa\u0bab\u0005\u012e\u0000\u0000\u0bab\u0bac\u0005\u0005\u0000\u0000"
                    + "\u0bac\u0bad\u0003\u02be\u015f\u0000\u0bad\u0bae\u0005\u00a4\u0000\u0000"
                    + "\u0bae\u0baf\u0003\u01f2\u00f9\u0000\u0baf\u01ef\u0001\u0000\u0000\u0000"
                    + "\u0bb0\u0bb1\u0005\u00a3\u0000\u0000\u0bb1\u0bb2\u0005\u012e\u0000\u0000"
                    + "\u0bb2\u0bb3\u0005\u00a4\u0000\u0000\u0bb3\u0bb4\u0003\u01f2\u00f9\u0000"
                    + "\u0bb4\u01f1\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0005\u00e0\u0000\u0000"
                    + "\u0bb6\u0bb9\u0003\u01d0\u00e8\u0000\u0bb7\u0bb9\u0005\u00ad\u0000\u0000"
                    + "\u0bb8\u0bb5\u0001\u0000\u0000\u0000\u0bb8\u0bb7\u0001\u0000\u0000\u0000"
                    + "\u0bb9\u01f3\u0001\u0000\u0000\u0000\u0bba\u0bbb\u0005u\u0000\u0000\u0bbb"
                    + "\u0bbd\u0005\u010a\u0000\u0000\u0bbc\u0bbe\u0005\u016a\u0000\u0000\u0bbd"
                    + "\u0bbc\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000\u0000\u0000\u0bbf"
                    + "\u0bbd\u0001\u0000\u0000\u0000\u0bbf\u0bc0\u0001\u0000\u0000\u0000\u0bc0"
                    + "\u01f5\u0001\u0000\u0000\u0000\u0bc1\u0bc3\u0005\u0017\u0000\u0000\u0bc2"
                    + "\u0bc4\u0005\u0175\u0000\u0000\u0bc3\u0bc2\u0001\u0000\u0000\u0000\u0bc3"
                    + "\u0bc4\u0001\u0000\u0000\u0000\u0bc4\u0bcb\u0001\u0000\u0000\u0000\u0bc5"
                    + "\u0bc7\u0007\u000f\u0000\u0000\u0bc6\u0bc5\u0001\u0000\u0000\u0000\u0bc6"
                    + "\u0bc7\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0001\u0000\u0000\u0000\u0bc8"
                    + "\u0bcc\u0003\u01f8\u00fc\u0000\u0bc9\u0bca\u00051\u0000\u0000\u0bca\u0bcc"
                    + "\u0003\u01fa\u00fd\u0000\u0bcb\u0bc6\u0001\u0000\u0000\u0000\u0bcb\u0bc9"
                    + "\u0001\u0000\u0000\u0000\u0bcc\u0bcf\u0001\u0000\u0000\u0000\u0bcd\u0bcf"
                    + "\u0003\u01fe\u00ff\u0000\u0bce\u0bc1\u0001\u0000\u0000\u0000\u0bce\u0bcd"
                    + "\u0001\u0000\u0000\u0000\u0bcf\u01f7\u0001\u0000\u0000\u0000\u0bd0\u0bd5"
                    + "\u0003\u01fc\u00fe\u0000\u0bd1\u0bd2\u0005\u014e\u0000\u0000\u0bd2\u0bd4"
                    + "\u0003\u01fc\u00fe\u0000\u0bd3\u0bd1\u0001\u0000\u0000\u0000\u0bd4\u0bd7"
                    + "\u0001\u0000\u0000\u0000\u0bd5\u0bd3\u0001\u0000\u0000\u0000\u0bd5\u0bd6"
                    + "\u0001\u0000\u0000\u0000\u0bd6\u01f9\u0001\u0000\u0000\u0000\u0bd7\u0bd5"
                    + "\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0005\u0150\u0000\u0000\u0bd9\u0bda"
                    + "\u0003\u0202\u0101\u0000\u0bda\u0bdc\u0005\u0151\u0000\u0000\u0bdb\u0bdd"
                    + "\u0003\u0120\u0090\u0000\u0bdc\u0bdb\u0001\u0000\u0000\u0000\u0bdc\u0bdd"
                    + "\u0001\u0000\u0000\u0000\u0bdd\u0bdf\u0001\u0000\u0000\u0000\u0bde\u0be0"
                    + "\u0003\u0124\u0092\u0000\u0bdf\u0bde\u0001\u0000\u0000\u0000\u0bdf\u0be0"
                    + "\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000\u0000\u0000\u0be1\u0be2"
                    + "\u00052\u0000\u0000\u0be2\u0bf1\u0005\u016a\u0000\u0000\u0be3\u0bef\u0005"
                    + "\u0016\u0000\u0000\u0be4\u0be7\u0005\u0150\u0000\u0000\u0be5\u0be8\u0003"
                    + "\u021a\u010d\u0000\u0be6\u0be8\u0003\u0144\u00a2\u0000\u0be7\u0be5\u0001"
                    + "\u0000\u0000\u0000\u0be7\u0be6\u0001\u0000\u0000\u0000\u0be8\u0be9\u0001"
                    + "\u0000\u0000\u0000\u0be9\u0bea\u0005\u0151\u0000\u0000\u0bea\u0bf0\u0001"
                    + "\u0000\u0000\u0000\u0beb\u0bee\u0003\u021a\u010d\u0000\u0bec\u0bee\u0003"
                    + "\u0144\u00a2\u0000\u0bed\u0beb\u0001\u0000\u0000\u0000\u0bed\u0bec\u0001"
                    + "\u0000\u0000\u0000\u0bee\u0bf0\u0001\u0000\u0000\u0000\u0bef\u0be4\u0001"
                    + "\u0000\u0000\u0000\u0bef\u0bed\u0001\u0000\u0000\u0000\u0bf0\u0bf2\u0001"
                    + "\u0000\u0000\u0000\u0bf1\u0be3\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001"
                    + "\u0000\u0000\u0000\u0bf2\u0bf4\u0001\u0000\u0000\u0000\u0bf3\u0bf5\u0003"
                    + "\u0120\u0090\u0000\u0bf4\u0bf3\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001"
                    + "\u0000\u0000\u0000\u0bf5\u0bf7\u0001\u0000\u0000\u0000\u0bf6\u0bf8\u0003"
                    + "\u0122\u0091\u0000\u0bf7\u0bf6\u0001\u0000\u0000\u0000\u0bf7\u0bf8\u0001"
                    + "\u0000\u0000\u0000\u0bf8\u01fb\u0001\u0000\u0000\u0000\u0bf9\u0c0e\u0003"
                    + "\u0214\u010a\u0000\u0bfa\u0c0b\u0003\u02be\u015f\u0000\u0bfb\u0bfd\u0005"
                    + "\u0016\u0000\u0000\u0bfc\u0bfb\u0001\u0000\u0000\u0000\u0bfc\u0bfd\u0001"
                    + "\u0000\u0000\u0000\u0bfd\u0bfe\u0001\u0000\u0000\u0000\u0bfe\u0c0c\u0003"
                    + "\u02da\u016d\u0000\u0bff\u0c00\u0005\u0016\u0000\u0000\u0c00\u0c01\u0005"
                    + "\u0150\u0000\u0000\u0c01\u0c06\u0003\u02da\u016d\u0000\u0c02\u0c03\u0005"
                    + "\u014e\u0000\u0000\u0c03\u0c05\u0003\u02da\u016d\u0000\u0c04\u0c02\u0001"
                    + "\u0000\u0000\u0000\u0c05\u0c08\u0001\u0000\u0000\u0000\u0c06\u0c04\u0001"
                    + "\u0000\u0000\u0000\u0c06\u0c07\u0001\u0000\u0000\u0000\u0c07\u0c09\u0001"
                    + "\u0000\u0000\u0000\u0c08\u0c06\u0001\u0000\u0000\u0000\u0c09\u0c0a\u0005"
                    + "\u0151\u0000\u0000\u0c0a\u0c0c\u0001\u0000\u0000\u0000\u0c0b\u0bfc\u0001"
                    + "\u0000\u0000\u0000\u0c0b\u0bff\u0001\u0000\u0000\u0000\u0c0b\u0c0c\u0001"
                    + "\u0000\u0000\u0000\u0c0c\u0c0e\u0001\u0000\u0000\u0000\u0c0d\u0bf9\u0001"
                    + "\u0000\u0000\u0000\u0c0d\u0bfa\u0001\u0000\u0000\u0000\u0c0e\u01fd\u0001"
                    + "\u0000\u0000\u0000\u0c0f\u0c10\u0005b\u0000\u0000\u0c10\u0c14\u0003\u0202"
                    + "\u0101\u0000\u0c11\u0c12\u0005d\u0000\u0000\u0c12\u0c14\u0003\u0202\u0101"
                    + "\u0000\u0c13\u0c0f\u0001\u0000\u0000\u0000\u0c13\u0c11\u0001\u0000\u0000"
                    + "\u0000\u0c14\u0c16\u0001\u0000\u0000\u0000\u0c15\u0c17\u0003\u0120\u0090"
                    + "\u0000\u0c16\u0c15\u0001\u0000\u0000\u0000\u0c16\u0c17\u0001\u0000\u0000"
                    + "\u0000\u0c17\u0c19\u0001\u0000\u0000\u0000\u0c18\u0c1a\u0003\u0124\u0092"
                    + "\u0000\u0c19\u0c18\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000"
                    + "\u0000\u0c1a\u0c1b\u0001\u0000\u0000\u0000\u0c1b\u0c1c\u00052\u0000\u0000"
                    + "\u0c1c\u0c2b\u0005\u016a\u0000\u0000\u0c1d\u0c29\u0005\u0016\u0000\u0000"
                    + "\u0c1e\u0c21\u0005\u0150\u0000\u0000\u0c1f\u0c22\u0003\u021a\u010d\u0000"
                    + "\u0c20\u0c22\u0003\u0144\u00a2\u0000\u0c21\u0c1f\u0001\u0000\u0000\u0000"
                    + "\u0c21\u0c20\u0001\u0000\u0000\u0000\u0c22\u0c23\u0001\u0000\u0000\u0000"
                    + "\u0c23\u0c24\u0005\u0151\u0000\u0000\u0c24\u0c2a\u0001\u0000\u0000\u0000"
                    + "\u0c25\u0c28\u0003\u021a\u010d\u0000\u0c26\u0c28\u0003\u0144\u00a2\u0000"
                    + "\u0c27\u0c25\u0001\u0000\u0000\u0000\u0c27\u0c26\u0001\u0000\u0000\u0000"
                    + "\u0c28\u0c2a\u0001\u0000\u0000\u0000\u0c29\u0c1e\u0001\u0000\u0000\u0000"
                    + "\u0c29\u0c27\u0001\u0000\u0000\u0000\u0c2a\u0c2c\u0001\u0000\u0000\u0000"
                    + "\u0c2b\u0c1d\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0001\u0000\u0000\u0000"
                    + "\u0c2c\u0c2e\u0001\u0000\u0000\u0000\u0c2d\u0c2f\u0003\u0120\u0090\u0000"
                    + "\u0c2e\u0c2d\u0001\u0000\u0000\u0000\u0c2e\u0c2f\u0001\u0000\u0000\u0000"
                    + "\u0c2f\u0c31\u0001\u0000\u0000\u0000\u0c30\u0c32\u0003\u0122\u0091\u0000"
                    + "\u0c31\u0c30\u0001\u0000\u0000\u0000\u0c31\u0c32\u0001\u0000\u0000\u0000"
                    + "\u0c32\u01ff\u0001\u0000\u0000\u0000\u0c33\u0c36\u0003\u0214\u010a\u0000"
                    + "\u0c34\u0c36\u0003\u02be\u015f\u0000\u0c35\u0c33\u0001\u0000\u0000\u0000"
                    + "\u0c35\u0c34\u0001\u0000\u0000\u0000\u0c36\u0201\u0001\u0000\u0000\u0000"
                    + "\u0c37\u0c3c\u0003\u0200\u0100\u0000\u0c38\u0c39\u0005\u014e\u0000\u0000"
                    + "\u0c39\u0c3b\u0003\u0200\u0100\u0000\u0c3a\u0c38\u0001\u0000\u0000\u0000"
                    + "\u0c3b\u0c3e\u0001\u0000\u0000\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000"
                    + "\u0c3c\u0c3d\u0001\u0000\u0000\u0000\u0c3d\u0203\u0001\u0000\u0000\u0000"
                    + "\u0c3e\u0c3c\u0001\u0000\u0000\u0000\u0c3f\u0c40\u0005\u00e8\u0000\u0000"
                    + "\u0c40\u0c45\u0003\u0206\u0103\u0000\u0c41\u0c42\u0005\u014e\u0000\u0000"
                    + "\u0c42\u0c44\u0003\u0206\u0103\u0000\u0c43\u0c41\u0001\u0000\u0000\u0000"
                    + "\u0c44\u0c47\u0001\u0000\u0000\u0000\u0c45\u0c43\u0001\u0000\u0000\u0000"
                    + "\u0c45\u0c46\u0001\u0000\u0000\u0000\u0c46\u0205\u0001\u0000\u0000\u0000"
                    + "\u0c47\u0c45\u0001\u0000\u0000\u0000\u0c48\u0c49\u0003\u02da\u016d\u0000"
                    + "\u0c49\u0c4a\u0005\u0016\u0000\u0000\u0c4a\u0c4b\u0003\u0208\u0104\u0000"
                    + "\u0c4b\u0207\u0001\u0000\u0000\u0000\u0c4c\u0c59\u0003\u02da\u016d\u0000"
                    + "\u0c4d\u0c4f\u0005\u0150\u0000\u0000\u0c4e\u0c50\u0003\u02da\u016d\u0000"
                    + "\u0c4f\u0c4e\u0001\u0000\u0000\u0000\u0c4f\u0c50\u0001\u0000\u0000\u0000"
                    + "\u0c50\u0c52\u0001\u0000\u0000\u0000\u0c51\u0c53\u0003\u0242\u0121\u0000"
                    + "\u0c52\u0c51\u0001\u0000\u0000\u0000\u0c52\u0c53\u0001\u0000\u0000\u0000"
                    + "\u0c53\u0c55\u0001\u0000\u0000\u0000\u0c54\u0c56\u0003\u020a\u0105\u0000"
                    + "\u0c55\u0c54\u0001\u0000\u0000\u0000\u0c55\u0c56\u0001\u0000\u0000\u0000"
                    + "\u0c56\u0c57\u0001\u0000\u0000\u0000\u0c57\u0c59\u0005\u0151\u0000\u0000"
                    + "\u0c58\u0c4c\u0001\u0000\u0000\u0000\u0c58\u0c4d\u0001\u0000\u0000\u0000"
                    + "\u0c59\u0209\u0001\u0000\u0000\u0000\u0c5a\u0c5d\u0003\u020c\u0106\u0000"
                    + "\u0c5b\u0c5d\u0003\u020e\u0107\u0000\u0c5c\u0c5a\u0001\u0000\u0000\u0000"
                    + "\u0c5c\u0c5b\u0001\u0000\u0000\u0000\u0c5d\u020b\u0001\u0000\u0000\u0000"
                    + "\u0c5e\u0c5f\u0005k\u0000\u0000\u0c5f\u0c67\u0003\u0210\u0108\u0000\u0c60"
                    + "\u0c61\u0005k\u0000\u0000\u0c61\u0c62\u0005\u00cc\u0000\u0000\u0c62\u0c63"
                    + "\u0003\u0212\u0109\u0000\u0c63\u0c64\u0005\u0005\u0000\u0000\u0c64\u0c65"
                    + "\u0003\u0212\u0109\u0000\u0c65\u0c67\u0001\u0000\u0000\u0000\u0c66\u0c5e"
                    + "\u0001\u0000\u0000\u0000\u0c66\u0c60\u0001\u0000\u0000\u0000\u0c67\u020d"
                    + "\u0001\u0000\u0000\u0000\u0c68\u0c69\u0005\u00c9\u0000\u0000\u0c69\u0c71"
                    + "\u0003\u0210\u0108\u0000\u0c6a\u0c6b\u0005\u00c9\u0000\u0000\u0c6b\u0c6c"
                    + "\u0005\u00cc\u0000\u0000\u0c6c\u0c6d\u0003\u0212\u0109\u0000\u0c6d\u0c6e"
                    + "\u0005\u0005\u0000\u0000\u0c6e\u0c6f\u0003\u0212\u0109\u0000\u0c6f\u0c71"
                    + "\u0001\u0000\u0000\u0000\u0c70\u0c68\u0001\u0000\u0000\u0000\u0c70\u0c6a"
                    + "\u0001\u0000\u0000\u0000\u0c71\u020f\u0001\u0000\u0000\u0000\u0c72\u0c73"
                    + "\u0005\u00e9\u0000\u0000\u0c73\u0c79\u0005\u00ea\u0000\u0000\u0c74\u0c75"
                    + "\u0005\u00ec\u0000\u0000\u0c75\u0c79\u0005j\u0000\u0000\u0c76\u0c77\u0005"
                    + "\u016f\u0000\u0000\u0c77\u0c79\u0005\u00ea\u0000\u0000\u0c78\u0c72\u0001"
                    + "\u0000\u0000\u0000\u0c78\u0c74\u0001\u0000\u0000\u0000\u0c78\u0c76\u0001"
                    + "\u0000\u0000\u0000\u0c79\u0211\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0005"
                    + "\u00e9\u0000\u0000\u0c7b\u0c81\u0007\u0010\u0000\u0000\u0c7c\u0c7d\u0005"
                    + "\u00ec\u0000\u0000\u0c7d\u0c81\u0005j\u0000\u0000\u0c7e\u0c7f\u0005\u016f"
                    + "\u0000\u0000\u0c7f\u0c81\u0007\u0010\u0000\u0000\u0c80\u0c7a\u0001\u0000"
                    + "\u0000\u0000\u0c80\u0c7c\u0001\u0000\u0000\u0000\u0c80\u0c7e\u0001\u0000"
                    + "\u0000\u0000\u0c81\u0213\u0001\u0000\u0000\u0000\u0c82\u0c88\u0005\u0160"
                    + "\u0000\u0000\u0c83\u0c84\u0003\u023c\u011e\u0000\u0c84\u0c85\u0005\u014c"
                    + "\u0000\u0000\u0c85\u0c86\u0005\u0160\u0000\u0000\u0c86\u0c88\u0001\u0000"
                    + "\u0000\u0000\u0c87\u0c82\u0001\u0000\u0000\u0000\u0c87\u0c83\u0001\u0000"
                    + "\u0000\u0000\u0c88\u0215\u0001\u0000\u0000\u0000\u0c89\u0c8a\u0003\u02da"
                    + "\u016d\u0000\u0c8a\u0217\u0001\u0000\u0000\u0000\u0c8b\u0c90\u0003\u02be"
                    + "\u015f\u0000\u0c8c\u0c8d\u0005\u014e\u0000\u0000\u0c8d\u0c8f\u0003\u02be"
                    + "\u015f\u0000\u0c8e\u0c8c\u0001\u0000\u0000\u0000\u0c8f\u0c92\u0001\u0000"
                    + "\u0000\u0000\u0c90\u0c8e\u0001\u0000\u0000\u0000\u0c90\u0c91\u0001\u0000"
                    + "\u0000\u0000\u0c91\u0219\u0001\u0000\u0000\u0000\u0c92\u0c90\u0001\u0000"
                    + "\u0000\u0000\u0c93\u0c98\u0003\u02da\u016d\u0000\u0c94\u0c95\u0005\u014e"
                    + "\u0000\u0000\u0c95\u0c97\u0003\u02da\u016d\u0000\u0c96\u0c94\u0001\u0000"
                    + "\u0000\u0000\u0c97\u0c9a\u0001\u0000\u0000\u0000\u0c98\u0c96\u0001\u0000"
                    + "\u0000\u0000\u0c98\u0c99\u0001\u0000\u0000\u0000\u0c99\u021b\u0001\u0000"
                    + "\u0000\u0000\u0c9a\u0c98\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0005\u0015"
                    + "\u0000\u0000\u0c9c\u0c9d\u0003\u021e\u010f\u0000\u0c9d\u021d\u0001\u0000"
                    + "\u0000\u0000\u0c9e\u0c9f\u0003\u022a\u0115\u0000\u0c9f\u0ca2\u0003\u0226"
                    + "\u0113\u0000\u0ca0\u0ca1\u0005\u014e\u0000\u0000\u0ca1\u0ca3\u0003\u0226"
                    + "\u0113\u0000\u0ca2\u0ca0\u0001\u0000\u0000\u0000\u0ca3\u0ca4\u0001\u0000"
                    + "\u0000\u0000\u0ca4\u0ca2\u0001\u0000\u0000\u0000\u0ca4\u0ca5\u0001\u0000"
                    + "\u0000\u0000\u0ca5\u0ca8\u0001\u0000\u0000\u0000\u0ca6\u0ca8\u0003\u0222"
                    + "\u0111\u0000\u0ca7\u0c9e\u0001\u0000\u0000\u0000\u0ca7\u0ca6\u0001\u0000"
                    + "\u0000\u0000\u0ca8\u021f\u0001\u0000\u0000\u0000\u0ca9\u0cad\u0003\u0238"
                    + "\u011c\u0000\u0caa\u0cac\u0003\u022e\u0117\u0000\u0cab\u0caa\u0001\u0000"
                    + "\u0000\u0000\u0cac\u0caf\u0001\u0000\u0000\u0000\u0cad\u0cab\u0001\u0000"
                    + "\u0000\u0000\u0cad\u0cae\u0001\u0000\u0000\u0000\u0cae\u0cca\u0001\u0000"
                    + "\u0000\u0000\u0caf\u0cad\u0001\u0000\u0000\u0000\u0cb0\u0cb4\u0003\u0252"
                    + "\u0129\u0000\u0cb1\u0cb3\u0003\u022e\u0117\u0000\u0cb2\u0cb1\u0001\u0000"
                    + "\u0000\u0000\u0cb3\u0cb6\u0001\u0000\u0000\u0000\u0cb4\u0cb2\u0001\u0000"
                    + "\u0000\u0000\u0cb4\u0cb5\u0001\u0000\u0000\u0000\u0cb5\u0cca\u0001\u0000"
                    + "\u0000\u0000\u0cb6\u0cb4\u0001\u0000\u0000\u0000\u0cb7\u0cbb\u0003\u0240"
                    + "\u0120\u0000\u0cb8\u0cba\u0003\u022e\u0117\u0000\u0cb9\u0cb8\u0001\u0000"
                    + "\u0000\u0000\u0cba\u0cbd\u0001\u0000\u0000\u0000\u0cbb\u0cb9\u0001\u0000"
                    + "\u0000\u0000\u0cbb\u0cbc\u0001\u0000\u0000\u0000\u0cbc\u0cca\u0001\u0000"
                    + "\u0000\u0000\u0cbd\u0cbb\u0001\u0000\u0000\u0000\u0cbe\u0cc2\u0003\u0246"
                    + "\u0123\u0000\u0cbf\u0cc1\u0003\u022e\u0117\u0000\u0cc0\u0cbf\u0001\u0000"
                    + "\u0000\u0000\u0cc1\u0cc4\u0001\u0000\u0000\u0000\u0cc2\u0cc0\u0001\u0000"
                    + "\u0000\u0000\u0cc2\u0cc3\u0001\u0000\u0000\u0000\u0cc3\u0cca\u0001\u0000"
                    + "\u0000\u0000\u0cc4\u0cc2\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0005\u0150"
                    + "\u0000\u0000\u0cc6\u0cc7\u0003\u0222\u0111\u0000\u0cc7\u0cc8\u0005\u0151"
                    + "\u0000\u0000\u0cc8\u0cca\u0001\u0000\u0000\u0000\u0cc9\u0ca9\u0001\u0000"
                    + "\u0000\u0000\u0cc9\u0cb0\u0001\u0000\u0000\u0000\u0cc9\u0cb7\u0001\u0000"
                    + "\u0000\u0000\u0cc9\u0cbe\u0001\u0000\u0000\u0000\u0cc9\u0cc5\u0001\u0000"
                    + "\u0000\u0000\u0cca\u0221\u0001\u0000\u0000\u0000\u0ccb\u0cd6\u0003\u0220"
                    + "\u0110\u0000\u0ccc\u0ccd\u0003\u022c\u0116\u0000\u0ccd\u0cd2\u0003\u0224"
                    + "\u0112\u0000\u0cce\u0ccf\u0005\"\u0000\u0000\u0ccf\u0cd3\u0003\u02be\u015f"
                    + "\u0000\u0cd0\u0cd1\u00052\u0000\u0000\u0cd1\u0cd3\u0003\u0152\u00a9\u0000"
                    + "\u0cd2\u0cce\u0001\u0000\u0000\u0000\u0cd2\u0cd0\u0001\u0000\u0000\u0000"
                    + "\u0cd2\u0cd3\u0001\u0000\u0000\u0000\u0cd3\u0cd5\u0001\u0000\u0000\u0000"
                    + "\u0cd4\u0ccc\u0001\u0000\u0000\u0000\u0cd5\u0cd8\u0001\u0000\u0000\u0000"
                    + "\u0cd6\u0cd4\u0001\u0000\u0000\u0000\u0cd6\u0cd7\u0001\u0000\u0000\u0000"
                    + "\u0cd7\u0223\u0001\u0000\u0000\u0000\u0cd8\u0cd6\u0001\u0000\u0000\u0000"
                    + "\u0cd9\u0cde\u0003\u0238\u011c\u0000\u0cda\u0cde\u0003\u0252\u0129\u0000"
                    + "\u0cdb\u0cde\u0003\u0240\u0120\u0000\u0cdc\u0cde\u0003\u0246\u0123\u0000"
                    + "\u0cdd\u0cd9\u0001\u0000\u0000\u0000\u0cdd\u0cda\u0001\u0000\u0000\u0000"
                    + "\u0cdd\u0cdb\u0001\u0000\u0000\u0000\u0cdd\u0cdc\u0001\u0000\u0000\u0000"
                    + "\u0cde\u0ce2\u0001\u0000\u0000\u0000\u0cdf\u0ce1\u0003\u022e\u0117\u0000"
                    + "\u0ce0\u0cdf\u0001\u0000\u0000\u0000\u0ce1\u0ce4\u0001\u0000\u0000\u0000"
                    + "\u0ce2\u0ce0\u0001\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000"
                    + "\u0ce3\u0225\u0001\u0000\u0000\u0000\u0ce4\u0ce2\u0001\u0000\u0000\u0000"
                    + "\u0ce5\u0ce7\u0005\u001d\u0000\u0000\u0ce6\u0ce5\u0001\u0000\u0000\u0000"
                    + "\u0ce6\u0ce7\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001\u0000\u0000\u0000"
                    + "\u0ce8\u0ce9\u0003\u023a\u011d\u0000\u0ce9\u0cea\u0003\u0228\u0114\u0000"
                    + "\u0cea\u0227\u0001\u0000\u0000\u0000\u0ceb\u0cec\u0005\u0150\u0000\u0000"
                    + "\u0cec\u0ced\u0003\u0218\u010c\u0000\u0ced\u0cee\u0005\u0151\u0000\u0000"
                    + "\u0cee\u0229\u0001\u0000\u0000\u0000\u0cef\u0cf0\u0005\u001c\u0000\u0000"
                    + "\u0cf0\u022b\u0001\u0000\u0000\u0000\u0cf1\u0d0a\u0005\u001e\u0000\u0000"
                    + "\u0cf2\u0cf3\u0005\u00f9\u0000\u0000\u0cf3\u0d0a\u0005\u001e\u0000\u0000"
                    + "\u0cf4\u0d0a\u0005\u014e\u0000\u0000\u0cf5\u0cf6\u0005\u00cf\u0000\u0000"
                    + "\u0cf6\u0d0a\u0005\u001e\u0000\u0000\u0cf7\u0cf9\u0005\u001f\u0000\u0000"
                    + "\u0cf8\u0cfa\u0005\u001b\u0000\u0000\u0cf9\u0cf8\u0001\u0000\u0000\u0000"
                    + "\u0cf9\u0cfa\u0001\u0000\u0000\u0000\u0cfa\u0cfb\u0001\u0000\u0000\u0000"
                    + "\u0cfb\u0d0a\u0005\u001e\u0000\u0000\u0cfc\u0cfe\u0005 \u0000\u0000\u0cfd"
                    + "\u0cff\u0005\u001b\u0000\u0000\u0cfe\u0cfd\u0001\u0000\u0000\u0000\u0cfe"
                    + "\u0cff\u0001\u0000\u0000\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000\u0d00"
                    + "\u0d0a\u0005\u001e\u0000\u0000\u0d01\u0d03\u0005!\u0000\u0000\u0d02\u0d04"
                    + "\u0005\u001b\u0000\u0000\u0d03\u0d02\u0001\u0000\u0000\u0000\u0d03\u0d04"
                    + "\u0001\u0000\u0000\u0000\u0d04\u0d05\u0001\u0000\u0000\u0000\u0d05\u0d0a"
                    + "\u0005\u001e\u0000\u0000\u0d06\u0d07\u0005\u001f\u0000\u0000\u0d07\u0d08"
                    + "\u0005\u00d5\u0000\u0000\u0d08\u0d0a\u0005\u001e\u0000\u0000\u0d09\u0cf1"
                    + "\u0001\u0000\u0000\u0000\u0d09\u0cf2\u0001\u0000\u0000\u0000\u0d09\u0cf4"
                    + "\u0001\u0000\u0000\u0000\u0d09\u0cf5\u0001\u0000\u0000\u0000\u0d09\u0cf7"
                    + "\u0001\u0000\u0000\u0000\u0d09\u0cfc\u0001\u0000\u0000\u0000\u0d09\u0d01"
                    + "\u0001\u0000\u0000\u0000\u0d09\u0d06\u0001\u0000\u0000\u0000\u0d0a\u022d"
                    + "\u0001\u0000\u0000\u0000\u0d0b\u0d0c\u0005\u00d6\u0000\u0000\u0d0c\u0d0d"
                    + "\u0005\u00b2\u0000\u0000\u0d0d\u0d0e\u0005\u001b\u0000\u0000\u0d0e\u0d0f"
                    + "\u0003\u027e\u013f\u0000\u0d0f\u0d19\u0003\u0230\u0118\u0000\u0d10\u0d11"
                    + "\u0005\u0016\u0000\u0000\u0d11\u0d16\u0003\u02da\u016d\u0000\u0d12\u0d13"
                    + "\u0005\u014e\u0000\u0000\u0d13\u0d15\u0003\u02da\u016d\u0000\u0d14\u0d12"
                    + "\u0001\u0000\u0000\u0000\u0d15\u0d18\u0001\u0000\u0000\u0000\u0d16\u0d14"
                    + "\u0001\u0000\u0000\u0000\u0d16\u0d17\u0001\u0000\u0000\u0000\u0d17\u0d1a"
                    + "\u0001\u0000\u0000\u0000\u0d18\u0d16\u0001\u0000\u0000\u0000\u0d19\u0d10"
                    + "\u0001\u0000\u0000\u0000\u0d19\u0d1a\u0001\u0000\u0000\u0000\u0d1a\u0d47"
                    + "\u0001\u0000\u0000\u0000\u0d1b\u0d1d\u0005\u014e\u0000\u0000\u0d1c\u0d1b"
                    + "\u0001\u0000\u0000\u0000\u0d1c\u0d1d\u0001\u0000\u0000\u0000\u0d1d\u0d1e"
                    + "\u0001\u0000\u0000\u0000\u0d1e\u0d1f\u0005\u00d6\u0000\u0000\u0d1f\u0d20"
                    + "\u0005\u00b2\u0000\u0000\u0d20\u0d21\u0003\u027e\u013f\u0000\u0d21\u0d2b"
                    + "\u0003\u0230\u0118\u0000\u0d22\u0d23\u0005\u0016\u0000\u0000\u0d23\u0d28"
                    + "\u0003\u02da\u016d\u0000\u0d24\u0d25\u0005\u014e\u0000\u0000\u0d25\u0d27"
                    + "\u0003\u02da\u016d\u0000\u0d26\u0d24\u0001\u0000\u0000\u0000\u0d27\u0d2a"
                    + "\u0001\u0000\u0000\u0000\u0d28\u0d26\u0001\u0000\u0000\u0000\u0d28\u0d29"
                    + "\u0001\u0000\u0000\u0000\u0d29\u0d2c\u0001\u0000\u0000\u0000\u0d2a\u0d28"
                    + "\u0001\u0000\u0000\u0000\u0d2b\u0d22\u0001\u0000\u0000\u0000\u0d2b\u0d2c"
                    + "\u0001\u0000\u0000\u0000\u0d2c\u0d47\u0001\u0000\u0000\u0000\u0d2d\u0d2f"
                    + "\u0005\u014e\u0000\u0000\u0d2e\u0d2d\u0001\u0000\u0000\u0000\u0d2e\u0d2f"
                    + "\u0001\u0000\u0000\u0000\u0d2f\u0d30\u0001\u0000\u0000\u0000\u0d30\u0d31"
                    + "\u0005\u00d6\u0000\u0000\u0d31\u0d32\u0005%\u0000\u0000\u0d32\u0d33\u0005"
                    + "\u0150\u0000\u0000\u0d33\u0d34\u0003\u024c\u0126\u0000\u0d34\u0d36\u0005"
                    + "\u0151\u0000\u0000\u0d35\u0d37\u0005\u0016\u0000\u0000\u0d36\u0d35\u0001"
                    + "\u0000\u0000\u0000\u0d36\u0d37\u0001\u0000\u0000\u0000\u0d37\u0d38\u0001"
                    + "\u0000\u0000\u0000\u0d38\u0d44\u0003\u0230\u0118\u0000\u0d39\u0d3a\u0005"
                    + "\u0150\u0000\u0000\u0d3a\u0d3f\u0003\u02da\u016d\u0000\u0d3b\u0d3c\u0005"
                    + "\u014e\u0000\u0000\u0d3c\u0d3e\u0003\u02da\u016d\u0000\u0d3d\u0d3b\u0001"
                    + "\u0000\u0000\u0000\u0d3e\u0d41\u0001\u0000\u0000\u0000\u0d3f\u0d3d\u0001"
                    + "\u0000\u0000\u0000\u0d3f\u0d40\u0001\u0000\u0000\u0000\u0d40\u0d42\u0001"
                    + "\u0000\u0000\u0000\u0d41\u0d3f\u0001\u0000\u0000\u0000\u0d42\u0d43\u0005"
                    + "\u0151\u0000\u0000\u0d43\u0d45\u0001\u0000\u0000\u0000\u0d44\u0d39\u0001"
                    + "\u0000\u0000\u0000\u0d44\u0d45\u0001\u0000\u0000\u0000\u0d45\u0d47\u0001"
                    + "\u0000\u0000\u0000\u0d46\u0d0b\u0001\u0000\u0000\u0000\u0d46\u0d1c\u0001"
                    + "\u0000\u0000\u0000\u0d46\u0d2e\u0001\u0000\u0000\u0000\u0d47\u022f\u0001"
                    + "\u0000\u0000\u0000\u0d48\u0d49\u0003\u02da\u016d\u0000\u0d49\u0231\u0001"
                    + "\u0000\u0000\u0000\u0d4a\u0d4b\u0005\u0080\u0000\u0000\u0d4b\u0d4c\u0005"
                    + "\u0150\u0000\u0000\u0d4c\u0d4d\u0005\u0081\u0000\u0000\u0d4d\u0d4e\u0005"
                    + "\u016f\u0000\u0000\u0d4e\u0d4f\u0005\u0082\u0000\u0000\u0d4f\u0d50\u0005"
                    + "\u0083\u0000\u0000\u0d50\u0d5a\u0005\u016f\u0000\u0000\u0d51\u0d52\u0005"
                    + "\"\u0000\u0000\u0d52\u0d57\u0003\u02be\u015f\u0000\u0d53\u0d54\u0005\u014e"
                    + "\u0000\u0000\u0d54\u0d56\u0003\u02be\u015f\u0000\u0d55\u0d53\u0001\u0000"
                    + "\u0000\u0000\u0d56\u0d59\u0001\u0000\u0000\u0000\u0d57\u0d55\u0001\u0000"
                    + "\u0000\u0000\u0d57\u0d58\u0001\u0000\u0000\u0000\u0d58\u0d5b\u0001\u0000"
                    + "\u0000\u0000\u0d59\u0d57\u0001\u0000\u0000\u0000\u0d5a\u0d51\u0001\u0000"
                    + "\u0000\u0000\u0d5a\u0d5b\u0001\u0000\u0000\u0000\u0d5b\u0d5c\u0001\u0000"
                    + "\u0000\u0000\u0d5c\u0d5d\u0005\u0151\u0000\u0000\u0d5d\u0233\u0001\u0000"
                    + "\u0000\u0000\u0d5e\u0d5f\u0005\u0080\u0000\u0000\u0d5f\u0d60\u0005\u0150"
                    + "\u0000\u0000\u0d60\u0d61\u0005\u016f\u0000\u0000\u0d61\u0d62\u0007\u0011"
                    + "\u0000\u0000\u0d62\u0d68\u0005\u0151\u0000\u0000\u0d63\u0d64\u0005\u0080"
                    + "\u0000\u0000\u0d64\u0d65\u0005\u0150\u0000\u0000\u0d65\u0d66\u0005\u016e"
                    + "\u0000\u0000\u0d66\u0d68\u0005\u0151\u0000\u0000\u0d67\u0d5e\u0001\u0000"
                    + "\u0000\u0000\u0d67\u0d63\u0001\u0000\u0000\u0000\u0d68\u0235\u0001\u0000"
                    + "\u0000\u0000\u0d69\u0d6c\u0003\u0232\u0119\u0000\u0d6a\u0d6c\u0003\u0234"
                    + "\u011a\u0000\u0d6b\u0d69\u0001\u0000\u0000\u0000\u0d6b\u0d6a\u0001\u0000"
                    + "\u0000\u0000\u0d6c\u0237\u0001\u0000\u0000\u0000\u0d6d\u0d6f\u0003\u023c"
                    + "\u011e\u0000\u0d6e\u0d70\u0003\u012e\u0097\u0000\u0d6f\u0d6e\u0001\u0000"
                    + "\u0000\u0000\u0d6f\u0d70\u0001\u0000\u0000\u0000\u0d70\u0d72\u0001\u0000"
                    + "\u0000\u0000\u0d71\u0d73\u0003\u0236\u011b\u0000\u0d72\u0d71\u0001\u0000"
                    + "\u0000\u0000\u0d72\u0d73\u0001\u0000\u0000\u0000\u0d73\u0d78\u0001\u0000"
                    + "\u0000\u0000\u0d74\u0d76\u0005\u0016\u0000\u0000\u0d75\u0d74\u0001\u0000"
                    + "\u0000\u0000\u0d75\u0d76\u0001\u0000\u0000\u0000\u0d76\u0d77\u0001\u0000"
                    + "\u0000\u0000\u0d77\u0d79\u0003\u02da\u016d\u0000\u0d78\u0d75\u0001\u0000"
                    + "\u0000\u0000\u0d78\u0d79\u0001\u0000\u0000\u0000\u0d79\u0239\u0001\u0000"
                    + "\u0000\u0000\u0d7a\u0d7c\u0003\u023c\u011e\u0000\u0d7b\u0d7d\u0003\u0236"
                    + "\u011b\u0000\u0d7c\u0d7b\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0001\u0000"
                    + "\u0000\u0000\u0d7d\u0d82\u0001\u0000\u0000\u0000\u0d7e\u0d80\u0005\u0016"
                    + "\u0000\u0000\u0d7f\u0d7e\u0001\u0000\u0000\u0000\u0d7f\u0d80\u0001\u0000"
                    + "\u0000\u0000\u0d80\u0d81\u0001\u0000\u0000\u0000\u0d81\u0d83\u0003\u02da"
                    + "\u016d\u0000\u0d82\u0d7f\u0001\u0000\u0000\u0000\u0d82\u0d83\u0001\u0000"
                    + "\u0000\u0000\u0d83\u023b\u0001\u0000\u0000\u0000\u0d84\u0d85\u0003\u02da"
                    + "\u016d\u0000\u0d85\u0d86\u0005\u014c\u0000\u0000\u0d86\u0d87\u0003\u02da"
                    + "\u016d\u0000\u0d87\u0d8a\u0001\u0000\u0000\u0000\u0d88\u0d8a\u0003\u02da"
                    + "\u016d\u0000\u0d89\u0d84\u0001\u0000\u0000\u0000\u0d89\u0d88\u0001\u0000"
                    + "\u0000\u0000\u0d8a\u023d\u0001\u0000\u0000\u0000\u0d8b\u0d8c\u0003\u02da"
                    + "\u016d\u0000\u0d8c\u0d8d\u0005\u014c\u0000\u0000\u0d8d\u0d8f\u0001\u0000"
                    + "\u0000\u0000\u0d8e\u0d8b\u0001\u0000\u0000\u0000\u0d8e\u0d8f\u0001\u0000"
                    + "\u0000\u0000\u0d8f\u0d90\u0001\u0000\u0000\u0000\u0d90\u0d91\u0003\u02da"
                    + "\u016d\u0000\u0d91\u023f\u0001\u0000\u0000\u0000\u0d92\u0d93\u0005\u0150"
                    + "\u0000\u0000\u0d93\u0d94\u0003\u01ae\u00d7\u0000\u0d94\u0d96\u0005\u0151"
                    + "\u0000\u0000\u0d95\u0d97\u0005\u0016\u0000\u0000\u0d96\u0d95\u0001\u0000"
                    + "\u0000\u0000\u0d96\u0d97\u0001\u0000\u0000\u0000\u0d97\u0d98\u0001\u0000"
                    + "\u0000\u0000\u0d98\u0d99\u0003\u02da\u016d\u0000\u0d99\u0241\u0001\u0000"
                    + "\u0000\u0000\u0d9a\u0d9c\u0003\u0278\u013c\u0000\u0d9b\u0d9d\u0003\u0274"
                    + "\u013a\u0000\u0d9c\u0d9b\u0001\u0000\u0000\u0000\u0d9c\u0d9d\u0001\u0000"
                    + "\u0000\u0000\u0d9d\u0da6\u0001\u0000\u0000\u0000\u0d9e\u0da6\u0003\u0274"
                    + "\u013a\u0000\u0d9f\u0da1\u0003\u027a\u013d\u0000\u0da0\u0da2\u0003\u027c"
                    + "\u013e\u0000\u0da1\u0da0\u0001\u0000\u0000\u0000\u0da1\u0da2\u0001\u0000"
                    + "\u0000\u0000\u0da2\u0da6\u0001\u0000\u0000\u0000\u0da3\u0da6\u0003\u027c"
                    + "\u013e\u0000\u0da4\u0da6\u0003\u0276\u013b\u0000\u0da5\u0d9a\u0001\u0000"
                    + "\u0000\u0000\u0da5\u0d9e\u0001\u0000\u0000\u0000\u0da5\u0d9f\u0001\u0000"
                    + "\u0000\u0000\u0da5\u0da3\u0001\u0000\u0000\u0000\u0da5\u0da4\u0001\u0000"
                    + "\u0000\u0000\u0da6\u0243\u0001\u0000\u0000\u0000\u0da7\u0dab\u0003\u0240"
                    + "\u0120\u0000\u0da8\u0dab\u0003\u0238\u011c\u0000\u0da9\u0dab\u0003\u0246"
                    + "\u0123\u0000\u0daa\u0da7\u0001\u0000\u0000\u0000\u0daa\u0da8\u0001\u0000"
                    + "\u0000\u0000\u0daa\u0da9\u0001\u0000\u0000\u0000\u0dab\u0245\u0001\u0000"
                    + "\u0000\u0000\u0dac\u0dad\u0003\u02da\u016d\u0000\u0dad\u0dae\u0005\u0150"
                    + "\u0000\u0000\u0dae\u0daf\u0005\"\u0000\u0000\u0daf\u0db1\u0003\u0244\u0122"
                    + "\u0000\u0db0\u0db2\u0003\u0242\u0121\u0000\u0db1\u0db0\u0001\u0000\u0000"
                    + "\u0000\u0db1\u0db2\u0001\u0000\u0000\u0000\u0db2\u0dc2\u0001\u0000\u0000"
                    + "\u0000\u0db3\u0db4\u0005\u0170\u0000\u0000\u0db4\u0db5\u0005\u0150\u0000"
                    + "\u0000\u0db5\u0db6\u0003\u02be\u015f\u0000\u0db6\u0dbf\u0005\u0151\u0000"
                    + "\u0000\u0db7\u0db8\u0005\u014e\u0000\u0000\u0db8\u0db9\u0005\u0170\u0000"
                    + "\u0000\u0db9\u0dba\u0005\u0150\u0000\u0000\u0dba\u0dbb\u0003\u02be\u015f"
                    + "\u0000\u0dbb\u0dbc\u0005\u0151\u0000\u0000\u0dbc\u0dbe\u0001\u0000\u0000"
                    + "\u0000\u0dbd\u0db7\u0001\u0000\u0000\u0000\u0dbe\u0dc1\u0001\u0000\u0000"
                    + "\u0000\u0dbf\u0dbd\u0001\u0000\u0000\u0000\u0dbf\u0dc0\u0001\u0000\u0000"
                    + "\u0000\u0dc0\u0dc3\u0001\u0000\u0000\u0000\u0dc1\u0dbf\u0001\u0000\u0000"
                    + "\u0000\u0dc2\u0db3\u0001\u0000\u0000\u0000\u0dc2\u0dc3\u0001\u0000\u0000"
                    + "\u0000\u0dc3\u0dc4\u0001\u0000\u0000\u0000\u0dc4\u0dc6\u0005\u0151\u0000"
                    + "\u0000\u0dc5\u0dc7\u0003\u02da\u016d\u0000\u0dc6\u0dc5\u0001\u0000\u0000"
                    + "\u0000\u0dc6\u0dc7\u0001\u0000\u0000\u0000\u0dc7\u0247\u0001\u0000\u0000"
                    + "\u0000\u0dc8\u0dc9\u0005\u0014\u0000\u0000\u0dc9\u0dca\u0003\u024a\u0125"
                    + "\u0000\u0dca\u0249\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0003\u02be\u015f"
                    + "\u0000\u0dcc\u024b\u0001\u0000\u0000\u0000\u0dcd\u0dce\u0005\u0107\u0000"
                    + "\u0000\u0dce\u0dcf\u0003\u024e\u0127\u0000\u0dcf\u024d\u0001\u0000\u0000"
                    + "\u0000\u0dd0\u0dd5\u0003\u0250\u0128\u0000\u0dd1\u0dd2\u0005\u014e\u0000"
                    + "\u0000\u0dd2\u0dd4\u0003\u0250\u0128\u0000\u0dd3\u0dd1\u0001\u0000\u0000"
                    + "\u0000\u0dd4\u0dd7\u0001\u0000\u0000\u0000\u0dd5\u0dd3\u0001\u0000\u0000"
                    + "\u0000\u0dd5\u0dd6\u0001\u0000\u0000\u0000\u0dd6\u024f\u0001\u0000\u0000"
                    + "\u0000\u0dd7\u0dd5\u0001\u0000\u0000\u0000\u0dd8\u0dd9\u0003\u0268\u0134"
                    + "\u0000\u0dd9\u0251\u0001\u0000\u0000\u0000\u0dda\u0ddb\u0005%\u0000\u0000"
                    + "\u0ddb\u0ddc\u0005\u0150\u0000\u0000\u0ddc\u0ddd\u0003\u024c\u0126\u0000"
                    + "\u0ddd\u0ddf\u0005\u0151\u0000\u0000\u0dde\u0de0\u0005\u0016\u0000\u0000"
                    + "\u0ddf\u0dde\u0001\u0000\u0000\u0000\u0ddf\u0de0\u0001\u0000\u0000\u0000"
                    + "\u0de0\u0de1\u0001\u0000\u0000\u0000\u0de1\u0deb\u0003\u0230\u0118\u0000"
                    + "\u0de2\u0de3\u0005\u0150\u0000\u0000\u0de3\u0de8\u0003\u02da\u016d\u0000"
                    + "\u0de4\u0de5\u0005\u014e\u0000\u0000\u0de5\u0de7\u0003\u02da\u016d\u0000"
                    + "\u0de6\u0de4\u0001\u0000\u0000\u0000\u0de7\u0dea\u0001\u0000\u0000\u0000"
                    + "\u0de8\u0de6\u0001\u0000\u0000\u0000\u0de8\u0de9\u0001\u0000\u0000\u0000"
                    + "\u0de9\u0dec\u0001\u0000\u0000\u0000\u0dea\u0de8\u0001\u0000\u0000\u0000"
                    + "\u0deb\u0de2\u0001\u0000\u0000\u0000\u0deb\u0dec\u0001\u0000\u0000\u0000"
                    + "\u0dec\u0ded\u0001\u0000\u0000\u0000\u0ded\u0dee\u0005\u0151\u0000\u0000"
                    + "\u0dee\u0253\u0001\u0000\u0000\u0000\u0def\u0df0\u0005\u0011\u0000\u0000"
                    + "\u0df0\u0df1\u0005\u0012\u0000\u0000\u0df1\u0df2\u0003\u0256\u012b\u0000"
                    + "\u0df2\u0255\u0001\u0000\u0000\u0000\u0df3\u0df7\u0003\u025a\u012d\u0000"
                    + "\u0df4\u0df7\u0003\u025c\u012e\u0000\u0df5\u0df7\u0003\u0258\u012c\u0000"
                    + "\u0df6\u0df3\u0001\u0000\u0000\u0000\u0df6\u0df4\u0001\u0000\u0000\u0000"
                    + "\u0df6\u0df5\u0001\u0000\u0000\u0000\u0df7\u0257\u0001\u0000\u0000\u0000"
                    + "\u0df8\u0df9\u0005\u0150\u0000\u0000\u0df9\u0dfa\u0005\u0151\u0000\u0000"
                    + "\u0dfa\u0259\u0001\u0000\u0000\u0000\u0dfb\u0dfc\u0007\u0012\u0000\u0000"
                    + "\u0dfc\u0dfd\u0005\u0150\u0000\u0000\u0dfd\u0e02\u0003\u02be\u015f\u0000"
                    + "\u0dfe\u0dff\u0005\u014e\u0000\u0000\u0dff\u0e01\u0003\u02be\u015f\u0000"
                    + "\u0e00\u0dfe\u0001\u0000\u0000\u0000\u0e01\u0e04\u0001\u0000\u0000\u0000"
                    + "\u0e02\u0e00\u0001\u0000\u0000\u0000\u0e02\u0e03\u0001\u0000\u0000\u0000"
                    + "\u0e03\u0e05\u0001\u0000\u0000\u0000\u0e04\u0e02\u0001\u0000\u0000\u0000"
                    + "\u0e05\u0e06\u0005\u0151\u0000\u0000\u0e06\u025b\u0001\u0000\u0000\u0000"
                    + "\u0e07\u0e0c\u0003\u026a\u0135\u0000\u0e08\u0e09\u0005\u0095\u0000\u0000"
                    + "\u0e09\u0e0d\u0005\u00e4\u0000\u0000\u0e0a\u0e0b\u0005\u0095\u0000\u0000"
                    + "\u0e0b\u0e0d\u0005\u00e5\u0000\u0000\u0e0c\u0e08\u0001\u0000\u0000\u0000"
                    + "\u0e0c\u0e0a\u0001\u0000\u0000\u0000\u0e0c\u0e0d\u0001\u0000\u0000\u0000"
                    + "\u0e0d\u0e1b\u0001\u0000\u0000\u0000\u0e0e\u0e0f\u0005\u00f2\u0000\u0000"
                    + "\u0e0f\u0e10\u0005\u00f3\u0000\u0000\u0e10\u0e11\u0005\u0150\u0000\u0000"
                    + "\u0e11\u0e16\u0003\u025e\u012f\u0000\u0e12\u0e13\u0005\u014e\u0000\u0000"
                    + "\u0e13\u0e15\u0003\u025e\u012f\u0000\u0e14\u0e12\u0001\u0000\u0000\u0000"
                    + "\u0e15\u0e18\u0001\u0000\u0000\u0000\u0e16\u0e14\u0001\u0000\u0000\u0000"
                    + "\u0e16\u0e17\u0001\u0000\u0000\u0000\u0e17\u0e19\u0001\u0000\u0000\u0000"
                    + "\u0e18\u0e16\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0005\u0151\u0000\u0000"
                    + "\u0e1a\u0e1c\u0001\u0000\u0000\u0000\u0e1b\u0e0e\u0001\u0000\u0000\u0000"
                    + "\u0e1b\u0e1c\u0001\u0000\u0000\u0000\u0e1c\u025d\u0001\u0000\u0000\u0000"
                    + "\u0e1d\u0e20\u0003\u0260\u0130\u0000\u0e1e\u0e20\u0003\u0262\u0131\u0000"
                    + "\u0e1f\u0e1d\u0001\u0000\u0000\u0000\u0e1f\u0e1e\u0001\u0000\u0000\u0000"
                    + "\u0e20\u025f\u0001\u0000\u0000\u0000\u0e21\u0e23\u0005\u0150\u0000\u0000"
                    + "\u0e22\u0e24\u0003\u02be\u015f\u0000\u0e23\u0e22\u0001\u0000\u0000\u0000"
                    + "\u0e23\u0e24\u0001\u0000\u0000\u0000\u0e24\u0e29\u0001\u0000\u0000\u0000"
                    + "\u0e25\u0e26\u0005\u014e\u0000\u0000\u0e26\u0e28\u0003\u02be\u015f\u0000"
                    + "\u0e27\u0e25\u0001\u0000\u0000\u0000\u0e28\u0e2b\u0001\u0000\u0000\u0000"
                    + "\u0e29\u0e27\u0001\u0000\u0000\u0000\u0e29\u0e2a\u0001\u0000\u0000\u0000"
                    + "\u0e2a\u0e2c\u0001\u0000\u0000\u0000\u0e2b\u0e29\u0001\u0000\u0000\u0000"
                    + "\u0e2c\u0e2d\u0005\u0151\u0000\u0000\u0e2d\u0261\u0001\u0000\u0000\u0000"
                    + "\u0e2e\u0e2f\u0003\u02be\u015f\u0000\u0e2f\u0263\u0001\u0000\u0000\u0000"
                    + "\u0e30\u0e31\u0005\u0013\u0000\u0000\u0e31\u0e32\u0003\u0266\u0133\u0000"
                    + "\u0e32\u0265\u0001\u0000\u0000\u0000\u0e33\u0e34\u0003\u02be\u015f\u0000"
                    + "\u0e34\u0267\u0001\u0000\u0000\u0000\u0e35\u0e36\u0005\u0150\u0000\u0000"
                    + "\u0e36\u0e37\u0003\u026a\u0135\u0000\u0e37\u0e38\u0005\u0151\u0000\u0000"
                    + "\u0e38\u0269\u0001\u0000\u0000\u0000\u0e39\u0e3b\u0003\u02be\u015f\u0000"
                    + "\u0e3a\u0e3c\u0003\u026c\u0136\u0000\u0e3b\u0e3a\u0001\u0000\u0000\u0000"
                    + "\u0e3b\u0e3c\u0001\u0000\u0000\u0000\u0e3c\u026b\u0001\u0000\u0000\u0000"
                    + "\u0e3d\u0e3e\u0005\u014e\u0000\u0000\u0e3e\u0e40\u0003\u02be\u015f\u0000"
                    + "\u0e3f\u0e3d\u0001\u0000\u0000\u0000\u0e40\u0e41\u0001\u0000\u0000\u0000"
                    + "\u0e41\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0e42\u0001\u0000\u0000\u0000"
                    + "\u0e42\u026d\u0001\u0000\u0000\u0000\u0e43\u0e46\u0003\u0268\u0134\u0000"
                    + "\u0e44\u0e46\u0003\u026a\u0135\u0000\u0e45\u0e43\u0001\u0000\u0000\u0000"
                    + "\u0e45\u0e44\u0001\u0000\u0000\u0000\u0e46\u026f\u0001\u0000\u0000\u0000"
                    + "\u0e47\u0e48\u0005\u0150\u0000\u0000\u0e48\u0e4d\u0003\u017e\u00bf\u0000"
                    + "\u0e49\u0e4a\u0005\u014e\u0000\u0000\u0e4a\u0e4c\u0003\u017e\u00bf\u0000"
                    + "\u0e4b\u0e49\u0001\u0000\u0000\u0000\u0e4c\u0e4f\u0001\u0000\u0000\u0000"
                    + "\u0e4d\u0e4b\u0001\u0000\u0000\u0000\u0e4d\u0e4e\u0001\u0000\u0000\u0000"
                    + "\u0e4e\u0e50\u0001\u0000\u0000\u0000\u0e4f\u0e4d\u0001\u0000\u0000\u0000"
                    + "\u0e50\u0e51\u0005\u0151\u0000\u0000\u0e51\u0271\u0001\u0000\u0000\u0000"
                    + "\u0e52\u0e57\u0003\u017e\u00bf\u0000\u0e53\u0e54\u0005\u014e\u0000\u0000"
                    + "\u0e54\u0e56\u0003\u017e\u00bf\u0000\u0e55\u0e53\u0001\u0000\u0000\u0000"
                    + "\u0e56\u0e59\u0001\u0000\u0000\u0000\u0e57\u0e55\u0001\u0000\u0000\u0000"
                    + "\u0e57\u0e58\u0001\u0000\u0000\u0000\u0e58\u0273\u0001\u0000\u0000\u0000"
                    + "\u0e59\u0e57\u0001\u0000\u0000\u0000\u0e5a\u0e5b\u0005\u0010\u0000\u0000"
                    + "\u0e5b\u0e5c\u0005\u0012\u0000\u0000\u0e5c\u0e61\u0003\u017e\u00bf\u0000"
                    + "\u0e5d\u0e5e\u0005\u014e\u0000\u0000\u0e5e\u0e60\u0003\u017e\u00bf\u0000"
                    + "\u0e5f\u0e5d\u0001\u0000\u0000\u0000\u0e60\u0e63\u0001\u0000\u0000\u0000"
                    + "\u0e61\u0e5f\u0001\u0000\u0000\u0000\u0e61\u0e62\u0001\u0000\u0000\u0000"
                    + "\u0e62\u0275\u0001\u0000\u0000\u0000\u0e63\u0e61\u0001\u0000\u0000\u0000"
                    + "\u0e64\u0e65\u00053\u0000\u0000\u0e65\u0e66\u0005\u0012\u0000\u0000\u0e66"
                    + "\u0e67\u0003\u026e\u0137\u0000\u0e67\u0277\u0001\u0000\u0000\u0000\u0e68"
                    + "\u0e69\u0005#\u0000\u0000\u0e69\u0e6a\u0005\u0012\u0000\u0000\u0e6a\u0e6b"
                    + "\u0003\u026e\u0137\u0000\u0e6b\u0279\u0001\u0000\u0000\u0000\u0e6c\u0e6d"
                    + "\u00054\u0000\u0000\u0e6d\u0e6e\u0005\u0012\u0000\u0000\u0e6e\u0e6f\u0003"
                    + "\u026e\u0137\u0000\u0e6f\u027b\u0001\u0000\u0000\u0000\u0e70\u0e71\u0005"
                    + "5\u0000\u0000\u0e71\u0e74\u0005\u0012\u0000\u0000\u0e72\u0e75\u0003\u0270"
                    + "\u0138\u0000\u0e73\u0e75\u0003\u0272\u0139\u0000\u0e74\u0e72\u0001\u0000"
                    + "\u0000\u0000\u0e74\u0e73\u0001\u0000\u0000\u0000\u0e75\u027d\u0001\u0000"
                    + "\u0000\u0000\u0e76\u0e77\u0003\u0280\u0140\u0000\u0e77\u0e86\u0005\u0150"
                    + "\u0000\u0000\u0e78\u0e87\u0005\u0160\u0000\u0000\u0e79\u0e7b\u0007\u000f"
                    + "\u0000\u0000\u0e7a\u0e79\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000"
                    + "\u0000\u0000\u0e7b\u0e84\u0001\u0000\u0000\u0000\u0e7c\u0e81\u0003\u0200"
                    + "\u0100\u0000\u0e7d\u0e7e\u0005\u014e\u0000\u0000\u0e7e\u0e80\u0003\u0200"
                    + "\u0100\u0000\u0e7f\u0e7d\u0001\u0000\u0000\u0000\u0e80\u0e83\u0001\u0000"
                    + "\u0000\u0000\u0e81\u0e7f\u0001\u0000\u0000\u0000\u0e81\u0e82\u0001\u0000"
                    + "\u0000\u0000\u0e82\u0e85\u0001\u0000\u0000\u0000\u0e83\u0e81\u0001\u0000"
                    + "\u0000\u0000\u0e84\u0e7c\u0001\u0000\u0000\u0000\u0e84\u0e85\u0001\u0000"
                    + "\u0000\u0000\u0e85\u0e87\u0001\u0000\u0000\u0000\u0e86\u0e78\u0001\u0000"
                    + "\u0000\u0000\u0e86\u0e7a\u0001\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000"
                    + "\u0000\u0000\u0e88\u0e8b\u0005\u0151\u0000\u0000\u0e89\u0e8a\u0005\u00f1"
                    + "\u0000\u0000\u0e8a\u0e8c\u0003\u0208\u0104\u0000\u0e8b\u0e89\u0001\u0000"
                    + "\u0000\u0000\u0e8b\u0e8c\u0001\u0000\u0000\u0000\u0e8c\u027f\u0001\u0000"
                    + "\u0000\u0000\u0e8d\u0e90\u0003\u02dc\u016e\u0000\u0e8e\u0e90\u0003\u02e2"
                    + "\u0171\u0000\u0e8f\u0e8d\u0001\u0000\u0000\u0000\u0e8f\u0e8e\u0001\u0000"
                    + "\u0000\u0000\u0e90\u0281\u0001\u0000\u0000\u0000\u0e91\u0e92\u0005\u0085"
                    + "\u0000\u0000\u0e92\u0e93\u0005\u0150\u0000\u0000\u0e93\u0e94\u0003\u02be"
                    + "\u015f\u0000\u0e94\u0e95\u0005\u0016\u0000\u0000\u0e95\u0e96\u0003\u01a2"
                    + "\u00d1\u0000\u0e96\u0e97\u0005\u0151\u0000\u0000\u0e97\u0283\u0001\u0000"
                    + "\u0000\u0000\u0e98\u0e99\u0005\u00a2\u0000\u0000\u0e99\u0e9f\u0003\u02be"
                    + "\u015f\u0000\u0e9a\u0e9b\u0005\u00a3\u0000\u0000\u0e9b\u0e9c\u0003\u02be"
                    + "\u015f\u0000\u0e9c\u0e9d\u0005\u00a4\u0000\u0000\u0e9d\u0e9e\u0003\u02be"
                    + "\u015f\u0000\u0e9e\u0ea0\u0001\u0000\u0000\u0000\u0e9f\u0e9a\u0001\u0000"
                    + "\u0000\u0000\u0ea0\u0ea1\u0001\u0000\u0000\u0000\u0ea1\u0e9f\u0001\u0000"
                    + "\u0000\u0000\u0ea1\u0ea2\u0001\u0000\u0000\u0000\u0ea2\u0ea5\u0001\u0000"
                    + "\u0000\u0000\u0ea3\u0ea4\u0005\u00a5\u0000\u0000\u0ea4\u0ea6\u0003\u02be"
                    + "\u015f\u0000\u0ea5\u0ea3\u0001\u0000\u0000\u0000\u0ea5\u0ea6\u0001\u0000"
                    + "\u0000\u0000\u0ea6\u0ea7\u0001\u0000\u0000\u0000\u0ea7\u0ea8\u0005\u00a6"
                    + "\u0000\u0000\u0ea8\u0285\u0001\u0000\u0000\u0000\u0ea9\u0eaf\u0005\u00a2"
                    + "\u0000\u0000\u0eaa\u0eab\u0005\u00a3\u0000\u0000\u0eab\u0eac\u0003\u02be"
                    + "\u015f\u0000\u0eac\u0ead\u0005\u00a4\u0000\u0000\u0ead\u0eae\u0003\u02be"
                    + "\u015f\u0000\u0eae\u0eb0\u0001\u0000\u0000\u0000\u0eaf\u0eaa\u0001\u0000"
                    + "\u0000\u0000\u0eb0\u0eb1\u0001\u0000\u0000\u0000\u0eb1\u0eaf\u0001\u0000"
                    + "\u0000\u0000\u0eb1\u0eb2\u0001\u0000\u0000\u0000\u0eb2\u0eb5\u0001\u0000"
                    + "\u0000\u0000\u0eb3\u0eb4\u0005\u00a5\u0000\u0000\u0eb4\u0eb6\u0003\u02be"
                    + "\u015f\u0000\u0eb5\u0eb3\u0001\u0000\u0000\u0000\u0eb5\u0eb6\u0001\u0000"
                    + "\u0000\u0000\u0eb6\u0eb7\u0001\u0000\u0000\u0000\u0eb7\u0eb8\u0005\u00a6"
                    + "\u0000\u0000\u0eb8\u0287\u0001\u0000\u0000\u0000\u0eb9\u0eba\u0005\u012c"
                    + "\u0000\u0000\u0eba\u0ebb\u0005\u0150\u0000\u0000\u0ebb\u0ebe\u0003\u02be"
                    + "\u015f\u0000\u0ebc\u0ebd\u0005K\u0000\u0000\u0ebd\u0ebf\u0003\u028a\u0145"
                    + "\u0000\u0ebe\u0ebc\u0001\u0000\u0000\u0000\u0ebe\u0ebf\u0001\u0000\u0000"
                    + "\u0000\u0ebf\u0ec0\u0001\u0000\u0000\u0000\u0ec0\u0ec1\u0005\u0151\u0000"
                    + "\u0000\u0ec1\u0289\u0001\u0000\u0000\u0000\u0ec2\u0ec3\u0007\u0013\u0000"
                    + "\u0000\u0ec3\u028b\u0001\u0000\u0000\u0000\u0ec4\u0ec5\u0005\u012b\u0000"
                    + "\u0000\u0ec5\u0ec6\u0005\u0150\u0000\u0000\u0ec6\u0ec7\u0003\u028e\u0147"
                    + "\u0000\u0ec7\u0ec8\u0005\u0015\u0000\u0000\u0ec8\u0ec9\u0003\u02be\u015f"
                    + "\u0000\u0ec9\u0eca\u0005\u0151\u0000\u0000\u0eca\u028d\u0001\u0000\u0000"
                    + "\u0000\u0ecb\u0ecc\u0007\u0014\u0000\u0000\u0ecc\u028f\u0001\u0000\u0000"
                    + "\u0000\u0ecd\u0eda\u0003\u029e\u014f\u0000\u0ece\u0eda\u0005\u016f\u0000"
                    + "\u0000\u0ecf\u0eda\u0003\u0296\u014b\u0000\u0ed0\u0eda\u0003\u0298\u014c"
                    + "\u0000\u0ed1\u0eda\u0003\u029a\u014d\u0000\u0ed2\u0eda\u0005\u016a\u0000"
                    + "\u0000\u0ed3\u0eda\u0003\u0292\u0149\u0000\u0ed4\u0eda\u0005\u016c\u0000"
                    + "\u0000\u0ed5\u0eda\u0005\u016d\u0000\u0000\u0ed6\u0eda\u0003\u0294\u014a"
                    + "\u0000\u0ed7\u0eda\u0003\u02c6\u0163\u0000\u0ed8\u0eda\u0005@\u0000\u0000"
                    + "\u0ed9\u0ecd\u0001\u0000\u0000\u0000\u0ed9\u0ece\u0001\u0000\u0000\u0000"
                    + "\u0ed9\u0ecf\u0001\u0000\u0000\u0000\u0ed9\u0ed0\u0001\u0000\u0000\u0000"
                    + "\u0ed9\u0ed1\u0001\u0000\u0000\u0000\u0ed9\u0ed2\u0001\u0000\u0000\u0000"
                    + "\u0ed9\u0ed3\u0001\u0000\u0000\u0000\u0ed9\u0ed4\u0001\u0000\u0000\u0000"
                    + "\u0ed9\u0ed5\u0001\u0000\u0000\u0000\u0ed9\u0ed6\u0001\u0000\u0000\u0000"
                    + "\u0ed9\u0ed7\u0001\u0000\u0000\u0000\u0ed9\u0ed8\u0001\u0000\u0000\u0000"
                    + "\u0eda\u0291\u0001\u0000\u0000\u0000\u0edb\u0edd\u0005\u016a\u0000\u0000"
                    + "\u0edc\u0ede\u0005\u016a\u0000\u0000\u0edd\u0edc\u0001\u0000\u0000\u0000"
                    + "\u0ede\u0edf\u0001\u0000\u0000\u0000\u0edf\u0edd\u0001\u0000\u0000\u0000"
                    + "\u0edf\u0ee0\u0001\u0000\u0000\u0000\u0ee0\u0293\u0001\u0000\u0000\u0000"
                    + "\u0ee1\u0ee2\u0005\u0172\u0000\u0000\u0ee2\u0ee3\u0005\u016b\u0000\u0000"
                    + "\u0ee3\u0295\u0001\u0000\u0000\u0000\u0ee4\u0ee5\u0005U\u0000\u0000\u0ee5"
                    + "\u0ee8\u0005\u016a\u0000\u0000\u0ee6\u0ee8\u0005\u00ed\u0000\u0000\u0ee7"
                    + "\u0ee4\u0001\u0000\u0000\u0000\u0ee7\u0ee6\u0001\u0000\u0000\u0000\u0ee8"
                    + "\u0297\u0001\u0000\u0000\u0000\u0ee9\u0eea\u0005W\u0000\u0000\u0eea\u0eed"
                    + "\u0005\u016a\u0000\u0000\u0eeb\u0eed\u0005\u00ee\u0000\u0000\u0eec\u0ee9"
                    + "\u0001\u0000\u0000\u0000\u0eec\u0eeb\u0001\u0000\u0000\u0000\u0eed\u0299"
                    + "\u0001\u0000\u0000\u0000\u0eee\u0eef\u0005X\u0000\u0000\u0eef\u0ef0\u0005"
                    + "\u016a\u0000\u0000\u0ef0\u029b\u0001\u0000\u0000\u0000\u0ef1\u0ef2\u0007"
                    + "\u0015\u0000\u0000\u0ef2\u029d\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0003"
                    + "\u029c\u014e\u0000\u0ef4\u0ef5\u0003\u02a2\u0151\u0000\u0ef5\u029f\u0001"
                    + "\u0000\u0000\u0000\u0ef6\u0ef7\u0005\u0150\u0000\u0000\u0ef7\u0ef8\u0003"
                    + "\u029c\u014e\u0000\u0ef8\u0ef9\u0005\u0151\u0000\u0000\u0ef9\u0efa\u0003"
                    + "\u02a2\u0151\u0000\u0efa\u0f06\u0001\u0000\u0000\u0000\u0efb\u0efc\u0005"
                    + "[\u0000\u0000\u0efc\u0efd\u0003\u029c\u014e\u0000\u0efd\u0efe\u0003\u02a2"
                    + "\u0151\u0000\u0efe\u0f06\u0001\u0000\u0000\u0000\u0eff\u0f00\u0005[\u0000"
                    + "\u0000\u0f00\u0f01\u0005\u0150\u0000\u0000\u0f01\u0f02\u0003\u02be\u015f"
                    + "\u0000\u0f02\u0f03\u0005\u0151\u0000\u0000\u0f03\u0f04\u0003\u02a2\u0151"
                    + "\u0000\u0f04\u0f06\u0001\u0000\u0000\u0000\u0f05\u0ef6\u0001\u0000\u0000"
                    + "\u0000\u0f05\u0efb\u0001\u0000\u0000\u0000\u0f05\u0eff\u0001\u0000\u0000"
                    + "\u0000\u0f06\u02a1\u0001\u0000\u0000\u0000\u0f07\u0f08\u0005\u0109\u0000"
                    + "\u0000\u0f08\u0f09\u0005K\u0000\u0000\u0f09\u0f14\u0005\u010c\u0000\u0000"
                    + "\u0f0a\u0f0b\u0005\u010e\u0000\u0000\u0f0b\u0f0c\u0005K\u0000\u0000\u0f0c"
                    + "\u0f14\u0005\u0112\u0000\u0000\u0f0d\u0f14\u0005\u0109\u0000\u0000\u0f0e"
                    + "\u0f14\u0005\u010c\u0000\u0000\u0f0f\u0f14\u0005\u010e\u0000\u0000\u0f10"
                    + "\u0f14\u0005\u0110\u0000\u0000\u0f11\u0f14\u0005\u0111\u0000\u0000\u0f12"
                    + "\u0f14\u0005\u0112\u0000\u0000\u0f13\u0f07\u0001\u0000\u0000\u0000\u0f13"
                    + "\u0f0a\u0001\u0000\u0000\u0000\u0f13\u0f0d\u0001\u0000\u0000\u0000\u0f13"
                    + "\u0f0e\u0001\u0000\u0000\u0000\u0f13\u0f0f\u0001\u0000\u0000\u0000\u0f13"
                    + "\u0f10\u0001\u0000\u0000\u0000\u0f13\u0f11\u0001\u0000\u0000\u0000\u0f13"
                    + "\u0f12\u0001\u0000\u0000\u0000\u0f14\u02a3\u0001\u0000\u0000\u0000\u0f15"
                    + "\u0f21\u0003\u0290\u0148\u0000\u0f16\u0f21\u0003\u02a0\u0150\u0000\u0f17"
                    + "\u0f21\u0003\u0282\u0141\u0000\u0f18\u0f21\u0003\u028c\u0146\u0000\u0f19"
                    + "\u0f21\u0003\u0288\u0144\u0000\u0f1a\u0f21\u0003\u0284\u0142\u0000\u0f1b"
                    + "\u0f21\u0003\u0286\u0143\u0000\u0f1c\u0f21\u0003\u02c4\u0162\u0000\u0f1d"
                    + "\u0f21\u0003\u027e\u013f\u0000\u0f1e\u0f21\u0003\u0216\u010b\u0000\u0f1f"
                    + "\u0f21\u0003\u0268\u0134\u0000\u0f20\u0f15\u0001\u0000\u0000\u0000\u0f20"
                    + "\u0f16\u0001\u0000\u0000\u0000\u0f20\u0f17\u0001\u0000\u0000\u0000\u0f20"
                    + "\u0f18\u0001\u0000\u0000\u0000\u0f20\u0f19\u0001\u0000\u0000\u0000\u0f20"
                    + "\u0f1a\u0001\u0000\u0000\u0000\u0f20\u0f1b\u0001\u0000\u0000\u0000\u0f20"
                    + "\u0f1c\u0001\u0000\u0000\u0000\u0f20\u0f1d\u0001\u0000\u0000\u0000\u0f20"
                    + "\u0f1e\u0001\u0000\u0000\u0000\u0f20\u0f1f\u0001\u0000\u0000\u0000\u0f21"
                    + "\u02a5\u0001\u0000\u0000\u0000\u0f22\u0f23\u0007\u0016\u0000\u0000\u0f23"
                    + "\u02a7\u0001\u0000\u0000\u0000\u0f24\u0f26\u0005\u0007\u0000\u0000\u0f25"
                    + "\u0f24\u0001\u0000\u0000\u0000\u0f25\u0f26\u0001\u0000\u0000\u0000\u0f26"
                    + "\u0f2c\u0001\u0000\u0000\u0000\u0f27\u0f2d\u0005@\u0000\u0000\u0f28\u0f2d"
                    + "\u0005\u0001\u0000\u0000\u0f29\u0f2d\u0005\u0002\u0000\u0000\u0f2a\u0f2b"
                    + "\u0005\u0018\u0000\u0000\u0f2b\u0f2d\u0005\u0015\u0000\u0000\u0f2c\u0f27"
                    + "\u0001\u0000\u0000\u0000\u0f2c\u0f28\u0001\u0000\u0000\u0000\u0f2c\u0f29"
                    + "\u0001\u0000\u0000\u0000\u0f2c\u0f2a\u0001\u0000\u0000\u0000\u0f2d\u02a9"
                    + "\u0001\u0000\u0000\u0000\u0f2e\u0f2f\u0005\u0167\u0000\u0000\u0f2f\u02ab"
                    + "\u0001\u0000\u0000\u0000\u0f30\u0f31\u0007\u0017\u0000\u0000\u0f31\u02ad"
                    + "\u0001\u0000\u0000\u0000\u0f32\u0f33\u0007\u0018\u0000\u0000\u0f33\u02af"
                    + "\u0001\u0000\u0000\u0000\u0f34\u0f35\u0005\u0166\u0000\u0000\u0f35\u02b1"
                    + "\u0001\u0000\u0000\u0000\u0f36\u0f37\u0005\u0163\u0000\u0000\u0f37\u02b3"
                    + "\u0001\u0000\u0000\u0000\u0f38\u0f39\u0005\u0165\u0000\u0000\u0f39\u02b5"
                    + "\u0001\u0000\u0000\u0000\u0f3a\u0f3b\u0007\u0019\u0000\u0000\u0f3b\u02b7"
                    + "\u0001\u0000\u0000\u0000\u0f3c\u0f3d\u0007\u001a\u0000\u0000\u0f3d\u02b9"
                    + "\u0001\u0000\u0000\u0000\u0f3e\u0f3f\u0005\u0007\u0000\u0000\u0f3f\u02bb"
                    + "\u0001\u0000\u0000\u0000\u0f40\u0f41\u0007\u001b\u0000\u0000\u0f41\u02bd"
                    + "\u0001\u0000\u0000\u0000\u0f42\u0f43\u0006\u015f\uffff\uffff\u0000\u0f43"
                    + "\u0f44\u0005\u0150\u0000\u0000\u0f44\u0f45\u0003\u02be\u015f\u0000\u0f45"
                    + "\u0f46\u0005\u0151\u0000\u0000\u0f46\u0f49\u0001\u0000\u0000\u0000\u0f47"
                    + "\u0f49\u0003\u02c0\u0160\u0000\u0f48\u0f42\u0001\u0000\u0000\u0000\u0f48"
                    + "\u0f47\u0001\u0000\u0000\u0000\u0f49\u0f50\u0001\u0000\u0000\u0000\u0f4a"
                    + "\u0f4b\n\u0003\u0000\u0000\u0f4b\u0f4c\u0003\u02bc\u015e\u0000\u0f4c\u0f4d"
                    + "\u0003\u02be\u015f\u0004\u0f4d\u0f4f\u0001\u0000\u0000\u0000\u0f4e\u0f4a"
                    + "\u0001\u0000\u0000\u0000\u0f4f\u0f52\u0001\u0000\u0000\u0000\u0f50\u0f4e"
                    + "\u0001\u0000\u0000\u0000\u0f50\u0f51\u0001\u0000\u0000\u0000\u0f51\u02bf"
                    + "\u0001\u0000\u0000\u0000\u0f52\u0f50\u0001\u0000\u0000\u0000\u0f53\u0f54"
                    + "\u0006\u0160\uffff\uffff\u0000\u0f54\u0f5d\u0003\u02a4\u0152\u0000\u0f55"
                    + "\u0f56\u0005\u0152\u0000\u0000\u0f56\u0f57\u0003\u02be\u015f\u0000\u0f57"
                    + "\u0f58\u0005\u0153\u0000\u0000\u0f58\u0f5c\u0001\u0000\u0000\u0000\u0f59"
                    + "\u0f5a\u0005\u014c\u0000\u0000\u0f5a\u0f5c\u0003\u02da\u016d\u0000\u0f5b"
                    + "\u0f55\u0001\u0000\u0000\u0000\u0f5b\u0f59\u0001\u0000\u0000\u0000\u0f5c"
                    + "\u0f5f\u0001\u0000\u0000\u0000\u0f5d\u0f5b\u0001\u0000\u0000\u0000\u0f5d"
                    + "\u0f5e\u0001\u0000\u0000\u0000\u0f5e\u0f69\u0001\u0000\u0000\u0000\u0f5f"
                    + "\u0f5d\u0001\u0000\u0000\u0000\u0f60\u0f61\u0003\u02a6\u0153\u0000\u0f61"
                    + "\u0f62\u0003\u02c0\u0160\u000f\u0f62\u0f69\u0001\u0000\u0000\u0000\u0f63"
                    + "\u0f64\u0005\u000b\u0000\u0000\u0f64\u0f69\u0003\u02c4\u0162\u0000\u0f65"
                    + "\u0f66\u0003\u02ba\u015d\u0000\u0f66\u0f67\u0003\u02c0\u0160\u0001\u0f67"
                    + "\u0f69\u0001\u0000\u0000\u0000\u0f68\u0f53\u0001\u0000\u0000\u0000\u0f68"
                    + "\u0f60\u0001\u0000\u0000\u0000\u0f68\u0f63\u0001\u0000\u0000\u0000\u0f68"
                    + "\u0f65\u0001\u0000\u0000\u0000\u0f69\u0fa8\u0001\u0000\u0000\u0000\u0f6a"
                    + "\u0f6b\n\r\u0000\u0000\u0f6b\u0f6c\u0003\u02aa\u0155\u0000\u0f6c\u0f6d"
                    + "\u0003\u02c0\u0160\u000e\u0f6d\u0fa7\u0001\u0000\u0000\u0000\u0f6e\u0f6f"
                    + "\n\f\u0000\u0000\u0f6f\u0f70\u0003\u02ac\u0156\u0000\u0f70\u0f71\u0003"
                    + "\u02c0\u0160\r\u0f71\u0fa7\u0001\u0000\u0000\u0000\u0f72\u0f73\n\u000b"
                    + "\u0000\u0000\u0f73\u0f74\u0003\u02ae\u0157\u0000\u0f74\u0f75\u0003\u02c0"
                    + "\u0160\f\u0f75\u0fa7\u0001\u0000\u0000\u0000\u0f76\u0f77\n\n\u0000\u0000"
                    + "\u0f77\u0f78\u0003\u02b0\u0158\u0000\u0f78\u0f79\u0003\u02c0\u0160\u000b"
                    + "\u0f79\u0fa7\u0001\u0000\u0000\u0000\u0f7a\u0f7b\n\t\u0000\u0000\u0f7b"
                    + "\u0f7c\u0003\u02b2\u0159\u0000\u0f7c\u0f7d\u0003\u02c0\u0160\n\u0f7d\u0fa7"
                    + "\u0001\u0000\u0000\u0000\u0f7e\u0f7f\n\b\u0000\u0000\u0f7f\u0f80\u0003"
                    + "\u02b4\u015a\u0000\u0f80\u0f81\u0003\u02c0\u0160\t\u0f81\u0fa7\u0001\u0000"
                    + "\u0000\u0000\u0f82\u0f83\n\u0007\u0000\u0000\u0f83\u0f84\u0003\u02b8\u015c"
                    + "\u0000\u0f84\u0f85\u0003\u02c0\u0160\b\u0f85\u0fa7\u0001\u0000\u0000\u0000"
                    + "\u0f86\u0f88\n\u0006\u0000\u0000\u0f87\u0f89\u0005\u0007\u0000\u0000\u0f88"
                    + "\u0f87\u0001\u0000\u0000\u0000\u0f88\u0f89\u0001\u0000\u0000\u0000\u0f89"
                    + "\u0f8a\u0001\u0000\u0000\u0000\u0f8a\u0f8b\u0003\u02b6\u015b\u0000\u0f8b"
                    + "\u0f8c\u0003\u02c0\u0160\u0007\u0f8c\u0fa7\u0001\u0000\u0000\u0000\u0f8d"
                    + "\u0f8f\n\u0003\u0000\u0000\u0f8e\u0f90\u0005\u0007\u0000\u0000\u0f8f\u0f8e"
                    + "\u0001\u0000\u0000\u0000\u0f8f\u0f90\u0001\u0000\u0000\u0000\u0f90\u0f91"
                    + "\u0001\u0000\u0000\u0000\u0f91\u0f92\u0005\u00cc\u0000\u0000\u0f92\u0f93"
                    + "\u0003\u02c0\u0160\u0000\u0f93\u0f94\u0005\u0005\u0000\u0000\u0f94\u0f95"
                    + "\u0003\u02c0\u0160\u0004\u0f95\u0fa7\u0001\u0000\u0000\u0000\u0f96\u0f97"
                    + "\n\u000e\u0000\u0000\u0f97\u0f98\u0005?\u0000\u0000\u0f98\u0fa7\u0003"
                    + "\u02a8\u0154\u0000\u0f99\u0f9b\n\u0005\u0000\u0000\u0f9a\u0f9c\u0005\u0007"
                    + "\u0000\u0000\u0f9b\u0f9a\u0001\u0000\u0000\u0000\u0f9b\u0f9c\u0001\u0000"
                    + "\u0000\u0000\u0f9c\u0f9d\u0001\u0000\u0000\u0000\u0f9d\u0f9e\u0005\b\u0000"
                    + "\u0000\u0f9e\u0f9f\u0007\u001c\u0000\u0000\u0f9f\u0fa7\u0003\u0268\u0134"
                    + "\u0000\u0fa0\u0fa2\n\u0004\u0000\u0000\u0fa1\u0fa3\u0005\u0007\u0000\u0000"
                    + "\u0fa2\u0fa1\u0001\u0000\u0000\u0000\u0fa2\u0fa3\u0001\u0000\u0000\u0000"
                    + "\u0fa3\u0fa4\u0001\u0000\u0000\u0000\u0fa4\u0fa5\u0005\u00b4\u0000\u0000"
                    + "\u0fa5\u0fa7\u0003\u02c2\u0161\u0000\u0fa6\u0f6a\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0f6e\u0001\u0000\u0000\u0000\u0fa6\u0f72\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0f76\u0001\u0000\u0000\u0000\u0fa6\u0f7a\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0f7e\u0001\u0000\u0000\u0000\u0fa6\u0f82\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0f86\u0001\u0000\u0000\u0000\u0fa6\u0f8d\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0f96\u0001\u0000\u0000\u0000\u0fa6\u0f99\u0001\u0000\u0000\u0000"
                    + "\u0fa6\u0fa0\u0001\u0000\u0000\u0000\u0fa7\u0faa\u0001\u0000\u0000\u0000"
                    + "\u0fa8\u0fa6\u0001\u0000\u0000\u0000\u0fa8\u0fa9\u0001\u0000\u0000\u0000"
                    + "\u0fa9\u02c1\u0001\u0000\u0000\u0000\u0faa\u0fa8\u0001\u0000\u0000\u0000"
                    + "\u0fab\u0fae\u0003\u02c4\u0162\u0000\u0fac\u0fae\u0003\u0268\u0134\u0000"
                    + "\u0fad\u0fab\u0001\u0000\u0000\u0000\u0fad\u0fac\u0001\u0000\u0000\u0000"
                    + "\u0fae\u02c3\u0001\u0000\u0000\u0000\u0faf\u0fb0\u0005\u0150\u0000\u0000"
                    + "\u0fb0\u0fb1\u0003\u01be\u00df\u0000\u0fb1\u0fb2\u0005\u0151\u0000\u0000"
                    + "\u0fb2\u02c5\u0001\u0000\u0000\u0000\u0fb3\u0fb4\u0007\u001d\u0000\u0000"
                    + "\u0fb4\u02c7\u0001\u0000\u0000\u0000\u0fb5\u0fb6\u0007\u001d\u0000\u0000"
                    + "\u0fb6\u02c9\u0001\u0000\u0000\u0000\u0fb7\u0fb9\u0003\u023c\u011e\u0000"
                    + "\u0fb8\u0fba\u0003\u02cc\u0166\u0000\u0fb9\u0fb8\u0001\u0000\u0000\u0000"
                    + "\u0fb9\u0fba\u0001\u0000\u0000\u0000\u0fba\u02cb\u0001\u0000\u0000\u0000"
                    + "\u0fbb\u0fbc\u0005#\u0000\u0000\u0fbc\u0fbd\u0005\u0150\u0000\u0000\u0fbd"
                    + "\u0fc2\u0003\u02ce\u0167\u0000\u0fbe\u0fbf\u0005\u014e\u0000\u0000\u0fbf"
                    + "\u0fc1\u0003\u02ce\u0167\u0000\u0fc0\u0fbe\u0001\u0000\u0000\u0000\u0fc1"
                    + "\u0fc4\u0001\u0000\u0000\u0000\u0fc2\u0fc0\u0001\u0000\u0000\u0000\u0fc2"
                    + "\u0fc3\u0001\u0000\u0000\u0000\u0fc3\u0fc5\u0001\u0000\u0000\u0000\u0fc4"
                    + "\u0fc2\u0001\u0000\u0000\u0000\u0fc5\u0fc6\u0005\u0151\u0000\u0000\u0fc6"
                    + "\u02cd\u0001\u0000\u0000\u0000\u0fc7\u0fca\u0003\u02da\u016d\u0000\u0fc8"
                    + "\u0fc9\u0005\u0156\u0000\u0000\u0fc9\u0fcb\u0003\u0290\u0148\u0000\u0fca"
                    + "\u0fc8\u0001\u0000\u0000\u0000\u0fca\u0fcb\u0001\u0000\u0000\u0000\u0fcb"
                    + "\u02cf\u0001\u0000\u0000\u0000\u0fcc\u0fcd\u0005#\u0000\u0000\u0fcd\u0fce"
                    + "\u0005\u0150\u0000\u0000\u0fce\u0fd3\u0003\u02d2\u0169\u0000\u0fcf\u0fd0"
                    + "\u0005\u014e\u0000\u0000\u0fd0\u0fd2\u0003\u02d2\u0169\u0000\u0fd1\u0fcf"
                    + "\u0001\u0000\u0000\u0000\u0fd2\u0fd5\u0001\u0000\u0000\u0000\u0fd3\u0fd1"
                    + "\u0001\u0000\u0000\u0000\u0fd3\u0fd4\u0001\u0000\u0000\u0000\u0fd4\u0fd6"
                    + "\u0001\u0000\u0000\u0000\u0fd5\u0fd3\u0001\u0000\u0000\u0000\u0fd6\u0fd7"
                    + "\u0005\u0151\u0000\u0000\u0fd7\u02d1\u0001\u0000\u0000\u0000\u0fd8\u0fd9"
                    + "\u0003\u02da\u016d\u0000\u0fd9\u0fda\u0003\u02d4\u016a\u0000\u0fda\u0fdb"
                    + "\u0003\u0290\u0148\u0000\u0fdb\u02d3\u0001\u0000\u0000\u0000\u0fdc\u0fdd"
                    + "\u0007\u001e\u0000\u0000\u0fdd\u02d5\u0001\u0000\u0000\u0000\u0fde\u0fdf"
                    + "\u0007\u001f\u0000\u0000\u0fdf\u02d7\u0001\u0000\u0000\u0000\u0fe0\u0fe4"
                    + "\u0003\u02d6\u016b\u0000\u0fe1\u0fe4\u0005\u016a\u0000\u0000\u0fe2\u0fe4"
                    + "\u0003\u02dc\u016e\u0000\u0fe3\u0fe0\u0001\u0000\u0000\u0000\u0fe3\u0fe1"
                    + "\u0001\u0000\u0000\u0000\u0fe3\u0fe2\u0001\u0000\u0000\u0000\u0fe4\u02d9"
                    + "\u0001\u0000\u0000\u0000\u0fe5\u0fe8\u0005\u0170\u0000\u0000\u0fe6\u0fe8"
                    + "\u0003\u02e0\u0170\u0000\u0fe7\u0fe5\u0001\u0000\u0000\u0000\u0fe7\u0fe6"
                    + "\u0001\u0000\u0000\u0000\u0fe8\u02db\u0001\u0000\u0000\u0000\u0fe9\u0fea"
                    + "\u0003\u02da\u016d\u0000\u0fea\u0feb\u0005\u014c\u0000\u0000\u0feb\u0fec"
                    + "\u0003\u02da\u016d\u0000\u0fec\u0fef\u0001\u0000\u0000\u0000\u0fed\u0fef"
                    + "\u0003\u02da\u016d\u0000\u0fee\u0fe9\u0001\u0000\u0000\u0000\u0fee\u0fed"
                    + "\u0001\u0000\u0000\u0000\u0fef\u02dd\u0001\u0000\u0000\u0000\u0ff0\u0ff3"
                    + "\u0003\u02da\u016d\u0000\u0ff1\u0ff3\u0005\u0171\u0000\u0000\u0ff2\u0ff0"
                    + "\u0001\u0000\u0000\u0000\u0ff2\u0ff1\u0001\u0000\u0000\u0000\u0ff3\u02df"
                    + "\u0001\u0000\u0000\u0000\u0ff4\u0ff5\u0007 \u0000\u0000\u0ff5\u02e1\u0001"
                    + "\u0000\u0000\u0000\u0ff6\u0ff7\u0007!\u0000\u0000\u0ff7\u02e3\u0001\u0000"
                    + "\u0000\u0000\u01f0\u02e9\u02f0\u02f4\u02fa\u0300\u030b\u030e\u0310\u0322"
                    + "\u0327\u032c\u0332\u0336\u0343\u0347\u034b\u0350\u0357\u035d\u0361\u0363"
                    + "\u0367\u036e\u0370\u0376\u0381\u0389\u038d\u03b7\u03d2\u03d6\u03d9\u03de"
                    + "\u03ec\u03f5\u03f9\u0400\u0403\u0407\u040d\u0410\u0413\u0416\u041c\u041f"
                    + "\u0422\u0425\u0428\u042b\u042e\u0431\u0434\u0438\u043a\u0444\u0449\u044d"
                    + "\u0450\u045b\u046b\u047a\u047e\u048d\u049a\u049e\u04a3\u04be\u04c3\u04cb"
                    + "\u04d1\u04d5\u04d8\u04db\u04e1\u04e8\u04f2\u04f6\u04fb\u04ff\u0505\u050c"
                    + "\u0513\u051b\u0522\u0526\u0529\u0531\u0534\u053c\u053f\u0543\u054d\u0552"
                    + "\u0558\u0565\u0575\u0585\u0595\u059c\u05b0\u05b4\u05b9\u05be\u05c1\u05c4"
                    + "\u05c8\u05cb\u05ce\u05d5\u05e0\u05e8\u05ee\u05fe\u0601\u060b\u0613\u0617"
                    + "\u061a\u061e\u0622\u0625\u062a\u062f\u0635\u0640\u0642\u0646\u064c\u0652"
                    + "\u0657\u065d\u0662\u0669\u066e\u0676\u067b\u0682\u0688\u0690\u0697\u069c"
                    + "\u06a4\u06ab\u06ae\u06b1\u06b3\u06c1\u06c3\u06c9\u06d8\u06e9\u06ee\u06f2"
                    + "\u06f6\u06fd\u0704\u070a\u070e\u0711\u0718\u072f\u0734\u0738\u0740\u0748"
                    + "\u074c\u0752\u0757\u075e\u0761\u0767\u076e\u0776\u077f\u0788\u079c\u07a2"
                    + "\u07a5\u07a7\u07ae\u07b8\u07c0\u07c4\u07c8\u07d5\u07de\u07e4\u07e8\u07ef"
                    + "\u07f2\u07f5\u07f8\u0801\u0805\u0808\u080b\u080e\u0811\u0814\u0822\u082a"
                    + "\u0830\u0834\u0841\u0851\u0861\u0865\u0874\u087a\u087d\u0880\u0883\u0886"
                    + "\u088a\u0898\u08a0\u08a3\u08b2\u08d4\u08dc\u08e1\u08eb\u08f3\u08fb\u0903"
                    + "\u090e\u0912\u091a\u0923\u0926\u092f\u0933\u0935\u0939\u093d\u0943\u094a"
                    + "\u0953\u095e\u0962\u0969\u0975\u097c\u0984\u0988\u098b\u0992\u0998\u099c"
                    + "\u099f\u09a5\u09a9\u09ad\u09b2\u09b6\u09ba\u09be\u09c6\u09ca\u09ce\u09d2"
                    + "\u09d6\u09de\u09e2\u09e6\u09f6\u09ff\u0a07\u0a11\u0a23\u0a26\u0a30\u0a4c"
                    + "\u0a52\u0a58\u0a5e\u0a60\u0a63\u0a69\u0a71\u0a80\u0a87\u0a8c\u0a8f\u0a93"
                    + "\u0a96\u0a99\u0a9c\u0a9f\u0aa5\u0aa9\u0aac\u0aaf\u0ab2\u0ab5\u0ab8\u0abf"
                    + "\u0ac2\u0ac9\u0acc\u0acf\u0ad2\u0ad5\u0ad8\u0adb\u0ade\u0ae1\u0ae4\u0ae8"
                    + "\u0aeb\u0aee\u0af1\u0af4\u0af7\u0afa\u0afd\u0b00\u0b03\u0b05\u0b0b\u0b10"
                    + "\u0b17\u0b19\u0b1c\u0b21\u0b24\u0b28\u0b2d\u0b34\u0b3a\u0b46\u0b4d\u0b53"
                    + "\u0b5c\u0b5f\u0b63\u0b69\u0b73\u0b77\u0b82\u0b88\u0b8b\u0b95\u0b97\u0b9b"
                    + "\u0ba2\u0bb8\u0bbf\u0bc3\u0bc6\u0bcb\u0bce\u0bd5\u0bdc\u0bdf\u0be7\u0bed"
                    + "\u0bef\u0bf1\u0bf4\u0bf7\u0bfc\u0c06\u0c0b\u0c0d\u0c13\u0c16\u0c19\u0c21"
                    + "\u0c27\u0c29\u0c2b\u0c2e\u0c31\u0c35\u0c3c\u0c45\u0c4f\u0c52\u0c55\u0c58"
                    + "\u0c5c\u0c66\u0c70\u0c78\u0c80\u0c87\u0c90\u0c98\u0ca4\u0ca7\u0cad\u0cb4"
                    + "\u0cbb\u0cc2\u0cc9\u0cd2\u0cd6\u0cdd\u0ce2\u0ce6\u0cf9\u0cfe\u0d03\u0d09"
                    + "\u0d16\u0d19\u0d1c\u0d28\u0d2b\u0d2e\u0d36\u0d3f\u0d44\u0d46\u0d57\u0d5a"
                    + "\u0d67\u0d6b\u0d6f\u0d72\u0d75\u0d78\u0d7c\u0d7f\u0d82\u0d89\u0d8e\u0d96"
                    + "\u0d9c\u0da1\u0da5\u0daa\u0db1\u0dbf\u0dc2\u0dc6\u0dd5\u0ddf\u0de8\u0deb"
                    + "\u0df6\u0e02\u0e0c\u0e16\u0e1b\u0e1f\u0e23\u0e29\u0e3b\u0e41\u0e45\u0e4d"
                    + "\u0e57\u0e61\u0e74\u0e7a\u0e81\u0e84\u0e86\u0e8b\u0e8f\u0ea1\u0ea5\u0eb1"
                    + "\u0eb5\u0ebe\u0ed9\u0edf\u0ee7\u0eec\u0f05\u0f13\u0f20\u0f25\u0f2c\u0f48"
                    + "\u0f50\u0f5b\u0f5d\u0f68\u0f88\u0f8f\u0f9b\u0fa2\u0fa6\u0fa8\u0fad\u0fb9"
                    + "\u0fc2\u0fca\u0fd3\u0fe3\u0fe7\u0fee\u0ff2";
    public static final String _serializedATN =
            Utils.join(new String[] {_serializedATNSegment0, _serializedATNSegment1}, "");
    public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}
