// Generated from /Users/octopus/octo/code/my-first-java/src/main/resources/g4/hive/v2_3_3/Hplsql.g4
// by ANTLR 4.13.1
package octopus.antlr.codegen.hive.v2_3_3;

import java.util.List;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class HplsqlParser extends Parser {
    static {
        RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION);
    }

    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    public static final int T__0 = 1,
            T__1 = 2,
            T__2 = 3,
            T__3 = 4,
            T__4 = 5,
            T_ACTION = 6,
            T_ADD2 = 7,
            T_ALL = 8,
            T_ALLOCATE = 9,
            T_ALTER = 10,
            T_AND = 11,
            T_ANSI_NULLS = 12,
            T_ANSI_PADDING = 13,
            T_AS = 14,
            T_ASC = 15,
            T_ASSOCIATE = 16,
            T_AT = 17,
            T_AUTO_INCREMENT = 18,
            T_AVG = 19,
            T_BATCHSIZE = 20,
            T_BEGIN = 21,
            T_BETWEEN = 22,
            T_BIGINT = 23,
            T_BINARY_DOUBLE = 24,
            T_BINARY_FLOAT = 25,
            T_BINARY_INTEGER = 26,
            T_BIT = 27,
            T_BODY = 28,
            T_BREAK = 29,
            T_BY = 30,
            T_BYTE = 31,
            T_CALL = 32,
            T_CALLER = 33,
            T_CASCADE = 34,
            T_CASE = 35,
            T_CASESPECIFIC = 36,
            T_CAST = 37,
            T_CHAR = 38,
            T_CHARACTER = 39,
            T_CHARSET = 40,
            T_CLIENT = 41,
            T_CLOSE = 42,
            T_CLUSTERED = 43,
            T_CMP = 44,
            T_COLLECT = 45,
            T_COLLECTION = 46,
            T_COLUMN = 47,
            T_COMMENT = 48,
            T_CONSTANT = 49,
            T_COMMIT = 50,
            T_COMPRESS = 51,
            T_CONCAT = 52,
            T_CONDITION = 53,
            T_CONSTRAINT = 54,
            T_CONTINUE = 55,
            T_COPY = 56,
            T_COUNT = 57,
            T_COUNT_BIG = 58,
            T_CREATE = 59,
            T_CREATION = 60,
            T_CREATOR = 61,
            T_CS = 62,
            T_CURRENT = 63,
            T_CURRENT_SCHEMA = 64,
            T_CURSOR = 65,
            T_DATABASE = 66,
            T_DATA = 67,
            T_DATE = 68,
            T_DATETIME = 69,
            T_DAY = 70,
            T_DAYS = 71,
            T_DEC = 72,
            T_DECIMAL = 73,
            T_DECLARE = 74,
            T_DEFAULT = 75,
            T_DEFERRED = 76,
            T_DEFINED = 77,
            T_DEFINER = 78,
            T_DEFINITION = 79,
            T_DELETE = 80,
            T_DELIMITED = 81,
            T_DELIMITER = 82,
            T_DESC = 83,
            T_DESCRIBE = 84,
            T_DIAGNOSTICS = 85,
            T_DIR = 86,
            T_DIRECTORY = 87,
            T_DISTINCT = 88,
            T_DISTRIBUTE = 89,
            T_DO = 90,
            T_DOUBLE = 91,
            T_DROP = 92,
            T_DYNAMIC = 93,
            T_ELSE = 94,
            T_ELSEIF = 95,
            T_ELSIF = 96,
            T_ENABLE = 97,
            T_END = 98,
            T_ENGINE = 99,
            T_ESCAPED = 100,
            T_EXCEPT = 101,
            T_EXEC = 102,
            T_EXECUTE = 103,
            T_EXCEPTION = 104,
            T_EXCLUSIVE = 105,
            T_EXISTS = 106,
            T_EXIT = 107,
            T_FALLBACK = 108,
            T_FALSE = 109,
            T_FETCH = 110,
            T_FIELDS = 111,
            T_FILE = 112,
            T_FILES = 113,
            T_FLOAT = 114,
            T_FOR = 115,
            T_FOREIGN = 116,
            T_FORMAT = 117,
            T_FOUND = 118,
            T_FROM = 119,
            T_FULL = 120,
            T_FUNCTION = 121,
            T_GET = 122,
            T_GLOBAL = 123,
            T_GO = 124,
            T_GRANT = 125,
            T_GROUP = 126,
            T_HANDLER = 127,
            T_HASH = 128,
            T_HAVING = 129,
            T_HDFS = 130,
            T_HIVE = 131,
            T_HOST = 132,
            T_IDENTITY = 133,
            T_IF = 134,
            T_IGNORE = 135,
            T_IMMEDIATE = 136,
            T_IN = 137,
            T_INCLUDE = 138,
            T_INDEX = 139,
            T_INITRANS = 140,
            T_INNER = 141,
            T_INOUT = 142,
            T_INSERT = 143,
            T_INT = 144,
            T_INT2 = 145,
            T_INT4 = 146,
            T_INT8 = 147,
            T_INTEGER = 148,
            T_INTERSECT = 149,
            T_INTERVAL = 150,
            T_INTO = 151,
            T_INVOKER = 152,
            T_IS = 153,
            T_ISOPEN = 154,
            T_ITEMS = 155,
            T_JOIN = 156,
            T_KEEP = 157,
            T_KEY = 158,
            T_KEYS = 159,
            T_LANGUAGE = 160,
            T_LEAVE = 161,
            T_LEFT = 162,
            T_LIKE = 163,
            T_LIMIT = 164,
            T_LINES = 165,
            T_LOCAL = 166,
            T_LOCATION = 167,
            T_LOCATOR = 168,
            T_LOCATORS = 169,
            T_LOCKS = 170,
            T_LOG = 171,
            T_LOGGED = 172,
            T_LOGGING = 173,
            T_LOOP = 174,
            T_MAP = 175,
            T_MATCHED = 176,
            T_MAX = 177,
            T_MAXTRANS = 178,
            T_MERGE = 179,
            T_MESSAGE_TEXT = 180,
            T_MICROSECOND = 181,
            T_MICROSECONDS = 182,
            T_MIN = 183,
            T_MULTISET = 184,
            T_NCHAR = 185,
            T_NEW = 186,
            T_NVARCHAR = 187,
            T_NO = 188,
            T_NOCOUNT = 189,
            T_NOCOMPRESS = 190,
            T_NOLOGGING = 191,
            T_NONE = 192,
            T_NOT = 193,
            T_NOTFOUND = 194,
            T_NULL = 195,
            T_NUMERIC = 196,
            T_NUMBER = 197,
            T_OBJECT = 198,
            T_OFF = 199,
            T_ON = 200,
            T_ONLY = 201,
            T_OPEN = 202,
            T_OR = 203,
            T_ORDER = 204,
            T_OUT = 205,
            T_OUTER = 206,
            T_OVER = 207,
            T_OVERWRITE = 208,
            T_OWNER = 209,
            T_PACKAGE = 210,
            T_PARTITION = 211,
            T_PCTFREE = 212,
            T_PCTUSED = 213,
            T_PLS_INTEGER = 214,
            T_PRECISION = 215,
            T_PRESERVE = 216,
            T_PRIMARY = 217,
            T_PRINT = 218,
            T_PROC = 219,
            T_PROCEDURE = 220,
            T_QUALIFY = 221,
            T_QUERY_BAND = 222,
            T_QUIT = 223,
            T_QUOTED_IDENTIFIER = 224,
            T_RAISE = 225,
            T_REAL = 226,
            T_REFERENCES = 227,
            T_REGEXP = 228,
            T_REPLACE = 229,
            T_RESIGNAL = 230,
            T_RESTRICT = 231,
            T_RESULT = 232,
            T_RESULT_SET_LOCATOR = 233,
            T_RETURN = 234,
            T_RETURNS = 235,
            T_REVERSE = 236,
            T_RIGHT = 237,
            T_RLIKE = 238,
            T_ROLE = 239,
            T_ROLLBACK = 240,
            T_ROW = 241,
            T_ROWS = 242,
            T_ROWTYPE = 243,
            T_ROW_COUNT = 244,
            T_RR = 245,
            T_RS = 246,
            T_PWD = 247,
            T_TRIM = 248,
            T_SCHEMA = 249,
            T_SECOND = 250,
            T_SECONDS = 251,
            T_SECURITY = 252,
            T_SEGMENT = 253,
            T_SEL = 254,
            T_SELECT = 255,
            T_SET = 256,
            T_SESSION = 257,
            T_SESSIONS = 258,
            T_SETS = 259,
            T_SHARE = 260,
            T_SIGNAL = 261,
            T_SIMPLE_DOUBLE = 262,
            T_SIMPLE_FLOAT = 263,
            T_SIMPLE_INTEGER = 264,
            T_SMALLDATETIME = 265,
            T_SMALLINT = 266,
            T_SQL = 267,
            T_SQLEXCEPTION = 268,
            T_SQLINSERT = 269,
            T_SQLSTATE = 270,
            T_SQLWARNING = 271,
            T_STATS = 272,
            T_STATISTICS = 273,
            T_STEP = 274,
            T_STORAGE = 275,
            T_STORED = 276,
            T_STRING = 277,
            T_SUBDIR = 278,
            T_SUBSTRING = 279,
            T_SUM = 280,
            T_SYS_REFCURSOR = 281,
            T_TABLE = 282,
            T_TABLESPACE = 283,
            T_TEMPORARY = 284,
            T_TERMINATED = 285,
            T_TEXTIMAGE_ON = 286,
            T_THEN = 287,
            T_TIMESTAMP = 288,
            T_TINYINT = 289,
            T_TITLE = 290,
            T_TO = 291,
            T_TOP = 292,
            T_TRANSACTION = 293,
            T_TRUE = 294,
            T_TRUNCATE = 295,
            T_TYPE = 296,
            T_UNION = 297,
            T_UNIQUE = 298,
            T_UPDATE = 299,
            T_UR = 300,
            T_USE = 301,
            T_USING = 302,
            T_VALUE = 303,
            T_VALUES = 304,
            T_VAR = 305,
            T_VARCHAR = 306,
            T_VARCHAR2 = 307,
            T_VARYING = 308,
            T_VOLATILE = 309,
            T_WHEN = 310,
            T_WHERE = 311,
            T_WHILE = 312,
            T_WITH = 313,
            T_WITHOUT = 314,
            T_WORK = 315,
            T_XACT_ABORT = 316,
            T_XML = 317,
            T_YES = 318,
            T_ACTIVITY_COUNT = 319,
            T_CUME_DIST = 320,
            T_CURRENT_DATE = 321,
            T_CURRENT_TIMESTAMP = 322,
            T_CURRENT_USER = 323,
            T_DENSE_RANK = 324,
            T_FIRST_VALUE = 325,
            T_LAG = 326,
            T_LAST_VALUE = 327,
            T_LEAD = 328,
            T_MAX_PART_STRING = 329,
            T_MIN_PART_STRING = 330,
            T_MAX_PART_INT = 331,
            T_MIN_PART_INT = 332,
            T_MAX_PART_DATE = 333,
            T_MIN_PART_DATE = 334,
            T_PART_COUNT = 335,
            T_PART_LOC = 336,
            T_RANK = 337,
            T_ROW_NUMBER = 338,
            T_STDEV = 339,
            T_SYSDATE = 340,
            T_VARIANCE = 341,
            T_USER = 342,
            T_ADD = 343,
            T_COLON = 344,
            T_COMMA = 345,
            T_PIPE = 346,
            T_DIV = 347,
            T_DOT2 = 348,
            T_EQUAL = 349,
            T_EQUAL2 = 350,
            T_NOTEQUAL = 351,
            T_NOTEQUAL2 = 352,
            T_GREATER = 353,
            T_GREATEREQUAL = 354,
            T_LESS = 355,
            T_LESSEQUAL = 356,
            T_MUL = 357,
            T_OPEN_B = 358,
            T_OPEN_P = 359,
            T_OPEN_SB = 360,
            T_CLOSE_B = 361,
            T_CLOSE_P = 362,
            T_CLOSE_SB = 363,
            T_SEMICOLON = 364,
            T_SUB = 365,
            L_ID = 366,
            L_S_STRING = 367,
            L_D_STRING = 368,
            L_INT = 369,
            L_DEC = 370,
            L_WS = 371,
            L_M_COMMENT = 372,
            L_S_COMMENT = 373,
            L_FILE = 374,
            L_LABEL = 375;
    public static final int RULE_program = 0,
            RULE_block = 1,
            RULE_begin_end_block = 2,
            RULE_single_block_stmt = 3,
            RULE_block_end = 4,
            RULE_proc_block = 5,
            RULE_stmt = 6,
            RULE_semicolon_stmt = 7,
            RULE_exception_block = 8,
            RULE_exception_block_item = 9,
            RULE_null_stmt = 10,
            RULE_expr_stmt = 11,
            RULE_assignment_stmt = 12,
            RULE_assignment_stmt_item = 13,
            RULE_assignment_stmt_single_item = 14,
            RULE_assignment_stmt_multiple_item = 15,
            RULE_assignment_stmt_select_item = 16,
            RULE_allocate_cursor_stmt = 17,
            RULE_associate_locator_stmt = 18,
            RULE_begin_transaction_stmt = 19,
            RULE_break_stmt = 20,
            RULE_call_stmt = 21,
            RULE_declare_stmt = 22,
            RULE_declare_block = 23,
            RULE_declare_block_inplace = 24,
            RULE_declare_stmt_item = 25,
            RULE_declare_var_item = 26,
            RULE_declare_condition_item = 27,
            RULE_declare_cursor_item = 28,
            RULE_cursor_with_return = 29,
            RULE_cursor_without_return = 30,
            RULE_declare_handler_item = 31,
            RULE_declare_temporary_table_item = 32,
            RULE_create_table_stmt = 33,
            RULE_create_local_temp_table_stmt = 34,
            RULE_create_table_definition = 35,
            RULE_create_table_columns = 36,
            RULE_create_table_columns_item = 37,
            RULE_column_name = 38,
            RULE_create_table_column_inline_cons = 39,
            RULE_create_table_column_cons = 40,
            RULE_create_table_fk_action = 41,
            RULE_create_table_preoptions = 42,
            RULE_create_table_preoptions_item = 43,
            RULE_create_table_preoptions_td_item = 44,
            RULE_create_table_options = 45,
            RULE_create_table_options_item = 46,
            RULE_create_table_options_ora_item = 47,
            RULE_create_table_options_db2_item = 48,
            RULE_create_table_options_td_item = 49,
            RULE_create_table_options_hive_item = 50,
            RULE_create_table_hive_row_format = 51,
            RULE_create_table_hive_row_format_fields = 52,
            RULE_create_table_options_mssql_item = 53,
            RULE_create_table_options_mysql_item = 54,
            RULE_alter_table_stmt = 55,
            RULE_alter_table_item = 56,
            RULE_alter_table_add_constraint = 57,
            RULE_alter_table_add_constraint_item = 58,
            RULE_dtype = 59,
            RULE_dtype_len = 60,
            RULE_dtype_attr = 61,
            RULE_dtype_default = 62,
            RULE_create_database_stmt = 63,
            RULE_create_database_option = 64,
            RULE_create_function_stmt = 65,
            RULE_create_function_return = 66,
            RULE_create_package_stmt = 67,
            RULE_package_spec = 68,
            RULE_package_spec_item = 69,
            RULE_create_package_body_stmt = 70,
            RULE_package_body = 71,
            RULE_package_body_item = 72,
            RULE_create_procedure_stmt = 73,
            RULE_create_routine_params = 74,
            RULE_create_routine_param_item = 75,
            RULE_create_routine_options = 76,
            RULE_create_routine_option = 77,
            RULE_drop_stmt = 78,
            RULE_end_transaction_stmt = 79,
            RULE_exec_stmt = 80,
            RULE_if_stmt = 81,
            RULE_if_plsql_stmt = 82,
            RULE_if_tsql_stmt = 83,
            RULE_if_bteq_stmt = 84,
            RULE_elseif_block = 85,
            RULE_else_block = 86,
            RULE_include_stmt = 87,
            RULE_insert_stmt = 88,
            RULE_insert_stmt_cols = 89,
            RULE_insert_stmt_rows = 90,
            RULE_insert_stmt_row = 91,
            RULE_insert_directory_stmt = 92,
            RULE_exit_stmt = 93,
            RULE_get_diag_stmt = 94,
            RULE_get_diag_stmt_item = 95,
            RULE_get_diag_stmt_exception_item = 96,
            RULE_get_diag_stmt_rowcount_item = 97,
            RULE_grant_stmt = 98,
            RULE_grant_stmt_item = 99,
            RULE_leave_stmt = 100,
            RULE_map_object_stmt = 101,
            RULE_open_stmt = 102,
            RULE_fetch_stmt = 103,
            RULE_collect_stats_stmt = 104,
            RULE_collect_stats_clause = 105,
            RULE_close_stmt = 106,
            RULE_cmp_stmt = 107,
            RULE_cmp_source = 108,
            RULE_copy_from_local_stmt = 109,
            RULE_copy_stmt = 110,
            RULE_copy_source = 111,
            RULE_copy_target = 112,
            RULE_copy_option = 113,
            RULE_copy_file_option = 114,
            RULE_commit_stmt = 115,
            RULE_create_index_stmt = 116,
            RULE_create_index_col = 117,
            RULE_index_storage_clause = 118,
            RULE_index_mssql_storage_clause = 119,
            RULE_print_stmt = 120,
            RULE_quit_stmt = 121,
            RULE_raise_stmt = 122,
            RULE_resignal_stmt = 123,
            RULE_return_stmt = 124,
            RULE_rollback_stmt = 125,
            RULE_set_session_option = 126,
            RULE_set_current_schema_option = 127,
            RULE_set_mssql_session_option = 128,
            RULE_set_teradata_session_option = 129,
            RULE_signal_stmt = 130,
            RULE_truncate_stmt = 131,
            RULE_use_stmt = 132,
            RULE_values_into_stmt = 133,
            RULE_while_stmt = 134,
            RULE_for_cursor_stmt = 135,
            RULE_for_range_stmt = 136,
            RULE_label = 137,
            RULE_using_clause = 138,
            RULE_select_stmt = 139,
            RULE_cte_select_stmt = 140,
            RULE_cte_select_stmt_item = 141,
            RULE_cte_select_cols = 142,
            RULE_fullselect_stmt = 143,
            RULE_fullselect_stmt_item = 144,
            RULE_fullselect_set_clause = 145,
            RULE_subselect_stmt = 146,
            RULE_select_list = 147,
            RULE_select_list_set = 148,
            RULE_select_list_limit = 149,
            RULE_select_list_item = 150,
            RULE_select_list_alias = 151,
            RULE_select_list_asterisk = 152,
            RULE_into_clause = 153,
            RULE_from_clause = 154,
            RULE_from_table_clause = 155,
            RULE_from_table_name_clause = 156,
            RULE_from_subselect_clause = 157,
            RULE_from_join_clause = 158,
            RULE_from_join_type_clause = 159,
            RULE_from_table_values_clause = 160,
            RULE_from_table_values_row = 161,
            RULE_from_alias_clause = 162,
            RULE_table_name = 163,
            RULE_where_clause = 164,
            RULE_group_by_clause = 165,
            RULE_having_clause = 166,
            RULE_qualify_clause = 167,
            RULE_order_by_clause = 168,
            RULE_select_options = 169,
            RULE_select_options_item = 170,
            RULE_update_stmt = 171,
            RULE_update_assignment = 172,
            RULE_update_table = 173,
            RULE_update_upsert = 174,
            RULE_merge_stmt = 175,
            RULE_merge_table = 176,
            RULE_merge_condition = 177,
            RULE_merge_action = 178,
            RULE_delete_stmt = 179,
            RULE_delete_alias = 180,
            RULE_describe_stmt = 181,
            RULE_bool_expr = 182,
            RULE_bool_expr_atom = 183,
            RULE_bool_expr_unary = 184,
            RULE_bool_expr_single_in = 185,
            RULE_bool_expr_multi_in = 186,
            RULE_bool_expr_binary = 187,
            RULE_bool_expr_logical_operator = 188,
            RULE_bool_expr_binary_operator = 189,
            RULE_expr = 190,
            RULE_expr_atom = 191,
            RULE_expr_interval = 192,
            RULE_interval_item = 193,
            RULE_expr_concat = 194,
            RULE_expr_concat_item = 195,
            RULE_expr_case = 196,
            RULE_expr_case_simple = 197,
            RULE_expr_case_searched = 198,
            RULE_expr_cursor_attribute = 199,
            RULE_expr_agg_window_func = 200,
            RULE_expr_func_all_distinct = 201,
            RULE_expr_func_over_clause = 202,
            RULE_expr_func_partition_by_clause = 203,
            RULE_expr_spec_func = 204,
            RULE_expr_func = 205,
            RULE_expr_func_params = 206,
            RULE_func_param = 207,
            RULE_expr_select = 208,
            RULE_expr_file = 209,
            RULE_hive = 210,
            RULE_hive_item = 211,
            RULE_host = 212,
            RULE_host_cmd = 213,
            RULE_host_stmt = 214,
            RULE_file_name = 215,
            RULE_date_literal = 216,
            RULE_timestamp_literal = 217,
            RULE_ident = 218,
            RULE_string = 219,
            RULE_int_number = 220,
            RULE_dec_number = 221,
            RULE_bool_literal = 222,
            RULE_null_const = 223,
            RULE_non_reserved_words = 224;

    private static String[] makeRuleNames() {
        return new String[] {
            "program",
            "block",
            "begin_end_block",
            "single_block_stmt",
            "block_end",
            "proc_block",
            "stmt",
            "semicolon_stmt",
            "exception_block",
            "exception_block_item",
            "null_stmt",
            "expr_stmt",
            "assignment_stmt",
            "assignment_stmt_item",
            "assignment_stmt_single_item",
            "assignment_stmt_multiple_item",
            "assignment_stmt_select_item",
            "allocate_cursor_stmt",
            "associate_locator_stmt",
            "begin_transaction_stmt",
            "break_stmt",
            "call_stmt",
            "declare_stmt",
            "declare_block",
            "declare_block_inplace",
            "declare_stmt_item",
            "declare_var_item",
            "declare_condition_item",
            "declare_cursor_item",
            "cursor_with_return",
            "cursor_without_return",
            "declare_handler_item",
            "declare_temporary_table_item",
            "create_table_stmt",
            "create_local_temp_table_stmt",
            "create_table_definition",
            "create_table_columns",
            "create_table_columns_item",
            "column_name",
            "create_table_column_inline_cons",
            "create_table_column_cons",
            "create_table_fk_action",
            "create_table_preoptions",
            "create_table_preoptions_item",
            "create_table_preoptions_td_item",
            "create_table_options",
            "create_table_options_item",
            "create_table_options_ora_item",
            "create_table_options_db2_item",
            "create_table_options_td_item",
            "create_table_options_hive_item",
            "create_table_hive_row_format",
            "create_table_hive_row_format_fields",
            "create_table_options_mssql_item",
            "create_table_options_mysql_item",
            "alter_table_stmt",
            "alter_table_item",
            "alter_table_add_constraint",
            "alter_table_add_constraint_item",
            "dtype",
            "dtype_len",
            "dtype_attr",
            "dtype_default",
            "create_database_stmt",
            "create_database_option",
            "create_function_stmt",
            "create_function_return",
            "create_package_stmt",
            "package_spec",
            "package_spec_item",
            "create_package_body_stmt",
            "package_body",
            "package_body_item",
            "create_procedure_stmt",
            "create_routine_params",
            "create_routine_param_item",
            "create_routine_options",
            "create_routine_option",
            "drop_stmt",
            "end_transaction_stmt",
            "exec_stmt",
            "if_stmt",
            "if_plsql_stmt",
            "if_tsql_stmt",
            "if_bteq_stmt",
            "elseif_block",
            "else_block",
            "include_stmt",
            "insert_stmt",
            "insert_stmt_cols",
            "insert_stmt_rows",
            "insert_stmt_row",
            "insert_directory_stmt",
            "exit_stmt",
            "get_diag_stmt",
            "get_diag_stmt_item",
            "get_diag_stmt_exception_item",
            "get_diag_stmt_rowcount_item",
            "grant_stmt",
            "grant_stmt_item",
            "leave_stmt",
            "map_object_stmt",
            "open_stmt",
            "fetch_stmt",
            "collect_stats_stmt",
            "collect_stats_clause",
            "close_stmt",
            "cmp_stmt",
            "cmp_source",
            "copy_from_local_stmt",
            "copy_stmt",
            "copy_source",
            "copy_target",
            "copy_option",
            "copy_file_option",
            "commit_stmt",
            "create_index_stmt",
            "create_index_col",
            "index_storage_clause",
            "index_mssql_storage_clause",
            "print_stmt",
            "quit_stmt",
            "raise_stmt",
            "resignal_stmt",
            "return_stmt",
            "rollback_stmt",
            "set_session_option",
            "set_current_schema_option",
            "set_mssql_session_option",
            "set_teradata_session_option",
            "signal_stmt",
            "truncate_stmt",
            "use_stmt",
            "values_into_stmt",
            "while_stmt",
            "for_cursor_stmt",
            "for_range_stmt",
            "label",
            "using_clause",
            "select_stmt",
            "cte_select_stmt",
            "cte_select_stmt_item",
            "cte_select_cols",
            "fullselect_stmt",
            "fullselect_stmt_item",
            "fullselect_set_clause",
            "subselect_stmt",
            "select_list",
            "select_list_set",
            "select_list_limit",
            "select_list_item",
            "select_list_alias",
            "select_list_asterisk",
            "into_clause",
            "from_clause",
            "from_table_clause",
            "from_table_name_clause",
            "from_subselect_clause",
            "from_join_clause",
            "from_join_type_clause",
            "from_table_values_clause",
            "from_table_values_row",
            "from_alias_clause",
            "table_name",
            "where_clause",
            "group_by_clause",
            "having_clause",
            "qualify_clause",
            "order_by_clause",
            "select_options",
            "select_options_item",
            "update_stmt",
            "update_assignment",
            "update_table",
            "update_upsert",
            "merge_stmt",
            "merge_table",
            "merge_condition",
            "merge_action",
            "delete_stmt",
            "delete_alias",
            "describe_stmt",
            "bool_expr",
            "bool_expr_atom",
            "bool_expr_unary",
            "bool_expr_single_in",
            "bool_expr_multi_in",
            "bool_expr_binary",
            "bool_expr_logical_operator",
            "bool_expr_binary_operator",
            "expr",
            "expr_atom",
            "expr_interval",
            "interval_item",
            "expr_concat",
            "expr_concat_item",
            "expr_case",
            "expr_case_simple",
            "expr_case_searched",
            "expr_cursor_attribute",
            "expr_agg_window_func",
            "expr_func_all_distinct",
            "expr_func_over_clause",
            "expr_func_partition_by_clause",
            "expr_spec_func",
            "expr_func",
            "expr_func_params",
            "func_param",
            "expr_select",
            "expr_file",
            "hive",
            "hive_item",
            "host",
            "host_cmd",
            "host_stmt",
            "file_name",
            "date_literal",
            "timestamp_literal",
            "ident",
            "string",
            "int_number",
            "dec_number",
            "bool_literal",
            "null_const",
            "non_reserved_words"
        };
    }

    public static final String[] ruleNames = makeRuleNames();

    private static String[] makeLiteralNames() {
        return new String[] {
            null, "'@'", "'#'", "'%'", "'.'", "'!'", null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, "'+'", "':'", "','", "'||'", "'/'", "'..'",
            "'='", "'=='", "'<>'", "'!='", "'>'", "'>='", "'<'", "'<='", "'*'", "'{'", "'('", "'['",
            "'}'", "')'", "']'", "';'", "'-'"
        };
    }

    private static final String[] _LITERAL_NAMES = makeLiteralNames();

    private static String[] makeSymbolicNames() {
        return new String[] {
            null,
            null,
            null,
            null,
            null,
            null,
            "T_ACTION",
            "T_ADD2",
            "T_ALL",
            "T_ALLOCATE",
            "T_ALTER",
            "T_AND",
            "T_ANSI_NULLS",
            "T_ANSI_PADDING",
            "T_AS",
            "T_ASC",
            "T_ASSOCIATE",
            "T_AT",
            "T_AUTO_INCREMENT",
            "T_AVG",
            "T_BATCHSIZE",
            "T_BEGIN",
            "T_BETWEEN",
            "T_BIGINT",
            "T_BINARY_DOUBLE",
            "T_BINARY_FLOAT",
            "T_BINARY_INTEGER",
            "T_BIT",
            "T_BODY",
            "T_BREAK",
            "T_BY",
            "T_BYTE",
            "T_CALL",
            "T_CALLER",
            "T_CASCADE",
            "T_CASE",
            "T_CASESPECIFIC",
            "T_CAST",
            "T_CHAR",
            "T_CHARACTER",
            "T_CHARSET",
            "T_CLIENT",
            "T_CLOSE",
            "T_CLUSTERED",
            "T_CMP",
            "T_COLLECT",
            "T_COLLECTION",
            "T_COLUMN",
            "T_COMMENT",
            "T_CONSTANT",
            "T_COMMIT",
            "T_COMPRESS",
            "T_CONCAT",
            "T_CONDITION",
            "T_CONSTRAINT",
            "T_CONTINUE",
            "T_COPY",
            "T_COUNT",
            "T_COUNT_BIG",
            "T_CREATE",
            "T_CREATION",
            "T_CREATOR",
            "T_CS",
            "T_CURRENT",
            "T_CURRENT_SCHEMA",
            "T_CURSOR",
            "T_DATABASE",
            "T_DATA",
            "T_DATE",
            "T_DATETIME",
            "T_DAY",
            "T_DAYS",
            "T_DEC",
            "T_DECIMAL",
            "T_DECLARE",
            "T_DEFAULT",
            "T_DEFERRED",
            "T_DEFINED",
            "T_DEFINER",
            "T_DEFINITION",
            "T_DELETE",
            "T_DELIMITED",
            "T_DELIMITER",
            "T_DESC",
            "T_DESCRIBE",
            "T_DIAGNOSTICS",
            "T_DIR",
            "T_DIRECTORY",
            "T_DISTINCT",
            "T_DISTRIBUTE",
            "T_DO",
            "T_DOUBLE",
            "T_DROP",
            "T_DYNAMIC",
            "T_ELSE",
            "T_ELSEIF",
            "T_ELSIF",
            "T_ENABLE",
            "T_END",
            "T_ENGINE",
            "T_ESCAPED",
            "T_EXCEPT",
            "T_EXEC",
            "T_EXECUTE",
            "T_EXCEPTION",
            "T_EXCLUSIVE",
            "T_EXISTS",
            "T_EXIT",
            "T_FALLBACK",
            "T_FALSE",
            "T_FETCH",
            "T_FIELDS",
            "T_FILE",
            "T_FILES",
            "T_FLOAT",
            "T_FOR",
            "T_FOREIGN",
            "T_FORMAT",
            "T_FOUND",
            "T_FROM",
            "T_FULL",
            "T_FUNCTION",
            "T_GET",
            "T_GLOBAL",
            "T_GO",
            "T_GRANT",
            "T_GROUP",
            "T_HANDLER",
            "T_HASH",
            "T_HAVING",
            "T_HDFS",
            "T_HIVE",
            "T_HOST",
            "T_IDENTITY",
            "T_IF",
            "T_IGNORE",
            "T_IMMEDIATE",
            "T_IN",
            "T_INCLUDE",
            "T_INDEX",
            "T_INITRANS",
            "T_INNER",
            "T_INOUT",
            "T_INSERT",
            "T_INT",
            "T_INT2",
            "T_INT4",
            "T_INT8",
            "T_INTEGER",
            "T_INTERSECT",
            "T_INTERVAL",
            "T_INTO",
            "T_INVOKER",
            "T_IS",
            "T_ISOPEN",
            "T_ITEMS",
            "T_JOIN",
            "T_KEEP",
            "T_KEY",
            "T_KEYS",
            "T_LANGUAGE",
            "T_LEAVE",
            "T_LEFT",
            "T_LIKE",
            "T_LIMIT",
            "T_LINES",
            "T_LOCAL",
            "T_LOCATION",
            "T_LOCATOR",
            "T_LOCATORS",
            "T_LOCKS",
            "T_LOG",
            "T_LOGGED",
            "T_LOGGING",
            "T_LOOP",
            "T_MAP",
            "T_MATCHED",
            "T_MAX",
            "T_MAXTRANS",
            "T_MERGE",
            "T_MESSAGE_TEXT",
            "T_MICROSECOND",
            "T_MICROSECONDS",
            "T_MIN",
            "T_MULTISET",
            "T_NCHAR",
            "T_NEW",
            "T_NVARCHAR",
            "T_NO",
            "T_NOCOUNT",
            "T_NOCOMPRESS",
            "T_NOLOGGING",
            "T_NONE",
            "T_NOT",
            "T_NOTFOUND",
            "T_NULL",
            "T_NUMERIC",
            "T_NUMBER",
            "T_OBJECT",
            "T_OFF",
            "T_ON",
            "T_ONLY",
            "T_OPEN",
            "T_OR",
            "T_ORDER",
            "T_OUT",
            "T_OUTER",
            "T_OVER",
            "T_OVERWRITE",
            "T_OWNER",
            "T_PACKAGE",
            "T_PARTITION",
            "T_PCTFREE",
            "T_PCTUSED",
            "T_PLS_INTEGER",
            "T_PRECISION",
            "T_PRESERVE",
            "T_PRIMARY",
            "T_PRINT",
            "T_PROC",
            "T_PROCEDURE",
            "T_QUALIFY",
            "T_QUERY_BAND",
            "T_QUIT",
            "T_QUOTED_IDENTIFIER",
            "T_RAISE",
            "T_REAL",
            "T_REFERENCES",
            "T_REGEXP",
            "T_REPLACE",
            "T_RESIGNAL",
            "T_RESTRICT",
            "T_RESULT",
            "T_RESULT_SET_LOCATOR",
            "T_RETURN",
            "T_RETURNS",
            "T_REVERSE",
            "T_RIGHT",
            "T_RLIKE",
            "T_ROLE",
            "T_ROLLBACK",
            "T_ROW",
            "T_ROWS",
            "T_ROWTYPE",
            "T_ROW_COUNT",
            "T_RR",
            "T_RS",
            "T_PWD",
            "T_TRIM",
            "T_SCHEMA",
            "T_SECOND",
            "T_SECONDS",
            "T_SECURITY",
            "T_SEGMENT",
            "T_SEL",
            "T_SELECT",
            "T_SET",
            "T_SESSION",
            "T_SESSIONS",
            "T_SETS",
            "T_SHARE",
            "T_SIGNAL",
            "T_SIMPLE_DOUBLE",
            "T_SIMPLE_FLOAT",
            "T_SIMPLE_INTEGER",
            "T_SMALLDATETIME",
            "T_SMALLINT",
            "T_SQL",
            "T_SQLEXCEPTION",
            "T_SQLINSERT",
            "T_SQLSTATE",
            "T_SQLWARNING",
            "T_STATS",
            "T_STATISTICS",
            "T_STEP",
            "T_STORAGE",
            "T_STORED",
            "T_STRING",
            "T_SUBDIR",
            "T_SUBSTRING",
            "T_SUM",
            "T_SYS_REFCURSOR",
            "T_TABLE",
            "T_TABLESPACE",
            "T_TEMPORARY",
            "T_TERMINATED",
            "T_TEXTIMAGE_ON",
            "T_THEN",
            "T_TIMESTAMP",
            "T_TINYINT",
            "T_TITLE",
            "T_TO",
            "T_TOP",
            "T_TRANSACTION",
            "T_TRUE",
            "T_TRUNCATE",
            "T_TYPE",
            "T_UNION",
            "T_UNIQUE",
            "T_UPDATE",
            "T_UR",
            "T_USE",
            "T_USING",
            "T_VALUE",
            "T_VALUES",
            "T_VAR",
            "T_VARCHAR",
            "T_VARCHAR2",
            "T_VARYING",
            "T_VOLATILE",
            "T_WHEN",
            "T_WHERE",
            "T_WHILE",
            "T_WITH",
            "T_WITHOUT",
            "T_WORK",
            "T_XACT_ABORT",
            "T_XML",
            "T_YES",
            "T_ACTIVITY_COUNT",
            "T_CUME_DIST",
            "T_CURRENT_DATE",
            "T_CURRENT_TIMESTAMP",
            "T_CURRENT_USER",
            "T_DENSE_RANK",
            "T_FIRST_VALUE",
            "T_LAG",
            "T_LAST_VALUE",
            "T_LEAD",
            "T_MAX_PART_STRING",
            "T_MIN_PART_STRING",
            "T_MAX_PART_INT",
            "T_MIN_PART_INT",
            "T_MAX_PART_DATE",
            "T_MIN_PART_DATE",
            "T_PART_COUNT",
            "T_PART_LOC",
            "T_RANK",
            "T_ROW_NUMBER",
            "T_STDEV",
            "T_SYSDATE",
            "T_VARIANCE",
            "T_USER",
            "T_ADD",
            "T_COLON",
            "T_COMMA",
            "T_PIPE",
            "T_DIV",
            "T_DOT2",
            "T_EQUAL",
            "T_EQUAL2",
            "T_NOTEQUAL",
            "T_NOTEQUAL2",
            "T_GREATER",
            "T_GREATEREQUAL",
            "T_LESS",
            "T_LESSEQUAL",
            "T_MUL",
            "T_OPEN_B",
            "T_OPEN_P",
            "T_OPEN_SB",
            "T_CLOSE_B",
            "T_CLOSE_P",
            "T_CLOSE_SB",
            "T_SEMICOLON",
            "T_SUB",
            "L_ID",
            "L_S_STRING",
            "L_D_STRING",
            "L_INT",
            "L_DEC",
            "L_WS",
            "L_M_COMMENT",
            "L_S_COMMENT",
            "L_FILE",
            "L_LABEL"
        };
    }

    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    /** @deprecated Use {@link #VOCABULARY} instead. */
    @Deprecated public static final String[] tokenNames;

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override
    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "Hplsql.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public HplsqlParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ProgramContext extends ParserRuleContext {
        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public ProgramContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_program;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterProgram(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitProgram(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitProgram(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ProgramContext program() throws RecognitionException {
        ProgramContext _localctx = new ProgramContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_program);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(450);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class BlockContext extends ParserRuleContext {
        public List<Begin_end_blockContext> begin_end_block() {
            return getRuleContexts(Begin_end_blockContext.class);
        }

        public Begin_end_blockContext begin_end_block(int i) {
            return getRuleContext(Begin_end_blockContext.class, i);
        }

        public List<StmtContext> stmt() {
            return getRuleContexts(StmtContext.class);
        }

        public StmtContext stmt(int i) {
            return getRuleContext(StmtContext.class, i);
        }

        public List<TerminalNode> T_GO() {
            return getTokens(HplsqlParser.T_GO);
        }

        public TerminalNode T_GO(int i) {
            return getToken(HplsqlParser.T_GO, i);
        }

        public BlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterBlock(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitBlock(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBlock(this);
            else return visitor.visitChildren(this);
        }
    }

    public final BlockContext block() throws RecognitionException {
        BlockContext _localctx = new BlockContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_block);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(459);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(454);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 0, _ctx)) {
                                        case 1:
                                            {
                                                setState(452);
                                                begin_end_block();
                                            }
                                            break;
                                        case 2:
                                            {
                                                setState(453);
                                                stmt();
                                            }
                                            break;
                                    }
                                    setState(457);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 1, _ctx)) {
                                        case 1:
                                            {
                                                setState(456);
                                                match(T_GO);
                                            }
                                            break;
                                    }
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(461);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 2, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Begin_end_blockContext extends ParserRuleContext {
        public TerminalNode T_BEGIN() {
            return getToken(HplsqlParser.T_BEGIN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public Block_endContext block_end() {
            return getRuleContext(Block_endContext.class, 0);
        }

        public Declare_blockContext declare_block() {
            return getRuleContext(Declare_blockContext.class, 0);
        }

        public Exception_blockContext exception_block() {
            return getRuleContext(Exception_blockContext.class, 0);
        }

        public Begin_end_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_begin_end_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBegin_end_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBegin_end_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBegin_end_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Begin_end_blockContext begin_end_block() throws RecognitionException {
        Begin_end_blockContext _localctx = new Begin_end_blockContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_begin_end_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(464);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_DECLARE) {
                    {
                        setState(463);
                        declare_block();
                    }
                }

                setState(466);
                match(T_BEGIN);
                setState(467);
                block();
                setState(469);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 4, _ctx)) {
                    case 1:
                        {
                            setState(468);
                            exception_block();
                        }
                        break;
                }
                setState(471);
                block_end();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Single_block_stmtContext extends ParserRuleContext {
        public TerminalNode T_BEGIN() {
            return getToken(HplsqlParser.T_BEGIN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public Block_endContext block_end() {
            return getRuleContext(Block_endContext.class, 0);
        }

        public Exception_blockContext exception_block() {
            return getRuleContext(Exception_blockContext.class, 0);
        }

        public StmtContext stmt() {
            return getRuleContext(StmtContext.class, 0);
        }

        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public Single_block_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_single_block_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSingle_block_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSingle_block_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSingle_block_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Single_block_stmtContext single_block_stmt() throws RecognitionException {
        Single_block_stmtContext _localctx = new Single_block_stmtContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_single_block_stmt);
        try {
            setState(484);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 7, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(473);
                        match(T_BEGIN);
                        setState(474);
                        block();
                        setState(476);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 5, _ctx)) {
                            case 1:
                                {
                                    setState(475);
                                    exception_block();
                                }
                                break;
                        }
                        setState(478);
                        block_end();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(480);
                        stmt();
                        setState(482);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 6, _ctx)) {
                            case 1:
                                {
                                    setState(481);
                                    match(T_SEMICOLON);
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Block_endContext extends ParserRuleContext {
        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public Block_endContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_block_end;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBlock_end(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitBlock_end(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBlock_end(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Block_endContext block_end() throws RecognitionException {
        Block_endContext _localctx = new Block_endContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_block_end);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(486);
                if (!(!_input.LT(2).getText().equalsIgnoreCase("TRANSACTION")))
                    throw new FailedPredicateException(
                            this, "!_input.LT(2).getText().equalsIgnoreCase(\"TRANSACTION\")");
                setState(487);
                match(T_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Proc_blockContext extends ParserRuleContext {
        public Begin_end_blockContext begin_end_block() {
            return getRuleContext(Begin_end_blockContext.class, 0);
        }

        public List<StmtContext> stmt() {
            return getRuleContexts(StmtContext.class);
        }

        public StmtContext stmt(int i) {
            return getRuleContext(StmtContext.class, i);
        }

        public TerminalNode T_GO() {
            return getToken(HplsqlParser.T_GO, 0);
        }

        public Proc_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_proc_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterProc_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitProc_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitProc_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Proc_blockContext proc_block() throws RecognitionException {
        Proc_blockContext _localctx = new Proc_blockContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_proc_block);
        try {
            int _alt;
            setState(498);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 10, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(489);
                        begin_end_block();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(491);
                        _errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            setState(490);
                                            stmt();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            setState(493);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 8, _ctx);
                        } while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                        setState(496);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 9, _ctx)) {
                            case 1:
                                {
                                    setState(495);
                                    match(T_GO);
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StmtContext extends ParserRuleContext {
        public Assignment_stmtContext assignment_stmt() {
            return getRuleContext(Assignment_stmtContext.class, 0);
        }

        public Allocate_cursor_stmtContext allocate_cursor_stmt() {
            return getRuleContext(Allocate_cursor_stmtContext.class, 0);
        }

        public Alter_table_stmtContext alter_table_stmt() {
            return getRuleContext(Alter_table_stmtContext.class, 0);
        }

        public Associate_locator_stmtContext associate_locator_stmt() {
            return getRuleContext(Associate_locator_stmtContext.class, 0);
        }

        public Begin_transaction_stmtContext begin_transaction_stmt() {
            return getRuleContext(Begin_transaction_stmtContext.class, 0);
        }

        public Break_stmtContext break_stmt() {
            return getRuleContext(Break_stmtContext.class, 0);
        }

        public Call_stmtContext call_stmt() {
            return getRuleContext(Call_stmtContext.class, 0);
        }

        public Collect_stats_stmtContext collect_stats_stmt() {
            return getRuleContext(Collect_stats_stmtContext.class, 0);
        }

        public Close_stmtContext close_stmt() {
            return getRuleContext(Close_stmtContext.class, 0);
        }

        public Cmp_stmtContext cmp_stmt() {
            return getRuleContext(Cmp_stmtContext.class, 0);
        }

        public Copy_from_local_stmtContext copy_from_local_stmt() {
            return getRuleContext(Copy_from_local_stmtContext.class, 0);
        }

        public Copy_stmtContext copy_stmt() {
            return getRuleContext(Copy_stmtContext.class, 0);
        }

        public Commit_stmtContext commit_stmt() {
            return getRuleContext(Commit_stmtContext.class, 0);
        }

        public Create_database_stmtContext create_database_stmt() {
            return getRuleContext(Create_database_stmtContext.class, 0);
        }

        public Create_function_stmtContext create_function_stmt() {
            return getRuleContext(Create_function_stmtContext.class, 0);
        }

        public Create_index_stmtContext create_index_stmt() {
            return getRuleContext(Create_index_stmtContext.class, 0);
        }

        public Create_local_temp_table_stmtContext create_local_temp_table_stmt() {
            return getRuleContext(Create_local_temp_table_stmtContext.class, 0);
        }

        public Create_package_stmtContext create_package_stmt() {
            return getRuleContext(Create_package_stmtContext.class, 0);
        }

        public Create_package_body_stmtContext create_package_body_stmt() {
            return getRuleContext(Create_package_body_stmtContext.class, 0);
        }

        public Create_procedure_stmtContext create_procedure_stmt() {
            return getRuleContext(Create_procedure_stmtContext.class, 0);
        }

        public Create_table_stmtContext create_table_stmt() {
            return getRuleContext(Create_table_stmtContext.class, 0);
        }

        public Declare_stmtContext declare_stmt() {
            return getRuleContext(Declare_stmtContext.class, 0);
        }

        public Delete_stmtContext delete_stmt() {
            return getRuleContext(Delete_stmtContext.class, 0);
        }

        public Describe_stmtContext describe_stmt() {
            return getRuleContext(Describe_stmtContext.class, 0);
        }

        public Drop_stmtContext drop_stmt() {
            return getRuleContext(Drop_stmtContext.class, 0);
        }

        public End_transaction_stmtContext end_transaction_stmt() {
            return getRuleContext(End_transaction_stmtContext.class, 0);
        }

        public Exec_stmtContext exec_stmt() {
            return getRuleContext(Exec_stmtContext.class, 0);
        }

        public Exit_stmtContext exit_stmt() {
            return getRuleContext(Exit_stmtContext.class, 0);
        }

        public Fetch_stmtContext fetch_stmt() {
            return getRuleContext(Fetch_stmtContext.class, 0);
        }

        public For_cursor_stmtContext for_cursor_stmt() {
            return getRuleContext(For_cursor_stmtContext.class, 0);
        }

        public For_range_stmtContext for_range_stmt() {
            return getRuleContext(For_range_stmtContext.class, 0);
        }

        public If_stmtContext if_stmt() {
            return getRuleContext(If_stmtContext.class, 0);
        }

        public Include_stmtContext include_stmt() {
            return getRuleContext(Include_stmtContext.class, 0);
        }

        public Insert_stmtContext insert_stmt() {
            return getRuleContext(Insert_stmtContext.class, 0);
        }

        public Insert_directory_stmtContext insert_directory_stmt() {
            return getRuleContext(Insert_directory_stmtContext.class, 0);
        }

        public Get_diag_stmtContext get_diag_stmt() {
            return getRuleContext(Get_diag_stmtContext.class, 0);
        }

        public Grant_stmtContext grant_stmt() {
            return getRuleContext(Grant_stmtContext.class, 0);
        }

        public Leave_stmtContext leave_stmt() {
            return getRuleContext(Leave_stmtContext.class, 0);
        }

        public Map_object_stmtContext map_object_stmt() {
            return getRuleContext(Map_object_stmtContext.class, 0);
        }

        public Merge_stmtContext merge_stmt() {
            return getRuleContext(Merge_stmtContext.class, 0);
        }

        public Open_stmtContext open_stmt() {
            return getRuleContext(Open_stmtContext.class, 0);
        }

        public Print_stmtContext print_stmt() {
            return getRuleContext(Print_stmtContext.class, 0);
        }

        public Quit_stmtContext quit_stmt() {
            return getRuleContext(Quit_stmtContext.class, 0);
        }

        public Raise_stmtContext raise_stmt() {
            return getRuleContext(Raise_stmtContext.class, 0);
        }

        public Resignal_stmtContext resignal_stmt() {
            return getRuleContext(Resignal_stmtContext.class, 0);
        }

        public Return_stmtContext return_stmt() {
            return getRuleContext(Return_stmtContext.class, 0);
        }

        public Rollback_stmtContext rollback_stmt() {
            return getRuleContext(Rollback_stmtContext.class, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public Signal_stmtContext signal_stmt() {
            return getRuleContext(Signal_stmtContext.class, 0);
        }

        public Update_stmtContext update_stmt() {
            return getRuleContext(Update_stmtContext.class, 0);
        }

        public Use_stmtContext use_stmt() {
            return getRuleContext(Use_stmtContext.class, 0);
        }

        public Truncate_stmtContext truncate_stmt() {
            return getRuleContext(Truncate_stmtContext.class, 0);
        }

        public Values_into_stmtContext values_into_stmt() {
            return getRuleContext(Values_into_stmtContext.class, 0);
        }

        public While_stmtContext while_stmt() {
            return getRuleContext(While_stmtContext.class, 0);
        }

        public LabelContext label() {
            return getRuleContext(LabelContext.class, 0);
        }

        public HiveContext hive() {
            return getRuleContext(HiveContext.class, 0);
        }

        public HostContext host() {
            return getRuleContext(HostContext.class, 0);
        }

        public Null_stmtContext null_stmt() {
            return getRuleContext(Null_stmtContext.class, 0);
        }

        public Expr_stmtContext expr_stmt() {
            return getRuleContext(Expr_stmtContext.class, 0);
        }

        public Semicolon_stmtContext semicolon_stmt() {
            return getRuleContext(Semicolon_stmtContext.class, 0);
        }

        public StmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterStmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitStmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitStmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StmtContext stmt() throws RecognitionException {
        StmtContext _localctx = new StmtContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_stmt);
        try {
            setState(560);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 11, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(500);
                        assignment_stmt();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(501);
                        allocate_cursor_stmt();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(502);
                        alter_table_stmt();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(503);
                        associate_locator_stmt();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(504);
                        begin_transaction_stmt();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(505);
                        break_stmt();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(506);
                        call_stmt();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(507);
                        collect_stats_stmt();
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(508);
                        close_stmt();
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(509);
                        cmp_stmt();
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(510);
                        copy_from_local_stmt();
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(511);
                        copy_stmt();
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(512);
                        commit_stmt();
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(513);
                        create_database_stmt();
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(514);
                        create_function_stmt();
                    }
                    break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(515);
                        create_index_stmt();
                    }
                    break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(516);
                        create_local_temp_table_stmt();
                    }
                    break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                    {
                        setState(517);
                        create_package_stmt();
                    }
                    break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                    {
                        setState(518);
                        create_package_body_stmt();
                    }
                    break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                    {
                        setState(519);
                        create_procedure_stmt();
                    }
                    break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                    {
                        setState(520);
                        create_table_stmt();
                    }
                    break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                    {
                        setState(521);
                        declare_stmt();
                    }
                    break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                    {
                        setState(522);
                        delete_stmt();
                    }
                    break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                    {
                        setState(523);
                        describe_stmt();
                    }
                    break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                    {
                        setState(524);
                        drop_stmt();
                    }
                    break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                    {
                        setState(525);
                        end_transaction_stmt();
                    }
                    break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                    {
                        setState(526);
                        exec_stmt();
                    }
                    break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                    {
                        setState(527);
                        exit_stmt();
                    }
                    break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                    {
                        setState(528);
                        fetch_stmt();
                    }
                    break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                    {
                        setState(529);
                        for_cursor_stmt();
                    }
                    break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                    {
                        setState(530);
                        for_range_stmt();
                    }
                    break;
                case 32:
                    enterOuterAlt(_localctx, 32);
                    {
                        setState(531);
                        if_stmt();
                    }
                    break;
                case 33:
                    enterOuterAlt(_localctx, 33);
                    {
                        setState(532);
                        include_stmt();
                    }
                    break;
                case 34:
                    enterOuterAlt(_localctx, 34);
                    {
                        setState(533);
                        insert_stmt();
                    }
                    break;
                case 35:
                    enterOuterAlt(_localctx, 35);
                    {
                        setState(534);
                        insert_directory_stmt();
                    }
                    break;
                case 36:
                    enterOuterAlt(_localctx, 36);
                    {
                        setState(535);
                        get_diag_stmt();
                    }
                    break;
                case 37:
                    enterOuterAlt(_localctx, 37);
                    {
                        setState(536);
                        grant_stmt();
                    }
                    break;
                case 38:
                    enterOuterAlt(_localctx, 38);
                    {
                        setState(537);
                        leave_stmt();
                    }
                    break;
                case 39:
                    enterOuterAlt(_localctx, 39);
                    {
                        setState(538);
                        map_object_stmt();
                    }
                    break;
                case 40:
                    enterOuterAlt(_localctx, 40);
                    {
                        setState(539);
                        merge_stmt();
                    }
                    break;
                case 41:
                    enterOuterAlt(_localctx, 41);
                    {
                        setState(540);
                        open_stmt();
                    }
                    break;
                case 42:
                    enterOuterAlt(_localctx, 42);
                    {
                        setState(541);
                        print_stmt();
                    }
                    break;
                case 43:
                    enterOuterAlt(_localctx, 43);
                    {
                        setState(542);
                        quit_stmt();
                    }
                    break;
                case 44:
                    enterOuterAlt(_localctx, 44);
                    {
                        setState(543);
                        raise_stmt();
                    }
                    break;
                case 45:
                    enterOuterAlt(_localctx, 45);
                    {
                        setState(544);
                        resignal_stmt();
                    }
                    break;
                case 46:
                    enterOuterAlt(_localctx, 46);
                    {
                        setState(545);
                        return_stmt();
                    }
                    break;
                case 47:
                    enterOuterAlt(_localctx, 47);
                    {
                        setState(546);
                        rollback_stmt();
                    }
                    break;
                case 48:
                    enterOuterAlt(_localctx, 48);
                    {
                        setState(547);
                        select_stmt();
                    }
                    break;
                case 49:
                    enterOuterAlt(_localctx, 49);
                    {
                        setState(548);
                        signal_stmt();
                    }
                    break;
                case 50:
                    enterOuterAlt(_localctx, 50);
                    {
                        setState(549);
                        update_stmt();
                    }
                    break;
                case 51:
                    enterOuterAlt(_localctx, 51);
                    {
                        setState(550);
                        use_stmt();
                    }
                    break;
                case 52:
                    enterOuterAlt(_localctx, 52);
                    {
                        setState(551);
                        truncate_stmt();
                    }
                    break;
                case 53:
                    enterOuterAlt(_localctx, 53);
                    {
                        setState(552);
                        values_into_stmt();
                    }
                    break;
                case 54:
                    enterOuterAlt(_localctx, 54);
                    {
                        setState(553);
                        while_stmt();
                    }
                    break;
                case 55:
                    enterOuterAlt(_localctx, 55);
                    {
                        setState(554);
                        label();
                    }
                    break;
                case 56:
                    enterOuterAlt(_localctx, 56);
                    {
                        setState(555);
                        hive();
                    }
                    break;
                case 57:
                    enterOuterAlt(_localctx, 57);
                    {
                        setState(556);
                        host();
                    }
                    break;
                case 58:
                    enterOuterAlt(_localctx, 58);
                    {
                        setState(557);
                        null_stmt();
                    }
                    break;
                case 59:
                    enterOuterAlt(_localctx, 59);
                    {
                        setState(558);
                        expr_stmt();
                    }
                    break;
                case 60:
                    enterOuterAlt(_localctx, 60);
                    {
                        setState(559);
                        semicolon_stmt();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Semicolon_stmtContext extends ParserRuleContext {
        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public TerminalNode T_DIV() {
            return getToken(HplsqlParser.T_DIV, 0);
        }

        public Semicolon_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_semicolon_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSemicolon_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSemicolon_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSemicolon_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Semicolon_stmtContext semicolon_stmt() throws RecognitionException {
        Semicolon_stmtContext _localctx = new Semicolon_stmtContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_semicolon_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(562);
                _la = _input.LA(1);
                if (!(_la == T__0 || _la == T__1 || _la == T_DIV || _la == T_SEMICOLON)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Exception_blockContext extends ParserRuleContext {
        public TerminalNode T_EXCEPTION() {
            return getToken(HplsqlParser.T_EXCEPTION, 0);
        }

        public List<Exception_block_itemContext> exception_block_item() {
            return getRuleContexts(Exception_block_itemContext.class);
        }

        public Exception_block_itemContext exception_block_item(int i) {
            return getRuleContext(Exception_block_itemContext.class, i);
        }

        public Exception_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exception_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterException_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitException_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitException_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_blockContext exception_block() throws RecognitionException {
        Exception_blockContext _localctx = new Exception_blockContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_exception_block);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(564);
                match(T_EXCEPTION);
                setState(566);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(565);
                                    exception_block_item();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(568);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 12, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Exception_block_itemContext extends ParserRuleContext {
        public List<TerminalNode> T_WHEN() {
            return getTokens(HplsqlParser.T_WHEN);
        }

        public TerminalNode T_WHEN(int i) {
            return getToken(HplsqlParser.T_WHEN, i);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public Exception_block_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exception_block_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterException_block_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitException_block_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitException_block_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exception_block_itemContext exception_block_item() throws RecognitionException {
        Exception_block_itemContext _localctx = new Exception_block_itemContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_exception_block_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(570);
                match(T_WHEN);
                setState(571);
                match(L_ID);
                setState(572);
                match(T_THEN);
                setState(573);
                block();
                setState(574);
                _la = _input.LA(1);
                if (_la <= 0 || (_la == T_END || _la == T_WHEN)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Null_stmtContext extends ParserRuleContext {
        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public Null_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_null_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterNull_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitNull_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitNull_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Null_stmtContext null_stmt() throws RecognitionException {
        Null_stmtContext _localctx = new Null_stmtContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_null_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(576);
                match(T_NULL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_stmtContext extends ParserRuleContext {
        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Expr_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_stmtContext expr_stmt() throws RecognitionException {
        Expr_stmtContext _localctx = new Expr_stmtContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_expr_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(578);
                if (!(!_input.LT(1).getText().equalsIgnoreCase("GO")))
                    throw new FailedPredicateException(
                            this, "!_input.LT(1).getText().equalsIgnoreCase(\"GO\")");
                setState(579);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Assignment_stmtContext extends ParserRuleContext {
        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public Set_session_optionContext set_session_option() {
            return getRuleContext(Set_session_optionContext.class, 0);
        }

        public List<Assignment_stmt_itemContext> assignment_stmt_item() {
            return getRuleContexts(Assignment_stmt_itemContext.class);
        }

        public Assignment_stmt_itemContext assignment_stmt_item(int i) {
            return getRuleContext(Assignment_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Assignment_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssignment_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssignment_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAssignment_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_stmtContext assignment_stmt() throws RecognitionException {
        Assignment_stmtContext _localctx = new Assignment_stmtContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_assignment_stmt);
        try {
            int _alt;
            setState(594);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 15, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(581);
                        match(T_SET);
                        setState(582);
                        set_session_option();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(584);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 13, _ctx)) {
                            case 1:
                                {
                                    setState(583);
                                    match(T_SET);
                                }
                                break;
                        }
                        setState(586);
                        assignment_stmt_item();
                        setState(591);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 14, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(587);
                                        match(T_COMMA);
                                        setState(588);
                                        assignment_stmt_item();
                                    }
                                }
                            }
                            setState(593);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 14, _ctx);
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Assignment_stmt_itemContext extends ParserRuleContext {
        public Assignment_stmt_single_itemContext assignment_stmt_single_item() {
            return getRuleContext(Assignment_stmt_single_itemContext.class, 0);
        }

        public Assignment_stmt_multiple_itemContext assignment_stmt_multiple_item() {
            return getRuleContext(Assignment_stmt_multiple_itemContext.class, 0);
        }

        public Assignment_stmt_select_itemContext assignment_stmt_select_item() {
            return getRuleContext(Assignment_stmt_select_itemContext.class, 0);
        }

        public Assignment_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssignment_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssignment_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAssignment_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_stmt_itemContext assignment_stmt_item() throws RecognitionException {
        Assignment_stmt_itemContext _localctx = new Assignment_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_assignment_stmt_item);
        try {
            setState(599);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 16, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(596);
                        assignment_stmt_single_item();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(597);
                        assignment_stmt_multiple_item();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(598);
                        assignment_stmt_select_item();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Assignment_stmt_single_itemContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_COLON() {
            return getToken(HplsqlParser.T_COLON, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Assignment_stmt_single_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment_stmt_single_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssignment_stmt_single_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssignment_stmt_single_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitAssignment_stmt_single_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_stmt_single_itemContext assignment_stmt_single_item()
            throws RecognitionException {
        Assignment_stmt_single_itemContext _localctx =
                new Assignment_stmt_single_itemContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_assignment_stmt_single_item);
        int _la;
        try {
            setState(617);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_ACTION:
                case T_ADD2:
                case T_ALL:
                case T_ALLOCATE:
                case T_ALTER:
                case T_AND:
                case T_ANSI_NULLS:
                case T_ANSI_PADDING:
                case T_AS:
                case T_ASC:
                case T_ASSOCIATE:
                case T_AT:
                case T_AUTO_INCREMENT:
                case T_AVG:
                case T_BATCHSIZE:
                case T_BEGIN:
                case T_BETWEEN:
                case T_BIGINT:
                case T_BINARY_DOUBLE:
                case T_BINARY_FLOAT:
                case T_BIT:
                case T_BODY:
                case T_BREAK:
                case T_BY:
                case T_BYTE:
                case T_CALL:
                case T_CALLER:
                case T_CASCADE:
                case T_CASE:
                case T_CASESPECIFIC:
                case T_CAST:
                case T_CHAR:
                case T_CHARACTER:
                case T_CHARSET:
                case T_CLIENT:
                case T_CLOSE:
                case T_CLUSTERED:
                case T_CMP:
                case T_COLLECT:
                case T_COLLECTION:
                case T_COLUMN:
                case T_COMMENT:
                case T_CONSTANT:
                case T_COMMIT:
                case T_COMPRESS:
                case T_CONCAT:
                case T_CONDITION:
                case T_CONSTRAINT:
                case T_CONTINUE:
                case T_COPY:
                case T_COUNT:
                case T_COUNT_BIG:
                case T_CREATE:
                case T_CREATION:
                case T_CREATOR:
                case T_CS:
                case T_CURRENT:
                case T_CURRENT_SCHEMA:
                case T_CURSOR:
                case T_DATABASE:
                case T_DATA:
                case T_DATE:
                case T_DATETIME:
                case T_DAY:
                case T_DAYS:
                case T_DEC:
                case T_DECIMAL:
                case T_DECLARE:
                case T_DEFAULT:
                case T_DEFERRED:
                case T_DEFINED:
                case T_DEFINER:
                case T_DEFINITION:
                case T_DELETE:
                case T_DELIMITED:
                case T_DELIMITER:
                case T_DESC:
                case T_DESCRIBE:
                case T_DIAGNOSTICS:
                case T_DIR:
                case T_DIRECTORY:
                case T_DISTINCT:
                case T_DISTRIBUTE:
                case T_DO:
                case T_DOUBLE:
                case T_DROP:
                case T_DYNAMIC:
                case T_ENABLE:
                case T_ENGINE:
                case T_ESCAPED:
                case T_EXCEPT:
                case T_EXEC:
                case T_EXECUTE:
                case T_EXCEPTION:
                case T_EXCLUSIVE:
                case T_EXISTS:
                case T_EXIT:
                case T_FALLBACK:
                case T_FALSE:
                case T_FETCH:
                case T_FIELDS:
                case T_FILE:
                case T_FILES:
                case T_FLOAT:
                case T_FOR:
                case T_FOREIGN:
                case T_FORMAT:
                case T_FOUND:
                case T_FROM:
                case T_FULL:
                case T_FUNCTION:
                case T_GET:
                case T_GLOBAL:
                case T_GO:
                case T_GRANT:
                case T_GROUP:
                case T_HANDLER:
                case T_HASH:
                case T_HAVING:
                case T_HDFS:
                case T_HIVE:
                case T_HOST:
                case T_IDENTITY:
                case T_IF:
                case T_IGNORE:
                case T_IMMEDIATE:
                case T_IN:
                case T_INCLUDE:
                case T_INDEX:
                case T_INITRANS:
                case T_INNER:
                case T_INOUT:
                case T_INSERT:
                case T_INT:
                case T_INT2:
                case T_INT4:
                case T_INT8:
                case T_INTEGER:
                case T_INTERSECT:
                case T_INTERVAL:
                case T_INTO:
                case T_INVOKER:
                case T_IS:
                case T_ISOPEN:
                case T_ITEMS:
                case T_JOIN:
                case T_KEEP:
                case T_KEY:
                case T_KEYS:
                case T_LANGUAGE:
                case T_LEAVE:
                case T_LEFT:
                case T_LIKE:
                case T_LIMIT:
                case T_LINES:
                case T_LOCAL:
                case T_LOCATION:
                case T_LOCATOR:
                case T_LOCATORS:
                case T_LOCKS:
                case T_LOG:
                case T_LOGGED:
                case T_LOGGING:
                case T_LOOP:
                case T_MAP:
                case T_MATCHED:
                case T_MAX:
                case T_MAXTRANS:
                case T_MERGE:
                case T_MESSAGE_TEXT:
                case T_MICROSECOND:
                case T_MICROSECONDS:
                case T_MIN:
                case T_MULTISET:
                case T_NCHAR:
                case T_NEW:
                case T_NVARCHAR:
                case T_NO:
                case T_NOCOUNT:
                case T_NOCOMPRESS:
                case T_NOLOGGING:
                case T_NONE:
                case T_NOT:
                case T_NOTFOUND:
                case T_NUMERIC:
                case T_NUMBER:
                case T_OBJECT:
                case T_OFF:
                case T_ON:
                case T_ONLY:
                case T_OPEN:
                case T_OR:
                case T_ORDER:
                case T_OUT:
                case T_OUTER:
                case T_OVER:
                case T_OVERWRITE:
                case T_OWNER:
                case T_PACKAGE:
                case T_PARTITION:
                case T_PCTFREE:
                case T_PCTUSED:
                case T_PRECISION:
                case T_PRESERVE:
                case T_PRIMARY:
                case T_PRINT:
                case T_PROC:
                case T_PROCEDURE:
                case T_QUALIFY:
                case T_QUERY_BAND:
                case T_QUIT:
                case T_QUOTED_IDENTIFIER:
                case T_RAISE:
                case T_REAL:
                case T_REFERENCES:
                case T_REGEXP:
                case T_REPLACE:
                case T_RESIGNAL:
                case T_RESTRICT:
                case T_RESULT:
                case T_RESULT_SET_LOCATOR:
                case T_RETURN:
                case T_RETURNS:
                case T_REVERSE:
                case T_RIGHT:
                case T_RLIKE:
                case T_ROLE:
                case T_ROLLBACK:
                case T_ROW:
                case T_ROWS:
                case T_ROW_COUNT:
                case T_RR:
                case T_RS:
                case T_PWD:
                case T_TRIM:
                case T_SCHEMA:
                case T_SECOND:
                case T_SECONDS:
                case T_SECURITY:
                case T_SEGMENT:
                case T_SEL:
                case T_SELECT:
                case T_SET:
                case T_SESSION:
                case T_SESSIONS:
                case T_SETS:
                case T_SHARE:
                case T_SIGNAL:
                case T_SIMPLE_DOUBLE:
                case T_SIMPLE_FLOAT:
                case T_SMALLDATETIME:
                case T_SMALLINT:
                case T_SQL:
                case T_SQLEXCEPTION:
                case T_SQLINSERT:
                case T_SQLSTATE:
                case T_SQLWARNING:
                case T_STATS:
                case T_STATISTICS:
                case T_STEP:
                case T_STORAGE:
                case T_STORED:
                case T_STRING:
                case T_SUBDIR:
                case T_SUBSTRING:
                case T_SUM:
                case T_SYS_REFCURSOR:
                case T_TABLE:
                case T_TABLESPACE:
                case T_TEMPORARY:
                case T_TERMINATED:
                case T_TEXTIMAGE_ON:
                case T_THEN:
                case T_TIMESTAMP:
                case T_TITLE:
                case T_TO:
                case T_TOP:
                case T_TRANSACTION:
                case T_TRUE:
                case T_TRUNCATE:
                case T_UNIQUE:
                case T_UPDATE:
                case T_UR:
                case T_USE:
                case T_USING:
                case T_VALUE:
                case T_VALUES:
                case T_VAR:
                case T_VARCHAR:
                case T_VARCHAR2:
                case T_VARYING:
                case T_VOLATILE:
                case T_WHILE:
                case T_WITH:
                case T_WITHOUT:
                case T_WORK:
                case T_XACT_ABORT:
                case T_XML:
                case T_YES:
                case T_ACTIVITY_COUNT:
                case T_CUME_DIST:
                case T_CURRENT_DATE:
                case T_CURRENT_TIMESTAMP:
                case T_CURRENT_USER:
                case T_DENSE_RANK:
                case T_FIRST_VALUE:
                case T_LAG:
                case T_LAST_VALUE:
                case T_LEAD:
                case T_PART_COUNT:
                case T_PART_LOC:
                case T_RANK:
                case T_ROW_NUMBER:
                case T_STDEV:
                case T_SYSDATE:
                case T_VARIANCE:
                case T_USER:
                case L_ID:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(601);
                        ident();
                        setState(603);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COLON) {
                            {
                                setState(602);
                                match(T_COLON);
                            }
                        }

                        setState(605);
                        match(T_EQUAL);
                        setState(606);
                        expr(0);
                    }
                    break;
                case T_OPEN_P:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(608);
                        match(T_OPEN_P);
                        setState(609);
                        ident();
                        setState(610);
                        match(T_CLOSE_P);
                        setState(612);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COLON) {
                            {
                                setState(611);
                                match(T_COLON);
                            }
                        }

                        setState(614);
                        match(T_EQUAL);
                        setState(615);
                        expr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Assignment_stmt_multiple_itemContext extends ParserRuleContext {
        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_COLON() {
            return getToken(HplsqlParser.T_COLON, 0);
        }

        public Assignment_stmt_multiple_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment_stmt_multiple_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssignment_stmt_multiple_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssignment_stmt_multiple_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitAssignment_stmt_multiple_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_stmt_multiple_itemContext assignment_stmt_multiple_item()
            throws RecognitionException {
        Assignment_stmt_multiple_itemContext _localctx =
                new Assignment_stmt_multiple_itemContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_assignment_stmt_multiple_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(619);
                match(T_OPEN_P);
                setState(620);
                ident();
                setState(625);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(621);
                            match(T_COMMA);
                            setState(622);
                            ident();
                        }
                    }
                    setState(627);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(628);
                match(T_CLOSE_P);
                setState(630);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_COLON) {
                    {
                        setState(629);
                        match(T_COLON);
                    }
                }

                setState(632);
                match(T_EQUAL);
                setState(633);
                match(T_OPEN_P);
                setState(634);
                expr(0);
                setState(639);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(635);
                            match(T_COMMA);
                            setState(636);
                            expr(0);
                        }
                    }
                    setState(641);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(642);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Assignment_stmt_select_itemContext extends ParserRuleContext {
        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_COLON() {
            return getToken(HplsqlParser.T_COLON, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Assignment_stmt_select_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment_stmt_select_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssignment_stmt_select_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssignment_stmt_select_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitAssignment_stmt_select_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Assignment_stmt_select_itemContext assignment_stmt_select_item()
            throws RecognitionException {
        Assignment_stmt_select_itemContext _localctx =
                new Assignment_stmt_select_itemContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_assignment_stmt_select_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(656);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                    case L_ID:
                        {
                            setState(644);
                            ident();
                        }
                        break;
                    case T_OPEN_P:
                        {
                            {
                                setState(645);
                                match(T_OPEN_P);
                                setState(646);
                                ident();
                                setState(651);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(647);
                                            match(T_COMMA);
                                            setState(648);
                                            ident();
                                        }
                                    }
                                    setState(653);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                                setState(654);
                                match(T_CLOSE_P);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(659);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_COLON) {
                    {
                        setState(658);
                        match(T_COLON);
                    }
                }

                setState(661);
                match(T_EQUAL);
                setState(662);
                match(T_OPEN_P);
                setState(663);
                select_stmt();
                setState(664);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Allocate_cursor_stmtContext extends ParserRuleContext {
        public TerminalNode T_ALLOCATE() {
            return getToken(HplsqlParser.T_ALLOCATE, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CURSOR() {
            return getToken(HplsqlParser.T_CURSOR, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public TerminalNode T_RESULT() {
            return getToken(HplsqlParser.T_RESULT, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public Allocate_cursor_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_allocate_cursor_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAllocate_cursor_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAllocate_cursor_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAllocate_cursor_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Allocate_cursor_stmtContext allocate_cursor_stmt() throws RecognitionException {
        Allocate_cursor_stmtContext _localctx = new Allocate_cursor_stmtContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_allocate_cursor_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(666);
                match(T_ALLOCATE);
                setState(667);
                ident();
                setState(668);
                match(T_CURSOR);
                setState(669);
                match(T_FOR);
                setState(673);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_RESULT:
                        {
                            {
                                setState(670);
                                match(T_RESULT);
                                setState(671);
                                match(T_SET);
                            }
                        }
                        break;
                    case T_PROCEDURE:
                        {
                            setState(672);
                            match(T_PROCEDURE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(675);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Associate_locator_stmtContext extends ParserRuleContext {
        public TerminalNode T_ASSOCIATE() {
            return getToken(HplsqlParser.T_ASSOCIATE, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public TerminalNode T_LOCATOR() {
            return getToken(HplsqlParser.T_LOCATOR, 0);
        }

        public TerminalNode T_LOCATORS() {
            return getToken(HplsqlParser.T_LOCATORS, 0);
        }

        public TerminalNode T_RESULT() {
            return getToken(HplsqlParser.T_RESULT, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Associate_locator_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_associate_locator_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAssociate_locator_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAssociate_locator_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAssociate_locator_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Associate_locator_stmtContext associate_locator_stmt()
            throws RecognitionException {
        Associate_locator_stmtContext _localctx =
                new Associate_locator_stmtContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_associate_locator_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(677);
                match(T_ASSOCIATE);
                setState(680);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_RESULT) {
                    {
                        setState(678);
                        match(T_RESULT);
                        setState(679);
                        match(T_SET);
                    }
                }

                setState(682);
                _la = _input.LA(1);
                if (!(_la == T_LOCATOR || _la == T_LOCATORS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(683);
                match(T_OPEN_P);
                setState(684);
                ident();
                setState(689);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(685);
                            match(T_COMMA);
                            setState(686);
                            ident();
                        }
                    }
                    setState(691);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(692);
                match(T_CLOSE_P);
                setState(693);
                match(T_WITH);
                setState(694);
                match(T_PROCEDURE);
                setState(695);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Begin_transaction_stmtContext extends ParserRuleContext {
        public TerminalNode T_BEGIN() {
            return getToken(HplsqlParser.T_BEGIN, 0);
        }

        public TerminalNode T_TRANSACTION() {
            return getToken(HplsqlParser.T_TRANSACTION, 0);
        }

        public Begin_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_begin_transaction_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBegin_transaction_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBegin_transaction_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBegin_transaction_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Begin_transaction_stmtContext begin_transaction_stmt()
            throws RecognitionException {
        Begin_transaction_stmtContext _localctx =
                new Begin_transaction_stmtContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_begin_transaction_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(697);
                match(T_BEGIN);
                setState(698);
                match(T_TRANSACTION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Break_stmtContext extends ParserRuleContext {
        public TerminalNode T_BREAK() {
            return getToken(HplsqlParser.T_BREAK, 0);
        }

        public Break_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_break_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBreak_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBreak_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBreak_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Break_stmtContext break_stmt() throws RecognitionException {
        Break_stmtContext _localctx = new Break_stmtContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_break_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(700);
                match(T_BREAK);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Call_stmtContext extends ParserRuleContext {
        public TerminalNode T_CALL() {
            return getToken(HplsqlParser.T_CALL, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Expr_func_paramsContext expr_func_params() {
            return getRuleContext(Expr_func_paramsContext.class, 0);
        }

        public Call_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_call_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCall_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitCall_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCall_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Call_stmtContext call_stmt() throws RecognitionException {
        Call_stmtContext _localctx = new Call_stmtContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_call_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(702);
                match(T_CALL);
                setState(703);
                ident();
                setState(710);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 30, _ctx)) {
                    case 1:
                        {
                            setState(704);
                            match(T_OPEN_P);
                            setState(706);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 29, _ctx)) {
                                case 1:
                                    {
                                        setState(705);
                                        expr_func_params();
                                    }
                                    break;
                            }
                            setState(708);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 2:
                        {
                            setState(709);
                            expr_func_params();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_stmtContext extends ParserRuleContext {
        public TerminalNode T_DECLARE() {
            return getToken(HplsqlParser.T_DECLARE, 0);
        }

        public List<Declare_stmt_itemContext> declare_stmt_item() {
            return getRuleContexts(Declare_stmt_itemContext.class);
        }

        public Declare_stmt_itemContext declare_stmt_item(int i) {
            return getRuleContext(Declare_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Declare_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_stmtContext declare_stmt() throws RecognitionException {
        Declare_stmtContext _localctx = new Declare_stmtContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_declare_stmt);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(712);
                match(T_DECLARE);
                setState(713);
                declare_stmt_item();
                setState(718);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 31, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(714);
                                match(T_COMMA);
                                setState(715);
                                declare_stmt_item();
                            }
                        }
                    }
                    setState(720);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 31, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_blockContext extends ParserRuleContext {
        public TerminalNode T_DECLARE() {
            return getToken(HplsqlParser.T_DECLARE, 0);
        }

        public List<Declare_stmt_itemContext> declare_stmt_item() {
            return getRuleContexts(Declare_stmt_itemContext.class);
        }

        public Declare_stmt_itemContext declare_stmt_item(int i) {
            return getRuleContext(Declare_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_SEMICOLON() {
            return getTokens(HplsqlParser.T_SEMICOLON);
        }

        public TerminalNode T_SEMICOLON(int i) {
            return getToken(HplsqlParser.T_SEMICOLON, i);
        }

        public Declare_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_blockContext declare_block() throws RecognitionException {
        Declare_blockContext _localctx = new Declare_blockContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_declare_block);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(721);
                match(T_DECLARE);
                setState(722);
                declare_stmt_item();
                setState(723);
                match(T_SEMICOLON);
                setState(729);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 32, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(724);
                                declare_stmt_item();
                                setState(725);
                                match(T_SEMICOLON);
                            }
                        }
                    }
                    setState(731);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 32, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_block_inplaceContext extends ParserRuleContext {
        public List<Declare_stmt_itemContext> declare_stmt_item() {
            return getRuleContexts(Declare_stmt_itemContext.class);
        }

        public Declare_stmt_itemContext declare_stmt_item(int i) {
            return getRuleContext(Declare_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_SEMICOLON() {
            return getTokens(HplsqlParser.T_SEMICOLON);
        }

        public TerminalNode T_SEMICOLON(int i) {
            return getToken(HplsqlParser.T_SEMICOLON, i);
        }

        public Declare_block_inplaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_block_inplace;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_block_inplace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_block_inplace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_block_inplace(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_block_inplaceContext declare_block_inplace() throws RecognitionException {
        Declare_block_inplaceContext _localctx = new Declare_block_inplaceContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_declare_block_inplace);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(732);
                declare_stmt_item();
                setState(733);
                match(T_SEMICOLON);
                setState(739);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 33, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(734);
                                declare_stmt_item();
                                setState(735);
                                match(T_SEMICOLON);
                            }
                        }
                    }
                    setState(741);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 33, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_stmt_itemContext extends ParserRuleContext {
        public Declare_cursor_itemContext declare_cursor_item() {
            return getRuleContext(Declare_cursor_itemContext.class, 0);
        }

        public Declare_condition_itemContext declare_condition_item() {
            return getRuleContext(Declare_condition_itemContext.class, 0);
        }

        public Declare_handler_itemContext declare_handler_item() {
            return getRuleContext(Declare_handler_itemContext.class, 0);
        }

        public Declare_var_itemContext declare_var_item() {
            return getRuleContext(Declare_var_itemContext.class, 0);
        }

        public Declare_temporary_table_itemContext declare_temporary_table_item() {
            return getRuleContext(Declare_temporary_table_itemContext.class, 0);
        }

        public Declare_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_stmt_itemContext declare_stmt_item() throws RecognitionException {
        Declare_stmt_itemContext _localctx = new Declare_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_declare_stmt_item);
        try {
            setState(747);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 34, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(742);
                        declare_cursor_item();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(743);
                        declare_condition_item();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(744);
                        declare_handler_item();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(745);
                        declare_var_item();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(746);
                        declare_temporary_table_item();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_var_itemContext extends ParserRuleContext {
        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public DtypeContext dtype() {
            return getRuleContext(DtypeContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Dtype_lenContext dtype_len() {
            return getRuleContext(Dtype_lenContext.class, 0);
        }

        public List<Dtype_attrContext> dtype_attr() {
            return getRuleContexts(Dtype_attrContext.class);
        }

        public Dtype_attrContext dtype_attr(int i) {
            return getRuleContext(Dtype_attrContext.class, i);
        }

        public Dtype_defaultContext dtype_default() {
            return getRuleContext(Dtype_defaultContext.class, 0);
        }

        public TerminalNode T_CONSTANT() {
            return getToken(HplsqlParser.T_CONSTANT, 0);
        }

        public Declare_var_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_var_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_var_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_var_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_var_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_var_itemContext declare_var_item() throws RecognitionException {
        Declare_var_itemContext _localctx = new Declare_var_itemContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_declare_var_item);
        int _la;
        try {
            int _alt;
            setState(784);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 42, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(749);
                        ident();
                        setState(754);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(750);
                                    match(T_COMMA);
                                    setState(751);
                                    ident();
                                }
                            }
                            setState(756);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(758);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 36, _ctx)) {
                            case 1:
                                {
                                    setState(757);
                                    match(T_AS);
                                }
                                break;
                        }
                        setState(760);
                        dtype();
                        setState(762);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 37, _ctx)) {
                            case 1:
                                {
                                    setState(761);
                                    dtype_len();
                                }
                                break;
                        }
                        setState(767);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 38, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(764);
                                        dtype_attr();
                                    }
                                }
                            }
                            setState(769);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 38, _ctx);
                        }
                        setState(771);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 39, _ctx)) {
                            case 1:
                                {
                                    setState(770);
                                    dtype_default();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(773);
                        ident();
                        setState(774);
                        match(T_CONSTANT);
                        setState(776);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 40, _ctx)) {
                            case 1:
                                {
                                    setState(775);
                                    match(T_AS);
                                }
                                break;
                        }
                        setState(778);
                        dtype();
                        setState(780);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_OPEN_P) {
                            {
                                setState(779);
                                dtype_len();
                            }
                        }

                        setState(782);
                        dtype_default();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_condition_itemContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_CONDITION() {
            return getToken(HplsqlParser.T_CONDITION, 0);
        }

        public Declare_condition_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_condition_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_condition_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_condition_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_condition_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_condition_itemContext declare_condition_item()
            throws RecognitionException {
        Declare_condition_itemContext _localctx =
                new Declare_condition_itemContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_declare_condition_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(786);
                ident();
                setState(787);
                match(T_CONDITION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_cursor_itemContext extends ParserRuleContext {
        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode T_CURSOR() {
            return getToken(HplsqlParser.T_CURSOR, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Cursor_with_returnContext cursor_with_return() {
            return getRuleContext(Cursor_with_returnContext.class, 0);
        }

        public Cursor_without_returnContext cursor_without_return() {
            return getRuleContext(Cursor_without_returnContext.class, 0);
        }

        public Declare_cursor_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_cursor_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_cursor_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_cursor_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_cursor_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_cursor_itemContext declare_cursor_item() throws RecognitionException {
        Declare_cursor_itemContext _localctx = new Declare_cursor_itemContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_declare_cursor_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(794);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 43, _ctx)) {
                    case 1:
                        {
                            setState(789);
                            match(T_CURSOR);
                            setState(790);
                            ident();
                        }
                        break;
                    case 2:
                        {
                            setState(791);
                            ident();
                            setState(792);
                            match(T_CURSOR);
                        }
                        break;
                }
                setState(798);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_WITH:
                        {
                            setState(796);
                            cursor_with_return();
                        }
                        break;
                    case T_WITHOUT:
                        {
                            setState(797);
                            cursor_without_return();
                        }
                        break;
                    case T_AS:
                    case T_FOR:
                    case T_IS:
                        break;
                    default:
                        break;
                }
                setState(800);
                _la = _input.LA(1);
                if (!(_la == T_AS || _la == T_FOR || _la == T_IS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(803);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 45, _ctx)) {
                    case 1:
                        {
                            setState(801);
                            select_stmt();
                        }
                        break;
                    case 2:
                        {
                            setState(802);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cursor_with_returnContext extends ParserRuleContext {
        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_RETURN() {
            return getToken(HplsqlParser.T_RETURN, 0);
        }

        public TerminalNode T_ONLY() {
            return getToken(HplsqlParser.T_ONLY, 0);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public TerminalNode T_CALLER() {
            return getToken(HplsqlParser.T_CALLER, 0);
        }

        public TerminalNode T_CLIENT() {
            return getToken(HplsqlParser.T_CLIENT, 0);
        }

        public Cursor_with_returnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cursor_with_return;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCursor_with_return(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCursor_with_return(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCursor_with_return(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_with_returnContext cursor_with_return() throws RecognitionException {
        Cursor_with_returnContext _localctx = new Cursor_with_returnContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_cursor_with_return);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(805);
                match(T_WITH);
                setState(806);
                match(T_RETURN);
                setState(808);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ONLY) {
                    {
                        setState(807);
                        match(T_ONLY);
                    }
                }

                setState(812);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_TO) {
                    {
                        setState(810);
                        match(T_TO);
                        setState(811);
                        _la = _input.LA(1);
                        if (!(_la == T_CALLER || _la == T_CLIENT)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cursor_without_returnContext extends ParserRuleContext {
        public TerminalNode T_WITHOUT() {
            return getToken(HplsqlParser.T_WITHOUT, 0);
        }

        public TerminalNode T_RETURN() {
            return getToken(HplsqlParser.T_RETURN, 0);
        }

        public Cursor_without_returnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cursor_without_return;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCursor_without_return(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCursor_without_return(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCursor_without_return(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cursor_without_returnContext cursor_without_return() throws RecognitionException {
        Cursor_without_returnContext _localctx = new Cursor_without_returnContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_cursor_without_return);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(814);
                match(T_WITHOUT);
                setState(815);
                match(T_RETURN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_handler_itemContext extends ParserRuleContext {
        public TerminalNode T_HANDLER() {
            return getToken(HplsqlParser.T_HANDLER, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public Single_block_stmtContext single_block_stmt() {
            return getRuleContext(Single_block_stmtContext.class, 0);
        }

        public TerminalNode T_CONTINUE() {
            return getToken(HplsqlParser.T_CONTINUE, 0);
        }

        public TerminalNode T_EXIT() {
            return getToken(HplsqlParser.T_EXIT, 0);
        }

        public TerminalNode T_SQLEXCEPTION() {
            return getToken(HplsqlParser.T_SQLEXCEPTION, 0);
        }

        public TerminalNode T_SQLWARNING() {
            return getToken(HplsqlParser.T_SQLWARNING, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_FOUND() {
            return getToken(HplsqlParser.T_FOUND, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Declare_handler_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_handler_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_handler_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_handler_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDeclare_handler_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_handler_itemContext declare_handler_item() throws RecognitionException {
        Declare_handler_itemContext _localctx = new Declare_handler_itemContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_declare_handler_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(817);
                _la = _input.LA(1);
                if (!(_la == T_CONTINUE || _la == T_EXIT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(818);
                match(T_HANDLER);
                setState(819);
                match(T_FOR);
                setState(825);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 48, _ctx)) {
                    case 1:
                        {
                            setState(820);
                            match(T_SQLEXCEPTION);
                        }
                        break;
                    case 2:
                        {
                            setState(821);
                            match(T_SQLWARNING);
                        }
                        break;
                    case 3:
                        {
                            setState(822);
                            match(T_NOT);
                            setState(823);
                            match(T_FOUND);
                        }
                        break;
                    case 4:
                        {
                            setState(824);
                            ident();
                        }
                        break;
                }
                setState(827);
                single_block_stmt();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Declare_temporary_table_itemContext extends ParserRuleContext {
        public TerminalNode T_TEMPORARY() {
            return getToken(HplsqlParser.T_TEMPORARY, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_table_definitionContext create_table_definition() {
            return getRuleContext(Create_table_definitionContext.class, 0);
        }

        public TerminalNode T_GLOBAL() {
            return getToken(HplsqlParser.T_GLOBAL, 0);
        }

        public Create_table_preoptionsContext create_table_preoptions() {
            return getRuleContext(Create_table_preoptionsContext.class, 0);
        }

        public Declare_temporary_table_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declare_temporary_table_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDeclare_temporary_table_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDeclare_temporary_table_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitDeclare_temporary_table_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Declare_temporary_table_itemContext declare_temporary_table_item()
            throws RecognitionException {
        Declare_temporary_table_itemContext _localctx =
                new Declare_temporary_table_itemContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_declare_temporary_table_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(830);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_GLOBAL) {
                    {
                        setState(829);
                        match(T_GLOBAL);
                    }
                }

                setState(832);
                match(T_TEMPORARY);
                setState(833);
                match(T_TABLE);
                setState(834);
                ident();
                setState(836);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ROW || _la == T_STORED || _la == T_COMMA) {
                    {
                        setState(835);
                        create_table_preoptions();
                    }
                }

                setState(838);
                create_table_definition();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_stmtContext extends ParserRuleContext {
        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public Create_table_definitionContext create_table_definition() {
            return getRuleContext(Create_table_definitionContext.class, 0);
        }

        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_EXISTS() {
            return getToken(HplsqlParser.T_EXISTS, 0);
        }

        public Create_table_preoptionsContext create_table_preoptions() {
            return getRuleContext(Create_table_preoptionsContext.class, 0);
        }

        public Create_table_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_stmtContext create_table_stmt() throws RecognitionException {
        Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_create_table_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(840);
                match(T_CREATE);
                setState(841);
                match(T_TABLE);
                setState(845);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 51, _ctx)) {
                    case 1:
                        {
                            setState(842);
                            match(T_IF);
                            setState(843);
                            match(T_NOT);
                            setState(844);
                            match(T_EXISTS);
                        }
                        break;
                }
                setState(847);
                table_name();
                setState(849);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ROW || _la == T_STORED || _la == T_COMMA) {
                    {
                        setState(848);
                        create_table_preoptions();
                    }
                }

                setState(851);
                create_table_definition();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_local_temp_table_stmtContext extends ParserRuleContext {
        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_table_definitionContext create_table_definition() {
            return getRuleContext(Create_table_definitionContext.class, 0);
        }

        public TerminalNode T_LOCAL() {
            return getToken(HplsqlParser.T_LOCAL, 0);
        }

        public TerminalNode T_TEMPORARY() {
            return getToken(HplsqlParser.T_TEMPORARY, 0);
        }

        public TerminalNode T_VOLATILE() {
            return getToken(HplsqlParser.T_VOLATILE, 0);
        }

        public Create_table_preoptionsContext create_table_preoptions() {
            return getRuleContext(Create_table_preoptionsContext.class, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public TerminalNode T_MULTISET() {
            return getToken(HplsqlParser.T_MULTISET, 0);
        }

        public Create_local_temp_table_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_local_temp_table_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_local_temp_table_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_local_temp_table_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_local_temp_table_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_local_temp_table_stmtContext create_local_temp_table_stmt()
            throws RecognitionException {
        Create_local_temp_table_stmtContext _localctx =
                new Create_local_temp_table_stmtContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_create_local_temp_table_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(853);
                match(T_CREATE);
                setState(860);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_LOCAL:
                        {
                            setState(854);
                            match(T_LOCAL);
                            setState(855);
                            match(T_TEMPORARY);
                        }
                        break;
                    case T_MULTISET:
                    case T_SET:
                    case T_VOLATILE:
                        {
                            setState(857);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_MULTISET || _la == T_SET) {
                                {
                                    setState(856);
                                    _la = _input.LA(1);
                                    if (!(_la == T_MULTISET || _la == T_SET)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                }
                            }

                            setState(859);
                            match(T_VOLATILE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(862);
                match(T_TABLE);
                setState(863);
                ident();
                setState(865);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ROW || _la == T_STORED || _la == T_COMMA) {
                    {
                        setState(864);
                        create_table_preoptions();
                    }
                }

                setState(867);
                create_table_definition();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_definitionContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Create_table_columnsContext create_table_columns() {
            return getRuleContext(Create_table_columnsContext.class, 0);
        }

        public Create_table_optionsContext create_table_options() {
            return getRuleContext(Create_table_optionsContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Create_table_definitionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_definition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_definition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_definition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_definition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_definitionContext create_table_definition()
            throws RecognitionException {
        Create_table_definitionContext _localctx =
                new Create_table_definitionContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_create_table_definition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(884);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 58, _ctx)) {
                    case 1:
                        {
                            setState(870);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_AS) {
                                {
                                    setState(869);
                                    match(T_AS);
                                }
                            }

                            setState(872);
                            match(T_OPEN_P);
                            setState(873);
                            select_stmt();
                            setState(874);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 2:
                        {
                            setState(877);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_AS) {
                                {
                                    setState(876);
                                    match(T_AS);
                                }
                            }

                            setState(879);
                            select_stmt();
                        }
                        break;
                    case 3:
                        {
                            setState(880);
                            match(T_OPEN_P);
                            setState(881);
                            create_table_columns();
                            setState(882);
                            match(T_CLOSE_P);
                        }
                        break;
                }
                setState(887);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 59, _ctx)) {
                    case 1:
                        {
                            setState(886);
                            create_table_options();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_columnsContext extends ParserRuleContext {
        public List<Create_table_columns_itemContext> create_table_columns_item() {
            return getRuleContexts(Create_table_columns_itemContext.class);
        }

        public Create_table_columns_itemContext create_table_columns_item(int i) {
            return getRuleContext(Create_table_columns_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Create_table_columnsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_columns;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_columns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_columns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_columns(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_columnsContext create_table_columns() throws RecognitionException {
        Create_table_columnsContext _localctx = new Create_table_columnsContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_create_table_columns);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(889);
                create_table_columns_item();
                setState(894);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(890);
                            match(T_COMMA);
                            setState(891);
                            create_table_columns_item();
                        }
                    }
                    setState(896);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_columns_itemContext extends ParserRuleContext {
        public Column_nameContext column_name() {
            return getRuleContext(Column_nameContext.class, 0);
        }

        public DtypeContext dtype() {
            return getRuleContext(DtypeContext.class, 0);
        }

        public Dtype_lenContext dtype_len() {
            return getRuleContext(Dtype_lenContext.class, 0);
        }

        public List<Dtype_attrContext> dtype_attr() {
            return getRuleContexts(Dtype_attrContext.class);
        }

        public Dtype_attrContext dtype_attr(int i) {
            return getRuleContext(Dtype_attrContext.class, i);
        }

        public List<Create_table_column_inline_consContext> create_table_column_inline_cons() {
            return getRuleContexts(Create_table_column_inline_consContext.class);
        }

        public Create_table_column_inline_consContext create_table_column_inline_cons(int i) {
            return getRuleContext(Create_table_column_inline_consContext.class, i);
        }

        public Create_table_column_consContext create_table_column_cons() {
            return getRuleContext(Create_table_column_consContext.class, 0);
        }

        public TerminalNode T_CONSTRAINT() {
            return getToken(HplsqlParser.T_CONSTRAINT, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_table_columns_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_columns_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_columns_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_columns_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_columns_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_columns_itemContext create_table_columns_item()
            throws RecognitionException {
        Create_table_columns_itemContext _localctx =
                new Create_table_columns_itemContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_create_table_columns_item);
        int _la;
        try {
            int _alt;
            setState(919);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 65, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(897);
                        column_name();
                        setState(898);
                        dtype();
                        setState(900);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_OPEN_P) {
                            {
                                setState(899);
                                dtype_len();
                            }
                        }

                        setState(905);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 62, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(902);
                                        dtype_attr();
                                    }
                                }
                            }
                            setState(907);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 62, _ctx);
                        }
                        setState(911);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_AUTO_INCREMENT
                                || ((((_la - 75)) & ~0x3f) == 0
                                        && ((1L << (_la - 75)) & 288230376155906049L) != 0)
                                || ((((_la - 193)) & ~0x3f) == 0
                                        && ((1L << (_la - 193)) & 17196646405L) != 0)
                                || ((((_la - 298)) & ~0x3f) == 0
                                        && ((1L << (_la - 298)) & 2322168557895681L) != 0)) {
                            {
                                {
                                    setState(908);
                                    create_table_column_inline_cons();
                                }
                            }
                            setState(913);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(916);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_CONSTRAINT) {
                            {
                                setState(914);
                                match(T_CONSTRAINT);
                                setState(915);
                                ident();
                            }
                        }

                        setState(918);
                        create_table_column_cons();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Column_nameContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Column_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_column_name;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterColumn_name(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitColumn_name(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitColumn_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Column_nameContext column_name() throws RecognitionException {
        Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_column_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(921);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_column_inline_consContext extends ParserRuleContext {
        public Dtype_defaultContext dtype_default() {
            return getRuleContext(Dtype_defaultContext.class, 0);
        }

        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_PRIMARY() {
            return getToken(HplsqlParser.T_PRIMARY, 0);
        }

        public TerminalNode T_KEY() {
            return getToken(HplsqlParser.T_KEY, 0);
        }

        public TerminalNode T_UNIQUE() {
            return getToken(HplsqlParser.T_UNIQUE, 0);
        }

        public TerminalNode T_REFERENCES() {
            return getToken(HplsqlParser.T_REFERENCES, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<Create_table_fk_actionContext> create_table_fk_action() {
            return getRuleContexts(Create_table_fk_actionContext.class);
        }

        public Create_table_fk_actionContext create_table_fk_action(int i) {
            return getRuleContext(Create_table_fk_actionContext.class, i);
        }

        public TerminalNode T_IDENTITY() {
            return getToken(HplsqlParser.T_IDENTITY, 0);
        }

        public List<TerminalNode> L_INT() {
            return getTokens(HplsqlParser.L_INT);
        }

        public TerminalNode L_INT(int i) {
            return getToken(HplsqlParser.L_INT, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_AUTO_INCREMENT() {
            return getToken(HplsqlParser.T_AUTO_INCREMENT, 0);
        }

        public TerminalNode T_ENABLE() {
            return getToken(HplsqlParser.T_ENABLE, 0);
        }

        public Create_table_column_inline_consContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_column_inline_cons;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_column_inline_cons(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_column_inline_cons(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_column_inline_cons(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_column_inline_consContext create_table_column_inline_cons()
            throws RecognitionException {
        Create_table_column_inline_consContext _localctx =
                new Create_table_column_inline_consContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_create_table_column_inline_cons);
        int _la;
        try {
            setState(955);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_DEFAULT:
                case T_WITH:
                case T_COLON:
                case T_EQUAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(923);
                        dtype_default();
                    }
                    break;
                case T_NOT:
                case T_NULL:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(925);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(924);
                                match(T_NOT);
                            }
                        }

                        setState(927);
                        match(T_NULL);
                    }
                    break;
                case T_PRIMARY:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(928);
                        match(T_PRIMARY);
                        setState(929);
                        match(T_KEY);
                    }
                    break;
                case T_UNIQUE:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(930);
                        match(T_UNIQUE);
                    }
                    break;
                case T_REFERENCES:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(931);
                        match(T_REFERENCES);
                        setState(932);
                        table_name();
                        setState(933);
                        match(T_OPEN_P);
                        setState(934);
                        ident();
                        setState(935);
                        match(T_CLOSE_P);
                        setState(939);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_ON) {
                            {
                                {
                                    setState(936);
                                    create_table_fk_action();
                                }
                            }
                            setState(941);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                case T_IDENTITY:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(942);
                        match(T_IDENTITY);
                        setState(943);
                        match(T_OPEN_P);
                        setState(944);
                        match(L_INT);
                        setState(949);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(945);
                                    match(T_COMMA);
                                    setState(946);
                                    match(L_INT);
                                }
                            }
                            setState(951);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(952);
                        match(T_CLOSE_P);
                    }
                    break;
                case T_AUTO_INCREMENT:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(953);
                        match(T_AUTO_INCREMENT);
                    }
                    break;
                case T_ENABLE:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(954);
                        match(T_ENABLE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_column_consContext extends ParserRuleContext {
        public TerminalNode T_PRIMARY() {
            return getToken(HplsqlParser.T_PRIMARY, 0);
        }

        public TerminalNode T_KEY() {
            return getToken(HplsqlParser.T_KEY, 0);
        }

        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public TerminalNode T_CLUSTERED() {
            return getToken(HplsqlParser.T_CLUSTERED, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_ENABLE() {
            return getToken(HplsqlParser.T_ENABLE, 0);
        }

        public Index_storage_clauseContext index_storage_clause() {
            return getRuleContext(Index_storage_clauseContext.class, 0);
        }

        public List<TerminalNode> T_ASC() {
            return getTokens(HplsqlParser.T_ASC);
        }

        public TerminalNode T_ASC(int i) {
            return getToken(HplsqlParser.T_ASC, i);
        }

        public List<TerminalNode> T_DESC() {
            return getTokens(HplsqlParser.T_DESC);
        }

        public TerminalNode T_DESC(int i) {
            return getToken(HplsqlParser.T_DESC, i);
        }

        public TerminalNode T_FOREIGN() {
            return getToken(HplsqlParser.T_FOREIGN, 0);
        }

        public TerminalNode T_REFERENCES() {
            return getToken(HplsqlParser.T_REFERENCES, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public List<Create_table_fk_actionContext> create_table_fk_action() {
            return getRuleContexts(Create_table_fk_actionContext.class);
        }

        public Create_table_fk_actionContext create_table_fk_action(int i) {
            return getRuleContext(Create_table_fk_actionContext.class, i);
        }

        public Create_table_column_consContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_column_cons;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_column_cons(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_column_cons(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_column_cons(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_column_consContext create_table_column_cons()
            throws RecognitionException {
        Create_table_column_consContext _localctx =
                new Create_table_column_consContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_create_table_column_cons);
        int _la;
        try {
            setState(1014);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_PRIMARY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(957);
                        match(T_PRIMARY);
                        setState(958);
                        match(T_KEY);
                        setState(960);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_CLUSTERED) {
                            {
                                setState(959);
                                match(T_CLUSTERED);
                            }
                        }

                        setState(962);
                        match(T_OPEN_P);
                        setState(963);
                        ident();
                        setState(965);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ASC || _la == T_DESC) {
                            {
                                setState(964);
                                _la = _input.LA(1);
                                if (!(_la == T_ASC || _la == T_DESC)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                            }
                        }

                        setState(974);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(967);
                                    match(T_COMMA);
                                    setState(968);
                                    ident();
                                    setState(970);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == T_ASC || _la == T_DESC) {
                                        {
                                            setState(969);
                                            _la = _input.LA(1);
                                            if (!(_la == T_ASC || _la == T_DESC)) {
                                                _errHandler.recoverInline(this);
                                            } else {
                                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                                _errHandler.reportMatch(this);
                                                consume();
                                            }
                                        }
                                    }
                                }
                            }
                            setState(976);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(977);
                        match(T_CLOSE_P);
                        setState(979);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ENABLE) {
                            {
                                setState(978);
                                match(T_ENABLE);
                            }
                        }

                        setState(982);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_WITH) {
                            {
                                setState(981);
                                index_storage_clause();
                            }
                        }
                    }
                    break;
                case T_FOREIGN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(984);
                        match(T_FOREIGN);
                        setState(985);
                        match(T_KEY);
                        setState(986);
                        match(T_OPEN_P);
                        setState(987);
                        ident();
                        setState(992);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(988);
                                    match(T_COMMA);
                                    setState(989);
                                    ident();
                                }
                            }
                            setState(994);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(995);
                        match(T_CLOSE_P);
                        setState(996);
                        match(T_REFERENCES);
                        setState(997);
                        table_name();
                        setState(998);
                        match(T_OPEN_P);
                        setState(999);
                        ident();
                        setState(1004);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1000);
                                    match(T_COMMA);
                                    setState(1001);
                                    ident();
                                }
                            }
                            setState(1006);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1007);
                        match(T_CLOSE_P);
                        setState(1011);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_ON) {
                            {
                                {
                                    setState(1008);
                                    create_table_fk_action();
                                }
                            }
                            setState(1013);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_fk_actionContext extends ParserRuleContext {
        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public TerminalNode T_NO() {
            return getToken(HplsqlParser.T_NO, 0);
        }

        public TerminalNode T_ACTION() {
            return getToken(HplsqlParser.T_ACTION, 0);
        }

        public TerminalNode T_RESTRICT() {
            return getToken(HplsqlParser.T_RESTRICT, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public TerminalNode T_DEFAULT() {
            return getToken(HplsqlParser.T_DEFAULT, 0);
        }

        public TerminalNode T_CASCADE() {
            return getToken(HplsqlParser.T_CASCADE, 0);
        }

        public Create_table_fk_actionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_fk_action;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_fk_action(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_fk_action(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_fk_action(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_fk_actionContext create_table_fk_action()
            throws RecognitionException {
        Create_table_fk_actionContext _localctx =
                new Create_table_fk_actionContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_create_table_fk_action);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1016);
                match(T_ON);
                setState(1017);
                _la = _input.LA(1);
                if (!(_la == T_DELETE || _la == T_UPDATE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1026);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 80, _ctx)) {
                    case 1:
                        {
                            setState(1018);
                            match(T_NO);
                            setState(1019);
                            match(T_ACTION);
                        }
                        break;
                    case 2:
                        {
                            setState(1020);
                            match(T_RESTRICT);
                        }
                        break;
                    case 3:
                        {
                            setState(1021);
                            match(T_SET);
                            setState(1022);
                            match(T_NULL);
                        }
                        break;
                    case 4:
                        {
                            setState(1023);
                            match(T_SET);
                            setState(1024);
                            match(T_DEFAULT);
                        }
                        break;
                    case 5:
                        {
                            setState(1025);
                            match(T_CASCADE);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_preoptionsContext extends ParserRuleContext {
        public List<Create_table_preoptions_itemContext> create_table_preoptions_item() {
            return getRuleContexts(Create_table_preoptions_itemContext.class);
        }

        public Create_table_preoptions_itemContext create_table_preoptions_item(int i) {
            return getRuleContext(Create_table_preoptions_itemContext.class, i);
        }

        public Create_table_preoptionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_preoptions;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_preoptions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_preoptions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_preoptions(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_preoptionsContext create_table_preoptions()
            throws RecognitionException {
        Create_table_preoptionsContext _localctx =
                new Create_table_preoptionsContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_create_table_preoptions);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1029);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(1028);
                            create_table_preoptions_item();
                        }
                    }
                    setState(1031);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == T_ROW || _la == T_STORED || _la == T_COMMA);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_preoptions_itemContext extends ParserRuleContext {
        public TerminalNode T_COMMA() {
            return getToken(HplsqlParser.T_COMMA, 0);
        }

        public Create_table_preoptions_td_itemContext create_table_preoptions_td_item() {
            return getRuleContext(Create_table_preoptions_td_itemContext.class, 0);
        }

        public Create_table_options_hive_itemContext create_table_options_hive_item() {
            return getRuleContext(Create_table_options_hive_itemContext.class, 0);
        }

        public Create_table_preoptions_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_preoptions_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_preoptions_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_preoptions_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_preoptions_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_preoptions_itemContext create_table_preoptions_item()
            throws RecognitionException {
        Create_table_preoptions_itemContext _localctx =
                new Create_table_preoptions_itemContext(_ctx, getState());
        enterRule(_localctx, 86, RULE_create_table_preoptions_item);
        try {
            setState(1036);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_COMMA:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1033);
                        match(T_COMMA);
                        setState(1034);
                        create_table_preoptions_td_item();
                    }
                    break;
                case T_ROW:
                case T_STORED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1035);
                        create_table_options_hive_item();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_preoptions_td_itemContext extends ParserRuleContext {
        public TerminalNode T_LOG() {
            return getToken(HplsqlParser.T_LOG, 0);
        }

        public TerminalNode T_FALLBACK() {
            return getToken(HplsqlParser.T_FALLBACK, 0);
        }

        public TerminalNode T_NO() {
            return getToken(HplsqlParser.T_NO, 0);
        }

        public Create_table_preoptions_td_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_preoptions_td_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_preoptions_td_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_preoptions_td_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_preoptions_td_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_preoptions_td_itemContext create_table_preoptions_td_item()
            throws RecognitionException {
        Create_table_preoptions_td_itemContext _localctx =
                new Create_table_preoptions_td_itemContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_create_table_preoptions_td_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1039);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_NO) {
                    {
                        setState(1038);
                        match(T_NO);
                    }
                }

                setState(1041);
                _la = _input.LA(1);
                if (!(_la == T_FALLBACK || _la == T_LOG)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_optionsContext extends ParserRuleContext {
        public List<Create_table_options_itemContext> create_table_options_item() {
            return getRuleContexts(Create_table_options_itemContext.class);
        }

        public Create_table_options_itemContext create_table_options_item(int i) {
            return getRuleContext(Create_table_options_itemContext.class, i);
        }

        public Create_table_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_optionsContext create_table_options() throws RecognitionException {
        Create_table_optionsContext _localctx = new Create_table_optionsContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_create_table_options);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1044);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(1043);
                                    create_table_options_item();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1046);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 84, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_itemContext extends ParserRuleContext {
        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_COMMIT() {
            return getToken(HplsqlParser.T_COMMIT, 0);
        }

        public TerminalNode T_ROWS() {
            return getToken(HplsqlParser.T_ROWS, 0);
        }

        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public TerminalNode T_PRESERVE() {
            return getToken(HplsqlParser.T_PRESERVE, 0);
        }

        public Create_table_options_ora_itemContext create_table_options_ora_item() {
            return getRuleContext(Create_table_options_ora_itemContext.class, 0);
        }

        public Create_table_options_db2_itemContext create_table_options_db2_item() {
            return getRuleContext(Create_table_options_db2_itemContext.class, 0);
        }

        public Create_table_options_td_itemContext create_table_options_td_item() {
            return getRuleContext(Create_table_options_td_itemContext.class, 0);
        }

        public Create_table_options_hive_itemContext create_table_options_hive_item() {
            return getRuleContext(Create_table_options_hive_itemContext.class, 0);
        }

        public Create_table_options_mssql_itemContext create_table_options_mssql_item() {
            return getRuleContext(Create_table_options_mssql_itemContext.class, 0);
        }

        public Create_table_options_mysql_itemContext create_table_options_mysql_item() {
            return getRuleContext(Create_table_options_mysql_itemContext.class, 0);
        }

        public Create_table_options_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_table_options_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_itemContext create_table_options_item()
            throws RecognitionException {
        Create_table_options_itemContext _localctx =
                new Create_table_options_itemContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_create_table_options_item);
        int _la;
        try {
            setState(1058);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 85, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1048);
                        match(T_ON);
                        setState(1049);
                        match(T_COMMIT);
                        setState(1050);
                        _la = _input.LA(1);
                        if (!(_la == T_DELETE || _la == T_PRESERVE)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1051);
                        match(T_ROWS);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1052);
                        create_table_options_ora_item();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1053);
                        create_table_options_db2_item();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1054);
                        create_table_options_td_item();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1055);
                        create_table_options_hive_item();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1056);
                        create_table_options_mssql_item();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1057);
                        create_table_options_mysql_item();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_ora_itemContext extends ParserRuleContext {
        public TerminalNode T_SEGMENT() {
            return getToken(HplsqlParser.T_SEGMENT, 0);
        }

        public TerminalNode T_CREATION() {
            return getToken(HplsqlParser.T_CREATION, 0);
        }

        public TerminalNode T_IMMEDIATE() {
            return getToken(HplsqlParser.T_IMMEDIATE, 0);
        }

        public TerminalNode T_DEFERRED() {
            return getToken(HplsqlParser.T_DEFERRED, 0);
        }

        public List<TerminalNode> L_INT() {
            return getTokens(HplsqlParser.L_INT);
        }

        public TerminalNode L_INT(int i) {
            return getToken(HplsqlParser.L_INT, i);
        }

        public TerminalNode T_PCTFREE() {
            return getToken(HplsqlParser.T_PCTFREE, 0);
        }

        public TerminalNode T_PCTUSED() {
            return getToken(HplsqlParser.T_PCTUSED, 0);
        }

        public TerminalNode T_INITRANS() {
            return getToken(HplsqlParser.T_INITRANS, 0);
        }

        public TerminalNode T_MAXTRANS() {
            return getToken(HplsqlParser.T_MAXTRANS, 0);
        }

        public TerminalNode T_NOCOMPRESS() {
            return getToken(HplsqlParser.T_NOCOMPRESS, 0);
        }

        public TerminalNode T_LOGGING() {
            return getToken(HplsqlParser.T_LOGGING, 0);
        }

        public TerminalNode T_NOLOGGING() {
            return getToken(HplsqlParser.T_NOLOGGING, 0);
        }

        public TerminalNode T_STORAGE() {
            return getToken(HplsqlParser.T_STORAGE, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_TABLESPACE() {
            return getToken(HplsqlParser.T_TABLESPACE, 0);
        }

        public Create_table_options_ora_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_ora_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_ora_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_ora_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_ora_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_ora_itemContext create_table_options_ora_item()
            throws RecognitionException {
        Create_table_options_ora_itemContext _localctx =
                new Create_table_options_ora_itemContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_create_table_options_ora_item);
        int _la;
        try {
            setState(1078);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_SEGMENT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1060);
                        match(T_SEGMENT);
                        setState(1061);
                        match(T_CREATION);
                        setState(1062);
                        _la = _input.LA(1);
                        if (!(_la == T_DEFERRED || _la == T_IMMEDIATE)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                case T_INITRANS:
                case T_MAXTRANS:
                case T_PCTFREE:
                case T_PCTUSED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1063);
                        _la = _input.LA(1);
                        if (!(_la == T_INITRANS
                                || _la == T_MAXTRANS
                                || _la == T_PCTFREE
                                || _la == T_PCTUSED)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1064);
                        match(L_INT);
                    }
                    break;
                case T_NOCOMPRESS:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1065);
                        match(T_NOCOMPRESS);
                    }
                    break;
                case T_LOGGING:
                case T_NOLOGGING:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1066);
                        _la = _input.LA(1);
                        if (!(_la == T_LOGGING || _la == T_NOLOGGING)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                case T_STORAGE:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1067);
                        match(T_STORAGE);
                        setState(1068);
                        match(T_OPEN_P);
                        setState(1071);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                setState(1071);
                                _errHandler.sync(this);
                                switch (_input.LA(1)) {
                                    case T_ACTION:
                                    case T_ADD2:
                                    case T_ALL:
                                    case T_ALLOCATE:
                                    case T_ALTER:
                                    case T_AND:
                                    case T_ANSI_NULLS:
                                    case T_ANSI_PADDING:
                                    case T_AS:
                                    case T_ASC:
                                    case T_ASSOCIATE:
                                    case T_AT:
                                    case T_AUTO_INCREMENT:
                                    case T_AVG:
                                    case T_BATCHSIZE:
                                    case T_BEGIN:
                                    case T_BETWEEN:
                                    case T_BIGINT:
                                    case T_BINARY_DOUBLE:
                                    case T_BINARY_FLOAT:
                                    case T_BIT:
                                    case T_BODY:
                                    case T_BREAK:
                                    case T_BY:
                                    case T_BYTE:
                                    case T_CALL:
                                    case T_CALLER:
                                    case T_CASCADE:
                                    case T_CASE:
                                    case T_CASESPECIFIC:
                                    case T_CAST:
                                    case T_CHAR:
                                    case T_CHARACTER:
                                    case T_CHARSET:
                                    case T_CLIENT:
                                    case T_CLOSE:
                                    case T_CLUSTERED:
                                    case T_CMP:
                                    case T_COLLECT:
                                    case T_COLLECTION:
                                    case T_COLUMN:
                                    case T_COMMENT:
                                    case T_CONSTANT:
                                    case T_COMMIT:
                                    case T_COMPRESS:
                                    case T_CONCAT:
                                    case T_CONDITION:
                                    case T_CONSTRAINT:
                                    case T_CONTINUE:
                                    case T_COPY:
                                    case T_COUNT:
                                    case T_COUNT_BIG:
                                    case T_CREATE:
                                    case T_CREATION:
                                    case T_CREATOR:
                                    case T_CS:
                                    case T_CURRENT:
                                    case T_CURRENT_SCHEMA:
                                    case T_CURSOR:
                                    case T_DATABASE:
                                    case T_DATA:
                                    case T_DATE:
                                    case T_DATETIME:
                                    case T_DAY:
                                    case T_DAYS:
                                    case T_DEC:
                                    case T_DECIMAL:
                                    case T_DECLARE:
                                    case T_DEFAULT:
                                    case T_DEFERRED:
                                    case T_DEFINED:
                                    case T_DEFINER:
                                    case T_DEFINITION:
                                    case T_DELETE:
                                    case T_DELIMITED:
                                    case T_DELIMITER:
                                    case T_DESC:
                                    case T_DESCRIBE:
                                    case T_DIAGNOSTICS:
                                    case T_DIR:
                                    case T_DIRECTORY:
                                    case T_DISTINCT:
                                    case T_DISTRIBUTE:
                                    case T_DO:
                                    case T_DOUBLE:
                                    case T_DROP:
                                    case T_DYNAMIC:
                                    case T_ENABLE:
                                    case T_ENGINE:
                                    case T_ESCAPED:
                                    case T_EXCEPT:
                                    case T_EXEC:
                                    case T_EXECUTE:
                                    case T_EXCEPTION:
                                    case T_EXCLUSIVE:
                                    case T_EXISTS:
                                    case T_EXIT:
                                    case T_FALLBACK:
                                    case T_FALSE:
                                    case T_FETCH:
                                    case T_FIELDS:
                                    case T_FILE:
                                    case T_FILES:
                                    case T_FLOAT:
                                    case T_FOR:
                                    case T_FOREIGN:
                                    case T_FORMAT:
                                    case T_FOUND:
                                    case T_FROM:
                                    case T_FULL:
                                    case T_FUNCTION:
                                    case T_GET:
                                    case T_GLOBAL:
                                    case T_GO:
                                    case T_GRANT:
                                    case T_GROUP:
                                    case T_HANDLER:
                                    case T_HASH:
                                    case T_HAVING:
                                    case T_HDFS:
                                    case T_HIVE:
                                    case T_HOST:
                                    case T_IDENTITY:
                                    case T_IF:
                                    case T_IGNORE:
                                    case T_IMMEDIATE:
                                    case T_IN:
                                    case T_INCLUDE:
                                    case T_INDEX:
                                    case T_INITRANS:
                                    case T_INNER:
                                    case T_INOUT:
                                    case T_INSERT:
                                    case T_INT:
                                    case T_INT2:
                                    case T_INT4:
                                    case T_INT8:
                                    case T_INTEGER:
                                    case T_INTERSECT:
                                    case T_INTERVAL:
                                    case T_INTO:
                                    case T_INVOKER:
                                    case T_IS:
                                    case T_ISOPEN:
                                    case T_ITEMS:
                                    case T_JOIN:
                                    case T_KEEP:
                                    case T_KEY:
                                    case T_KEYS:
                                    case T_LANGUAGE:
                                    case T_LEAVE:
                                    case T_LEFT:
                                    case T_LIKE:
                                    case T_LIMIT:
                                    case T_LINES:
                                    case T_LOCAL:
                                    case T_LOCATION:
                                    case T_LOCATOR:
                                    case T_LOCATORS:
                                    case T_LOCKS:
                                    case T_LOG:
                                    case T_LOGGED:
                                    case T_LOGGING:
                                    case T_LOOP:
                                    case T_MAP:
                                    case T_MATCHED:
                                    case T_MAX:
                                    case T_MAXTRANS:
                                    case T_MERGE:
                                    case T_MESSAGE_TEXT:
                                    case T_MICROSECOND:
                                    case T_MICROSECONDS:
                                    case T_MIN:
                                    case T_MULTISET:
                                    case T_NCHAR:
                                    case T_NEW:
                                    case T_NVARCHAR:
                                    case T_NO:
                                    case T_NOCOUNT:
                                    case T_NOCOMPRESS:
                                    case T_NOLOGGING:
                                    case T_NONE:
                                    case T_NOT:
                                    case T_NOTFOUND:
                                    case T_NUMERIC:
                                    case T_NUMBER:
                                    case T_OBJECT:
                                    case T_OFF:
                                    case T_ON:
                                    case T_ONLY:
                                    case T_OPEN:
                                    case T_OR:
                                    case T_ORDER:
                                    case T_OUT:
                                    case T_OUTER:
                                    case T_OVER:
                                    case T_OVERWRITE:
                                    case T_OWNER:
                                    case T_PACKAGE:
                                    case T_PARTITION:
                                    case T_PCTFREE:
                                    case T_PCTUSED:
                                    case T_PRECISION:
                                    case T_PRESERVE:
                                    case T_PRIMARY:
                                    case T_PRINT:
                                    case T_PROC:
                                    case T_PROCEDURE:
                                    case T_QUALIFY:
                                    case T_QUERY_BAND:
                                    case T_QUIT:
                                    case T_QUOTED_IDENTIFIER:
                                    case T_RAISE:
                                    case T_REAL:
                                    case T_REFERENCES:
                                    case T_REGEXP:
                                    case T_REPLACE:
                                    case T_RESIGNAL:
                                    case T_RESTRICT:
                                    case T_RESULT:
                                    case T_RESULT_SET_LOCATOR:
                                    case T_RETURN:
                                    case T_RETURNS:
                                    case T_REVERSE:
                                    case T_RIGHT:
                                    case T_RLIKE:
                                    case T_ROLE:
                                    case T_ROLLBACK:
                                    case T_ROW:
                                    case T_ROWS:
                                    case T_ROW_COUNT:
                                    case T_RR:
                                    case T_RS:
                                    case T_PWD:
                                    case T_TRIM:
                                    case T_SCHEMA:
                                    case T_SECOND:
                                    case T_SECONDS:
                                    case T_SECURITY:
                                    case T_SEGMENT:
                                    case T_SEL:
                                    case T_SELECT:
                                    case T_SET:
                                    case T_SESSION:
                                    case T_SESSIONS:
                                    case T_SETS:
                                    case T_SHARE:
                                    case T_SIGNAL:
                                    case T_SIMPLE_DOUBLE:
                                    case T_SIMPLE_FLOAT:
                                    case T_SMALLDATETIME:
                                    case T_SMALLINT:
                                    case T_SQL:
                                    case T_SQLEXCEPTION:
                                    case T_SQLINSERT:
                                    case T_SQLSTATE:
                                    case T_SQLWARNING:
                                    case T_STATS:
                                    case T_STATISTICS:
                                    case T_STEP:
                                    case T_STORAGE:
                                    case T_STORED:
                                    case T_STRING:
                                    case T_SUBDIR:
                                    case T_SUBSTRING:
                                    case T_SUM:
                                    case T_SYS_REFCURSOR:
                                    case T_TABLE:
                                    case T_TABLESPACE:
                                    case T_TEMPORARY:
                                    case T_TERMINATED:
                                    case T_TEXTIMAGE_ON:
                                    case T_THEN:
                                    case T_TIMESTAMP:
                                    case T_TITLE:
                                    case T_TO:
                                    case T_TOP:
                                    case T_TRANSACTION:
                                    case T_TRUE:
                                    case T_TRUNCATE:
                                    case T_UNIQUE:
                                    case T_UPDATE:
                                    case T_UR:
                                    case T_USE:
                                    case T_USING:
                                    case T_VALUE:
                                    case T_VALUES:
                                    case T_VAR:
                                    case T_VARCHAR:
                                    case T_VARCHAR2:
                                    case T_VARYING:
                                    case T_VOLATILE:
                                    case T_WHILE:
                                    case T_WITH:
                                    case T_WITHOUT:
                                    case T_WORK:
                                    case T_XACT_ABORT:
                                    case T_XML:
                                    case T_YES:
                                    case T_ACTIVITY_COUNT:
                                    case T_CUME_DIST:
                                    case T_CURRENT_DATE:
                                    case T_CURRENT_TIMESTAMP:
                                    case T_CURRENT_USER:
                                    case T_DENSE_RANK:
                                    case T_FIRST_VALUE:
                                    case T_LAG:
                                    case T_LAST_VALUE:
                                    case T_LEAD:
                                    case T_PART_COUNT:
                                    case T_PART_LOC:
                                    case T_RANK:
                                    case T_ROW_NUMBER:
                                    case T_STDEV:
                                    case T_SYSDATE:
                                    case T_VARIANCE:
                                    case T_USER:
                                    case L_ID:
                                        {
                                            setState(1069);
                                            ident();
                                        }
                                        break;
                                    case L_INT:
                                        {
                                            setState(1070);
                                            match(L_INT);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            setState(1073);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -67108928L) != 0)
                                || ((((_la - 64)) & ~0x3f) == 0
                                        && ((1L << (_la - 64)) & -24696061953L) != 0)
                                || ((((_la - 128)) & ~0x3f) == 0
                                        && ((1L << (_la - 128)) & -1L) != 0)
                                || ((((_la - 192)) & ~0x3f) == 0
                                        && ((1L << (_la - 192)) & -2251799817879561L) != 0)
                                || ((((_la - 256)) & ~0x3f) == 0
                                        && ((1L << (_la - 256)) & -54046502653264129L) != 0)
                                || ((((_la - 320)) & ~0x3f) == 0
                                        && ((1L << (_la - 320)) & 633318705955327L) != 0));
                        setState(1075);
                        match(T_CLOSE_P);
                    }
                    break;
                case T_TABLESPACE:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1076);
                        match(T_TABLESPACE);
                        setState(1077);
                        ident();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_db2_itemContext extends ParserRuleContext {
        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_INDEX() {
            return getToken(HplsqlParser.T_INDEX, 0);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public TerminalNode T_DISTRIBUTE() {
            return getToken(HplsqlParser.T_DISTRIBUTE, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public TerminalNode T_HASH() {
            return getToken(HplsqlParser.T_HASH, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_LOGGED() {
            return getToken(HplsqlParser.T_LOGGED, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_COMPRESS() {
            return getToken(HplsqlParser.T_COMPRESS, 0);
        }

        public TerminalNode T_YES() {
            return getToken(HplsqlParser.T_YES, 0);
        }

        public TerminalNode T_NO() {
            return getToken(HplsqlParser.T_NO, 0);
        }

        public TerminalNode T_DEFINITION() {
            return getToken(HplsqlParser.T_DEFINITION, 0);
        }

        public TerminalNode T_ONLY() {
            return getToken(HplsqlParser.T_ONLY, 0);
        }

        public TerminalNode T_RESTRICT() {
            return getToken(HplsqlParser.T_RESTRICT, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_DROP() {
            return getToken(HplsqlParser.T_DROP, 0);
        }

        public Create_table_options_db2_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_db2_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_db2_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_db2_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_db2_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_db2_itemContext create_table_options_db2_item()
            throws RecognitionException {
        Create_table_options_db2_itemContext _localctx =
                new Create_table_options_db2_itemContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_create_table_options_db2_item);
        int _la;
        try {
            setState(1113);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 92, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1081);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_INDEX) {
                            {
                                setState(1080);
                                match(T_INDEX);
                            }
                        }

                        setState(1083);
                        match(T_IN);
                        setState(1084);
                        ident();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1085);
                        match(T_WITH);
                        setState(1086);
                        match(T_REPLACE);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1087);
                        match(T_DISTRIBUTE);
                        setState(1088);
                        match(T_BY);
                        setState(1089);
                        match(T_HASH);
                        setState(1090);
                        match(T_OPEN_P);
                        setState(1091);
                        ident();
                        setState(1096);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1092);
                                    match(T_COMMA);
                                    setState(1093);
                                    ident();
                                }
                            }
                            setState(1098);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1099);
                        match(T_CLOSE_P);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1102);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(1101);
                                match(T_NOT);
                            }
                        }

                        setState(1104);
                        match(T_LOGGED);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1105);
                        match(T_COMPRESS);
                        setState(1106);
                        _la = _input.LA(1);
                        if (!(_la == T_NO || _la == T_YES)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1107);
                        match(T_DEFINITION);
                        setState(1108);
                        match(T_ONLY);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1109);
                        match(T_WITH);
                        setState(1110);
                        match(T_RESTRICT);
                        setState(1111);
                        match(T_ON);
                        setState(1112);
                        match(T_DROP);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_td_itemContext extends ParserRuleContext {
        public TerminalNode T_PRIMARY() {
            return getToken(HplsqlParser.T_PRIMARY, 0);
        }

        public TerminalNode T_INDEX() {
            return getToken(HplsqlParser.T_INDEX, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_UNIQUE() {
            return getToken(HplsqlParser.T_UNIQUE, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_DATA() {
            return getToken(HplsqlParser.T_DATA, 0);
        }

        public Create_table_options_td_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_td_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_td_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_td_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_td_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_td_itemContext create_table_options_td_item()
            throws RecognitionException {
        Create_table_options_td_itemContext _localctx =
                new Create_table_options_td_itemContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_create_table_options_td_item);
        int _la;
        try {
            setState(1133);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_PRIMARY:
                case T_UNIQUE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1116);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_UNIQUE) {
                            {
                                setState(1115);
                                match(T_UNIQUE);
                            }
                        }

                        setState(1118);
                        match(T_PRIMARY);
                        setState(1119);
                        match(T_INDEX);
                        setState(1120);
                        match(T_OPEN_P);
                        setState(1121);
                        ident();
                        setState(1126);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1122);
                                    match(T_COMMA);
                                    setState(1123);
                                    ident();
                                }
                            }
                            setState(1128);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1129);
                        match(T_CLOSE_P);
                    }
                    break;
                case T_WITH:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1131);
                        match(T_WITH);
                        setState(1132);
                        match(T_DATA);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_hive_itemContext extends ParserRuleContext {
        public Create_table_hive_row_formatContext create_table_hive_row_format() {
            return getRuleContext(Create_table_hive_row_formatContext.class, 0);
        }

        public TerminalNode T_STORED() {
            return getToken(HplsqlParser.T_STORED, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_table_options_hive_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_hive_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_hive_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_hive_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_hive_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_hive_itemContext create_table_options_hive_item()
            throws RecognitionException {
        Create_table_options_hive_itemContext _localctx =
                new Create_table_options_hive_itemContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_create_table_options_hive_item);
        try {
            setState(1139);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_ROW:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1135);
                        create_table_hive_row_format();
                    }
                    break;
                case T_STORED:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1136);
                        match(T_STORED);
                        setState(1137);
                        match(T_AS);
                        setState(1138);
                        ident();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_hive_row_formatContext extends ParserRuleContext {
        public TerminalNode T_ROW() {
            return getToken(HplsqlParser.T_ROW, 0);
        }

        public TerminalNode T_FORMAT() {
            return getToken(HplsqlParser.T_FORMAT, 0);
        }

        public TerminalNode T_DELIMITED() {
            return getToken(HplsqlParser.T_DELIMITED, 0);
        }

        public List<Create_table_hive_row_format_fieldsContext>
                create_table_hive_row_format_fields() {
            return getRuleContexts(Create_table_hive_row_format_fieldsContext.class);
        }

        public Create_table_hive_row_format_fieldsContext create_table_hive_row_format_fields(
                int i) {
            return getRuleContext(Create_table_hive_row_format_fieldsContext.class, i);
        }

        public Create_table_hive_row_formatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_hive_row_format;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_hive_row_format(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_hive_row_format(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_hive_row_format(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_hive_row_formatContext create_table_hive_row_format()
            throws RecognitionException {
        Create_table_hive_row_formatContext _localctx =
                new Create_table_hive_row_formatContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_create_table_hive_row_format);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1141);
                match(T_ROW);
                setState(1142);
                match(T_FORMAT);
                setState(1143);
                match(T_DELIMITED);
                setState(1147);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 97, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1144);
                                create_table_hive_row_format_fields();
                            }
                        }
                    }
                    setState(1149);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 97, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_hive_row_format_fieldsContext extends ParserRuleContext {
        public TerminalNode T_FIELDS() {
            return getToken(HplsqlParser.T_FIELDS, 0);
        }

        public TerminalNode T_TERMINATED() {
            return getToken(HplsqlParser.T_TERMINATED, 0);
        }

        public List<TerminalNode> T_BY() {
            return getTokens(HplsqlParser.T_BY);
        }

        public TerminalNode T_BY(int i) {
            return getToken(HplsqlParser.T_BY, i);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_ESCAPED() {
            return getToken(HplsqlParser.T_ESCAPED, 0);
        }

        public TerminalNode T_COLLECTION() {
            return getToken(HplsqlParser.T_COLLECTION, 0);
        }

        public TerminalNode T_ITEMS() {
            return getToken(HplsqlParser.T_ITEMS, 0);
        }

        public TerminalNode T_MAP() {
            return getToken(HplsqlParser.T_MAP, 0);
        }

        public TerminalNode T_KEYS() {
            return getToken(HplsqlParser.T_KEYS, 0);
        }

        public TerminalNode T_LINES() {
            return getToken(HplsqlParser.T_LINES, 0);
        }

        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public TerminalNode T_DEFINED() {
            return getToken(HplsqlParser.T_DEFINED, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Create_table_hive_row_format_fieldsContext(
                ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_hive_row_format_fields;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_hive_row_format_fields(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_hive_row_format_fields(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_hive_row_format_fields(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_hive_row_format_fieldsContext create_table_hive_row_format_fields()
            throws RecognitionException {
        Create_table_hive_row_format_fieldsContext _localctx =
                new Create_table_hive_row_format_fieldsContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_create_table_hive_row_format_fields);
        try {
            setState(1177);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_FIELDS:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1150);
                        match(T_FIELDS);
                        setState(1151);
                        match(T_TERMINATED);
                        setState(1152);
                        match(T_BY);
                        setState(1153);
                        expr(0);
                        setState(1157);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 98, _ctx)) {
                            case 1:
                                {
                                    setState(1154);
                                    match(T_ESCAPED);
                                    setState(1155);
                                    match(T_BY);
                                    setState(1156);
                                    expr(0);
                                }
                                break;
                        }
                    }
                    break;
                case T_COLLECTION:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1159);
                        match(T_COLLECTION);
                        setState(1160);
                        match(T_ITEMS);
                        setState(1161);
                        match(T_TERMINATED);
                        setState(1162);
                        match(T_BY);
                        setState(1163);
                        expr(0);
                    }
                    break;
                case T_MAP:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1164);
                        match(T_MAP);
                        setState(1165);
                        match(T_KEYS);
                        setState(1166);
                        match(T_TERMINATED);
                        setState(1167);
                        match(T_BY);
                        setState(1168);
                        expr(0);
                    }
                    break;
                case T_LINES:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1169);
                        match(T_LINES);
                        setState(1170);
                        match(T_TERMINATED);
                        setState(1171);
                        match(T_BY);
                        setState(1172);
                        expr(0);
                    }
                    break;
                case T_NULL:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1173);
                        match(T_NULL);
                        setState(1174);
                        match(T_DEFINED);
                        setState(1175);
                        match(T_AS);
                        setState(1176);
                        expr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_mssql_itemContext extends ParserRuleContext {
        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_TEXTIMAGE_ON() {
            return getToken(HplsqlParser.T_TEXTIMAGE_ON, 0);
        }

        public Create_table_options_mssql_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_mssql_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_mssql_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_mssql_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_mssql_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_mssql_itemContext create_table_options_mssql_item()
            throws RecognitionException {
        Create_table_options_mssql_itemContext _localctx =
                new Create_table_options_mssql_itemContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_create_table_options_mssql_item);
        try {
            setState(1183);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_ON:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1179);
                        match(T_ON);
                        setState(1180);
                        ident();
                    }
                    break;
                case T_TEXTIMAGE_ON:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1181);
                        match(T_TEXTIMAGE_ON);
                        setState(1182);
                        ident();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_table_options_mysql_itemContext extends ParserRuleContext {
        public TerminalNode T_AUTO_INCREMENT() {
            return getToken(HplsqlParser.T_AUTO_INCREMENT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_COMMENT() {
            return getToken(HplsqlParser.T_COMMENT, 0);
        }

        public TerminalNode T_CHARACTER() {
            return getToken(HplsqlParser.T_CHARACTER, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public TerminalNode T_CHARSET() {
            return getToken(HplsqlParser.T_CHARSET, 0);
        }

        public TerminalNode T_DEFAULT() {
            return getToken(HplsqlParser.T_DEFAULT, 0);
        }

        public TerminalNode T_ENGINE() {
            return getToken(HplsqlParser.T_ENGINE, 0);
        }

        public Create_table_options_mysql_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_table_options_mysql_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_table_options_mysql_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_table_options_mysql_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitCreate_table_options_mysql_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_table_options_mysql_itemContext create_table_options_mysql_item()
            throws RecognitionException {
        Create_table_options_mysql_itemContext _localctx =
                new Create_table_options_mysql_itemContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_create_table_options_mysql_item);
        int _la;
        try {
            setState(1212);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_AUTO_INCREMENT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1185);
                        match(T_AUTO_INCREMENT);
                        setState(1187);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_EQUAL) {
                            {
                                setState(1186);
                                match(T_EQUAL);
                            }
                        }

                        setState(1189);
                        expr(0);
                    }
                    break;
                case T_COMMENT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1190);
                        match(T_COMMENT);
                        setState(1192);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_EQUAL) {
                            {
                                setState(1191);
                                match(T_EQUAL);
                            }
                        }

                        setState(1194);
                        expr(0);
                    }
                    break;
                case T_CHARACTER:
                case T_CHARSET:
                case T_DEFAULT:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1196);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_DEFAULT) {
                            {
                                setState(1195);
                                match(T_DEFAULT);
                            }
                        }

                        setState(1201);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_CHARACTER:
                                {
                                    setState(1198);
                                    match(T_CHARACTER);
                                    setState(1199);
                                    match(T_SET);
                                }
                                break;
                            case T_CHARSET:
                                {
                                    setState(1200);
                                    match(T_CHARSET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(1204);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_EQUAL) {
                            {
                                setState(1203);
                                match(T_EQUAL);
                            }
                        }

                        setState(1206);
                        expr(0);
                    }
                    break;
                case T_ENGINE:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1207);
                        match(T_ENGINE);
                        setState(1209);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_EQUAL) {
                            {
                                setState(1208);
                                match(T_EQUAL);
                            }
                        }

                        setState(1211);
                        expr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Alter_table_stmtContext extends ParserRuleContext {
        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public Alter_table_itemContext alter_table_item() {
            return getRuleContext(Alter_table_itemContext.class, 0);
        }

        public Alter_table_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alter_table_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAlter_table_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAlter_table_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAlter_table_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_table_stmtContext alter_table_stmt() throws RecognitionException {
        Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_alter_table_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1214);
                match(T_ALTER);
                setState(1215);
                match(T_TABLE);
                setState(1216);
                table_name();
                setState(1217);
                alter_table_item();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Alter_table_itemContext extends ParserRuleContext {
        public Alter_table_add_constraintContext alter_table_add_constraint() {
            return getRuleContext(Alter_table_add_constraintContext.class, 0);
        }

        public Alter_table_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alter_table_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAlter_table_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAlter_table_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAlter_table_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_table_itemContext alter_table_item() throws RecognitionException {
        Alter_table_itemContext _localctx = new Alter_table_itemContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_alter_table_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1219);
                alter_table_add_constraint();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Alter_table_add_constraintContext extends ParserRuleContext {
        public TerminalNode T_ADD2() {
            return getToken(HplsqlParser.T_ADD2, 0);
        }

        public Alter_table_add_constraint_itemContext alter_table_add_constraint_item() {
            return getRuleContext(Alter_table_add_constraint_itemContext.class, 0);
        }

        public TerminalNode T_CONSTRAINT() {
            return getToken(HplsqlParser.T_CONSTRAINT, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Alter_table_add_constraintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alter_table_add_constraint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAlter_table_add_constraint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAlter_table_add_constraint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitAlter_table_add_constraint(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_table_add_constraintContext alter_table_add_constraint()
            throws RecognitionException {
        Alter_table_add_constraintContext _localctx =
                new Alter_table_add_constraintContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_alter_table_add_constraint);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1221);
                match(T_ADD2);
                setState(1224);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_CONSTRAINT) {
                    {
                        setState(1222);
                        match(T_CONSTRAINT);
                        setState(1223);
                        ident();
                    }
                }

                setState(1226);
                alter_table_add_constraint_item();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Alter_table_add_constraint_itemContext extends ParserRuleContext {
        public TerminalNode T_PRIMARY() {
            return getToken(HplsqlParser.T_PRIMARY, 0);
        }

        public TerminalNode T_KEY() {
            return getToken(HplsqlParser.T_KEY, 0);
        }

        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public TerminalNode T_CLUSTERED() {
            return getToken(HplsqlParser.T_CLUSTERED, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_ENABLE() {
            return getToken(HplsqlParser.T_ENABLE, 0);
        }

        public Index_storage_clauseContext index_storage_clause() {
            return getRuleContext(Index_storage_clauseContext.class, 0);
        }

        public List<TerminalNode> T_ASC() {
            return getTokens(HplsqlParser.T_ASC);
        }

        public TerminalNode T_ASC(int i) {
            return getToken(HplsqlParser.T_ASC, i);
        }

        public List<TerminalNode> T_DESC() {
            return getTokens(HplsqlParser.T_DESC);
        }

        public TerminalNode T_DESC(int i) {
            return getToken(HplsqlParser.T_DESC, i);
        }

        public TerminalNode T_FOREIGN() {
            return getToken(HplsqlParser.T_FOREIGN, 0);
        }

        public TerminalNode T_REFERENCES() {
            return getToken(HplsqlParser.T_REFERENCES, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public List<Create_table_fk_actionContext> create_table_fk_action() {
            return getRuleContexts(Create_table_fk_actionContext.class);
        }

        public Create_table_fk_actionContext create_table_fk_action(int i) {
            return getRuleContext(Create_table_fk_actionContext.class, i);
        }

        public TerminalNode T_DEFAULT() {
            return getToken(HplsqlParser.T_DEFAULT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public Alter_table_add_constraint_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alter_table_add_constraint_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterAlter_table_add_constraint_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitAlter_table_add_constraint_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitAlter_table_add_constraint_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Alter_table_add_constraint_itemContext alter_table_add_constraint_item()
            throws RecognitionException {
        Alter_table_add_constraint_itemContext _localctx =
                new Alter_table_add_constraint_itemContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_alter_table_add_constraint_item);
        int _la;
        try {
            int _alt;
            setState(1290);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_PRIMARY:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1228);
                        match(T_PRIMARY);
                        setState(1229);
                        match(T_KEY);
                        setState(1231);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_CLUSTERED) {
                            {
                                setState(1230);
                                match(T_CLUSTERED);
                            }
                        }

                        setState(1233);
                        match(T_OPEN_P);
                        setState(1234);
                        ident();
                        setState(1236);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ASC || _la == T_DESC) {
                            {
                                setState(1235);
                                _la = _input.LA(1);
                                if (!(_la == T_ASC || _la == T_DESC)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                            }
                        }

                        setState(1245);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1238);
                                    match(T_COMMA);
                                    setState(1239);
                                    ident();
                                    setState(1241);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == T_ASC || _la == T_DESC) {
                                        {
                                            setState(1240);
                                            _la = _input.LA(1);
                                            if (!(_la == T_ASC || _la == T_DESC)) {
                                                _errHandler.recoverInline(this);
                                            } else {
                                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                                _errHandler.reportMatch(this);
                                                consume();
                                            }
                                        }
                                    }
                                }
                            }
                            setState(1247);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1248);
                        match(T_CLOSE_P);
                        setState(1250);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 113, _ctx)) {
                            case 1:
                                {
                                    setState(1249);
                                    match(T_ENABLE);
                                }
                                break;
                        }
                        setState(1253);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 114, _ctx)) {
                            case 1:
                                {
                                    setState(1252);
                                    index_storage_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_FOREIGN:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1255);
                        match(T_FOREIGN);
                        setState(1256);
                        match(T_KEY);
                        setState(1257);
                        match(T_OPEN_P);
                        setState(1258);
                        ident();
                        setState(1263);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1259);
                                    match(T_COMMA);
                                    setState(1260);
                                    ident();
                                }
                            }
                            setState(1265);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1266);
                        match(T_CLOSE_P);
                        setState(1267);
                        match(T_REFERENCES);
                        setState(1268);
                        table_name();
                        setState(1269);
                        match(T_OPEN_P);
                        setState(1270);
                        ident();
                        setState(1275);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1271);
                                    match(T_COMMA);
                                    setState(1272);
                                    ident();
                                }
                            }
                            setState(1277);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1278);
                        match(T_CLOSE_P);
                        setState(1282);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 117, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1279);
                                        create_table_fk_action();
                                    }
                                }
                            }
                            setState(1284);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 117, _ctx);
                        }
                    }
                    break;
                case T_DEFAULT:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1285);
                        match(T_DEFAULT);
                        setState(1286);
                        expr(0);
                        setState(1287);
                        match(T_FOR);
                        setState(1288);
                        ident();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class DtypeContext extends ParserRuleContext {
        public TerminalNode T_CHAR() {
            return getToken(HplsqlParser.T_CHAR, 0);
        }

        public TerminalNode T_BIGINT() {
            return getToken(HplsqlParser.T_BIGINT, 0);
        }

        public TerminalNode T_BINARY_DOUBLE() {
            return getToken(HplsqlParser.T_BINARY_DOUBLE, 0);
        }

        public TerminalNode T_BINARY_FLOAT() {
            return getToken(HplsqlParser.T_BINARY_FLOAT, 0);
        }

        public TerminalNode T_BINARY_INTEGER() {
            return getToken(HplsqlParser.T_BINARY_INTEGER, 0);
        }

        public TerminalNode T_BIT() {
            return getToken(HplsqlParser.T_BIT, 0);
        }

        public TerminalNode T_DATE() {
            return getToken(HplsqlParser.T_DATE, 0);
        }

        public TerminalNode T_DATETIME() {
            return getToken(HplsqlParser.T_DATETIME, 0);
        }

        public TerminalNode T_DEC() {
            return getToken(HplsqlParser.T_DEC, 0);
        }

        public TerminalNode T_DECIMAL() {
            return getToken(HplsqlParser.T_DECIMAL, 0);
        }

        public TerminalNode T_DOUBLE() {
            return getToken(HplsqlParser.T_DOUBLE, 0);
        }

        public TerminalNode T_PRECISION() {
            return getToken(HplsqlParser.T_PRECISION, 0);
        }

        public TerminalNode T_FLOAT() {
            return getToken(HplsqlParser.T_FLOAT, 0);
        }

        public TerminalNode T_INT() {
            return getToken(HplsqlParser.T_INT, 0);
        }

        public TerminalNode T_INT2() {
            return getToken(HplsqlParser.T_INT2, 0);
        }

        public TerminalNode T_INT4() {
            return getToken(HplsqlParser.T_INT4, 0);
        }

        public TerminalNode T_INT8() {
            return getToken(HplsqlParser.T_INT8, 0);
        }

        public TerminalNode T_INTEGER() {
            return getToken(HplsqlParser.T_INTEGER, 0);
        }

        public TerminalNode T_NCHAR() {
            return getToken(HplsqlParser.T_NCHAR, 0);
        }

        public TerminalNode T_NVARCHAR() {
            return getToken(HplsqlParser.T_NVARCHAR, 0);
        }

        public TerminalNode T_NUMBER() {
            return getToken(HplsqlParser.T_NUMBER, 0);
        }

        public TerminalNode T_NUMERIC() {
            return getToken(HplsqlParser.T_NUMERIC, 0);
        }

        public TerminalNode T_PLS_INTEGER() {
            return getToken(HplsqlParser.T_PLS_INTEGER, 0);
        }

        public TerminalNode T_REAL() {
            return getToken(HplsqlParser.T_REAL, 0);
        }

        public TerminalNode T_RESULT_SET_LOCATOR() {
            return getToken(HplsqlParser.T_RESULT_SET_LOCATOR, 0);
        }

        public TerminalNode T_VARYING() {
            return getToken(HplsqlParser.T_VARYING, 0);
        }

        public TerminalNode T_SIMPLE_FLOAT() {
            return getToken(HplsqlParser.T_SIMPLE_FLOAT, 0);
        }

        public TerminalNode T_SIMPLE_DOUBLE() {
            return getToken(HplsqlParser.T_SIMPLE_DOUBLE, 0);
        }

        public TerminalNode T_SIMPLE_INTEGER() {
            return getToken(HplsqlParser.T_SIMPLE_INTEGER, 0);
        }

        public TerminalNode T_SMALLINT() {
            return getToken(HplsqlParser.T_SMALLINT, 0);
        }

        public TerminalNode T_SMALLDATETIME() {
            return getToken(HplsqlParser.T_SMALLDATETIME, 0);
        }

        public TerminalNode T_STRING() {
            return getToken(HplsqlParser.T_STRING, 0);
        }

        public TerminalNode T_SYS_REFCURSOR() {
            return getToken(HplsqlParser.T_SYS_REFCURSOR, 0);
        }

        public TerminalNode T_TIMESTAMP() {
            return getToken(HplsqlParser.T_TIMESTAMP, 0);
        }

        public TerminalNode T_TINYINT() {
            return getToken(HplsqlParser.T_TINYINT, 0);
        }

        public TerminalNode T_VARCHAR() {
            return getToken(HplsqlParser.T_VARCHAR, 0);
        }

        public TerminalNode T_VARCHAR2() {
            return getToken(HplsqlParser.T_VARCHAR2, 0);
        }

        public TerminalNode T_XML() {
            return getToken(HplsqlParser.T_XML, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_TYPE() {
            return getToken(HplsqlParser.T_TYPE, 0);
        }

        public TerminalNode T_ROWTYPE() {
            return getToken(HplsqlParser.T_ROWTYPE, 0);
        }

        public DtypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dtype;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterDtype(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitDtype(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDtype(this);
            else return visitor.visitChildren(this);
        }
    }

    public final DtypeContext dtype() throws RecognitionException {
        DtypeContext _localctx = new DtypeContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_dtype);
        int _la;
        try {
            setState(1337);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 121, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1292);
                        match(T_CHAR);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1293);
                        match(T_BIGINT);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1294);
                        match(T_BINARY_DOUBLE);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1295);
                        match(T_BINARY_FLOAT);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(1296);
                        match(T_BINARY_INTEGER);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(1297);
                        match(T_BIT);
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(1298);
                        match(T_DATE);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(1299);
                        match(T_DATETIME);
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(1300);
                        match(T_DEC);
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(1301);
                        match(T_DECIMAL);
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(1302);
                        match(T_DOUBLE);
                        setState(1304);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 119, _ctx)) {
                            case 1:
                                {
                                    setState(1303);
                                    match(T_PRECISION);
                                }
                                break;
                        }
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(1306);
                        match(T_FLOAT);
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(1307);
                        match(T_INT);
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(1308);
                        match(T_INT2);
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(1309);
                        match(T_INT4);
                    }
                    break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(1310);
                        match(T_INT8);
                    }
                    break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(1311);
                        match(T_INTEGER);
                    }
                    break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                    {
                        setState(1312);
                        match(T_NCHAR);
                    }
                    break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                    {
                        setState(1313);
                        match(T_NVARCHAR);
                    }
                    break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                    {
                        setState(1314);
                        match(T_NUMBER);
                    }
                    break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                    {
                        setState(1315);
                        match(T_NUMERIC);
                    }
                    break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                    {
                        setState(1316);
                        match(T_PLS_INTEGER);
                    }
                    break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                    {
                        setState(1317);
                        match(T_REAL);
                    }
                    break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                    {
                        setState(1318);
                        match(T_RESULT_SET_LOCATOR);
                        setState(1319);
                        match(T_VARYING);
                    }
                    break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                    {
                        setState(1320);
                        match(T_SIMPLE_FLOAT);
                    }
                    break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                    {
                        setState(1321);
                        match(T_SIMPLE_DOUBLE);
                    }
                    break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                    {
                        setState(1322);
                        match(T_SIMPLE_INTEGER);
                    }
                    break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                    {
                        setState(1323);
                        match(T_SMALLINT);
                    }
                    break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                    {
                        setState(1324);
                        match(T_SMALLDATETIME);
                    }
                    break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                    {
                        setState(1325);
                        match(T_STRING);
                    }
                    break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                    {
                        setState(1326);
                        match(T_SYS_REFCURSOR);
                    }
                    break;
                case 32:
                    enterOuterAlt(_localctx, 32);
                    {
                        setState(1327);
                        match(T_TIMESTAMP);
                    }
                    break;
                case 33:
                    enterOuterAlt(_localctx, 33);
                    {
                        setState(1328);
                        match(T_TINYINT);
                    }
                    break;
                case 34:
                    enterOuterAlt(_localctx, 34);
                    {
                        setState(1329);
                        match(T_VARCHAR);
                    }
                    break;
                case 35:
                    enterOuterAlt(_localctx, 35);
                    {
                        setState(1330);
                        match(T_VARCHAR2);
                    }
                    break;
                case 36:
                    enterOuterAlt(_localctx, 36);
                    {
                        setState(1331);
                        match(T_XML);
                    }
                    break;
                case 37:
                    enterOuterAlt(_localctx, 37);
                    {
                        setState(1332);
                        ident();
                        setState(1335);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                            case 1:
                                {
                                    setState(1333);
                                    match(T__2);
                                    setState(1334);
                                    _la = _input.LA(1);
                                    if (!(_la == T_ROWTYPE || _la == T_TYPE)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Dtype_lenContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> L_INT() {
            return getTokens(HplsqlParser.L_INT);
        }

        public TerminalNode L_INT(int i) {
            return getToken(HplsqlParser.L_INT, i);
        }

        public TerminalNode T_MAX() {
            return getToken(HplsqlParser.T_MAX, 0);
        }

        public TerminalNode T_COMMA() {
            return getToken(HplsqlParser.T_COMMA, 0);
        }

        public TerminalNode T_CHAR() {
            return getToken(HplsqlParser.T_CHAR, 0);
        }

        public TerminalNode T_BYTE() {
            return getToken(HplsqlParser.T_BYTE, 0);
        }

        public Dtype_lenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dtype_len;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDtype_len(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitDtype_len(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDtype_len(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dtype_lenContext dtype_len() throws RecognitionException {
        Dtype_lenContext _localctx = new Dtype_lenContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_dtype_len);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1339);
                match(T_OPEN_P);
                setState(1340);
                _la = _input.LA(1);
                if (!(_la == T_MAX || _la == L_INT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1342);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_BYTE || _la == T_CHAR) {
                    {
                        setState(1341);
                        _la = _input.LA(1);
                        if (!(_la == T_BYTE || _la == T_CHAR)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

                setState(1346);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_COMMA) {
                    {
                        setState(1344);
                        match(T_COMMA);
                        setState(1345);
                        match(L_INT);
                    }
                }

                setState(1348);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Dtype_attrContext extends ParserRuleContext {
        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_CHARACTER() {
            return getToken(HplsqlParser.T_CHARACTER, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_CASESPECIFIC() {
            return getToken(HplsqlParser.T_CASESPECIFIC, 0);
        }

        public TerminalNode T_CS() {
            return getToken(HplsqlParser.T_CS, 0);
        }

        public Dtype_attrContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dtype_attr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDtype_attr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDtype_attr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDtype_attr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dtype_attrContext dtype_attr() throws RecognitionException {
        Dtype_attrContext _localctx = new Dtype_attrContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_dtype_attr);
        int _la;
        try {
            setState(1361);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 126, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1351);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(1350);
                                match(T_NOT);
                            }
                        }

                        setState(1353);
                        match(T_NULL);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1354);
                        match(T_CHARACTER);
                        setState(1355);
                        match(T_SET);
                        setState(1356);
                        ident();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1358);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(1357);
                                match(T_NOT);
                            }
                        }

                        setState(1360);
                        _la = _input.LA(1);
                        if (!(_la == T_CASESPECIFIC || _la == T_CS)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Dtype_defaultContext extends ParserRuleContext {
        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_COLON() {
            return getToken(HplsqlParser.T_COLON, 0);
        }

        public TerminalNode T_DEFAULT() {
            return getToken(HplsqlParser.T_DEFAULT, 0);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public Dtype_defaultContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dtype_default;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDtype_default(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDtype_default(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDtype_default(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dtype_defaultContext dtype_default() throws RecognitionException {
        Dtype_defaultContext _localctx = new Dtype_defaultContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_dtype_default);
        int _la;
        try {
            setState(1375);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_COLON:
                case T_EQUAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1364);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COLON) {
                            {
                                setState(1363);
                                match(T_COLON);
                            }
                        }

                        setState(1366);
                        match(T_EQUAL);
                        setState(1367);
                        expr(0);
                    }
                    break;
                case T_DEFAULT:
                case T_WITH:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1369);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_WITH) {
                            {
                                setState(1368);
                                match(T_WITH);
                            }
                        }

                        setState(1371);
                        match(T_DEFAULT);
                        setState(1373);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 129, _ctx)) {
                            case 1:
                                {
                                    setState(1372);
                                    expr(0);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_database_stmtContext extends ParserRuleContext {
        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_DATABASE() {
            return getToken(HplsqlParser.T_DATABASE, 0);
        }

        public TerminalNode T_SCHEMA() {
            return getToken(HplsqlParser.T_SCHEMA, 0);
        }

        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_EXISTS() {
            return getToken(HplsqlParser.T_EXISTS, 0);
        }

        public List<Create_database_optionContext> create_database_option() {
            return getRuleContexts(Create_database_optionContext.class);
        }

        public Create_database_optionContext create_database_option(int i) {
            return getRuleContext(Create_database_optionContext.class, i);
        }

        public Create_database_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_database_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_database_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_database_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_database_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_database_stmtContext create_database_stmt() throws RecognitionException {
        Create_database_stmtContext _localctx = new Create_database_stmtContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_create_database_stmt);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1377);
                match(T_CREATE);
                setState(1378);
                _la = _input.LA(1);
                if (!(_la == T_DATABASE || _la == T_SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1382);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 131, _ctx)) {
                    case 1:
                        {
                            setState(1379);
                            match(T_IF);
                            setState(1380);
                            match(T_NOT);
                            setState(1381);
                            match(T_EXISTS);
                        }
                        break;
                }
                setState(1384);
                expr(0);
                setState(1388);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 132, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1385);
                                create_database_option();
                            }
                        }
                    }
                    setState(1390);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 132, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_database_optionContext extends ParserRuleContext {
        public TerminalNode T_COMMENT() {
            return getToken(HplsqlParser.T_COMMENT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_LOCATION() {
            return getToken(HplsqlParser.T_LOCATION, 0);
        }

        public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_database_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_database_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_database_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_database_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_database_optionContext create_database_option()
            throws RecognitionException {
        Create_database_optionContext _localctx =
                new Create_database_optionContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_create_database_option);
        try {
            setState(1395);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_COMMENT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1391);
                        match(T_COMMENT);
                        setState(1392);
                        expr(0);
                    }
                    break;
                case T_LOCATION:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1393);
                        match(T_LOCATION);
                        setState(1394);
                        expr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_function_stmtContext extends ParserRuleContext {
        public TerminalNode T_FUNCTION() {
            return getToken(HplsqlParser.T_FUNCTION, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_function_returnContext create_function_return() {
            return getRuleContext(Create_function_returnContext.class, 0);
        }

        public Single_block_stmtContext single_block_stmt() {
            return getRuleContext(Single_block_stmtContext.class, 0);
        }

        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public Create_routine_paramsContext create_routine_params() {
            return getRuleContext(Create_routine_paramsContext.class, 0);
        }

        public Declare_block_inplaceContext declare_block_inplace() {
            return getRuleContext(Declare_block_inplaceContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_function_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_function_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_function_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_function_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
        Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_create_function_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1404);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ALTER:
                        {
                            setState(1397);
                            match(T_ALTER);
                        }
                        break;
                    case T_CREATE:
                        {
                            setState(1398);
                            match(T_CREATE);
                            setState(1401);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_OR) {
                                {
                                    setState(1399);
                                    match(T_OR);
                                    setState(1400);
                                    match(T_REPLACE);
                                }
                            }
                        }
                        break;
                    case T_REPLACE:
                        {
                            setState(1403);
                            match(T_REPLACE);
                        }
                        break;
                    case T_FUNCTION:
                        break;
                    default:
                        break;
                }
                setState(1406);
                match(T_FUNCTION);
                setState(1407);
                ident();
                setState(1409);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 136, _ctx)) {
                    case 1:
                        {
                            setState(1408);
                            create_routine_params();
                        }
                        break;
                }
                setState(1411);
                create_function_return();
                setState(1413);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 137, _ctx)) {
                    case 1:
                        {
                            setState(1412);
                            _la = _input.LA(1);
                            if (!(_la == T_AS || _la == T_IS)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                }
                setState(1416);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 138, _ctx)) {
                    case 1:
                        {
                            setState(1415);
                            declare_block_inplace();
                        }
                        break;
                }
                setState(1418);
                single_block_stmt();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_function_returnContext extends ParserRuleContext {
        public DtypeContext dtype() {
            return getRuleContext(DtypeContext.class, 0);
        }

        public TerminalNode T_RETURN() {
            return getToken(HplsqlParser.T_RETURN, 0);
        }

        public TerminalNode T_RETURNS() {
            return getToken(HplsqlParser.T_RETURNS, 0);
        }

        public Dtype_lenContext dtype_len() {
            return getRuleContext(Dtype_lenContext.class, 0);
        }

        public Create_function_returnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_function_return;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_function_return(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_function_return(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_function_return(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_function_returnContext create_function_return()
            throws RecognitionException {
        Create_function_returnContext _localctx =
                new Create_function_returnContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_create_function_return);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1420);
                _la = _input.LA(1);
                if (!(_la == T_RETURN || _la == T_RETURNS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1421);
                dtype();
                setState(1423);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 139, _ctx)) {
                    case 1:
                        {
                            setState(1422);
                            dtype_len();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_package_stmtContext extends ParserRuleContext {
        public TerminalNode T_PACKAGE() {
            return getToken(HplsqlParser.T_PACKAGE, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public Package_specContext package_spec() {
            return getRuleContext(Package_specContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public Create_package_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_package_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_package_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_package_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_package_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_package_stmtContext create_package_stmt() throws RecognitionException {
        Create_package_stmtContext _localctx = new Create_package_stmtContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_create_package_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1432);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ALTER:
                        {
                            setState(1425);
                            match(T_ALTER);
                        }
                        break;
                    case T_CREATE:
                        {
                            setState(1426);
                            match(T_CREATE);
                            setState(1429);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_OR) {
                                {
                                    setState(1427);
                                    match(T_OR);
                                    setState(1428);
                                    match(T_REPLACE);
                                }
                            }
                        }
                        break;
                    case T_REPLACE:
                        {
                            setState(1431);
                            match(T_REPLACE);
                        }
                        break;
                    case T_PACKAGE:
                        break;
                    default:
                        break;
                }
                setState(1434);
                match(T_PACKAGE);
                setState(1435);
                ident();
                setState(1436);
                _la = _input.LA(1);
                if (!(_la == T_AS || _la == T_IS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1437);
                package_spec();
                setState(1438);
                match(T_END);
                setState(1442);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 142, _ctx)) {
                    case 1:
                        {
                            setState(1439);
                            ident();
                            setState(1440);
                            match(T_SEMICOLON);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Package_specContext extends ParserRuleContext {
        public List<Package_spec_itemContext> package_spec_item() {
            return getRuleContexts(Package_spec_itemContext.class);
        }

        public Package_spec_itemContext package_spec_item(int i) {
            return getRuleContext(Package_spec_itemContext.class, i);
        }

        public List<TerminalNode> T_SEMICOLON() {
            return getTokens(HplsqlParser.T_SEMICOLON);
        }

        public TerminalNode T_SEMICOLON(int i) {
            return getToken(HplsqlParser.T_SEMICOLON, i);
        }

        public Package_specContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_package_spec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterPackage_spec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitPackage_spec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitPackage_spec(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_specContext package_spec() throws RecognitionException {
        Package_specContext _localctx = new Package_specContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_package_spec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1444);
                package_spec_item();
                setState(1445);
                match(T_SEMICOLON);
                setState(1451);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -67108928L) != 0)
                        || ((((_la - 64)) & ~0x3f) == 0
                                && ((1L << (_la - 64)) & -24696061953L) != 0)
                        || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0)
                        || ((((_la - 192)) & ~0x3f) == 0
                                && ((1L << (_la - 192)) & -2251799817879561L) != 0)
                        || ((((_la - 256)) & ~0x3f) == 0
                                && ((1L << (_la - 256)) & -54046502653264129L) != 0)
                        || ((((_la - 320)) & ~0x3f) == 0
                                && ((1L << (_la - 320)) & 70368752534015L) != 0)) {
                    {
                        {
                            setState(1446);
                            package_spec_item();
                            setState(1447);
                            match(T_SEMICOLON);
                        }
                    }
                    setState(1453);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Package_spec_itemContext extends ParserRuleContext {
        public Declare_stmt_itemContext declare_stmt_item() {
            return getRuleContext(Declare_stmt_itemContext.class, 0);
        }

        public TerminalNode T_FUNCTION() {
            return getToken(HplsqlParser.T_FUNCTION, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Create_function_returnContext create_function_return() {
            return getRuleContext(Create_function_returnContext.class, 0);
        }

        public Create_routine_paramsContext create_routine_params() {
            return getRuleContext(Create_routine_paramsContext.class, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public TerminalNode T_PROC() {
            return getToken(HplsqlParser.T_PROC, 0);
        }

        public Package_spec_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_package_spec_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterPackage_spec_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitPackage_spec_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitPackage_spec_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_spec_itemContext package_spec_item() throws RecognitionException {
        Package_spec_itemContext _localctx = new Package_spec_itemContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_package_spec_item);
        int _la;
        try {
            setState(1467);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 146, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1454);
                        declare_stmt_item();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1455);
                        match(T_FUNCTION);
                        setState(1456);
                        ident();
                        setState(1458);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 144, _ctx)) {
                            case 1:
                                {
                                    setState(1457);
                                    create_routine_params();
                                }
                                break;
                        }
                        setState(1460);
                        create_function_return();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1462);
                        _la = _input.LA(1);
                        if (!(_la == T_PROC || _la == T_PROCEDURE)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1463);
                        ident();
                        setState(1465);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 145, _ctx)) {
                            case 1:
                                {
                                    setState(1464);
                                    create_routine_params();
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_package_body_stmtContext extends ParserRuleContext {
        public TerminalNode T_PACKAGE() {
            return getToken(HplsqlParser.T_PACKAGE, 0);
        }

        public TerminalNode T_BODY() {
            return getToken(HplsqlParser.T_BODY, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public Package_bodyContext package_body() {
            return getRuleContext(Package_bodyContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public Create_package_body_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_package_body_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_package_body_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_package_body_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_package_body_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_package_body_stmtContext create_package_body_stmt()
            throws RecognitionException {
        Create_package_body_stmtContext _localctx =
                new Create_package_body_stmtContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_create_package_body_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1476);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ALTER:
                        {
                            setState(1469);
                            match(T_ALTER);
                        }
                        break;
                    case T_CREATE:
                        {
                            setState(1470);
                            match(T_CREATE);
                            setState(1473);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_OR) {
                                {
                                    setState(1471);
                                    match(T_OR);
                                    setState(1472);
                                    match(T_REPLACE);
                                }
                            }
                        }
                        break;
                    case T_REPLACE:
                        {
                            setState(1475);
                            match(T_REPLACE);
                        }
                        break;
                    case T_PACKAGE:
                        break;
                    default:
                        break;
                }
                setState(1478);
                match(T_PACKAGE);
                setState(1479);
                match(T_BODY);
                setState(1480);
                ident();
                setState(1481);
                _la = _input.LA(1);
                if (!(_la == T_AS || _la == T_IS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1482);
                package_body();
                setState(1483);
                match(T_END);
                setState(1487);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 149, _ctx)) {
                    case 1:
                        {
                            setState(1484);
                            ident();
                            setState(1485);
                            match(T_SEMICOLON);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Package_bodyContext extends ParserRuleContext {
        public List<Package_body_itemContext> package_body_item() {
            return getRuleContexts(Package_body_itemContext.class);
        }

        public Package_body_itemContext package_body_item(int i) {
            return getRuleContext(Package_body_itemContext.class, i);
        }

        public List<TerminalNode> T_SEMICOLON() {
            return getTokens(HplsqlParser.T_SEMICOLON);
        }

        public TerminalNode T_SEMICOLON(int i) {
            return getToken(HplsqlParser.T_SEMICOLON, i);
        }

        public Package_bodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_package_body;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterPackage_body(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitPackage_body(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitPackage_body(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_bodyContext package_body() throws RecognitionException {
        Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_package_body);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1489);
                package_body_item();
                setState(1490);
                match(T_SEMICOLON);
                setState(1496);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -67108928L) != 0)
                        || ((((_la - 64)) & ~0x3f) == 0
                                && ((1L << (_la - 64)) & -24696061953L) != 0)
                        || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0)
                        || ((((_la - 192)) & ~0x3f) == 0
                                && ((1L << (_la - 192)) & -2251799817879561L) != 0)
                        || ((((_la - 256)) & ~0x3f) == 0
                                && ((1L << (_la - 256)) & -54046502653264129L) != 0)
                        || ((((_la - 320)) & ~0x3f) == 0
                                && ((1L << (_la - 320)) & 70368752534015L) != 0)) {
                    {
                        {
                            setState(1491);
                            package_body_item();
                            setState(1492);
                            match(T_SEMICOLON);
                        }
                    }
                    setState(1498);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Package_body_itemContext extends ParserRuleContext {
        public Declare_stmt_itemContext declare_stmt_item() {
            return getRuleContext(Declare_stmt_itemContext.class, 0);
        }

        public Create_function_stmtContext create_function_stmt() {
            return getRuleContext(Create_function_stmtContext.class, 0);
        }

        public Create_procedure_stmtContext create_procedure_stmt() {
            return getRuleContext(Create_procedure_stmtContext.class, 0);
        }

        public Package_body_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_package_body_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterPackage_body_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitPackage_body_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitPackage_body_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Package_body_itemContext package_body_item() throws RecognitionException {
        Package_body_itemContext _localctx = new Package_body_itemContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_package_body_item);
        try {
            setState(1502);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 151, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1499);
                        declare_stmt_item();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1500);
                        create_function_stmt();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1501);
                        create_procedure_stmt();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_procedure_stmtContext extends ParserRuleContext {
        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public Proc_blockContext proc_block() {
            return getRuleContext(Proc_blockContext.class, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public TerminalNode T_PROC() {
            return getToken(HplsqlParser.T_PROC, 0);
        }

        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public Create_routine_paramsContext create_routine_params() {
            return getRuleContext(Create_routine_paramsContext.class, 0);
        }

        public Create_routine_optionsContext create_routine_options() {
            return getRuleContext(Create_routine_optionsContext.class, 0);
        }

        public Declare_block_inplaceContext declare_block_inplace() {
            return getRuleContext(Declare_block_inplaceContext.class, 0);
        }

        public LabelContext label() {
            return getRuleContext(LabelContext.class, 0);
        }

        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public Create_procedure_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_procedure_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_procedure_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_procedure_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_procedure_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_procedure_stmtContext create_procedure_stmt() throws RecognitionException {
        Create_procedure_stmtContext _localctx = new Create_procedure_stmtContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_create_procedure_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1511);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ALTER:
                        {
                            setState(1504);
                            match(T_ALTER);
                        }
                        break;
                    case T_CREATE:
                        {
                            setState(1505);
                            match(T_CREATE);
                            setState(1508);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_OR) {
                                {
                                    setState(1506);
                                    match(T_OR);
                                    setState(1507);
                                    match(T_REPLACE);
                                }
                            }
                        }
                        break;
                    case T_REPLACE:
                        {
                            setState(1510);
                            match(T_REPLACE);
                        }
                        break;
                    case T_PROC:
                    case T_PROCEDURE:
                        break;
                    default:
                        break;
                }
                setState(1513);
                _la = _input.LA(1);
                if (!(_la == T_PROC || _la == T_PROCEDURE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1514);
                ident();
                setState(1516);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 154, _ctx)) {
                    case 1:
                        {
                            setState(1515);
                            create_routine_params();
                        }
                        break;
                }
                setState(1519);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 155, _ctx)) {
                    case 1:
                        {
                            setState(1518);
                            create_routine_options();
                        }
                        break;
                }
                setState(1522);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 156, _ctx)) {
                    case 1:
                        {
                            setState(1521);
                            _la = _input.LA(1);
                            if (!(_la == T_AS || _la == T_IS)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                }
                setState(1525);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 157, _ctx)) {
                    case 1:
                        {
                            setState(1524);
                            declare_block_inplace();
                        }
                        break;
                }
                setState(1528);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 158, _ctx)) {
                    case 1:
                        {
                            setState(1527);
                            label();
                        }
                        break;
                }
                setState(1530);
                proc_block();
                setState(1534);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 159, _ctx)) {
                    case 1:
                        {
                            setState(1531);
                            ident();
                            setState(1532);
                            match(T_SEMICOLON);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_routine_paramsContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<Create_routine_param_itemContext> create_routine_param_item() {
            return getRuleContexts(Create_routine_param_itemContext.class);
        }

        public Create_routine_param_itemContext create_routine_param_item(int i) {
            return getRuleContext(Create_routine_param_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Create_routine_paramsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_routine_params;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_routine_params(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_routine_params(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_routine_params(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_routine_paramsContext create_routine_params() throws RecognitionException {
        Create_routine_paramsContext _localctx = new Create_routine_paramsContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_create_routine_params);
        int _la;
        try {
            int _alt;
            setState(1558);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 162, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1536);
                        match(T_OPEN_P);
                        setState(1537);
                        match(T_CLOSE_P);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1538);
                        match(T_OPEN_P);
                        setState(1539);
                        create_routine_param_item();
                        setState(1544);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(1540);
                                    match(T_COMMA);
                                    setState(1541);
                                    create_routine_param_item();
                                }
                            }
                            setState(1546);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(1547);
                        match(T_CLOSE_P);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1549);
                        if (!(!_input.LT(1).getText().equalsIgnoreCase("IS")
                                && !_input.LT(1).getText().equalsIgnoreCase("AS")
                                && !(_input.LT(1).getText().equalsIgnoreCase("DYNAMIC")
                                        && _input.LT(2).getText().equalsIgnoreCase("RESULT"))))
                            throw new FailedPredicateException(
                                    this,
                                    "!_input.LT(1).getText().equalsIgnoreCase(\"IS\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"AS\") &&\n        !(_input.LT(1).getText().equalsIgnoreCase(\"DYNAMIC\") && _input.LT(2).getText().equalsIgnoreCase(\"RESULT\"))\n        ");
                        setState(1550);
                        create_routine_param_item();
                        setState(1555);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 161, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1551);
                                        match(T_COMMA);
                                        setState(1552);
                                        create_routine_param_item();
                                    }
                                }
                            }
                            setState(1557);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 161, _ctx);
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_routine_param_itemContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public DtypeContext dtype() {
            return getRuleContext(DtypeContext.class, 0);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public TerminalNode T_OUT() {
            return getToken(HplsqlParser.T_OUT, 0);
        }

        public TerminalNode T_INOUT() {
            return getToken(HplsqlParser.T_INOUT, 0);
        }

        public Dtype_lenContext dtype_len() {
            return getRuleContext(Dtype_lenContext.class, 0);
        }

        public List<Dtype_attrContext> dtype_attr() {
            return getRuleContexts(Dtype_attrContext.class);
        }

        public Dtype_attrContext dtype_attr(int i) {
            return getRuleContext(Dtype_attrContext.class, i);
        }

        public Dtype_defaultContext dtype_default() {
            return getRuleContext(Dtype_defaultContext.class, 0);
        }

        public Create_routine_param_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_routine_param_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_routine_param_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_routine_param_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_routine_param_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_routine_param_itemContext create_routine_param_item()
            throws RecognitionException {
        Create_routine_param_itemContext _localctx =
                new Create_routine_param_itemContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_create_routine_param_item);
        try {
            int _alt;
            setState(1602);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 171, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1565);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 163, _ctx)) {
                            case 1:
                                {
                                    setState(1560);
                                    match(T_IN);
                                }
                                break;
                            case 2:
                                {
                                    setState(1561);
                                    match(T_OUT);
                                }
                                break;
                            case 3:
                                {
                                    setState(1562);
                                    match(T_INOUT);
                                }
                                break;
                            case 4:
                                {
                                    setState(1563);
                                    match(T_IN);
                                    setState(1564);
                                    match(T_OUT);
                                }
                                break;
                        }
                        setState(1567);
                        ident();
                        setState(1568);
                        dtype();
                        setState(1570);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 164, _ctx)) {
                            case 1:
                                {
                                    setState(1569);
                                    dtype_len();
                                }
                                break;
                        }
                        setState(1575);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 165, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1572);
                                        dtype_attr();
                                    }
                                }
                            }
                            setState(1577);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 165, _ctx);
                        }
                        setState(1579);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 166, _ctx)) {
                            case 1:
                                {
                                    setState(1578);
                                    dtype_default();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1581);
                        ident();
                        setState(1587);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 167, _ctx)) {
                            case 1:
                                {
                                    setState(1582);
                                    match(T_IN);
                                }
                                break;
                            case 2:
                                {
                                    setState(1583);
                                    match(T_OUT);
                                }
                                break;
                            case 3:
                                {
                                    setState(1584);
                                    match(T_INOUT);
                                }
                                break;
                            case 4:
                                {
                                    setState(1585);
                                    match(T_IN);
                                    setState(1586);
                                    match(T_OUT);
                                }
                                break;
                        }
                        setState(1589);
                        dtype();
                        setState(1591);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 168, _ctx)) {
                            case 1:
                                {
                                    setState(1590);
                                    dtype_len();
                                }
                                break;
                        }
                        setState(1596);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 169, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1593);
                                        dtype_attr();
                                    }
                                }
                            }
                            setState(1598);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 169, _ctx);
                        }
                        setState(1600);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 170, _ctx)) {
                            case 1:
                                {
                                    setState(1599);
                                    dtype_default();
                                }
                                break;
                        }
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_routine_optionsContext extends ParserRuleContext {
        public List<Create_routine_optionContext> create_routine_option() {
            return getRuleContexts(Create_routine_optionContext.class);
        }

        public Create_routine_optionContext create_routine_option(int i) {
            return getRuleContext(Create_routine_optionContext.class, i);
        }

        public Create_routine_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_routine_options;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_routine_options(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_routine_options(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_routine_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_routine_optionsContext create_routine_options()
            throws RecognitionException {
        Create_routine_optionsContext _localctx =
                new Create_routine_optionsContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_create_routine_options);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1605);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(1604);
                                    create_routine_option();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1607);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 172, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_routine_optionContext extends ParserRuleContext {
        public TerminalNode T_LANGUAGE() {
            return getToken(HplsqlParser.T_LANGUAGE, 0);
        }

        public TerminalNode T_SQL() {
            return getToken(HplsqlParser.T_SQL, 0);
        }

        public TerminalNode T_SECURITY() {
            return getToken(HplsqlParser.T_SECURITY, 0);
        }

        public TerminalNode T_CREATOR() {
            return getToken(HplsqlParser.T_CREATOR, 0);
        }

        public TerminalNode T_DEFINER() {
            return getToken(HplsqlParser.T_DEFINER, 0);
        }

        public TerminalNode T_INVOKER() {
            return getToken(HplsqlParser.T_INVOKER, 0);
        }

        public TerminalNode T_OWNER() {
            return getToken(HplsqlParser.T_OWNER, 0);
        }

        public TerminalNode T_RESULT() {
            return getToken(HplsqlParser.T_RESULT, 0);
        }

        public TerminalNode T_SETS() {
            return getToken(HplsqlParser.T_SETS, 0);
        }

        public TerminalNode L_INT() {
            return getToken(HplsqlParser.L_INT, 0);
        }

        public TerminalNode T_DYNAMIC() {
            return getToken(HplsqlParser.T_DYNAMIC, 0);
        }

        public Create_routine_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_routine_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_routine_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_routine_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_routine_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_routine_optionContext create_routine_option() throws RecognitionException {
        Create_routine_optionContext _localctx = new Create_routine_optionContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_create_routine_option);
        int _la;
        try {
            setState(1620);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_LANGUAGE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1609);
                        match(T_LANGUAGE);
                        setState(1610);
                        match(T_SQL);
                    }
                    break;
                case T_SQL:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1611);
                        match(T_SQL);
                        setState(1612);
                        match(T_SECURITY);
                        setState(1613);
                        _la = _input.LA(1);
                        if (!(_la == T_CREATOR
                                || _la == T_DEFINER
                                || _la == T_INVOKER
                                || _la == T_OWNER)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                case T_DYNAMIC:
                case T_RESULT:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1615);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_DYNAMIC) {
                            {
                                setState(1614);
                                match(T_DYNAMIC);
                            }
                        }

                        setState(1617);
                        match(T_RESULT);
                        setState(1618);
                        match(T_SETS);
                        setState(1619);
                        match(L_INT);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Drop_stmtContext extends ParserRuleContext {
        public TerminalNode T_DROP() {
            return getToken(HplsqlParser.T_DROP, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public TerminalNode T_EXISTS() {
            return getToken(HplsqlParser.T_EXISTS, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_DATABASE() {
            return getToken(HplsqlParser.T_DATABASE, 0);
        }

        public TerminalNode T_SCHEMA() {
            return getToken(HplsqlParser.T_SCHEMA, 0);
        }

        public Drop_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_drop_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDrop_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitDrop_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDrop_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Drop_stmtContext drop_stmt() throws RecognitionException {
        Drop_stmtContext _localctx = new Drop_stmtContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_drop_stmt);
        int _la;
        try {
            setState(1636);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 177, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1622);
                        match(T_DROP);
                        setState(1623);
                        match(T_TABLE);
                        setState(1626);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 175, _ctx)) {
                            case 1:
                                {
                                    setState(1624);
                                    match(T_IF);
                                    setState(1625);
                                    match(T_EXISTS);
                                }
                                break;
                        }
                        setState(1628);
                        table_name();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1629);
                        match(T_DROP);
                        setState(1630);
                        _la = _input.LA(1);
                        if (!(_la == T_DATABASE || _la == T_SCHEMA)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(1633);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 176, _ctx)) {
                            case 1:
                                {
                                    setState(1631);
                                    match(T_IF);
                                    setState(1632);
                                    match(T_EXISTS);
                                }
                                break;
                        }
                        setState(1635);
                        expr(0);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class End_transaction_stmtContext extends ParserRuleContext {
        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_TRANSACTION() {
            return getToken(HplsqlParser.T_TRANSACTION, 0);
        }

        public End_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_end_transaction_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterEnd_transaction_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitEnd_transaction_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitEnd_transaction_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final End_transaction_stmtContext end_transaction_stmt() throws RecognitionException {
        End_transaction_stmtContext _localctx = new End_transaction_stmtContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_end_transaction_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1638);
                match(T_END);
                setState(1639);
                match(T_TRANSACTION);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Exec_stmtContext extends ParserRuleContext {
        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_EXEC() {
            return getToken(HplsqlParser.T_EXEC, 0);
        }

        public TerminalNode T_EXECUTE() {
            return getToken(HplsqlParser.T_EXECUTE, 0);
        }

        public TerminalNode T_IMMEDIATE() {
            return getToken(HplsqlParser.T_IMMEDIATE, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Expr_func_paramsContext expr_func_params() {
            return getRuleContext(Expr_func_paramsContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public List<TerminalNode> L_ID() {
            return getTokens(HplsqlParser.L_ID);
        }

        public TerminalNode L_ID(int i) {
            return getToken(HplsqlParser.L_ID, i);
        }

        public Using_clauseContext using_clause() {
            return getRuleContext(Using_clauseContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Exec_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exec_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExec_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExec_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExec_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exec_stmtContext exec_stmt() throws RecognitionException {
        Exec_stmtContext _localctx = new Exec_stmtContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_exec_stmt);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1641);
                _la = _input.LA(1);
                if (!(_la == T_EXEC || _la == T_EXECUTE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1643);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 178, _ctx)) {
                    case 1:
                        {
                            setState(1642);
                            match(T_IMMEDIATE);
                        }
                        break;
                }
                setState(1645);
                expr(0);
                setState(1651);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 179, _ctx)) {
                    case 1:
                        {
                            setState(1646);
                            match(T_OPEN_P);
                            setState(1647);
                            expr_func_params();
                            setState(1648);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 2:
                        {
                            setState(1650);
                            expr_func_params();
                        }
                        break;
                }
                setState(1662);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 181, _ctx)) {
                    case 1:
                        {
                            setState(1653);
                            match(T_INTO);
                            setState(1654);
                            match(L_ID);
                            setState(1659);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 180, _ctx);
                            while (_alt != 2
                                    && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1) {
                                    {
                                        {
                                            setState(1655);
                                            match(T_COMMA);
                                            setState(1656);
                                            match(L_ID);
                                        }
                                    }
                                }
                                setState(1661);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 180, _ctx);
                            }
                        }
                        break;
                }
                setState(1665);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 182, _ctx)) {
                    case 1:
                        {
                            setState(1664);
                            using_clause();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class If_stmtContext extends ParserRuleContext {
        public If_plsql_stmtContext if_plsql_stmt() {
            return getRuleContext(If_plsql_stmtContext.class, 0);
        }

        public If_tsql_stmtContext if_tsql_stmt() {
            return getRuleContext(If_tsql_stmtContext.class, 0);
        }

        public If_bteq_stmtContext if_bteq_stmt() {
            return getRuleContext(If_bteq_stmtContext.class, 0);
        }

        public If_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_if_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterIf_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitIf_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIf_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final If_stmtContext if_stmt() throws RecognitionException {
        If_stmtContext _localctx = new If_stmtContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_if_stmt);
        try {
            setState(1670);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 183, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1667);
                        if_plsql_stmt();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1668);
                        if_tsql_stmt();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1669);
                        if_bteq_stmt();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class If_plsql_stmtContext extends ParserRuleContext {
        public List<TerminalNode> T_IF() {
            return getTokens(HplsqlParser.T_IF);
        }

        public TerminalNode T_IF(int i) {
            return getToken(HplsqlParser.T_IF, i);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public List<Elseif_blockContext> elseif_block() {
            return getRuleContexts(Elseif_blockContext.class);
        }

        public Elseif_blockContext elseif_block(int i) {
            return getRuleContext(Elseif_blockContext.class, i);
        }

        public Else_blockContext else_block() {
            return getRuleContext(Else_blockContext.class, 0);
        }

        public If_plsql_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_if_plsql_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterIf_plsql_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitIf_plsql_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIf_plsql_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final If_plsql_stmtContext if_plsql_stmt() throws RecognitionException {
        If_plsql_stmtContext _localctx = new If_plsql_stmtContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_if_plsql_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1672);
                match(T_IF);
                setState(1673);
                bool_expr(0);
                setState(1674);
                match(T_THEN);
                setState(1675);
                block();
                setState(1679);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_ELSEIF || _la == T_ELSIF) {
                    {
                        {
                            setState(1676);
                            elseif_block();
                        }
                    }
                    setState(1681);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1683);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ELSE) {
                    {
                        setState(1682);
                        else_block();
                    }
                }

                setState(1685);
                match(T_END);
                setState(1686);
                match(T_IF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class If_tsql_stmtContext extends ParserRuleContext {
        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public List<Single_block_stmtContext> single_block_stmt() {
            return getRuleContexts(Single_block_stmtContext.class);
        }

        public Single_block_stmtContext single_block_stmt(int i) {
            return getRuleContext(Single_block_stmtContext.class, i);
        }

        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public If_tsql_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_if_tsql_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterIf_tsql_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitIf_tsql_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIf_tsql_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final If_tsql_stmtContext if_tsql_stmt() throws RecognitionException {
        If_tsql_stmtContext _localctx = new If_tsql_stmtContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_if_tsql_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1688);
                match(T_IF);
                setState(1689);
                bool_expr(0);
                setState(1690);
                single_block_stmt();
                setState(1693);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 186, _ctx)) {
                    case 1:
                        {
                            setState(1691);
                            match(T_ELSE);
                            setState(1692);
                            single_block_stmt();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class If_bteq_stmtContext extends ParserRuleContext {
        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public Single_block_stmtContext single_block_stmt() {
            return getRuleContext(Single_block_stmtContext.class, 0);
        }

        public If_bteq_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_if_bteq_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterIf_bteq_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitIf_bteq_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIf_bteq_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final If_bteq_stmtContext if_bteq_stmt() throws RecognitionException {
        If_bteq_stmtContext _localctx = new If_bteq_stmtContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_if_bteq_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1695);
                match(T__3);
                setState(1696);
                match(T_IF);
                setState(1697);
                bool_expr(0);
                setState(1698);
                match(T_THEN);
                setState(1699);
                single_block_stmt();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Elseif_blockContext extends ParserRuleContext {
        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_ELSIF() {
            return getToken(HplsqlParser.T_ELSIF, 0);
        }

        public TerminalNode T_ELSEIF() {
            return getToken(HplsqlParser.T_ELSEIF, 0);
        }

        public Elseif_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_elseif_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterElseif_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitElseif_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitElseif_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Elseif_blockContext elseif_block() throws RecognitionException {
        Elseif_blockContext _localctx = new Elseif_blockContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_elseif_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1701);
                _la = _input.LA(1);
                if (!(_la == T_ELSEIF || _la == T_ELSIF)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1702);
                bool_expr(0);
                setState(1703);
                match(T_THEN);
                setState(1704);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Else_blockContext extends ParserRuleContext {
        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public Else_blockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_else_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterElse_block(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitElse_block(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitElse_block(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Else_blockContext else_block() throws RecognitionException {
        Else_blockContext _localctx = new Else_blockContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_else_block);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1706);
                match(T_ELSE);
                setState(1707);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Include_stmtContext extends ParserRuleContext {
        public TerminalNode T_INCLUDE() {
            return getToken(HplsqlParser.T_INCLUDE, 0);
        }

        public File_nameContext file_name() {
            return getRuleContext(File_nameContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Include_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_include_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInclude_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInclude_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInclude_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Include_stmtContext include_stmt() throws RecognitionException {
        Include_stmtContext _localctx = new Include_stmtContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_include_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1709);
                match(T_INCLUDE);
                setState(1712);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 187, _ctx)) {
                    case 1:
                        {
                            setState(1710);
                            file_name();
                        }
                        break;
                    case 2:
                        {
                            setState(1711);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Insert_stmtContext extends ParserRuleContext {
        public TerminalNode T_INSERT() {
            return getToken(HplsqlParser.T_INSERT, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OVERWRITE() {
            return getToken(HplsqlParser.T_OVERWRITE, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public Insert_stmt_rowsContext insert_stmt_rows() {
            return getRuleContext(Insert_stmt_rowsContext.class, 0);
        }

        public Insert_stmt_colsContext insert_stmt_cols() {
            return getRuleContext(Insert_stmt_colsContext.class, 0);
        }

        public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insert_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInsert_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInsert_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInsert_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_stmtContext insert_stmt() throws RecognitionException {
        Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_insert_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1714);
                match(T_INSERT);
                setState(1721);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_OVERWRITE:
                        {
                            setState(1715);
                            match(T_OVERWRITE);
                            setState(1716);
                            match(T_TABLE);
                        }
                        break;
                    case T_INTO:
                        {
                            setState(1717);
                            match(T_INTO);
                            setState(1719);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 188, _ctx)) {
                                case 1:
                                    {
                                        setState(1718);
                                        match(T_TABLE);
                                    }
                                    break;
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1723);
                table_name();
                setState(1725);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 190, _ctx)) {
                    case 1:
                        {
                            setState(1724);
                            insert_stmt_cols();
                        }
                        break;
                }
                setState(1729);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_SEL:
                    case T_SELECT:
                    case T_WITH:
                    case T_OPEN_P:
                        {
                            setState(1727);
                            select_stmt();
                        }
                        break;
                    case T_VALUES:
                        {
                            setState(1728);
                            insert_stmt_rows();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Insert_stmt_colsContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Insert_stmt_colsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insert_stmt_cols;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInsert_stmt_cols(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInsert_stmt_cols(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInsert_stmt_cols(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_stmt_colsContext insert_stmt_cols() throws RecognitionException {
        Insert_stmt_colsContext _localctx = new Insert_stmt_colsContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_insert_stmt_cols);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1731);
                match(T_OPEN_P);
                setState(1732);
                ident();
                setState(1737);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1733);
                            match(T_COMMA);
                            setState(1734);
                            ident();
                        }
                    }
                    setState(1739);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1740);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Insert_stmt_rowsContext extends ParserRuleContext {
        public TerminalNode T_VALUES() {
            return getToken(HplsqlParser.T_VALUES, 0);
        }

        public List<Insert_stmt_rowContext> insert_stmt_row() {
            return getRuleContexts(Insert_stmt_rowContext.class);
        }

        public Insert_stmt_rowContext insert_stmt_row(int i) {
            return getRuleContext(Insert_stmt_rowContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Insert_stmt_rowsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insert_stmt_rows;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInsert_stmt_rows(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInsert_stmt_rows(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInsert_stmt_rows(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_stmt_rowsContext insert_stmt_rows() throws RecognitionException {
        Insert_stmt_rowsContext _localctx = new Insert_stmt_rowsContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_insert_stmt_rows);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1742);
                match(T_VALUES);
                setState(1743);
                insert_stmt_row();
                setState(1748);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 193, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1744);
                                match(T_COMMA);
                                setState(1745);
                                insert_stmt_row();
                            }
                        }
                    }
                    setState(1750);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 193, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Insert_stmt_rowContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Insert_stmt_rowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insert_stmt_row;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInsert_stmt_row(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInsert_stmt_row(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInsert_stmt_row(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_stmt_rowContext insert_stmt_row() throws RecognitionException {
        Insert_stmt_rowContext _localctx = new Insert_stmt_rowContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_insert_stmt_row);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1751);
                match(T_OPEN_P);
                setState(1752);
                expr(0);
                setState(1757);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1753);
                            match(T_COMMA);
                            setState(1754);
                            expr(0);
                        }
                    }
                    setState(1759);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1760);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Insert_directory_stmtContext extends ParserRuleContext {
        public TerminalNode T_INSERT() {
            return getToken(HplsqlParser.T_INSERT, 0);
        }

        public TerminalNode T_OVERWRITE() {
            return getToken(HplsqlParser.T_OVERWRITE, 0);
        }

        public TerminalNode T_DIRECTORY() {
            return getToken(HplsqlParser.T_DIRECTORY, 0);
        }

        public Expr_fileContext expr_file() {
            return getRuleContext(Expr_fileContext.class, 0);
        }

        public Expr_selectContext expr_select() {
            return getRuleContext(Expr_selectContext.class, 0);
        }

        public TerminalNode T_LOCAL() {
            return getToken(HplsqlParser.T_LOCAL, 0);
        }

        public Insert_directory_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_insert_directory_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInsert_directory_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInsert_directory_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInsert_directory_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Insert_directory_stmtContext insert_directory_stmt() throws RecognitionException {
        Insert_directory_stmtContext _localctx = new Insert_directory_stmtContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_insert_directory_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1762);
                match(T_INSERT);
                setState(1763);
                match(T_OVERWRITE);
                setState(1765);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_LOCAL) {
                    {
                        setState(1764);
                        match(T_LOCAL);
                    }
                }

                setState(1767);
                match(T_DIRECTORY);
                setState(1768);
                expr_file();
                setState(1769);
                expr_select();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Exit_stmtContext extends ParserRuleContext {
        public TerminalNode T_EXIT() {
            return getToken(HplsqlParser.T_EXIT, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_WHEN() {
            return getToken(HplsqlParser.T_WHEN, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public Exit_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_exit_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExit_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExit_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExit_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Exit_stmtContext exit_stmt() throws RecognitionException {
        Exit_stmtContext _localctx = new Exit_stmtContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_exit_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1771);
                match(T_EXIT);
                setState(1773);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 196, _ctx)) {
                    case 1:
                        {
                            setState(1772);
                            match(L_ID);
                        }
                        break;
                }
                setState(1777);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 197, _ctx)) {
                    case 1:
                        {
                            setState(1775);
                            match(T_WHEN);
                            setState(1776);
                            bool_expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Get_diag_stmtContext extends ParserRuleContext {
        public TerminalNode T_GET() {
            return getToken(HplsqlParser.T_GET, 0);
        }

        public TerminalNode T_DIAGNOSTICS() {
            return getToken(HplsqlParser.T_DIAGNOSTICS, 0);
        }

        public Get_diag_stmt_itemContext get_diag_stmt_item() {
            return getRuleContext(Get_diag_stmt_itemContext.class, 0);
        }

        public Get_diag_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_get_diag_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGet_diag_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGet_diag_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitGet_diag_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Get_diag_stmtContext get_diag_stmt() throws RecognitionException {
        Get_diag_stmtContext _localctx = new Get_diag_stmtContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_get_diag_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1779);
                match(T_GET);
                setState(1780);
                match(T_DIAGNOSTICS);
                setState(1781);
                get_diag_stmt_item();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Get_diag_stmt_itemContext extends ParserRuleContext {
        public Get_diag_stmt_exception_itemContext get_diag_stmt_exception_item() {
            return getRuleContext(Get_diag_stmt_exception_itemContext.class, 0);
        }

        public Get_diag_stmt_rowcount_itemContext get_diag_stmt_rowcount_item() {
            return getRuleContext(Get_diag_stmt_rowcount_itemContext.class, 0);
        }

        public Get_diag_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_get_diag_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGet_diag_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGet_diag_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitGet_diag_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Get_diag_stmt_itemContext get_diag_stmt_item() throws RecognitionException {
        Get_diag_stmt_itemContext _localctx = new Get_diag_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_get_diag_stmt_item);
        try {
            setState(1785);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 198, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1783);
                        get_diag_stmt_exception_item();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1784);
                        get_diag_stmt_rowcount_item();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Get_diag_stmt_exception_itemContext extends ParserRuleContext {
        public TerminalNode T_EXCEPTION() {
            return getToken(HplsqlParser.T_EXCEPTION, 0);
        }

        public TerminalNode L_INT() {
            return getToken(HplsqlParser.L_INT, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_MESSAGE_TEXT() {
            return getToken(HplsqlParser.T_MESSAGE_TEXT, 0);
        }

        public Get_diag_stmt_exception_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_get_diag_stmt_exception_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGet_diag_stmt_exception_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGet_diag_stmt_exception_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitGet_diag_stmt_exception_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Get_diag_stmt_exception_itemContext get_diag_stmt_exception_item()
            throws RecognitionException {
        Get_diag_stmt_exception_itemContext _localctx =
                new Get_diag_stmt_exception_itemContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_get_diag_stmt_exception_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1787);
                match(T_EXCEPTION);
                setState(1788);
                match(L_INT);
                setState(1789);
                ident();
                setState(1790);
                match(T_EQUAL);
                setState(1791);
                match(T_MESSAGE_TEXT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Get_diag_stmt_rowcount_itemContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_ROW_COUNT() {
            return getToken(HplsqlParser.T_ROW_COUNT, 0);
        }

        public Get_diag_stmt_rowcount_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_get_diag_stmt_rowcount_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGet_diag_stmt_rowcount_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGet_diag_stmt_rowcount_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitGet_diag_stmt_rowcount_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Get_diag_stmt_rowcount_itemContext get_diag_stmt_rowcount_item()
            throws RecognitionException {
        Get_diag_stmt_rowcount_itemContext _localctx =
                new Get_diag_stmt_rowcount_itemContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_get_diag_stmt_rowcount_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1793);
                ident();
                setState(1794);
                match(T_EQUAL);
                setState(1795);
                match(T_ROW_COUNT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Grant_stmtContext extends ParserRuleContext {
        public TerminalNode T_GRANT() {
            return getToken(HplsqlParser.T_GRANT, 0);
        }

        public List<Grant_stmt_itemContext> grant_stmt_item() {
            return getRuleContexts(Grant_stmt_itemContext.class);
        }

        public Grant_stmt_itemContext grant_stmt_item(int i) {
            return getRuleContext(Grant_stmt_itemContext.class, i);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public TerminalNode T_ROLE() {
            return getToken(HplsqlParser.T_ROLE, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Grant_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_grant_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGrant_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGrant_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitGrant_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Grant_stmtContext grant_stmt() throws RecognitionException {
        Grant_stmtContext _localctx = new Grant_stmtContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_grant_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1797);
                match(T_GRANT);
                setState(1798);
                grant_stmt_item();
                setState(1803);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1799);
                            match(T_COMMA);
                            setState(1800);
                            grant_stmt_item();
                        }
                    }
                    setState(1805);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1806);
                match(T_TO);
                setState(1807);
                match(T_ROLE);
                setState(1808);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Grant_stmt_itemContext extends ParserRuleContext {
        public TerminalNode T_EXECUTE() {
            return getToken(HplsqlParser.T_EXECUTE, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Grant_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_grant_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGrant_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGrant_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitGrant_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Grant_stmt_itemContext grant_stmt_item() throws RecognitionException {
        Grant_stmt_itemContext _localctx = new Grant_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_grant_stmt_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1810);
                match(T_EXECUTE);
                setState(1811);
                match(T_ON);
                setState(1812);
                match(T_PROCEDURE);
                setState(1813);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Leave_stmtContext extends ParserRuleContext {
        public TerminalNode T_LEAVE() {
            return getToken(HplsqlParser.T_LEAVE, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public Leave_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_leave_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterLeave_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitLeave_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitLeave_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Leave_stmtContext leave_stmt() throws RecognitionException {
        Leave_stmtContext _localctx = new Leave_stmtContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_leave_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1815);
                match(T_LEAVE);
                setState(1817);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 200, _ctx)) {
                    case 1:
                        {
                            setState(1816);
                            match(L_ID);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Map_object_stmtContext extends ParserRuleContext {
        public TerminalNode T_MAP() {
            return getToken(HplsqlParser.T_MAP, 0);
        }

        public TerminalNode T_OBJECT() {
            return getToken(HplsqlParser.T_OBJECT, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public TerminalNode T_AT() {
            return getToken(HplsqlParser.T_AT, 0);
        }

        public Map_object_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_map_object_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterMap_object_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitMap_object_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitMap_object_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Map_object_stmtContext map_object_stmt() throws RecognitionException {
        Map_object_stmtContext _localctx = new Map_object_stmtContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_map_object_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1819);
                match(T_MAP);
                setState(1820);
                match(T_OBJECT);
                setState(1821);
                expr(0);
                setState(1824);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 201, _ctx)) {
                    case 1:
                        {
                            setState(1822);
                            match(T_TO);
                            setState(1823);
                            expr(0);
                        }
                        break;
                }
                setState(1828);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 202, _ctx)) {
                    case 1:
                        {
                            setState(1826);
                            match(T_AT);
                            setState(1827);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Open_stmtContext extends ParserRuleContext {
        public TerminalNode T_OPEN() {
            return getToken(HplsqlParser.T_OPEN, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Open_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_open_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterOpen_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitOpen_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitOpen_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Open_stmtContext open_stmt() throws RecognitionException {
        Open_stmtContext _localctx = new Open_stmtContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_open_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1830);
                match(T_OPEN);
                setState(1831);
                match(L_ID);
                setState(1837);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 204, _ctx)) {
                    case 1:
                        {
                            setState(1832);
                            match(T_FOR);
                            setState(1835);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 203, _ctx)) {
                                case 1:
                                    {
                                        setState(1833);
                                        select_stmt();
                                    }
                                    break;
                                case 2:
                                    {
                                        setState(1834);
                                        expr(0);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Fetch_stmtContext extends ParserRuleContext {
        public TerminalNode T_FETCH() {
            return getToken(HplsqlParser.T_FETCH, 0);
        }

        public List<TerminalNode> L_ID() {
            return getTokens(HplsqlParser.L_ID);
        }

        public TerminalNode L_ID(int i) {
            return getToken(HplsqlParser.L_ID, i);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Fetch_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fetch_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFetch_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFetch_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFetch_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Fetch_stmtContext fetch_stmt() throws RecognitionException {
        Fetch_stmtContext _localctx = new Fetch_stmtContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_fetch_stmt);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1839);
                match(T_FETCH);
                setState(1841);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_FROM) {
                    {
                        setState(1840);
                        match(T_FROM);
                    }
                }

                setState(1843);
                match(L_ID);
                setState(1844);
                match(T_INTO);
                setState(1845);
                match(L_ID);
                setState(1850);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 206, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1846);
                                match(T_COMMA);
                                setState(1847);
                                match(L_ID);
                            }
                        }
                    }
                    setState(1852);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 206, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Collect_stats_stmtContext extends ParserRuleContext {
        public TerminalNode T_COLLECT() {
            return getToken(HplsqlParser.T_COLLECT, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_STATISTICS() {
            return getToken(HplsqlParser.T_STATISTICS, 0);
        }

        public TerminalNode T_STATS() {
            return getToken(HplsqlParser.T_STATS, 0);
        }

        public Collect_stats_clauseContext collect_stats_clause() {
            return getRuleContext(Collect_stats_clauseContext.class, 0);
        }

        public Collect_stats_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_collect_stats_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCollect_stats_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCollect_stats_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCollect_stats_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collect_stats_stmtContext collect_stats_stmt() throws RecognitionException {
        Collect_stats_stmtContext _localctx = new Collect_stats_stmtContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_collect_stats_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1853);
                match(T_COLLECT);
                setState(1854);
                _la = _input.LA(1);
                if (!(_la == T_STATS || _la == T_STATISTICS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1855);
                match(T_ON);
                setState(1856);
                table_name();
                setState(1858);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 207, _ctx)) {
                    case 1:
                        {
                            setState(1857);
                            collect_stats_clause();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Collect_stats_clauseContext extends ParserRuleContext {
        public TerminalNode T_COLUMN() {
            return getToken(HplsqlParser.T_COLUMN, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Collect_stats_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_collect_stats_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCollect_stats_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCollect_stats_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCollect_stats_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Collect_stats_clauseContext collect_stats_clause() throws RecognitionException {
        Collect_stats_clauseContext _localctx = new Collect_stats_clauseContext(_ctx, getState());
        enterRule(_localctx, 210, RULE_collect_stats_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1860);
                match(T_COLUMN);
                setState(1861);
                match(T_OPEN_P);
                setState(1862);
                ident();
                setState(1867);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1863);
                            match(T_COMMA);
                            setState(1864);
                            ident();
                        }
                    }
                    setState(1869);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1870);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Close_stmtContext extends ParserRuleContext {
        public TerminalNode T_CLOSE() {
            return getToken(HplsqlParser.T_CLOSE, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public Close_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_close_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterClose_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitClose_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitClose_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Close_stmtContext close_stmt() throws RecognitionException {
        Close_stmtContext _localctx = new Close_stmtContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_close_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1872);
                match(T_CLOSE);
                setState(1873);
                match(L_ID);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cmp_stmtContext extends ParserRuleContext {
        public TerminalNode T_CMP() {
            return getToken(HplsqlParser.T_CMP, 0);
        }

        public List<Cmp_sourceContext> cmp_source() {
            return getRuleContexts(Cmp_sourceContext.class);
        }

        public Cmp_sourceContext cmp_source(int i) {
            return getRuleContext(Cmp_sourceContext.class, i);
        }

        public TerminalNode T_COMMA() {
            return getToken(HplsqlParser.T_COMMA, 0);
        }

        public TerminalNode T_ROW_COUNT() {
            return getToken(HplsqlParser.T_ROW_COUNT, 0);
        }

        public TerminalNode T_SUM() {
            return getToken(HplsqlParser.T_SUM, 0);
        }

        public Cmp_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cmp_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterCmp_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitCmp_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCmp_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cmp_stmtContext cmp_stmt() throws RecognitionException {
        Cmp_stmtContext _localctx = new Cmp_stmtContext(_ctx, getState());
        enterRule(_localctx, 214, RULE_cmp_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1875);
                match(T_CMP);
                setState(1876);
                _la = _input.LA(1);
                if (!(_la == T_ROW_COUNT || _la == T_SUM)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(1877);
                cmp_source();
                setState(1878);
                match(T_COMMA);
                setState(1879);
                cmp_source();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cmp_sourceContext extends ParserRuleContext {
        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_AT() {
            return getToken(HplsqlParser.T_AT, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class, 0);
        }

        public Cmp_sourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cmp_source;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCmp_source(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCmp_source(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCmp_source(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cmp_sourceContext cmp_source() throws RecognitionException {
        Cmp_sourceContext _localctx = new Cmp_sourceContext(_ctx, getState());
        enterRule(_localctx, 216, RULE_cmp_source);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1889);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                    case L_ID:
                        {
                            setState(1881);
                            table_name();
                            setState(1883);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 209, _ctx)) {
                                case 1:
                                    {
                                        setState(1882);
                                        where_clause();
                                    }
                                    break;
                            }
                        }
                        break;
                    case T_OPEN_P:
                        {
                            setState(1885);
                            match(T_OPEN_P);
                            setState(1886);
                            select_stmt();
                            setState(1887);
                            match(T_CLOSE_P);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1893);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 211, _ctx)) {
                    case 1:
                        {
                            setState(1891);
                            match(T_AT);
                            setState(1892);
                            ident();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_from_local_stmtContext extends ParserRuleContext {
        public TerminalNode T_COPY() {
            return getToken(HplsqlParser.T_COPY, 0);
        }

        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public TerminalNode T_LOCAL() {
            return getToken(HplsqlParser.T_LOCAL, 0);
        }

        public List<Copy_sourceContext> copy_source() {
            return getRuleContexts(Copy_sourceContext.class);
        }

        public Copy_sourceContext copy_source(int i) {
            return getRuleContext(Copy_sourceContext.class, i);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public Copy_targetContext copy_target() {
            return getRuleContext(Copy_targetContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public List<Copy_file_optionContext> copy_file_option() {
            return getRuleContexts(Copy_file_optionContext.class);
        }

        public Copy_file_optionContext copy_file_option(int i) {
            return getRuleContext(Copy_file_optionContext.class, i);
        }

        public Copy_from_local_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_from_local_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_from_local_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCopy_from_local_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_from_local_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_from_local_stmtContext copy_from_local_stmt() throws RecognitionException {
        Copy_from_local_stmtContext _localctx = new Copy_from_local_stmtContext(_ctx, getState());
        enterRule(_localctx, 218, RULE_copy_from_local_stmt);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1895);
                match(T_COPY);
                setState(1896);
                match(T_FROM);
                setState(1897);
                match(T_LOCAL);
                setState(1898);
                copy_source();
                setState(1903);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1899);
                            match(T_COMMA);
                            setState(1900);
                            copy_source();
                        }
                    }
                    setState(1905);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1906);
                match(T_TO);
                setState(1907);
                copy_target();
                setState(1911);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 213, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1908);
                                copy_file_option();
                            }
                        }
                    }
                    setState(1913);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 213, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_stmtContext extends ParserRuleContext {
        public TerminalNode T_COPY() {
            return getToken(HplsqlParser.T_COPY, 0);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public Copy_targetContext copy_target() {
            return getRuleContext(Copy_targetContext.class, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_HDFS() {
            return getToken(HplsqlParser.T_HDFS, 0);
        }

        public List<Copy_optionContext> copy_option() {
            return getRuleContexts(Copy_optionContext.class);
        }

        public Copy_optionContext copy_option(int i) {
            return getRuleContext(Copy_optionContext.class, i);
        }

        public Copy_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitCopy_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_stmtContext copy_stmt() throws RecognitionException {
        Copy_stmtContext _localctx = new Copy_stmtContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_copy_stmt);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1914);
                match(T_COPY);
                setState(1920);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                    case L_ID:
                        {
                            setState(1915);
                            table_name();
                        }
                        break;
                    case T_OPEN_P:
                        {
                            setState(1916);
                            match(T_OPEN_P);
                            setState(1917);
                            select_stmt();
                            setState(1918);
                            match(T_CLOSE_P);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1922);
                match(T_TO);
                setState(1924);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 215, _ctx)) {
                    case 1:
                        {
                            setState(1923);
                            match(T_HDFS);
                        }
                        break;
                }
                setState(1926);
                copy_target();
                setState(1930);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 216, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1927);
                                copy_option();
                            }
                        }
                    }
                    setState(1932);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 216, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_sourceContext extends ParserRuleContext {
        public File_nameContext file_name() {
            return getRuleContext(File_nameContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Copy_sourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_source;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_source(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCopy_source(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_source(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_sourceContext copy_source() throws RecognitionException {
        Copy_sourceContext _localctx = new Copy_sourceContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_copy_source);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1935);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 217, _ctx)) {
                    case 1:
                        {
                            setState(1933);
                            file_name();
                        }
                        break;
                    case 2:
                        {
                            setState(1934);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_targetContext extends ParserRuleContext {
        public File_nameContext file_name() {
            return getRuleContext(File_nameContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Copy_targetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_target;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_target(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCopy_target(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_target(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_targetContext copy_target() throws RecognitionException {
        Copy_targetContext _localctx = new Copy_targetContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_copy_target);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1939);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 218, _ctx)) {
                    case 1:
                        {
                            setState(1937);
                            file_name();
                        }
                        break;
                    case 2:
                        {
                            setState(1938);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_optionContext extends ParserRuleContext {
        public TerminalNode T_AT() {
            return getToken(HplsqlParser.T_AT, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_BATCHSIZE() {
            return getToken(HplsqlParser.T_BATCHSIZE, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_DELIMITER() {
            return getToken(HplsqlParser.T_DELIMITER, 0);
        }

        public TerminalNode T_SQLINSERT() {
            return getToken(HplsqlParser.T_SQLINSERT, 0);
        }

        public Copy_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCopy_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_optionContext copy_option() throws RecognitionException {
        Copy_optionContext _localctx = new Copy_optionContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_copy_option);
        try {
            setState(1949);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_AT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(1941);
                        match(T_AT);
                        setState(1942);
                        ident();
                    }
                    break;
                case T_BATCHSIZE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(1943);
                        match(T_BATCHSIZE);
                        setState(1944);
                        expr(0);
                    }
                    break;
                case T_DELIMITER:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(1945);
                        match(T_DELIMITER);
                        setState(1946);
                        expr(0);
                    }
                    break;
                case T_SQLINSERT:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(1947);
                        match(T_SQLINSERT);
                        setState(1948);
                        ident();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Copy_file_optionContext extends ParserRuleContext {
        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public TerminalNode T_IGNORE() {
            return getToken(HplsqlParser.T_IGNORE, 0);
        }

        public TerminalNode T_OVERWRITE() {
            return getToken(HplsqlParser.T_OVERWRITE, 0);
        }

        public Copy_file_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_copy_file_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCopy_file_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCopy_file_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCopy_file_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Copy_file_optionContext copy_file_option() throws RecognitionException {
        Copy_file_optionContext _localctx = new Copy_file_optionContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_copy_file_option);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1951);
                _la = _input.LA(1);
                if (!(_la == T_DELETE || _la == T_IGNORE || _la == T_OVERWRITE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Commit_stmtContext extends ParserRuleContext {
        public TerminalNode T_COMMIT() {
            return getToken(HplsqlParser.T_COMMIT, 0);
        }

        public TerminalNode T_WORK() {
            return getToken(HplsqlParser.T_WORK, 0);
        }

        public Commit_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_commit_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCommit_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCommit_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCommit_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Commit_stmtContext commit_stmt() throws RecognitionException {
        Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_commit_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1953);
                match(T_COMMIT);
                setState(1955);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 220, _ctx)) {
                    case 1:
                        {
                            setState(1954);
                            match(T_WORK);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_index_stmtContext extends ParserRuleContext {
        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_INDEX() {
            return getToken(HplsqlParser.T_INDEX, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<Create_index_colContext> create_index_col() {
            return getRuleContexts(Create_index_colContext.class);
        }

        public Create_index_colContext create_index_col(int i) {
            return getRuleContext(Create_index_colContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_UNIQUE() {
            return getToken(HplsqlParser.T_UNIQUE, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Create_index_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_index_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_index_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_index_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_index_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_index_stmtContext create_index_stmt() throws RecognitionException {
        Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_create_index_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1957);
                match(T_CREATE);
                setState(1959);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_UNIQUE) {
                    {
                        setState(1958);
                        match(T_UNIQUE);
                    }
                }

                setState(1961);
                match(T_INDEX);
                setState(1962);
                ident();
                setState(1963);
                match(T_ON);
                setState(1964);
                table_name();
                setState(1965);
                match(T_OPEN_P);
                setState(1966);
                create_index_col();
                setState(1971);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1967);
                            match(T_COMMA);
                            setState(1968);
                            create_index_col();
                        }
                    }
                    setState(1973);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1974);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Create_index_colContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_ASC() {
            return getToken(HplsqlParser.T_ASC, 0);
        }

        public TerminalNode T_DESC() {
            return getToken(HplsqlParser.T_DESC, 0);
        }

        public Create_index_colContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_create_index_col;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCreate_index_col(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCreate_index_col(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCreate_index_col(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Create_index_colContext create_index_col() throws RecognitionException {
        Create_index_colContext _localctx = new Create_index_colContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_create_index_col);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1976);
                ident();
                setState(1978);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ASC || _la == T_DESC) {
                    {
                        setState(1977);
                        _la = _input.LA(1);
                        if (!(_la == T_ASC || _la == T_DESC)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Index_storage_clauseContext extends ParserRuleContext {
        public Index_mssql_storage_clauseContext index_mssql_storage_clause() {
            return getRuleContext(Index_mssql_storage_clauseContext.class, 0);
        }

        public Index_storage_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_index_storage_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterIndex_storage_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitIndex_storage_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIndex_storage_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Index_storage_clauseContext index_storage_clause() throws RecognitionException {
        Index_storage_clauseContext _localctx = new Index_storage_clauseContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_index_storage_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1980);
                index_mssql_storage_clause();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Index_mssql_storage_clauseContext extends ParserRuleContext {
        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_EQUAL() {
            return getTokens(HplsqlParser.T_EQUAL);
        }

        public TerminalNode T_EQUAL(int i) {
            return getToken(HplsqlParser.T_EQUAL, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public List<Create_table_options_mssql_itemContext> create_table_options_mssql_item() {
            return getRuleContexts(Create_table_options_mssql_itemContext.class);
        }

        public Create_table_options_mssql_itemContext create_table_options_mssql_item(int i) {
            return getRuleContext(Create_table_options_mssql_itemContext.class, i);
        }

        public Index_mssql_storage_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_index_mssql_storage_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterIndex_mssql_storage_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitIndex_mssql_storage_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIndex_mssql_storage_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Index_mssql_storage_clauseContext index_mssql_storage_clause()
            throws RecognitionException {
        Index_mssql_storage_clauseContext _localctx =
                new Index_mssql_storage_clauseContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_index_mssql_storage_clause);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1982);
                match(T_WITH);
                setState(1983);
                match(T_OPEN_P);
                setState(1984);
                ident();
                setState(1985);
                match(T_EQUAL);
                setState(1986);
                ident();
                setState(1994);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(1987);
                            match(T_COMMA);
                            setState(1988);
                            ident();
                            setState(1989);
                            match(T_EQUAL);
                            setState(1990);
                            ident();
                        }
                    }
                    setState(1996);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1997);
                match(T_CLOSE_P);
                setState(2001);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 225, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1998);
                                create_table_options_mssql_item();
                            }
                        }
                    }
                    setState(2003);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 225, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Print_stmtContext extends ParserRuleContext {
        public TerminalNode T_PRINT() {
            return getToken(HplsqlParser.T_PRINT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Print_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_print_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterPrint_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitPrint_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitPrint_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Print_stmtContext print_stmt() throws RecognitionException {
        Print_stmtContext _localctx = new Print_stmtContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_print_stmt);
        try {
            setState(2011);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 226, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2004);
                        match(T_PRINT);
                        setState(2005);
                        expr(0);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2006);
                        match(T_PRINT);
                        setState(2007);
                        match(T_OPEN_P);
                        setState(2008);
                        expr(0);
                        setState(2009);
                        match(T_CLOSE_P);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Quit_stmtContext extends ParserRuleContext {
        public TerminalNode T_QUIT() {
            return getToken(HplsqlParser.T_QUIT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Quit_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_quit_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterQuit_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitQuit_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitQuit_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Quit_stmtContext quit_stmt() throws RecognitionException {
        Quit_stmtContext _localctx = new Quit_stmtContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_quit_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2014);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T__3) {
                    {
                        setState(2013);
                        match(T__3);
                    }
                }

                setState(2016);
                match(T_QUIT);
                setState(2018);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 228, _ctx)) {
                    case 1:
                        {
                            setState(2017);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Raise_stmtContext extends ParserRuleContext {
        public TerminalNode T_RAISE() {
            return getToken(HplsqlParser.T_RAISE, 0);
        }

        public Raise_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_raise_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterRaise_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitRaise_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitRaise_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Raise_stmtContext raise_stmt() throws RecognitionException {
        Raise_stmtContext _localctx = new Raise_stmtContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_raise_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2020);
                match(T_RAISE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Resignal_stmtContext extends ParserRuleContext {
        public TerminalNode T_RESIGNAL() {
            return getToken(HplsqlParser.T_RESIGNAL, 0);
        }

        public TerminalNode T_SQLSTATE() {
            return getToken(HplsqlParser.T_SQLSTATE, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_VALUE() {
            return getToken(HplsqlParser.T_VALUE, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public TerminalNode T_MESSAGE_TEXT() {
            return getToken(HplsqlParser.T_MESSAGE_TEXT, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public Resignal_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resignal_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterResignal_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitResignal_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitResignal_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Resignal_stmtContext resignal_stmt() throws RecognitionException {
        Resignal_stmtContext _localctx = new Resignal_stmtContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_resignal_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2022);
                match(T_RESIGNAL);
                setState(2034);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 231, _ctx)) {
                    case 1:
                        {
                            setState(2023);
                            match(T_SQLSTATE);
                            setState(2025);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 229, _ctx)) {
                                case 1:
                                    {
                                        setState(2024);
                                        match(T_VALUE);
                                    }
                                    break;
                            }
                            setState(2027);
                            expr(0);
                            setState(2032);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 230, _ctx)) {
                                case 1:
                                    {
                                        setState(2028);
                                        match(T_SET);
                                        setState(2029);
                                        match(T_MESSAGE_TEXT);
                                        setState(2030);
                                        match(T_EQUAL);
                                        setState(2031);
                                        expr(0);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Return_stmtContext extends ParserRuleContext {
        public TerminalNode T_RETURN() {
            return getToken(HplsqlParser.T_RETURN, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Return_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_return_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterReturn_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitReturn_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitReturn_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Return_stmtContext return_stmt() throws RecognitionException {
        Return_stmtContext _localctx = new Return_stmtContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_return_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2036);
                match(T_RETURN);
                setState(2038);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 232, _ctx)) {
                    case 1:
                        {
                            setState(2037);
                            expr(0);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Rollback_stmtContext extends ParserRuleContext {
        public TerminalNode T_ROLLBACK() {
            return getToken(HplsqlParser.T_ROLLBACK, 0);
        }

        public TerminalNode T_WORK() {
            return getToken(HplsqlParser.T_WORK, 0);
        }

        public Rollback_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_rollback_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterRollback_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitRollback_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitRollback_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Rollback_stmtContext rollback_stmt() throws RecognitionException {
        Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_rollback_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2040);
                match(T_ROLLBACK);
                setState(2042);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 233, _ctx)) {
                    case 1:
                        {
                            setState(2041);
                            match(T_WORK);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Set_session_optionContext extends ParserRuleContext {
        public Set_current_schema_optionContext set_current_schema_option() {
            return getRuleContext(Set_current_schema_optionContext.class, 0);
        }

        public Set_mssql_session_optionContext set_mssql_session_option() {
            return getRuleContext(Set_mssql_session_optionContext.class, 0);
        }

        public Set_teradata_session_optionContext set_teradata_session_option() {
            return getRuleContext(Set_teradata_session_optionContext.class, 0);
        }

        public Set_session_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_set_session_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSet_session_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSet_session_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSet_session_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_session_optionContext set_session_option() throws RecognitionException {
        Set_session_optionContext _localctx = new Set_session_optionContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_set_session_option);
        try {
            setState(2047);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_CURRENT:
                case T_CURRENT_SCHEMA:
                case T_SCHEMA:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2044);
                        set_current_schema_option();
                    }
                    break;
                case T_ANSI_NULLS:
                case T_ANSI_PADDING:
                case T_NOCOUNT:
                case T_QUOTED_IDENTIFIER:
                case T_XACT_ABORT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2045);
                        set_mssql_session_option();
                    }
                    break;
                case T_QUERY_BAND:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2046);
                        set_teradata_session_option();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Set_current_schema_optionContext extends ParserRuleContext {
        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_CURRENT_SCHEMA() {
            return getToken(HplsqlParser.T_CURRENT_SCHEMA, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_SCHEMA() {
            return getToken(HplsqlParser.T_SCHEMA, 0);
        }

        public TerminalNode T_CURRENT() {
            return getToken(HplsqlParser.T_CURRENT, 0);
        }

        public Set_current_schema_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_set_current_schema_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSet_current_schema_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSet_current_schema_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSet_current_schema_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_current_schema_optionContext set_current_schema_option()
            throws RecognitionException {
        Set_current_schema_optionContext _localctx =
                new Set_current_schema_optionContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_set_current_schema_option);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2054);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_CURRENT:
                    case T_SCHEMA:
                        {
                            {
                                setState(2050);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if (_la == T_CURRENT) {
                                    {
                                        setState(2049);
                                        match(T_CURRENT);
                                    }
                                }

                                setState(2052);
                                match(T_SCHEMA);
                            }
                        }
                        break;
                    case T_CURRENT_SCHEMA:
                        {
                            setState(2053);
                            match(T_CURRENT_SCHEMA);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2057);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_EQUAL) {
                    {
                        setState(2056);
                        match(T_EQUAL);
                    }
                }

                setState(2059);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Set_mssql_session_optionContext extends ParserRuleContext {
        public TerminalNode T_ANSI_NULLS() {
            return getToken(HplsqlParser.T_ANSI_NULLS, 0);
        }

        public TerminalNode T_ANSI_PADDING() {
            return getToken(HplsqlParser.T_ANSI_PADDING, 0);
        }

        public TerminalNode T_NOCOUNT() {
            return getToken(HplsqlParser.T_NOCOUNT, 0);
        }

        public TerminalNode T_QUOTED_IDENTIFIER() {
            return getToken(HplsqlParser.T_QUOTED_IDENTIFIER, 0);
        }

        public TerminalNode T_XACT_ABORT() {
            return getToken(HplsqlParser.T_XACT_ABORT, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_OFF() {
            return getToken(HplsqlParser.T_OFF, 0);
        }

        public Set_mssql_session_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_set_mssql_session_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSet_mssql_session_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSet_mssql_session_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSet_mssql_session_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_mssql_session_optionContext set_mssql_session_option()
            throws RecognitionException {
        Set_mssql_session_optionContext _localctx =
                new Set_mssql_session_optionContext(_ctx, getState());
        enterRule(_localctx, 256, RULE_set_mssql_session_option);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2061);
                _la = _input.LA(1);
                if (!(_la == T_ANSI_NULLS
                        || _la == T_ANSI_PADDING
                        || _la == T_NOCOUNT
                        || _la == T_QUOTED_IDENTIFIER
                        || _la == T_XACT_ABORT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2062);
                _la = _input.LA(1);
                if (!(_la == T_OFF || _la == T_ON)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Set_teradata_session_optionContext extends ParserRuleContext {
        public TerminalNode T_QUERY_BAND() {
            return getToken(HplsqlParser.T_QUERY_BAND, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode T_TRANSACTION() {
            return getToken(HplsqlParser.T_TRANSACTION, 0);
        }

        public TerminalNode T_SESSION() {
            return getToken(HplsqlParser.T_SESSION, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_NONE() {
            return getToken(HplsqlParser.T_NONE, 0);
        }

        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public Set_teradata_session_optionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_set_teradata_session_option;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSet_teradata_session_option(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSet_teradata_session_option(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitSet_teradata_session_option(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Set_teradata_session_optionContext set_teradata_session_option()
            throws RecognitionException {
        Set_teradata_session_optionContext _localctx =
                new Set_teradata_session_optionContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_set_teradata_session_option);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2064);
                match(T_QUERY_BAND);
                setState(2065);
                match(T_EQUAL);
                setState(2068);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 238, _ctx)) {
                    case 1:
                        {
                            setState(2066);
                            expr(0);
                        }
                        break;
                    case 2:
                        {
                            setState(2067);
                            match(T_NONE);
                        }
                        break;
                }
                setState(2071);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_UPDATE) {
                    {
                        setState(2070);
                        match(T_UPDATE);
                    }
                }

                setState(2073);
                match(T_FOR);
                setState(2074);
                _la = _input.LA(1);
                if (!(_la == T_SESSION || _la == T_TRANSACTION)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Signal_stmtContext extends ParserRuleContext {
        public TerminalNode T_SIGNAL() {
            return getToken(HplsqlParser.T_SIGNAL, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Signal_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_signal_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSignal_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSignal_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSignal_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Signal_stmtContext signal_stmt() throws RecognitionException {
        Signal_stmtContext _localctx = new Signal_stmtContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_signal_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2076);
                match(T_SIGNAL);
                setState(2077);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Truncate_stmtContext extends ParserRuleContext {
        public TerminalNode T_TRUNCATE() {
            return getToken(HplsqlParser.T_TRUNCATE, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_truncate_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterTruncate_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitTruncate_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitTruncate_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
        Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_truncate_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2079);
                match(T_TRUNCATE);
                setState(2081);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 240, _ctx)) {
                    case 1:
                        {
                            setState(2080);
                            match(T_TABLE);
                        }
                        break;
                }
                setState(2083);
                table_name();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Use_stmtContext extends ParserRuleContext {
        public TerminalNode T_USE() {
            return getToken(HplsqlParser.T_USE, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Use_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_use_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterUse_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitUse_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUse_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Use_stmtContext use_stmt() throws RecognitionException {
        Use_stmtContext _localctx = new Use_stmtContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_use_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2085);
                match(T_USE);
                setState(2086);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Values_into_stmtContext extends ParserRuleContext {
        public TerminalNode T_VALUES() {
            return getToken(HplsqlParser.T_VALUES, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public Values_into_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_values_into_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterValues_into_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitValues_into_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitValues_into_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Values_into_stmtContext values_into_stmt() throws RecognitionException {
        Values_into_stmtContext _localctx = new Values_into_stmtContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_values_into_stmt);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2088);
                match(T_VALUES);
                setState(2090);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 241, _ctx)) {
                    case 1:
                        {
                            setState(2089);
                            match(T_OPEN_P);
                        }
                        break;
                }
                setState(2092);
                expr(0);
                setState(2097);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2093);
                            match(T_COMMA);
                            setState(2094);
                            expr(0);
                        }
                    }
                    setState(2099);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2101);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_CLOSE_P) {
                    {
                        setState(2100);
                        match(T_CLOSE_P);
                    }
                }

                setState(2103);
                match(T_INTO);
                setState(2105);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_OPEN_P) {
                    {
                        setState(2104);
                        match(T_OPEN_P);
                    }
                }

                setState(2107);
                ident();
                setState(2112);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 245, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2108);
                                match(T_COMMA);
                                setState(2109);
                                ident();
                            }
                        }
                    }
                    setState(2114);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 245, _ctx);
                }
                setState(2116);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 246, _ctx)) {
                    case 1:
                        {
                            setState(2115);
                            match(T_CLOSE_P);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class While_stmtContext extends ParserRuleContext {
        public List<TerminalNode> T_WHILE() {
            return getTokens(HplsqlParser.T_WHILE);
        }

        public TerminalNode T_WHILE(int i) {
            return getToken(HplsqlParser.T_WHILE, i);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_DO() {
            return getToken(HplsqlParser.T_DO, 0);
        }

        public List<TerminalNode> T_LOOP() {
            return getTokens(HplsqlParser.T_LOOP);
        }

        public TerminalNode T_LOOP(int i) {
            return getToken(HplsqlParser.T_LOOP, i);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public TerminalNode T_BEGIN() {
            return getToken(HplsqlParser.T_BEGIN, 0);
        }

        public While_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_while_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterWhile_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitWhile_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitWhile_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final While_stmtContext while_stmt() throws RecognitionException {
        While_stmtContext _localctx = new While_stmtContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_while_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2118);
                match(T_WHILE);
                setState(2119);
                bool_expr(0);
                setState(2120);
                _la = _input.LA(1);
                if (!(_la == T_BEGIN || _la == T_DO || _la == T_LOOP || _la == T_THEN)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2121);
                block();
                setState(2122);
                match(T_END);
                setState(2124);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 247, _ctx)) {
                    case 1:
                        {
                            setState(2123);
                            _la = _input.LA(1);
                            if (!(_la == T_LOOP || _la == T_WHILE)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class For_cursor_stmtContext extends ParserRuleContext {
        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public List<TerminalNode> T_LOOP() {
            return getTokens(HplsqlParser.T_LOOP);
        }

        public TerminalNode T_LOOP(int i) {
            return getToken(HplsqlParser.T_LOOP, i);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public For_cursor_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_for_cursor_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFor_cursor_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFor_cursor_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFor_cursor_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_cursor_stmtContext for_cursor_stmt() throws RecognitionException {
        For_cursor_stmtContext _localctx = new For_cursor_stmtContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_for_cursor_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2126);
                match(T_FOR);
                setState(2127);
                match(L_ID);
                setState(2128);
                match(T_IN);
                setState(2130);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 248, _ctx)) {
                    case 1:
                        {
                            setState(2129);
                            match(T_OPEN_P);
                        }
                        break;
                }
                setState(2132);
                select_stmt();
                setState(2134);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_CLOSE_P) {
                    {
                        setState(2133);
                        match(T_CLOSE_P);
                    }
                }

                setState(2136);
                match(T_LOOP);
                setState(2137);
                block();
                setState(2138);
                match(T_END);
                setState(2139);
                match(T_LOOP);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class For_range_stmtContext extends ParserRuleContext {
        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_DOT2() {
            return getToken(HplsqlParser.T_DOT2, 0);
        }

        public List<TerminalNode> T_LOOP() {
            return getTokens(HplsqlParser.T_LOOP);
        }

        public TerminalNode T_LOOP(int i) {
            return getToken(HplsqlParser.T_LOOP, i);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public TerminalNode T_REVERSE() {
            return getToken(HplsqlParser.T_REVERSE, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public TerminalNode T_STEP() {
            return getToken(HplsqlParser.T_STEP, 0);
        }

        public For_range_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_for_range_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFor_range_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFor_range_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFor_range_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final For_range_stmtContext for_range_stmt() throws RecognitionException {
        For_range_stmtContext _localctx = new For_range_stmtContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_for_range_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2141);
                match(T_FOR);
                setState(2142);
                match(L_ID);
                setState(2143);
                match(T_IN);
                setState(2145);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 250, _ctx)) {
                    case 1:
                        {
                            setState(2144);
                            match(T_REVERSE);
                        }
                        break;
                }
                setState(2147);
                expr(0);
                setState(2148);
                match(T_DOT2);
                setState(2149);
                expr(0);
                setState(2152);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_BY || _la == T_STEP) {
                    {
                        setState(2150);
                        _la = _input.LA(1);
                        if (!(_la == T_BY || _la == T_STEP)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2151);
                        expr(0);
                    }
                }

                setState(2154);
                match(T_LOOP);
                setState(2155);
                block();
                setState(2156);
                match(T_END);
                setState(2157);
                match(T_LOOP);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class LabelContext extends ParserRuleContext {
        public TerminalNode L_LABEL() {
            return getToken(HplsqlParser.L_LABEL, 0);
        }

        public List<TerminalNode> T_LESS() {
            return getTokens(HplsqlParser.T_LESS);
        }

        public TerminalNode T_LESS(int i) {
            return getToken(HplsqlParser.T_LESS, i);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public List<TerminalNode> T_GREATER() {
            return getTokens(HplsqlParser.T_GREATER);
        }

        public TerminalNode T_GREATER(int i) {
            return getToken(HplsqlParser.T_GREATER, i);
        }

        public LabelContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_label;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterLabel(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitLabel(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitLabel(this);
            else return visitor.visitChildren(this);
        }
    }

    public final LabelContext label() throws RecognitionException {
        LabelContext _localctx = new LabelContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_label);
        try {
            setState(2165);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case L_LABEL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2159);
                        match(L_LABEL);
                    }
                    break;
                case T_LESS:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2160);
                        match(T_LESS);
                        setState(2161);
                        match(T_LESS);
                        setState(2162);
                        match(L_ID);
                        setState(2163);
                        match(T_GREATER);
                        setState(2164);
                        match(T_GREATER);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Using_clauseContext extends ParserRuleContext {
        public TerminalNode T_USING() {
            return getToken(HplsqlParser.T_USING, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Using_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_using_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterUsing_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitUsing_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUsing_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Using_clauseContext using_clause() throws RecognitionException {
        Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
        enterRule(_localctx, 276, RULE_using_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2167);
                match(T_USING);
                setState(2168);
                expr(0);
                setState(2173);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 253, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2169);
                                match(T_COMMA);
                                setState(2170);
                                expr(0);
                            }
                        }
                    }
                    setState(2175);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 253, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_stmtContext extends ParserRuleContext {
        public Fullselect_stmtContext fullselect_stmt() {
            return getRuleContext(Fullselect_stmtContext.class, 0);
        }

        public Cte_select_stmtContext cte_select_stmt() {
            return getRuleContext(Cte_select_stmtContext.class, 0);
        }

        public Select_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_stmtContext select_stmt() throws RecognitionException {
        Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_select_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2177);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_WITH) {
                    {
                        setState(2176);
                        cte_select_stmt();
                    }
                }

                setState(2179);
                fullselect_stmt();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cte_select_stmtContext extends ParserRuleContext {
        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public List<Cte_select_stmt_itemContext> cte_select_stmt_item() {
            return getRuleContexts(Cte_select_stmt_itemContext.class);
        }

        public Cte_select_stmt_itemContext cte_select_stmt_item(int i) {
            return getRuleContext(Cte_select_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Cte_select_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cte_select_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCte_select_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCte_select_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCte_select_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cte_select_stmtContext cte_select_stmt() throws RecognitionException {
        Cte_select_stmtContext _localctx = new Cte_select_stmtContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_cte_select_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2181);
                match(T_WITH);
                setState(2182);
                cte_select_stmt_item();
                setState(2187);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2183);
                            match(T_COMMA);
                            setState(2184);
                            cte_select_stmt_item();
                        }
                    }
                    setState(2189);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cte_select_stmt_itemContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Fullselect_stmtContext fullselect_stmt() {
            return getRuleContext(Fullselect_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Cte_select_colsContext cte_select_cols() {
            return getRuleContext(Cte_select_colsContext.class, 0);
        }

        public Cte_select_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cte_select_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCte_select_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCte_select_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCte_select_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cte_select_stmt_itemContext cte_select_stmt_item() throws RecognitionException {
        Cte_select_stmt_itemContext _localctx = new Cte_select_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 282, RULE_cte_select_stmt_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2190);
                ident();
                setState(2192);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_OPEN_P) {
                    {
                        setState(2191);
                        cte_select_cols();
                    }
                }

                setState(2194);
                match(T_AS);
                setState(2195);
                match(T_OPEN_P);
                setState(2196);
                fullselect_stmt();
                setState(2197);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Cte_select_colsContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Cte_select_colsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_cte_select_cols;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterCte_select_cols(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitCte_select_cols(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitCte_select_cols(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Cte_select_colsContext cte_select_cols() throws RecognitionException {
        Cte_select_colsContext _localctx = new Cte_select_colsContext(_ctx, getState());
        enterRule(_localctx, 284, RULE_cte_select_cols);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2199);
                match(T_OPEN_P);
                setState(2200);
                ident();
                setState(2205);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2201);
                            match(T_COMMA);
                            setState(2202);
                            ident();
                        }
                    }
                    setState(2207);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2208);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Fullselect_stmtContext extends ParserRuleContext {
        public List<Fullselect_stmt_itemContext> fullselect_stmt_item() {
            return getRuleContexts(Fullselect_stmt_itemContext.class);
        }

        public Fullselect_stmt_itemContext fullselect_stmt_item(int i) {
            return getRuleContext(Fullselect_stmt_itemContext.class, i);
        }

        public List<Fullselect_set_clauseContext> fullselect_set_clause() {
            return getRuleContexts(Fullselect_set_clauseContext.class);
        }

        public Fullselect_set_clauseContext fullselect_set_clause(int i) {
            return getRuleContext(Fullselect_set_clauseContext.class, i);
        }

        public Fullselect_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fullselect_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFullselect_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFullselect_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFullselect_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Fullselect_stmtContext fullselect_stmt() throws RecognitionException {
        Fullselect_stmtContext _localctx = new Fullselect_stmtContext(_ctx, getState());
        enterRule(_localctx, 286, RULE_fullselect_stmt);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2210);
                fullselect_stmt_item();
                setState(2216);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 258, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2211);
                                fullselect_set_clause();
                                setState(2212);
                                fullselect_stmt_item();
                            }
                        }
                    }
                    setState(2218);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 258, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Fullselect_stmt_itemContext extends ParserRuleContext {
        public Subselect_stmtContext subselect_stmt() {
            return getRuleContext(Subselect_stmtContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Fullselect_stmtContext fullselect_stmt() {
            return getRuleContext(Fullselect_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Fullselect_stmt_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fullselect_stmt_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFullselect_stmt_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFullselect_stmt_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFullselect_stmt_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Fullselect_stmt_itemContext fullselect_stmt_item() throws RecognitionException {
        Fullselect_stmt_itemContext _localctx = new Fullselect_stmt_itemContext(_ctx, getState());
        enterRule(_localctx, 288, RULE_fullselect_stmt_item);
        try {
            setState(2224);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_SEL:
                case T_SELECT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2219);
                        subselect_stmt();
                    }
                    break;
                case T_OPEN_P:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2220);
                        match(T_OPEN_P);
                        setState(2221);
                        fullselect_stmt();
                        setState(2222);
                        match(T_CLOSE_P);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Fullselect_set_clauseContext extends ParserRuleContext {
        public TerminalNode T_UNION() {
            return getToken(HplsqlParser.T_UNION, 0);
        }

        public TerminalNode T_ALL() {
            return getToken(HplsqlParser.T_ALL, 0);
        }

        public TerminalNode T_EXCEPT() {
            return getToken(HplsqlParser.T_EXCEPT, 0);
        }

        public TerminalNode T_INTERSECT() {
            return getToken(HplsqlParser.T_INTERSECT, 0);
        }

        public Fullselect_set_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fullselect_set_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFullselect_set_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFullselect_set_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFullselect_set_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Fullselect_set_clauseContext fullselect_set_clause() throws RecognitionException {
        Fullselect_set_clauseContext _localctx = new Fullselect_set_clauseContext(_ctx, getState());
        enterRule(_localctx, 290, RULE_fullselect_set_clause);
        int _la;
        try {
            setState(2238);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_UNION:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2226);
                        match(T_UNION);
                        setState(2228);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ALL) {
                            {
                                setState(2227);
                                match(T_ALL);
                            }
                        }
                    }
                    break;
                case T_EXCEPT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2230);
                        match(T_EXCEPT);
                        setState(2232);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ALL) {
                            {
                                setState(2231);
                                match(T_ALL);
                            }
                        }
                    }
                    break;
                case T_INTERSECT:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2234);
                        match(T_INTERSECT);
                        setState(2236);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_ALL) {
                            {
                                setState(2235);
                                match(T_ALL);
                            }
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Subselect_stmtContext extends ParserRuleContext {
        public Select_listContext select_list() {
            return getRuleContext(Select_listContext.class, 0);
        }

        public TerminalNode T_SELECT() {
            return getToken(HplsqlParser.T_SELECT, 0);
        }

        public TerminalNode T_SEL() {
            return getToken(HplsqlParser.T_SEL, 0);
        }

        public Into_clauseContext into_clause() {
            return getRuleContext(Into_clauseContext.class, 0);
        }

        public From_clauseContext from_clause() {
            return getRuleContext(From_clauseContext.class, 0);
        }

        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class, 0);
        }

        public Group_by_clauseContext group_by_clause() {
            return getRuleContext(Group_by_clauseContext.class, 0);
        }

        public Having_clauseContext having_clause() {
            return getRuleContext(Having_clauseContext.class, 0);
        }

        public Qualify_clauseContext qualify_clause() {
            return getRuleContext(Qualify_clauseContext.class, 0);
        }

        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class, 0);
        }

        public Select_optionsContext select_options() {
            return getRuleContext(Select_optionsContext.class, 0);
        }

        public Subselect_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_subselect_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSubselect_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSubselect_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSubselect_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Subselect_stmtContext subselect_stmt() throws RecognitionException {
        Subselect_stmtContext _localctx = new Subselect_stmtContext(_ctx, getState());
        enterRule(_localctx, 292, RULE_subselect_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2240);
                _la = _input.LA(1);
                if (!(_la == T_SEL || _la == T_SELECT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2241);
                select_list();
                setState(2243);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 264, _ctx)) {
                    case 1:
                        {
                            setState(2242);
                            into_clause();
                        }
                        break;
                }
                setState(2246);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 265, _ctx)) {
                    case 1:
                        {
                            setState(2245);
                            from_clause();
                        }
                        break;
                }
                setState(2249);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 266, _ctx)) {
                    case 1:
                        {
                            setState(2248);
                            where_clause();
                        }
                        break;
                }
                setState(2252);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 267, _ctx)) {
                    case 1:
                        {
                            setState(2251);
                            group_by_clause();
                        }
                        break;
                }
                setState(2256);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 268, _ctx)) {
                    case 1:
                        {
                            setState(2254);
                            having_clause();
                        }
                        break;
                    case 2:
                        {
                            setState(2255);
                            qualify_clause();
                        }
                        break;
                }
                setState(2259);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 269, _ctx)) {
                    case 1:
                        {
                            setState(2258);
                            order_by_clause();
                        }
                        break;
                }
                setState(2262);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 270, _ctx)) {
                    case 1:
                        {
                            setState(2261);
                            select_options();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_listContext extends ParserRuleContext {
        public List<Select_list_itemContext> select_list_item() {
            return getRuleContexts(Select_list_itemContext.class);
        }

        public Select_list_itemContext select_list_item(int i) {
            return getRuleContext(Select_list_itemContext.class, i);
        }

        public Select_list_setContext select_list_set() {
            return getRuleContext(Select_list_setContext.class, 0);
        }

        public Select_list_limitContext select_list_limit() {
            return getRuleContext(Select_list_limitContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Select_listContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_listContext select_list() throws RecognitionException {
        Select_listContext _localctx = new Select_listContext(_ctx, getState());
        enterRule(_localctx, 294, RULE_select_list);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2265);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 271, _ctx)) {
                    case 1:
                        {
                            setState(2264);
                            select_list_set();
                        }
                        break;
                }
                setState(2268);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 272, _ctx)) {
                    case 1:
                        {
                            setState(2267);
                            select_list_limit();
                        }
                        break;
                }
                setState(2270);
                select_list_item();
                setState(2275);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 273, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2271);
                                match(T_COMMA);
                                setState(2272);
                                select_list_item();
                            }
                        }
                    }
                    setState(2277);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 273, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_list_setContext extends ParserRuleContext {
        public TerminalNode T_ALL() {
            return getToken(HplsqlParser.T_ALL, 0);
        }

        public TerminalNode T_DISTINCT() {
            return getToken(HplsqlParser.T_DISTINCT, 0);
        }

        public Select_list_setContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list_set;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list_set(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list_set(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list_set(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_setContext select_list_set() throws RecognitionException {
        Select_list_setContext _localctx = new Select_list_setContext(_ctx, getState());
        enterRule(_localctx, 296, RULE_select_list_set);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2278);
                _la = _input.LA(1);
                if (!(_la == T_ALL || _la == T_DISTINCT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_list_limitContext extends ParserRuleContext {
        public TerminalNode T_TOP() {
            return getToken(HplsqlParser.T_TOP, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Select_list_limitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list_limit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list_limit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list_limit(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list_limit(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_limitContext select_list_limit() throws RecognitionException {
        Select_list_limitContext _localctx = new Select_list_limitContext(_ctx, getState());
        enterRule(_localctx, 298, RULE_select_list_limit);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2280);
                match(T_TOP);
                setState(2281);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_list_itemContext extends ParserRuleContext {
        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Select_list_asteriskContext select_list_asterisk() {
            return getRuleContext(Select_list_asteriskContext.class, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public Select_list_aliasContext select_list_alias() {
            return getRuleContext(Select_list_aliasContext.class, 0);
        }

        public Select_list_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_itemContext select_list_item() throws RecognitionException {
        Select_list_itemContext _localctx = new Select_list_itemContext(_ctx, getState());
        enterRule(_localctx, 300, RULE_select_list_item);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2293);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 276, _ctx)) {
                    case 1:
                        {
                            setState(2286);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 274, _ctx)) {
                                case 1:
                                    {
                                        setState(2283);
                                        ident();
                                        setState(2284);
                                        match(T_EQUAL);
                                    }
                                    break;
                            }
                            setState(2288);
                            expr(0);
                            setState(2290);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 275, _ctx)) {
                                case 1:
                                    {
                                        setState(2289);
                                        select_list_alias();
                                    }
                                    break;
                            }
                        }
                        break;
                    case 2:
                        {
                            setState(2292);
                            select_list_asterisk();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_list_aliasContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_TITLE() {
            return getToken(HplsqlParser.T_TITLE, 0);
        }

        public TerminalNode L_S_STRING() {
            return getToken(HplsqlParser.L_S_STRING, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Select_list_aliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list_alias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list_alias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list_alias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list_alias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_aliasContext select_list_alias() throws RecognitionException {
        Select_list_aliasContext _localctx = new Select_list_aliasContext(_ctx, getState());
        enterRule(_localctx, 302, RULE_select_list_alias);
        try {
            setState(2304);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 278, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2295);
                        if (!(!_input.LT(1).getText().equalsIgnoreCase("INTO")
                                && !_input.LT(1).getText().equalsIgnoreCase("FROM")))
                            throw new FailedPredicateException(
                                    this,
                                    "!_input.LT(1).getText().equalsIgnoreCase(\"INTO\") && !_input.LT(1).getText().equalsIgnoreCase(\"FROM\")");
                        setState(2297);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 277, _ctx)) {
                            case 1:
                                {
                                    setState(2296);
                                    match(T_AS);
                                }
                                break;
                        }
                        setState(2299);
                        ident();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2300);
                        match(T_OPEN_P);
                        setState(2301);
                        match(T_TITLE);
                        setState(2302);
                        match(L_S_STRING);
                        setState(2303);
                        match(T_CLOSE_P);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_list_asteriskContext extends ParserRuleContext {
        public TerminalNode T_MUL() {
            return getToken(HplsqlParser.T_MUL, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public Select_list_asteriskContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_list_asterisk;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_list_asterisk(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_list_asterisk(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_list_asterisk(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_list_asteriskContext select_list_asterisk() throws RecognitionException {
        Select_list_asteriskContext _localctx = new Select_list_asteriskContext(_ctx, getState());
        enterRule(_localctx, 304, RULE_select_list_asterisk);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2308);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == L_ID) {
                    {
                        setState(2306);
                        match(L_ID);
                        setState(2307);
                        match(T__3);
                    }
                }

                setState(2310);
                match(T_MUL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Into_clauseContext extends ParserRuleContext {
        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Into_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_into_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInto_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInto_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInto_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Into_clauseContext into_clause() throws RecognitionException {
        Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
        enterRule(_localctx, 306, RULE_into_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2312);
                match(T_INTO);
                setState(2313);
                ident();
                setState(2318);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 280, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2314);
                                match(T_COMMA);
                                setState(2315);
                                ident();
                            }
                        }
                    }
                    setState(2320);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 280, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_clauseContext extends ParserRuleContext {
        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public From_table_clauseContext from_table_clause() {
            return getRuleContext(From_table_clauseContext.class, 0);
        }

        public List<From_join_clauseContext> from_join_clause() {
            return getRuleContexts(From_join_clauseContext.class);
        }

        public From_join_clauseContext from_join_clause(int i) {
            return getRuleContext(From_join_clauseContext.class, i);
        }

        public From_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_clauseContext from_clause() throws RecognitionException {
        From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
        enterRule(_localctx, 308, RULE_from_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2321);
                match(T_FROM);
                setState(2322);
                from_table_clause();
                setState(2326);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 281, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2323);
                                from_join_clause();
                            }
                        }
                    }
                    setState(2328);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 281, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_table_clauseContext extends ParserRuleContext {
        public From_table_name_clauseContext from_table_name_clause() {
            return getRuleContext(From_table_name_clauseContext.class, 0);
        }

        public From_subselect_clauseContext from_subselect_clause() {
            return getRuleContext(From_subselect_clauseContext.class, 0);
        }

        public From_table_values_clauseContext from_table_values_clause() {
            return getRuleContext(From_table_values_clauseContext.class, 0);
        }

        public From_table_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_table_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_table_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_table_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_table_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_table_clauseContext from_table_clause() throws RecognitionException {
        From_table_clauseContext _localctx = new From_table_clauseContext(_ctx, getState());
        enterRule(_localctx, 310, RULE_from_table_clause);
        try {
            setState(2332);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 282, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2329);
                        from_table_name_clause();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2330);
                        from_subselect_clause();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2331);
                        from_table_values_clause();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_table_name_clauseContext extends ParserRuleContext {
        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public From_alias_clauseContext from_alias_clause() {
            return getRuleContext(From_alias_clauseContext.class, 0);
        }

        public From_table_name_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_table_name_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_table_name_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_table_name_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_table_name_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_table_name_clauseContext from_table_name_clause()
            throws RecognitionException {
        From_table_name_clauseContext _localctx =
                new From_table_name_clauseContext(_ctx, getState());
        enterRule(_localctx, 312, RULE_from_table_name_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2334);
                table_name();
                setState(2336);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 283, _ctx)) {
                    case 1:
                        {
                            setState(2335);
                            from_alias_clause();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_subselect_clauseContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public From_alias_clauseContext from_alias_clause() {
            return getRuleContext(From_alias_clauseContext.class, 0);
        }

        public From_subselect_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_subselect_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_subselect_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_subselect_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_subselect_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_subselect_clauseContext from_subselect_clause() throws RecognitionException {
        From_subselect_clauseContext _localctx = new From_subselect_clauseContext(_ctx, getState());
        enterRule(_localctx, 314, RULE_from_subselect_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2338);
                match(T_OPEN_P);
                setState(2339);
                select_stmt();
                setState(2340);
                match(T_CLOSE_P);
                setState(2342);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 284, _ctx)) {
                    case 1:
                        {
                            setState(2341);
                            from_alias_clause();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_join_clauseContext extends ParserRuleContext {
        public TerminalNode T_COMMA() {
            return getToken(HplsqlParser.T_COMMA, 0);
        }

        public From_table_clauseContext from_table_clause() {
            return getRuleContext(From_table_clauseContext.class, 0);
        }

        public From_join_type_clauseContext from_join_type_clause() {
            return getRuleContext(From_join_type_clauseContext.class, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public From_join_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_join_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_join_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_join_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_join_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_join_clauseContext from_join_clause() throws RecognitionException {
        From_join_clauseContext _localctx = new From_join_clauseContext(_ctx, getState());
        enterRule(_localctx, 316, RULE_from_join_clause);
        try {
            setState(2351);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_COMMA:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2344);
                        match(T_COMMA);
                        setState(2345);
                        from_table_clause();
                    }
                    break;
                case T_FULL:
                case T_INNER:
                case T_JOIN:
                case T_LEFT:
                case T_RIGHT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2346);
                        from_join_type_clause();
                        setState(2347);
                        from_table_clause();
                        setState(2348);
                        match(T_ON);
                        setState(2349);
                        bool_expr(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_join_type_clauseContext extends ParserRuleContext {
        public TerminalNode T_JOIN() {
            return getToken(HplsqlParser.T_JOIN, 0);
        }

        public TerminalNode T_INNER() {
            return getToken(HplsqlParser.T_INNER, 0);
        }

        public TerminalNode T_LEFT() {
            return getToken(HplsqlParser.T_LEFT, 0);
        }

        public TerminalNode T_RIGHT() {
            return getToken(HplsqlParser.T_RIGHT, 0);
        }

        public TerminalNode T_FULL() {
            return getToken(HplsqlParser.T_FULL, 0);
        }

        public TerminalNode T_OUTER() {
            return getToken(HplsqlParser.T_OUTER, 0);
        }

        public From_join_type_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_join_type_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_join_type_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_join_type_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_join_type_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_join_type_clauseContext from_join_type_clause() throws RecognitionException {
        From_join_type_clauseContext _localctx = new From_join_type_clauseContext(_ctx, getState());
        enterRule(_localctx, 318, RULE_from_join_type_clause);
        int _la;
        try {
            setState(2362);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_INNER:
                case T_JOIN:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2354);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_INNER) {
                            {
                                setState(2353);
                                match(T_INNER);
                            }
                        }

                        setState(2356);
                        match(T_JOIN);
                    }
                    break;
                case T_FULL:
                case T_LEFT:
                case T_RIGHT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2357);
                        _la = _input.LA(1);
                        if (!(_la == T_FULL || _la == T_LEFT || _la == T_RIGHT)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2359);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_OUTER) {
                            {
                                setState(2358);
                                match(T_OUTER);
                            }
                        }

                        setState(2361);
                        match(T_JOIN);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_table_values_clauseContext extends ParserRuleContext {
        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_VALUES() {
            return getToken(HplsqlParser.T_VALUES, 0);
        }

        public List<From_table_values_rowContext> from_table_values_row() {
            return getRuleContexts(From_table_values_rowContext.class);
        }

        public From_table_values_rowContext from_table_values_row(int i) {
            return getRuleContext(From_table_values_rowContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public From_alias_clauseContext from_alias_clause() {
            return getRuleContext(From_alias_clauseContext.class, 0);
        }

        public From_table_values_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_table_values_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_table_values_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_table_values_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_table_values_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_table_values_clauseContext from_table_values_clause()
            throws RecognitionException {
        From_table_values_clauseContext _localctx =
                new From_table_values_clauseContext(_ctx, getState());
        enterRule(_localctx, 320, RULE_from_table_values_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2364);
                match(T_TABLE);
                setState(2365);
                match(T_OPEN_P);
                setState(2366);
                match(T_VALUES);
                setState(2367);
                from_table_values_row();
                setState(2372);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2368);
                            match(T_COMMA);
                            setState(2369);
                            from_table_values_row();
                        }
                    }
                    setState(2374);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2375);
                match(T_CLOSE_P);
                setState(2377);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 290, _ctx)) {
                    case 1:
                        {
                            setState(2376);
                            from_alias_clause();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_table_values_rowContext extends ParserRuleContext {
        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public From_table_values_rowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_table_values_row;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_table_values_row(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_table_values_row(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_table_values_row(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_table_values_rowContext from_table_values_row() throws RecognitionException {
        From_table_values_rowContext _localctx = new From_table_values_rowContext(_ctx, getState());
        enterRule(_localctx, 322, RULE_from_table_values_row);
        int _la;
        try {
            setState(2391);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 292, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2379);
                        expr(0);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2380);
                        match(T_OPEN_P);
                        setState(2381);
                        expr(0);
                        setState(2386);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(2382);
                                    match(T_COMMA);
                                    setState(2383);
                                    expr(0);
                                }
                            }
                            setState(2388);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(2389);
                        match(T_CLOSE_P);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class From_alias_clauseContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<TerminalNode> L_ID() {
            return getTokens(HplsqlParser.L_ID);
        }

        public TerminalNode L_ID(int i) {
            return getToken(HplsqlParser.L_ID, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public From_alias_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_from_alias_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFrom_alias_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFrom_alias_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFrom_alias_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final From_alias_clauseContext from_alias_clause() throws RecognitionException {
        From_alias_clauseContext _localctx = new From_alias_clauseContext(_ctx, getState());
        enterRule(_localctx, 324, RULE_from_alias_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2393);
                if (!(!_input.LT(1).getText().equalsIgnoreCase("EXEC")
                        && !_input.LT(1).getText().equalsIgnoreCase("EXECUTE")
                        && !_input.LT(1).getText().equalsIgnoreCase("INNER")
                        && !_input.LT(1).getText().equalsIgnoreCase("LEFT")
                        && !_input.LT(1).getText().equalsIgnoreCase("GROUP")
                        && !_input.LT(1).getText().equalsIgnoreCase("ORDER")
                        && !_input.LT(1).getText().equalsIgnoreCase("LIMIT")
                        && !_input.LT(1).getText().equalsIgnoreCase("WITH")))
                    throw new FailedPredicateException(
                            this,
                            "!_input.LT(1).getText().equalsIgnoreCase(\"EXEC\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"EXECUTE\") && \n        !_input.LT(1).getText().equalsIgnoreCase(\"INNER\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"LEFT\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"GROUP\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"ORDER\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"LIMIT\") &&\n        !_input.LT(1).getText().equalsIgnoreCase(\"WITH\")");
                setState(2395);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 293, _ctx)) {
                    case 1:
                        {
                            setState(2394);
                            match(T_AS);
                        }
                        break;
                }
                setState(2397);
                ident();
                setState(2408);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 295, _ctx)) {
                    case 1:
                        {
                            setState(2398);
                            match(T_OPEN_P);
                            setState(2399);
                            match(L_ID);
                            setState(2404);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == T_COMMA) {
                                {
                                    {
                                        setState(2400);
                                        match(T_COMMA);
                                        setState(2401);
                                        match(L_ID);
                                    }
                                }
                                setState(2406);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(2407);
                            match(T_CLOSE_P);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Table_nameContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public Table_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_table_name;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterTable_name(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitTable_name(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitTable_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Table_nameContext table_name() throws RecognitionException {
        Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
        enterRule(_localctx, 326, RULE_table_name);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2410);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Where_clauseContext extends ParserRuleContext {
        public TerminalNode T_WHERE() {
            return getToken(HplsqlParser.T_WHERE, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public Where_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_where_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterWhere_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitWhere_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitWhere_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Where_clauseContext where_clause() throws RecognitionException {
        Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
        enterRule(_localctx, 328, RULE_where_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2412);
                match(T_WHERE);
                setState(2413);
                bool_expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Group_by_clauseContext extends ParserRuleContext {
        public TerminalNode T_GROUP() {
            return getToken(HplsqlParser.T_GROUP, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_group_by_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterGroup_by_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitGroup_by_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitGroup_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Group_by_clauseContext group_by_clause() throws RecognitionException {
        Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 330, RULE_group_by_clause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2415);
                match(T_GROUP);
                setState(2416);
                match(T_BY);
                setState(2417);
                expr(0);
                setState(2422);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 296, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2418);
                                match(T_COMMA);
                                setState(2419);
                                expr(0);
                            }
                        }
                    }
                    setState(2424);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 296, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Having_clauseContext extends ParserRuleContext {
        public TerminalNode T_HAVING() {
            return getToken(HplsqlParser.T_HAVING, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public Having_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_having_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterHaving_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitHaving_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHaving_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Having_clauseContext having_clause() throws RecognitionException {
        Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
        enterRule(_localctx, 332, RULE_having_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2425);
                match(T_HAVING);
                setState(2426);
                bool_expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Qualify_clauseContext extends ParserRuleContext {
        public TerminalNode T_QUALIFY() {
            return getToken(HplsqlParser.T_QUALIFY, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public Qualify_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualify_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterQualify_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitQualify_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitQualify_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Qualify_clauseContext qualify_clause() throws RecognitionException {
        Qualify_clauseContext _localctx = new Qualify_clauseContext(_ctx, getState());
        enterRule(_localctx, 334, RULE_qualify_clause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2428);
                match(T_QUALIFY);
                setState(2429);
                bool_expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Order_by_clauseContext extends ParserRuleContext {
        public TerminalNode T_ORDER() {
            return getToken(HplsqlParser.T_ORDER, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public List<TerminalNode> T_ASC() {
            return getTokens(HplsqlParser.T_ASC);
        }

        public TerminalNode T_ASC(int i) {
            return getToken(HplsqlParser.T_ASC, i);
        }

        public List<TerminalNode> T_DESC() {
            return getTokens(HplsqlParser.T_DESC);
        }

        public TerminalNode T_DESC(int i) {
            return getToken(HplsqlParser.T_DESC, i);
        }

        public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_order_by_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterOrder_by_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitOrder_by_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitOrder_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Order_by_clauseContext order_by_clause() throws RecognitionException {
        Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 336, RULE_order_by_clause);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2431);
                match(T_ORDER);
                setState(2432);
                match(T_BY);
                setState(2433);
                expr(0);
                setState(2435);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 297, _ctx)) {
                    case 1:
                        {
                            setState(2434);
                            _la = _input.LA(1);
                            if (!(_la == T_ASC || _la == T_DESC)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                }
                setState(2444);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 299, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2437);
                                match(T_COMMA);
                                setState(2438);
                                expr(0);
                                setState(2440);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 298, _ctx)) {
                                    case 1:
                                        {
                                            setState(2439);
                                            _la = _input.LA(1);
                                            if (!(_la == T_ASC || _la == T_DESC)) {
                                                _errHandler.recoverInline(this);
                                            } else {
                                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                                _errHandler.reportMatch(this);
                                                consume();
                                            }
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    setState(2446);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 299, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_optionsContext extends ParserRuleContext {
        public List<Select_options_itemContext> select_options_item() {
            return getRuleContexts(Select_options_itemContext.class);
        }

        public Select_options_itemContext select_options_item(int i) {
            return getRuleContext(Select_options_itemContext.class, i);
        }

        public Select_optionsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_options;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_options(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_options(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_options(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_optionsContext select_options() throws RecognitionException {
        Select_optionsContext _localctx = new Select_optionsContext(_ctx, getState());
        enterRule(_localctx, 338, RULE_select_options);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2448);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(2447);
                                    select_options_item();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2450);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 300, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Select_options_itemContext extends ParserRuleContext {
        public TerminalNode T_LIMIT() {
            return getToken(HplsqlParser.T_LIMIT, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_RR() {
            return getToken(HplsqlParser.T_RR, 0);
        }

        public TerminalNode T_RS() {
            return getToken(HplsqlParser.T_RS, 0);
        }

        public TerminalNode T_CS() {
            return getToken(HplsqlParser.T_CS, 0);
        }

        public TerminalNode T_UR() {
            return getToken(HplsqlParser.T_UR, 0);
        }

        public TerminalNode T_USE() {
            return getToken(HplsqlParser.T_USE, 0);
        }

        public TerminalNode T_AND() {
            return getToken(HplsqlParser.T_AND, 0);
        }

        public TerminalNode T_KEEP() {
            return getToken(HplsqlParser.T_KEEP, 0);
        }

        public TerminalNode T_LOCKS() {
            return getToken(HplsqlParser.T_LOCKS, 0);
        }

        public TerminalNode T_EXCLUSIVE() {
            return getToken(HplsqlParser.T_EXCLUSIVE, 0);
        }

        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public TerminalNode T_SHARE() {
            return getToken(HplsqlParser.T_SHARE, 0);
        }

        public Select_options_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_select_options_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSelect_options_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSelect_options_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSelect_options_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Select_options_itemContext select_options_item() throws RecognitionException {
        Select_options_itemContext _localctx = new Select_options_itemContext(_ctx, getState());
        enterRule(_localctx, 340, RULE_select_options_item);
        int _la;
        try {
            setState(2463);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_LIMIT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2452);
                        match(T_LIMIT);
                        setState(2453);
                        expr(0);
                    }
                    break;
                case T_WITH:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2454);
                        match(T_WITH);
                        setState(2455);
                        _la = _input.LA(1);
                        if (!(_la == T_CS
                                || ((((_la - 245)) & ~0x3f) == 0
                                        && ((1L << (_la - 245)) & 36028797018963971L) != 0))) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2461);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 301, _ctx)) {
                            case 1:
                                {
                                    setState(2456);
                                    match(T_USE);
                                    setState(2457);
                                    match(T_AND);
                                    setState(2458);
                                    match(T_KEEP);
                                    setState(2459);
                                    _la = _input.LA(1);
                                    if (!(_la == T_EXCLUSIVE
                                            || _la == T_SHARE
                                            || _la == T_UPDATE)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(2460);
                                    match(T_LOCKS);
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Update_stmtContext extends ParserRuleContext {
        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public Update_tableContext update_table() {
            return getRuleContext(Update_tableContext.class, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public Update_assignmentContext update_assignment() {
            return getRuleContext(Update_assignmentContext.class, 0);
        }

        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class, 0);
        }

        public Update_upsertContext update_upsert() {
            return getRuleContext(Update_upsertContext.class, 0);
        }

        public Update_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_update_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterUpdate_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitUpdate_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUpdate_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_stmtContext update_stmt() throws RecognitionException {
        Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
        enterRule(_localctx, 342, RULE_update_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2465);
                match(T_UPDATE);
                setState(2466);
                update_table();
                setState(2467);
                match(T_SET);
                setState(2468);
                update_assignment();
                setState(2470);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 303, _ctx)) {
                    case 1:
                        {
                            setState(2469);
                            where_clause();
                        }
                        break;
                }
                setState(2473);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 304, _ctx)) {
                    case 1:
                        {
                            setState(2472);
                            update_upsert();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Update_assignmentContext extends ParserRuleContext {
        public List<Assignment_stmt_itemContext> assignment_stmt_item() {
            return getRuleContexts(Assignment_stmt_itemContext.class);
        }

        public Assignment_stmt_itemContext assignment_stmt_item(int i) {
            return getRuleContext(Assignment_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Update_assignmentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_update_assignment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterUpdate_assignment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitUpdate_assignment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUpdate_assignment(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_assignmentContext update_assignment() throws RecognitionException {
        Update_assignmentContext _localctx = new Update_assignmentContext(_ctx, getState());
        enterRule(_localctx, 344, RULE_update_assignment);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2475);
                assignment_stmt_item();
                setState(2480);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 305, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2476);
                                match(T_COMMA);
                                setState(2477);
                                assignment_stmt_item();
                            }
                        }
                    }
                    setState(2482);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 305, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Update_tableContext extends ParserRuleContext {
        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public From_clauseContext from_clause() {
            return getRuleContext(From_clauseContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Update_tableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_update_table;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterUpdate_table(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitUpdate_table(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUpdate_table(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_tableContext update_table() throws RecognitionException {
        Update_tableContext _localctx = new Update_tableContext(_ctx, getState());
        enterRule(_localctx, 346, RULE_update_table);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2491);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                    case L_ID:
                        {
                            setState(2483);
                            table_name();
                            setState(2485);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 306, _ctx)) {
                                case 1:
                                    {
                                        setState(2484);
                                        from_clause();
                                    }
                                    break;
                            }
                        }
                        break;
                    case T_OPEN_P:
                        {
                            setState(2487);
                            match(T_OPEN_P);
                            setState(2488);
                            select_stmt();
                            setState(2489);
                            match(T_CLOSE_P);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2497);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 309, _ctx)) {
                    case 1:
                        {
                            setState(2494);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 308, _ctx)) {
                                case 1:
                                    {
                                        setState(2493);
                                        match(T_AS);
                                    }
                                    break;
                            }
                            setState(2496);
                            ident();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Update_upsertContext extends ParserRuleContext {
        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public Insert_stmtContext insert_stmt() {
            return getRuleContext(Insert_stmtContext.class, 0);
        }

        public Update_upsertContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_update_upsert;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterUpdate_upsert(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitUpdate_upsert(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitUpdate_upsert(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Update_upsertContext update_upsert() throws RecognitionException {
        Update_upsertContext _localctx = new Update_upsertContext(_ctx, getState());
        enterRule(_localctx, 348, RULE_update_upsert);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2499);
                match(T_ELSE);
                setState(2500);
                insert_stmt();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Merge_stmtContext extends ParserRuleContext {
        public TerminalNode T_MERGE() {
            return getToken(HplsqlParser.T_MERGE, 0);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public List<Merge_tableContext> merge_table() {
            return getRuleContexts(Merge_tableContext.class);
        }

        public Merge_tableContext merge_table(int i) {
            return getRuleContext(Merge_tableContext.class, i);
        }

        public TerminalNode T_USING() {
            return getToken(HplsqlParser.T_USING, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public List<Merge_conditionContext> merge_condition() {
            return getRuleContexts(Merge_conditionContext.class);
        }

        public Merge_conditionContext merge_condition(int i) {
            return getRuleContext(Merge_conditionContext.class, i);
        }

        public Merge_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_merge_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterMerge_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitMerge_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitMerge_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_stmtContext merge_stmt() throws RecognitionException {
        Merge_stmtContext _localctx = new Merge_stmtContext(_ctx, getState());
        enterRule(_localctx, 350, RULE_merge_stmt);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2502);
                match(T_MERGE);
                setState(2503);
                match(T_INTO);
                setState(2504);
                merge_table();
                setState(2505);
                match(T_USING);
                setState(2506);
                merge_table();
                setState(2507);
                match(T_ON);
                setState(2508);
                bool_expr(0);
                setState(2510);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    setState(2509);
                                    merge_condition();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2512);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 310, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Merge_tableContext extends ParserRuleContext {
        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Merge_tableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_merge_table;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterMerge_table(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitMerge_table(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitMerge_table(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_tableContext merge_table() throws RecognitionException {
        Merge_tableContext _localctx = new Merge_tableContext(_ctx, getState());
        enterRule(_localctx, 352, RULE_merge_table);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2519);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                    case L_ID:
                        {
                            setState(2514);
                            table_name();
                        }
                        break;
                    case T_OPEN_P:
                        {
                            {
                                setState(2515);
                                match(T_OPEN_P);
                                setState(2516);
                                select_stmt();
                                setState(2517);
                                match(T_CLOSE_P);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(2525);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 313, _ctx)) {
                    case 1:
                        {
                            setState(2522);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 312, _ctx)) {
                                case 1:
                                    {
                                        setState(2521);
                                        match(T_AS);
                                    }
                                    break;
                            }
                            setState(2524);
                            ident();
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Merge_conditionContext extends ParserRuleContext {
        public TerminalNode T_WHEN() {
            return getToken(HplsqlParser.T_WHEN, 0);
        }

        public TerminalNode T_MATCHED() {
            return getToken(HplsqlParser.T_MATCHED, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public Merge_actionContext merge_action() {
            return getRuleContext(Merge_actionContext.class, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_AND() {
            return getToken(HplsqlParser.T_AND, 0);
        }

        public Bool_exprContext bool_expr() {
            return getRuleContext(Bool_exprContext.class, 0);
        }

        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public TerminalNode T_IGNORE() {
            return getToken(HplsqlParser.T_IGNORE, 0);
        }

        public Merge_conditionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_merge_condition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterMerge_condition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitMerge_condition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitMerge_condition(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_conditionContext merge_condition() throws RecognitionException {
        Merge_conditionContext _localctx = new Merge_conditionContext(_ctx, getState());
        enterRule(_localctx, 354, RULE_merge_condition);
        int _la;
        try {
            setState(2540);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_WHEN:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2527);
                        match(T_WHEN);
                        setState(2529);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(2528);
                                match(T_NOT);
                            }
                        }

                        setState(2531);
                        match(T_MATCHED);
                        setState(2534);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_AND) {
                            {
                                setState(2532);
                                match(T_AND);
                                setState(2533);
                                bool_expr(0);
                            }
                        }

                        setState(2536);
                        match(T_THEN);
                        setState(2537);
                        merge_action();
                    }
                    break;
                case T_ELSE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2538);
                        match(T_ELSE);
                        setState(2539);
                        match(T_IGNORE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Merge_actionContext extends ParserRuleContext {
        public TerminalNode T_INSERT() {
            return getToken(HplsqlParser.T_INSERT, 0);
        }

        public TerminalNode T_VALUES() {
            return getToken(HplsqlParser.T_VALUES, 0);
        }

        public Insert_stmt_rowContext insert_stmt_row() {
            return getRuleContext(Insert_stmt_rowContext.class, 0);
        }

        public Insert_stmt_colsContext insert_stmt_cols() {
            return getRuleContext(Insert_stmt_colsContext.class, 0);
        }

        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public List<Assignment_stmt_itemContext> assignment_stmt_item() {
            return getRuleContexts(Assignment_stmt_itemContext.class);
        }

        public Assignment_stmt_itemContext assignment_stmt_item(int i) {
            return getRuleContext(Assignment_stmt_itemContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class, 0);
        }

        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public Merge_actionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_merge_action;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterMerge_action(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitMerge_action(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitMerge_action(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Merge_actionContext merge_action() throws RecognitionException {
        Merge_actionContext _localctx = new Merge_actionContext(_ctx, getState());
        enterRule(_localctx, 356, RULE_merge_action);
        int _la;
        try {
            int _alt;
            setState(2562);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_INSERT:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2542);
                        match(T_INSERT);
                        setState(2544);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_OPEN_P) {
                            {
                                setState(2543);
                                insert_stmt_cols();
                            }
                        }

                        setState(2546);
                        match(T_VALUES);
                        setState(2547);
                        insert_stmt_row();
                    }
                    break;
                case T_UPDATE:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2548);
                        match(T_UPDATE);
                        setState(2549);
                        match(T_SET);
                        setState(2550);
                        assignment_stmt_item();
                        setState(2555);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 318, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(2551);
                                        match(T_COMMA);
                                        setState(2552);
                                        assignment_stmt_item();
                                    }
                                }
                            }
                            setState(2557);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 318, _ctx);
                        }
                        setState(2559);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 319, _ctx)) {
                            case 1:
                                {
                                    setState(2558);
                                    where_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_DELETE:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2561);
                        match(T_DELETE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Delete_stmtContext extends ParserRuleContext {
        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public Delete_aliasContext delete_alias() {
            return getRuleContext(Delete_aliasContext.class, 0);
        }

        public Where_clauseContext where_clause() {
            return getRuleContext(Where_clauseContext.class, 0);
        }

        public TerminalNode T_ALL() {
            return getToken(HplsqlParser.T_ALL, 0);
        }

        public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_delete_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDelete_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDelete_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDelete_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Delete_stmtContext delete_stmt() throws RecognitionException {
        Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
        enterRule(_localctx, 358, RULE_delete_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2564);
                match(T_DELETE);
                setState(2566);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 321, _ctx)) {
                    case 1:
                        {
                            setState(2565);
                            match(T_FROM);
                        }
                        break;
                }
                setState(2568);
                table_name();
                setState(2570);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 322, _ctx)) {
                    case 1:
                        {
                            setState(2569);
                            delete_alias();
                        }
                        break;
                }
                setState(2574);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 323, _ctx)) {
                    case 1:
                        {
                            setState(2572);
                            where_clause();
                        }
                        break;
                    case 2:
                        {
                            setState(2573);
                            match(T_ALL);
                        }
                        break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Delete_aliasContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public Delete_aliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_delete_alias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDelete_alias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDelete_alias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDelete_alias(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Delete_aliasContext delete_alias() throws RecognitionException {
        Delete_aliasContext _localctx = new Delete_aliasContext(_ctx, getState());
        enterRule(_localctx, 360, RULE_delete_alias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2576);
                if (!(!_input.LT(1).getText().equalsIgnoreCase("ALL")))
                    throw new FailedPredicateException(
                            this, "!_input.LT(1).getText().equalsIgnoreCase(\"ALL\")");
                setState(2578);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 324, _ctx)) {
                    case 1:
                        {
                            setState(2577);
                            match(T_AS);
                        }
                        break;
                }
                setState(2580);
                ident();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Describe_stmtContext extends ParserRuleContext {
        public Table_nameContext table_name() {
            return getRuleContext(Table_nameContext.class, 0);
        }

        public TerminalNode T_DESCRIBE() {
            return getToken(HplsqlParser.T_DESCRIBE, 0);
        }

        public TerminalNode T_DESC() {
            return getToken(HplsqlParser.T_DESC, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public Describe_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_describe_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDescribe_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDescribe_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDescribe_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Describe_stmtContext describe_stmt() throws RecognitionException {
        Describe_stmtContext _localctx = new Describe_stmtContext(_ctx, getState());
        enterRule(_localctx, 362, RULE_describe_stmt);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2582);
                _la = _input.LA(1);
                if (!(_la == T_DESC || _la == T_DESCRIBE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2584);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 325, _ctx)) {
                    case 1:
                        {
                            setState(2583);
                            match(T_TABLE);
                        }
                        break;
                }
                setState(2586);
                table_name();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_exprContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<Bool_exprContext> bool_expr() {
            return getRuleContexts(Bool_exprContext.class);
        }

        public Bool_exprContext bool_expr(int i) {
            return getRuleContext(Bool_exprContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public Bool_expr_atomContext bool_expr_atom() {
            return getRuleContext(Bool_expr_atomContext.class, 0);
        }

        public Bool_expr_logical_operatorContext bool_expr_logical_operator() {
            return getRuleContext(Bool_expr_logical_operatorContext.class, 0);
        }

        public Bool_exprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitBool_expr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_exprContext bool_expr() throws RecognitionException {
        return bool_expr(0);
    }

    private Bool_exprContext bool_expr(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        Bool_exprContext _localctx = new Bool_exprContext(_ctx, _parentState);
        Bool_exprContext _prevctx = _localctx;
        int _startState = 364;
        enterRecursionRule(_localctx, 364, RULE_bool_expr, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2597);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 327, _ctx)) {
                    case 1:
                        {
                            setState(2590);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_NOT) {
                                {
                                    setState(2589);
                                    match(T_NOT);
                                }
                            }

                            setState(2592);
                            match(T_OPEN_P);
                            setState(2593);
                            bool_expr(0);
                            setState(2594);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 2:
                        {
                            setState(2596);
                            bool_expr_atom();
                        }
                        break;
                }
                _ctx.stop = _input.LT(-1);
                setState(2605);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 328, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new Bool_exprContext(_parentctx, _parentState);
                                pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
                                setState(2599);
                                if (!(precpred(_ctx, 2)))
                                    throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                setState(2600);
                                bool_expr_logical_operator();
                                setState(2601);
                                bool_expr(3);
                            }
                        }
                    }
                    setState(2607);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 328, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_atomContext extends ParserRuleContext {
        public Bool_expr_unaryContext bool_expr_unary() {
            return getRuleContext(Bool_expr_unaryContext.class, 0);
        }

        public Bool_expr_binaryContext bool_expr_binary() {
            return getRuleContext(Bool_expr_binaryContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Bool_expr_atomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_atom;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_atom(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_atom(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_atom(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_atomContext bool_expr_atom() throws RecognitionException {
        Bool_expr_atomContext _localctx = new Bool_expr_atomContext(_ctx, getState());
        enterRule(_localctx, 366, RULE_bool_expr_atom);
        try {
            setState(2611);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 329, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2608);
                        bool_expr_unary();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2609);
                        bool_expr_binary();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2610);
                        expr(0);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_unaryContext extends ParserRuleContext {
        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_BETWEEN() {
            return getToken(HplsqlParser.T_BETWEEN, 0);
        }

        public TerminalNode T_AND() {
            return getToken(HplsqlParser.T_AND, 0);
        }

        public TerminalNode T_EXISTS() {
            return getToken(HplsqlParser.T_EXISTS, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Bool_expr_single_inContext bool_expr_single_in() {
            return getRuleContext(Bool_expr_single_inContext.class, 0);
        }

        public Bool_expr_multi_inContext bool_expr_multi_in() {
            return getRuleContext(Bool_expr_multi_inContext.class, 0);
        }

        public Bool_expr_unaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_unary;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_unary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_unary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_unary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_unaryContext bool_expr_unary() throws RecognitionException {
        Bool_expr_unaryContext _localctx = new Bool_expr_unaryContext(_ctx, getState());
        enterRule(_localctx, 368, RULE_bool_expr_unary);
        int _la;
        try {
            setState(2636);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 332, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2613);
                        expr(0);
                        setState(2614);
                        match(T_IS);
                        setState(2616);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(2615);
                                match(T_NOT);
                            }
                        }

                        setState(2618);
                        match(T_NULL);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2620);
                        expr(0);
                        setState(2621);
                        match(T_BETWEEN);
                        setState(2622);
                        expr(0);
                        setState(2623);
                        match(T_AND);
                        setState(2624);
                        expr(0);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2627);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(2626);
                                match(T_NOT);
                            }
                        }

                        setState(2629);
                        match(T_EXISTS);
                        setState(2630);
                        match(T_OPEN_P);
                        setState(2631);
                        select_stmt();
                        setState(2632);
                        match(T_CLOSE_P);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2634);
                        bool_expr_single_in();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2635);
                        bool_expr_multi_in();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_single_inContext extends ParserRuleContext {
        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Bool_expr_single_inContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_single_in;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_single_in(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_single_in(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_single_in(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_single_inContext bool_expr_single_in() throws RecognitionException {
        Bool_expr_single_inContext _localctx = new Bool_expr_single_inContext(_ctx, getState());
        enterRule(_localctx, 370, RULE_bool_expr_single_in);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2638);
                expr(0);
                setState(2640);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_NOT) {
                    {
                        setState(2639);
                        match(T_NOT);
                    }
                }

                setState(2642);
                match(T_IN);
                setState(2643);
                match(T_OPEN_P);
                setState(2653);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 335, _ctx)) {
                    case 1:
                        {
                            {
                                setState(2644);
                                expr(0);
                                setState(2649);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(2645);
                                            match(T_COMMA);
                                            setState(2646);
                                            expr(0);
                                        }
                                    }
                                    setState(2651);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }
                        break;
                    case 2:
                        {
                            setState(2652);
                            select_stmt();
                        }
                        break;
                }
                setState(2655);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_multi_inContext extends ParserRuleContext {
        public List<TerminalNode> T_OPEN_P() {
            return getTokens(HplsqlParser.T_OPEN_P);
        }

        public TerminalNode T_OPEN_P(int i) {
            return getToken(HplsqlParser.T_OPEN_P, i);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_CLOSE_P() {
            return getTokens(HplsqlParser.T_CLOSE_P);
        }

        public TerminalNode T_CLOSE_P(int i) {
            return getToken(HplsqlParser.T_CLOSE_P, i);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public Bool_expr_multi_inContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_multi_in;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_multi_in(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_multi_in(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_multi_in(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_multi_inContext bool_expr_multi_in() throws RecognitionException {
        Bool_expr_multi_inContext _localctx = new Bool_expr_multi_inContext(_ctx, getState());
        enterRule(_localctx, 372, RULE_bool_expr_multi_in);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2657);
                match(T_OPEN_P);
                setState(2658);
                expr(0);
                setState(2663);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2659);
                            match(T_COMMA);
                            setState(2660);
                            expr(0);
                        }
                    }
                    setState(2665);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2666);
                match(T_CLOSE_P);
                setState(2668);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_NOT) {
                    {
                        setState(2667);
                        match(T_NOT);
                    }
                }

                setState(2670);
                match(T_IN);
                setState(2671);
                match(T_OPEN_P);
                setState(2672);
                select_stmt();
                setState(2673);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_binaryContext extends ParserRuleContext {
        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public Bool_expr_binary_operatorContext bool_expr_binary_operator() {
            return getRuleContext(Bool_expr_binary_operatorContext.class, 0);
        }

        public Bool_expr_binaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_binary;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_binary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_binary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_binary(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_binaryContext bool_expr_binary() throws RecognitionException {
        Bool_expr_binaryContext _localctx = new Bool_expr_binaryContext(_ctx, getState());
        enterRule(_localctx, 374, RULE_bool_expr_binary);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2675);
                expr(0);
                setState(2676);
                bool_expr_binary_operator();
                setState(2677);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_logical_operatorContext extends ParserRuleContext {
        public TerminalNode T_AND() {
            return getToken(HplsqlParser.T_AND, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public Bool_expr_logical_operatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_logical_operator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_logical_operator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_logical_operator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_logical_operator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_logical_operatorContext bool_expr_logical_operator()
            throws RecognitionException {
        Bool_expr_logical_operatorContext _localctx =
                new Bool_expr_logical_operatorContext(_ctx, getState());
        enterRule(_localctx, 376, RULE_bool_expr_logical_operator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2679);
                _la = _input.LA(1);
                if (!(_la == T_AND || _la == T_OR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_expr_binary_operatorContext extends ParserRuleContext {
        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_EQUAL2() {
            return getToken(HplsqlParser.T_EQUAL2, 0);
        }

        public TerminalNode T_NOTEQUAL() {
            return getToken(HplsqlParser.T_NOTEQUAL, 0);
        }

        public TerminalNode T_NOTEQUAL2() {
            return getToken(HplsqlParser.T_NOTEQUAL2, 0);
        }

        public TerminalNode T_LESS() {
            return getToken(HplsqlParser.T_LESS, 0);
        }

        public TerminalNode T_LESSEQUAL() {
            return getToken(HplsqlParser.T_LESSEQUAL, 0);
        }

        public TerminalNode T_GREATER() {
            return getToken(HplsqlParser.T_GREATER, 0);
        }

        public TerminalNode T_GREATEREQUAL() {
            return getToken(HplsqlParser.T_GREATEREQUAL, 0);
        }

        public TerminalNode T_LIKE() {
            return getToken(HplsqlParser.T_LIKE, 0);
        }

        public TerminalNode T_RLIKE() {
            return getToken(HplsqlParser.T_RLIKE, 0);
        }

        public TerminalNode T_REGEXP() {
            return getToken(HplsqlParser.T_REGEXP, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public Bool_expr_binary_operatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_expr_binary_operator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_expr_binary_operator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_expr_binary_operator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_expr_binary_operator(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_expr_binary_operatorContext bool_expr_binary_operator()
            throws RecognitionException {
        Bool_expr_binary_operatorContext _localctx =
                new Bool_expr_binary_operatorContext(_ctx, getState());
        enterRule(_localctx, 378, RULE_bool_expr_binary_operator);
        int _la;
        try {
            setState(2693);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_EQUAL:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2681);
                        match(T_EQUAL);
                    }
                    break;
                case T_EQUAL2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2682);
                        match(T_EQUAL2);
                    }
                    break;
                case T_NOTEQUAL:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2683);
                        match(T_NOTEQUAL);
                    }
                    break;
                case T_NOTEQUAL2:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2684);
                        match(T_NOTEQUAL2);
                    }
                    break;
                case T_LESS:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2685);
                        match(T_LESS);
                    }
                    break;
                case T_LESSEQUAL:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2686);
                        match(T_LESSEQUAL);
                    }
                    break;
                case T_GREATER:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(2687);
                        match(T_GREATER);
                    }
                    break;
                case T_GREATEREQUAL:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(2688);
                        match(T_GREATEREQUAL);
                    }
                    break;
                case T_LIKE:
                case T_NOT:
                case T_REGEXP:
                case T_RLIKE:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(2690);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_NOT) {
                            {
                                setState(2689);
                                match(T_NOT);
                            }
                        }

                        setState(2692);
                        _la = _input.LA(1);
                        if (!(_la == T_LIKE || _la == T_REGEXP || _la == T_RLIKE)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class ExprContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public Expr_intervalContext expr_interval() {
            return getRuleContext(Expr_intervalContext.class, 0);
        }

        public Expr_concatContext expr_concat() {
            return getRuleContext(Expr_concatContext.class, 0);
        }

        public Expr_caseContext expr_case() {
            return getRuleContext(Expr_caseContext.class, 0);
        }

        public Expr_cursor_attributeContext expr_cursor_attribute() {
            return getRuleContext(Expr_cursor_attributeContext.class, 0);
        }

        public Expr_agg_window_funcContext expr_agg_window_func() {
            return getRuleContext(Expr_agg_window_funcContext.class, 0);
        }

        public Expr_spec_funcContext expr_spec_func() {
            return getRuleContext(Expr_spec_funcContext.class, 0);
        }

        public Expr_funcContext expr_func() {
            return getRuleContext(Expr_funcContext.class, 0);
        }

        public Expr_atomContext expr_atom() {
            return getRuleContext(Expr_atomContext.class, 0);
        }

        public TerminalNode T_MUL() {
            return getToken(HplsqlParser.T_MUL, 0);
        }

        public TerminalNode T_DIV() {
            return getToken(HplsqlParser.T_DIV, 0);
        }

        public TerminalNode T_ADD() {
            return getToken(HplsqlParser.T_ADD, 0);
        }

        public TerminalNode T_SUB() {
            return getToken(HplsqlParser.T_SUB, 0);
        }

        public Interval_itemContext interval_item() {
            return getRuleContext(Interval_itemContext.class, 0);
        }

        public ExprContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterExpr(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr(this);
            else return visitor.visitChildren(this);
        }
    }

    public final ExprContext expr() throws RecognitionException {
        return expr(0);
    }

    private ExprContext expr(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        ExprContext _localctx = new ExprContext(_ctx, _parentState);
        ExprContext _prevctx = _localctx;
        int _startState = 380;
        enterRecursionRule(_localctx, 380, RULE_expr, _p);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2712);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 340, _ctx)) {
                    case 1:
                        {
                            setState(2696);
                            match(T_OPEN_P);
                            setState(2697);
                            select_stmt();
                            setState(2698);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 2:
                        {
                            setState(2700);
                            match(T_OPEN_P);
                            setState(2701);
                            expr(0);
                            setState(2702);
                            match(T_CLOSE_P);
                        }
                        break;
                    case 3:
                        {
                            setState(2704);
                            expr_interval();
                        }
                        break;
                    case 4:
                        {
                            setState(2705);
                            expr_concat();
                        }
                        break;
                    case 5:
                        {
                            setState(2706);
                            expr_case();
                        }
                        break;
                    case 6:
                        {
                            setState(2707);
                            expr_cursor_attribute();
                        }
                        break;
                    case 7:
                        {
                            setState(2708);
                            expr_agg_window_func();
                        }
                        break;
                    case 8:
                        {
                            setState(2709);
                            expr_spec_func();
                        }
                        break;
                    case 9:
                        {
                            setState(2710);
                            expr_func();
                        }
                        break;
                    case 10:
                        {
                            setState(2711);
                            expr_atom();
                        }
                        break;
                }
                _ctx.stop = _input.LT(-1);
                setState(2730);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 342, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(2728);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 341, _ctx)) {
                                case 1:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(2714);
                                        if (!(precpred(_ctx, 14)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 14)");
                                        setState(2715);
                                        match(T_MUL);
                                        setState(2716);
                                        expr(15);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(2717);
                                        if (!(precpred(_ctx, 13)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 13)");
                                        setState(2718);
                                        match(T_DIV);
                                        setState(2719);
                                        expr(14);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(2720);
                                        if (!(precpred(_ctx, 12)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 12)");
                                        setState(2721);
                                        match(T_ADD);
                                        setState(2722);
                                        expr(13);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(2723);
                                        if (!(precpred(_ctx, 11)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 11)");
                                        setState(2724);
                                        match(T_SUB);
                                        setState(2725);
                                        expr(12);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new ExprContext(_parentctx, _parentState);
                                        pushNewRecursionContext(_localctx, _startState, RULE_expr);
                                        setState(2726);
                                        if (!(precpred(_ctx, 15)))
                                            throw new FailedPredicateException(
                                                    this, "precpred(_ctx, 15)");
                                        setState(2727);
                                        interval_item();
                                    }
                                    break;
                            }
                        }
                    }
                    setState(2732);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 342, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_atomContext extends ParserRuleContext {
        public Date_literalContext date_literal() {
            return getRuleContext(Date_literalContext.class, 0);
        }

        public Timestamp_literalContext timestamp_literal() {
            return getRuleContext(Timestamp_literalContext.class, 0);
        }

        public Bool_literalContext bool_literal() {
            return getRuleContext(Bool_literalContext.class, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public StringContext string() {
            return getRuleContext(StringContext.class, 0);
        }

        public Dec_numberContext dec_number() {
            return getRuleContext(Dec_numberContext.class, 0);
        }

        public Int_numberContext int_number() {
            return getRuleContext(Int_numberContext.class, 0);
        }

        public Null_constContext null_const() {
            return getRuleContext(Null_constContext.class, 0);
        }

        public Expr_atomContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_atom;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_atom(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr_atom(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_atom(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_atomContext expr_atom() throws RecognitionException {
        Expr_atomContext _localctx = new Expr_atomContext(_ctx, getState());
        enterRule(_localctx, 382, RULE_expr_atom);
        try {
            setState(2741);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 343, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2733);
                        date_literal();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2734);
                        timestamp_literal();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2735);
                        bool_literal();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2736);
                        ident();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2737);
                        string();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2738);
                        dec_number();
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(2739);
                        int_number();
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(2740);
                        null_const();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_intervalContext extends ParserRuleContext {
        public TerminalNode T_INTERVAL() {
            return getToken(HplsqlParser.T_INTERVAL, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Interval_itemContext interval_item() {
            return getRuleContext(Interval_itemContext.class, 0);
        }

        public Expr_intervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_interval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_interval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_interval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_interval(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_intervalContext expr_interval() throws RecognitionException {
        Expr_intervalContext _localctx = new Expr_intervalContext(_ctx, getState());
        enterRule(_localctx, 384, RULE_expr_interval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2743);
                match(T_INTERVAL);
                setState(2744);
                expr(0);
                setState(2745);
                interval_item();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Interval_itemContext extends ParserRuleContext {
        public TerminalNode T_DAY() {
            return getToken(HplsqlParser.T_DAY, 0);
        }

        public TerminalNode T_DAYS() {
            return getToken(HplsqlParser.T_DAYS, 0);
        }

        public TerminalNode T_MICROSECOND() {
            return getToken(HplsqlParser.T_MICROSECOND, 0);
        }

        public TerminalNode T_MICROSECONDS() {
            return getToken(HplsqlParser.T_MICROSECONDS, 0);
        }

        public TerminalNode T_SECOND() {
            return getToken(HplsqlParser.T_SECOND, 0);
        }

        public TerminalNode T_SECONDS() {
            return getToken(HplsqlParser.T_SECONDS, 0);
        }

        public Interval_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_interval_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInterval_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInterval_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInterval_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Interval_itemContext interval_item() throws RecognitionException {
        Interval_itemContext _localctx = new Interval_itemContext(_ctx, getState());
        enterRule(_localctx, 386, RULE_interval_item);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2747);
                _la = _input.LA(1);
                if (!(_la == T_DAY
                        || _la == T_DAYS
                        || _la == T_MICROSECOND
                        || _la == T_MICROSECONDS
                        || _la == T_SECOND
                        || _la == T_SECONDS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_concatContext extends ParserRuleContext {
        public List<Expr_concat_itemContext> expr_concat_item() {
            return getRuleContexts(Expr_concat_itemContext.class);
        }

        public Expr_concat_itemContext expr_concat_item(int i) {
            return getRuleContext(Expr_concat_itemContext.class, i);
        }

        public List<TerminalNode> T_PIPE() {
            return getTokens(HplsqlParser.T_PIPE);
        }

        public TerminalNode T_PIPE(int i) {
            return getToken(HplsqlParser.T_PIPE, i);
        }

        public List<TerminalNode> T_CONCAT() {
            return getTokens(HplsqlParser.T_CONCAT);
        }

        public TerminalNode T_CONCAT(int i) {
            return getToken(HplsqlParser.T_CONCAT, i);
        }

        public Expr_concatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_concat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_concat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_concat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_concat(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_concatContext expr_concat() throws RecognitionException {
        Expr_concatContext _localctx = new Expr_concatContext(_ctx, getState());
        enterRule(_localctx, 388, RULE_expr_concat);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2749);
                expr_concat_item();
                setState(2750);
                _la = _input.LA(1);
                if (!(_la == T_CONCAT || _la == T_PIPE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(2751);
                expr_concat_item();
                setState(2756);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 344, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2752);
                                _la = _input.LA(1);
                                if (!(_la == T_CONCAT || _la == T_PIPE)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(2753);
                                expr_concat_item();
                            }
                        }
                    }
                    setState(2758);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 344, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_concat_itemContext extends ParserRuleContext {
        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Expr_caseContext expr_case() {
            return getRuleContext(Expr_caseContext.class, 0);
        }

        public Expr_agg_window_funcContext expr_agg_window_func() {
            return getRuleContext(Expr_agg_window_funcContext.class, 0);
        }

        public Expr_spec_funcContext expr_spec_func() {
            return getRuleContext(Expr_spec_funcContext.class, 0);
        }

        public Expr_funcContext expr_func() {
            return getRuleContext(Expr_funcContext.class, 0);
        }

        public Expr_atomContext expr_atom() {
            return getRuleContext(Expr_atomContext.class, 0);
        }

        public Expr_concat_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_concat_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_concat_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_concat_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_concat_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_concat_itemContext expr_concat_item() throws RecognitionException {
        Expr_concat_itemContext _localctx = new Expr_concat_itemContext(_ctx, getState());
        enterRule(_localctx, 390, RULE_expr_concat_item);
        try {
            setState(2768);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 345, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2759);
                        match(T_OPEN_P);
                        setState(2760);
                        expr(0);
                        setState(2761);
                        match(T_CLOSE_P);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2763);
                        expr_case();
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2764);
                        expr_agg_window_func();
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2765);
                        expr_spec_func();
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2766);
                        expr_func();
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2767);
                        expr_atom();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_caseContext extends ParserRuleContext {
        public Expr_case_simpleContext expr_case_simple() {
            return getRuleContext(Expr_case_simpleContext.class, 0);
        }

        public Expr_case_searchedContext expr_case_searched() {
            return getRuleContext(Expr_case_searchedContext.class, 0);
        }

        public Expr_caseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_case;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_case(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr_case(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_case(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_caseContext expr_case() throws RecognitionException {
        Expr_caseContext _localctx = new Expr_caseContext(_ctx, getState());
        enterRule(_localctx, 392, RULE_expr_case);
        try {
            setState(2772);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 346, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2770);
                        expr_case_simple();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2771);
                        expr_case_searched();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_case_simpleContext extends ParserRuleContext {
        public TerminalNode T_CASE() {
            return getToken(HplsqlParser.T_CASE, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public List<TerminalNode> T_WHEN() {
            return getTokens(HplsqlParser.T_WHEN);
        }

        public TerminalNode T_WHEN(int i) {
            return getToken(HplsqlParser.T_WHEN, i);
        }

        public List<TerminalNode> T_THEN() {
            return getTokens(HplsqlParser.T_THEN);
        }

        public TerminalNode T_THEN(int i) {
            return getToken(HplsqlParser.T_THEN, i);
        }

        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public Expr_case_simpleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_case_simple;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_case_simple(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_case_simple(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_case_simple(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_case_simpleContext expr_case_simple() throws RecognitionException {
        Expr_case_simpleContext _localctx = new Expr_case_simpleContext(_ctx, getState());
        enterRule(_localctx, 394, RULE_expr_case_simple);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2774);
                match(T_CASE);
                setState(2775);
                expr(0);
                setState(2781);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(2776);
                            match(T_WHEN);
                            setState(2777);
                            expr(0);
                            setState(2778);
                            match(T_THEN);
                            setState(2779);
                            expr(0);
                        }
                    }
                    setState(2783);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == T_WHEN);
                setState(2787);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ELSE) {
                    {
                        setState(2785);
                        match(T_ELSE);
                        setState(2786);
                        expr(0);
                    }
                }

                setState(2789);
                match(T_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_case_searchedContext extends ParserRuleContext {
        public TerminalNode T_CASE() {
            return getToken(HplsqlParser.T_CASE, 0);
        }

        public TerminalNode T_END() {
            return getToken(HplsqlParser.T_END, 0);
        }

        public List<TerminalNode> T_WHEN() {
            return getTokens(HplsqlParser.T_WHEN);
        }

        public TerminalNode T_WHEN(int i) {
            return getToken(HplsqlParser.T_WHEN, i);
        }

        public List<Bool_exprContext> bool_expr() {
            return getRuleContexts(Bool_exprContext.class);
        }

        public Bool_exprContext bool_expr(int i) {
            return getRuleContext(Bool_exprContext.class, i);
        }

        public List<TerminalNode> T_THEN() {
            return getTokens(HplsqlParser.T_THEN);
        }

        public TerminalNode T_THEN(int i) {
            return getToken(HplsqlParser.T_THEN, i);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_ELSE() {
            return getToken(HplsqlParser.T_ELSE, 0);
        }

        public Expr_case_searchedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_case_searched;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_case_searched(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_case_searched(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_case_searched(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_case_searchedContext expr_case_searched() throws RecognitionException {
        Expr_case_searchedContext _localctx = new Expr_case_searchedContext(_ctx, getState());
        enterRule(_localctx, 396, RULE_expr_case_searched);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2791);
                match(T_CASE);
                setState(2797);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(2792);
                            match(T_WHEN);
                            setState(2793);
                            bool_expr(0);
                            setState(2794);
                            match(T_THEN);
                            setState(2795);
                            expr(0);
                        }
                    }
                    setState(2799);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == T_WHEN);
                setState(2803);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ELSE) {
                    {
                        setState(2801);
                        match(T_ELSE);
                        setState(2802);
                        expr(0);
                    }
                }

                setState(2805);
                match(T_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_cursor_attributeContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_ISOPEN() {
            return getToken(HplsqlParser.T_ISOPEN, 0);
        }

        public TerminalNode T_FOUND() {
            return getToken(HplsqlParser.T_FOUND, 0);
        }

        public TerminalNode T_NOTFOUND() {
            return getToken(HplsqlParser.T_NOTFOUND, 0);
        }

        public Expr_cursor_attributeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_cursor_attribute;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_cursor_attribute(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_cursor_attribute(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_cursor_attribute(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_cursor_attributeContext expr_cursor_attribute() throws RecognitionException {
        Expr_cursor_attributeContext _localctx = new Expr_cursor_attributeContext(_ctx, getState());
        enterRule(_localctx, 398, RULE_expr_cursor_attribute);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2807);
                ident();
                setState(2808);
                match(T__2);
                setState(2809);
                _la = _input.LA(1);
                if (!(_la == T_FOUND || _la == T_ISOPEN || _la == T_NOTFOUND)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_agg_window_funcContext extends ParserRuleContext {
        public TerminalNode T_AVG() {
            return getToken(HplsqlParser.T_AVG, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Expr_func_all_distinctContext expr_func_all_distinct() {
            return getRuleContext(Expr_func_all_distinctContext.class, 0);
        }

        public Expr_func_over_clauseContext expr_func_over_clause() {
            return getRuleContext(Expr_func_over_clauseContext.class, 0);
        }

        public TerminalNode T_COUNT() {
            return getToken(HplsqlParser.T_COUNT, 0);
        }

        public TerminalNode T_MUL() {
            return getToken(HplsqlParser.T_MUL, 0);
        }

        public TerminalNode T_COUNT_BIG() {
            return getToken(HplsqlParser.T_COUNT_BIG, 0);
        }

        public TerminalNode T_CUME_DIST() {
            return getToken(HplsqlParser.T_CUME_DIST, 0);
        }

        public TerminalNode T_DENSE_RANK() {
            return getToken(HplsqlParser.T_DENSE_RANK, 0);
        }

        public TerminalNode T_FIRST_VALUE() {
            return getToken(HplsqlParser.T_FIRST_VALUE, 0);
        }

        public TerminalNode T_LAG() {
            return getToken(HplsqlParser.T_LAG, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public TerminalNode T_LAST_VALUE() {
            return getToken(HplsqlParser.T_LAST_VALUE, 0);
        }

        public TerminalNode T_LEAD() {
            return getToken(HplsqlParser.T_LEAD, 0);
        }

        public TerminalNode T_MAX() {
            return getToken(HplsqlParser.T_MAX, 0);
        }

        public TerminalNode T_MIN() {
            return getToken(HplsqlParser.T_MIN, 0);
        }

        public TerminalNode T_RANK() {
            return getToken(HplsqlParser.T_RANK, 0);
        }

        public TerminalNode T_ROW_NUMBER() {
            return getToken(HplsqlParser.T_ROW_NUMBER, 0);
        }

        public TerminalNode T_STDEV() {
            return getToken(HplsqlParser.T_STDEV, 0);
        }

        public TerminalNode T_SUM() {
            return getToken(HplsqlParser.T_SUM, 0);
        }

        public TerminalNode T_VAR() {
            return getToken(HplsqlParser.T_VAR, 0);
        }

        public TerminalNode T_VARIANCE() {
            return getToken(HplsqlParser.T_VARIANCE, 0);
        }

        public Expr_agg_window_funcContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_agg_window_func;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_agg_window_func(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_agg_window_func(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_agg_window_func(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_agg_window_funcContext expr_agg_window_func() throws RecognitionException {
        Expr_agg_window_funcContext _localctx = new Expr_agg_window_funcContext(_ctx, getState());
        enterRule(_localctx, 400, RULE_expr_agg_window_func);
        int _la;
        try {
            setState(2963);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T_AVG:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2811);
                        match(T_AVG);
                        setState(2812);
                        match(T_OPEN_P);
                        setState(2814);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 351, _ctx)) {
                            case 1:
                                {
                                    setState(2813);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2816);
                        expr(0);
                        setState(2817);
                        match(T_CLOSE_P);
                        setState(2819);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 352, _ctx)) {
                            case 1:
                                {
                                    setState(2818);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_COUNT:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2821);
                        match(T_COUNT);
                        setState(2822);
                        match(T_OPEN_P);
                        setState(2828);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_ACTION:
                            case T_ADD2:
                            case T_ALL:
                            case T_ALLOCATE:
                            case T_ALTER:
                            case T_AND:
                            case T_ANSI_NULLS:
                            case T_ANSI_PADDING:
                            case T_AS:
                            case T_ASC:
                            case T_ASSOCIATE:
                            case T_AT:
                            case T_AUTO_INCREMENT:
                            case T_AVG:
                            case T_BATCHSIZE:
                            case T_BEGIN:
                            case T_BETWEEN:
                            case T_BIGINT:
                            case T_BINARY_DOUBLE:
                            case T_BINARY_FLOAT:
                            case T_BIT:
                            case T_BODY:
                            case T_BREAK:
                            case T_BY:
                            case T_BYTE:
                            case T_CALL:
                            case T_CALLER:
                            case T_CASCADE:
                            case T_CASE:
                            case T_CASESPECIFIC:
                            case T_CAST:
                            case T_CHAR:
                            case T_CHARACTER:
                            case T_CHARSET:
                            case T_CLIENT:
                            case T_CLOSE:
                            case T_CLUSTERED:
                            case T_CMP:
                            case T_COLLECT:
                            case T_COLLECTION:
                            case T_COLUMN:
                            case T_COMMENT:
                            case T_CONSTANT:
                            case T_COMMIT:
                            case T_COMPRESS:
                            case T_CONCAT:
                            case T_CONDITION:
                            case T_CONSTRAINT:
                            case T_CONTINUE:
                            case T_COPY:
                            case T_COUNT:
                            case T_COUNT_BIG:
                            case T_CREATE:
                            case T_CREATION:
                            case T_CREATOR:
                            case T_CS:
                            case T_CURRENT:
                            case T_CURRENT_SCHEMA:
                            case T_CURSOR:
                            case T_DATABASE:
                            case T_DATA:
                            case T_DATE:
                            case T_DATETIME:
                            case T_DAY:
                            case T_DAYS:
                            case T_DEC:
                            case T_DECIMAL:
                            case T_DECLARE:
                            case T_DEFAULT:
                            case T_DEFERRED:
                            case T_DEFINED:
                            case T_DEFINER:
                            case T_DEFINITION:
                            case T_DELETE:
                            case T_DELIMITED:
                            case T_DELIMITER:
                            case T_DESC:
                            case T_DESCRIBE:
                            case T_DIAGNOSTICS:
                            case T_DIR:
                            case T_DIRECTORY:
                            case T_DISTINCT:
                            case T_DISTRIBUTE:
                            case T_DO:
                            case T_DOUBLE:
                            case T_DROP:
                            case T_DYNAMIC:
                            case T_ENABLE:
                            case T_ENGINE:
                            case T_ESCAPED:
                            case T_EXCEPT:
                            case T_EXEC:
                            case T_EXECUTE:
                            case T_EXCEPTION:
                            case T_EXCLUSIVE:
                            case T_EXISTS:
                            case T_EXIT:
                            case T_FALLBACK:
                            case T_FALSE:
                            case T_FETCH:
                            case T_FIELDS:
                            case T_FILE:
                            case T_FILES:
                            case T_FLOAT:
                            case T_FOR:
                            case T_FOREIGN:
                            case T_FORMAT:
                            case T_FOUND:
                            case T_FROM:
                            case T_FULL:
                            case T_FUNCTION:
                            case T_GET:
                            case T_GLOBAL:
                            case T_GO:
                            case T_GRANT:
                            case T_GROUP:
                            case T_HANDLER:
                            case T_HASH:
                            case T_HAVING:
                            case T_HDFS:
                            case T_HIVE:
                            case T_HOST:
                            case T_IDENTITY:
                            case T_IF:
                            case T_IGNORE:
                            case T_IMMEDIATE:
                            case T_IN:
                            case T_INCLUDE:
                            case T_INDEX:
                            case T_INITRANS:
                            case T_INNER:
                            case T_INOUT:
                            case T_INSERT:
                            case T_INT:
                            case T_INT2:
                            case T_INT4:
                            case T_INT8:
                            case T_INTEGER:
                            case T_INTERSECT:
                            case T_INTERVAL:
                            case T_INTO:
                            case T_INVOKER:
                            case T_IS:
                            case T_ISOPEN:
                            case T_ITEMS:
                            case T_JOIN:
                            case T_KEEP:
                            case T_KEY:
                            case T_KEYS:
                            case T_LANGUAGE:
                            case T_LEAVE:
                            case T_LEFT:
                            case T_LIKE:
                            case T_LIMIT:
                            case T_LINES:
                            case T_LOCAL:
                            case T_LOCATION:
                            case T_LOCATOR:
                            case T_LOCATORS:
                            case T_LOCKS:
                            case T_LOG:
                            case T_LOGGED:
                            case T_LOGGING:
                            case T_LOOP:
                            case T_MAP:
                            case T_MATCHED:
                            case T_MAX:
                            case T_MAXTRANS:
                            case T_MERGE:
                            case T_MESSAGE_TEXT:
                            case T_MICROSECOND:
                            case T_MICROSECONDS:
                            case T_MIN:
                            case T_MULTISET:
                            case T_NCHAR:
                            case T_NEW:
                            case T_NVARCHAR:
                            case T_NO:
                            case T_NOCOUNT:
                            case T_NOCOMPRESS:
                            case T_NOLOGGING:
                            case T_NONE:
                            case T_NOT:
                            case T_NOTFOUND:
                            case T_NULL:
                            case T_NUMERIC:
                            case T_NUMBER:
                            case T_OBJECT:
                            case T_OFF:
                            case T_ON:
                            case T_ONLY:
                            case T_OPEN:
                            case T_OR:
                            case T_ORDER:
                            case T_OUT:
                            case T_OUTER:
                            case T_OVER:
                            case T_OVERWRITE:
                            case T_OWNER:
                            case T_PACKAGE:
                            case T_PARTITION:
                            case T_PCTFREE:
                            case T_PCTUSED:
                            case T_PRECISION:
                            case T_PRESERVE:
                            case T_PRIMARY:
                            case T_PRINT:
                            case T_PROC:
                            case T_PROCEDURE:
                            case T_QUALIFY:
                            case T_QUERY_BAND:
                            case T_QUIT:
                            case T_QUOTED_IDENTIFIER:
                            case T_RAISE:
                            case T_REAL:
                            case T_REFERENCES:
                            case T_REGEXP:
                            case T_REPLACE:
                            case T_RESIGNAL:
                            case T_RESTRICT:
                            case T_RESULT:
                            case T_RESULT_SET_LOCATOR:
                            case T_RETURN:
                            case T_RETURNS:
                            case T_REVERSE:
                            case T_RIGHT:
                            case T_RLIKE:
                            case T_ROLE:
                            case T_ROLLBACK:
                            case T_ROW:
                            case T_ROWS:
                            case T_ROW_COUNT:
                            case T_RR:
                            case T_RS:
                            case T_PWD:
                            case T_TRIM:
                            case T_SCHEMA:
                            case T_SECOND:
                            case T_SECONDS:
                            case T_SECURITY:
                            case T_SEGMENT:
                            case T_SEL:
                            case T_SELECT:
                            case T_SET:
                            case T_SESSION:
                            case T_SESSIONS:
                            case T_SETS:
                            case T_SHARE:
                            case T_SIGNAL:
                            case T_SIMPLE_DOUBLE:
                            case T_SIMPLE_FLOAT:
                            case T_SMALLDATETIME:
                            case T_SMALLINT:
                            case T_SQL:
                            case T_SQLEXCEPTION:
                            case T_SQLINSERT:
                            case T_SQLSTATE:
                            case T_SQLWARNING:
                            case T_STATS:
                            case T_STATISTICS:
                            case T_STEP:
                            case T_STORAGE:
                            case T_STORED:
                            case T_STRING:
                            case T_SUBDIR:
                            case T_SUBSTRING:
                            case T_SUM:
                            case T_SYS_REFCURSOR:
                            case T_TABLE:
                            case T_TABLESPACE:
                            case T_TEMPORARY:
                            case T_TERMINATED:
                            case T_TEXTIMAGE_ON:
                            case T_THEN:
                            case T_TIMESTAMP:
                            case T_TITLE:
                            case T_TO:
                            case T_TOP:
                            case T_TRANSACTION:
                            case T_TRUE:
                            case T_TRUNCATE:
                            case T_UNIQUE:
                            case T_UPDATE:
                            case T_UR:
                            case T_USE:
                            case T_USING:
                            case T_VALUE:
                            case T_VALUES:
                            case T_VAR:
                            case T_VARCHAR:
                            case T_VARCHAR2:
                            case T_VARYING:
                            case T_VOLATILE:
                            case T_WHILE:
                            case T_WITH:
                            case T_WITHOUT:
                            case T_WORK:
                            case T_XACT_ABORT:
                            case T_XML:
                            case T_YES:
                            case T_ACTIVITY_COUNT:
                            case T_CUME_DIST:
                            case T_CURRENT_DATE:
                            case T_CURRENT_TIMESTAMP:
                            case T_CURRENT_USER:
                            case T_DENSE_RANK:
                            case T_FIRST_VALUE:
                            case T_LAG:
                            case T_LAST_VALUE:
                            case T_LEAD:
                            case T_MAX_PART_STRING:
                            case T_MIN_PART_STRING:
                            case T_MAX_PART_INT:
                            case T_MIN_PART_INT:
                            case T_MAX_PART_DATE:
                            case T_MIN_PART_DATE:
                            case T_PART_COUNT:
                            case T_PART_LOC:
                            case T_RANK:
                            case T_ROW_NUMBER:
                            case T_STDEV:
                            case T_SYSDATE:
                            case T_VARIANCE:
                            case T_USER:
                            case T_ADD:
                            case T_OPEN_P:
                            case T_SUB:
                            case L_ID:
                            case L_S_STRING:
                            case L_D_STRING:
                            case L_INT:
                            case L_DEC:
                                {
                                    {
                                        setState(2824);
                                        _errHandler.sync(this);
                                        switch (getInterpreter()
                                                .adaptivePredict(_input, 353, _ctx)) {
                                            case 1:
                                                {
                                                    setState(2823);
                                                    expr_func_all_distinct();
                                                }
                                                break;
                                        }
                                        setState(2826);
                                        expr(0);
                                    }
                                }
                                break;
                            case T_MUL:
                                {
                                    setState(2827);
                                    match(T_MUL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(2830);
                        match(T_CLOSE_P);
                        setState(2832);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 355, _ctx)) {
                            case 1:
                                {
                                    setState(2831);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_COUNT_BIG:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2834);
                        match(T_COUNT_BIG);
                        setState(2835);
                        match(T_OPEN_P);
                        setState(2841);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_ACTION:
                            case T_ADD2:
                            case T_ALL:
                            case T_ALLOCATE:
                            case T_ALTER:
                            case T_AND:
                            case T_ANSI_NULLS:
                            case T_ANSI_PADDING:
                            case T_AS:
                            case T_ASC:
                            case T_ASSOCIATE:
                            case T_AT:
                            case T_AUTO_INCREMENT:
                            case T_AVG:
                            case T_BATCHSIZE:
                            case T_BEGIN:
                            case T_BETWEEN:
                            case T_BIGINT:
                            case T_BINARY_DOUBLE:
                            case T_BINARY_FLOAT:
                            case T_BIT:
                            case T_BODY:
                            case T_BREAK:
                            case T_BY:
                            case T_BYTE:
                            case T_CALL:
                            case T_CALLER:
                            case T_CASCADE:
                            case T_CASE:
                            case T_CASESPECIFIC:
                            case T_CAST:
                            case T_CHAR:
                            case T_CHARACTER:
                            case T_CHARSET:
                            case T_CLIENT:
                            case T_CLOSE:
                            case T_CLUSTERED:
                            case T_CMP:
                            case T_COLLECT:
                            case T_COLLECTION:
                            case T_COLUMN:
                            case T_COMMENT:
                            case T_CONSTANT:
                            case T_COMMIT:
                            case T_COMPRESS:
                            case T_CONCAT:
                            case T_CONDITION:
                            case T_CONSTRAINT:
                            case T_CONTINUE:
                            case T_COPY:
                            case T_COUNT:
                            case T_COUNT_BIG:
                            case T_CREATE:
                            case T_CREATION:
                            case T_CREATOR:
                            case T_CS:
                            case T_CURRENT:
                            case T_CURRENT_SCHEMA:
                            case T_CURSOR:
                            case T_DATABASE:
                            case T_DATA:
                            case T_DATE:
                            case T_DATETIME:
                            case T_DAY:
                            case T_DAYS:
                            case T_DEC:
                            case T_DECIMAL:
                            case T_DECLARE:
                            case T_DEFAULT:
                            case T_DEFERRED:
                            case T_DEFINED:
                            case T_DEFINER:
                            case T_DEFINITION:
                            case T_DELETE:
                            case T_DELIMITED:
                            case T_DELIMITER:
                            case T_DESC:
                            case T_DESCRIBE:
                            case T_DIAGNOSTICS:
                            case T_DIR:
                            case T_DIRECTORY:
                            case T_DISTINCT:
                            case T_DISTRIBUTE:
                            case T_DO:
                            case T_DOUBLE:
                            case T_DROP:
                            case T_DYNAMIC:
                            case T_ENABLE:
                            case T_ENGINE:
                            case T_ESCAPED:
                            case T_EXCEPT:
                            case T_EXEC:
                            case T_EXECUTE:
                            case T_EXCEPTION:
                            case T_EXCLUSIVE:
                            case T_EXISTS:
                            case T_EXIT:
                            case T_FALLBACK:
                            case T_FALSE:
                            case T_FETCH:
                            case T_FIELDS:
                            case T_FILE:
                            case T_FILES:
                            case T_FLOAT:
                            case T_FOR:
                            case T_FOREIGN:
                            case T_FORMAT:
                            case T_FOUND:
                            case T_FROM:
                            case T_FULL:
                            case T_FUNCTION:
                            case T_GET:
                            case T_GLOBAL:
                            case T_GO:
                            case T_GRANT:
                            case T_GROUP:
                            case T_HANDLER:
                            case T_HASH:
                            case T_HAVING:
                            case T_HDFS:
                            case T_HIVE:
                            case T_HOST:
                            case T_IDENTITY:
                            case T_IF:
                            case T_IGNORE:
                            case T_IMMEDIATE:
                            case T_IN:
                            case T_INCLUDE:
                            case T_INDEX:
                            case T_INITRANS:
                            case T_INNER:
                            case T_INOUT:
                            case T_INSERT:
                            case T_INT:
                            case T_INT2:
                            case T_INT4:
                            case T_INT8:
                            case T_INTEGER:
                            case T_INTERSECT:
                            case T_INTERVAL:
                            case T_INTO:
                            case T_INVOKER:
                            case T_IS:
                            case T_ISOPEN:
                            case T_ITEMS:
                            case T_JOIN:
                            case T_KEEP:
                            case T_KEY:
                            case T_KEYS:
                            case T_LANGUAGE:
                            case T_LEAVE:
                            case T_LEFT:
                            case T_LIKE:
                            case T_LIMIT:
                            case T_LINES:
                            case T_LOCAL:
                            case T_LOCATION:
                            case T_LOCATOR:
                            case T_LOCATORS:
                            case T_LOCKS:
                            case T_LOG:
                            case T_LOGGED:
                            case T_LOGGING:
                            case T_LOOP:
                            case T_MAP:
                            case T_MATCHED:
                            case T_MAX:
                            case T_MAXTRANS:
                            case T_MERGE:
                            case T_MESSAGE_TEXT:
                            case T_MICROSECOND:
                            case T_MICROSECONDS:
                            case T_MIN:
                            case T_MULTISET:
                            case T_NCHAR:
                            case T_NEW:
                            case T_NVARCHAR:
                            case T_NO:
                            case T_NOCOUNT:
                            case T_NOCOMPRESS:
                            case T_NOLOGGING:
                            case T_NONE:
                            case T_NOT:
                            case T_NOTFOUND:
                            case T_NULL:
                            case T_NUMERIC:
                            case T_NUMBER:
                            case T_OBJECT:
                            case T_OFF:
                            case T_ON:
                            case T_ONLY:
                            case T_OPEN:
                            case T_OR:
                            case T_ORDER:
                            case T_OUT:
                            case T_OUTER:
                            case T_OVER:
                            case T_OVERWRITE:
                            case T_OWNER:
                            case T_PACKAGE:
                            case T_PARTITION:
                            case T_PCTFREE:
                            case T_PCTUSED:
                            case T_PRECISION:
                            case T_PRESERVE:
                            case T_PRIMARY:
                            case T_PRINT:
                            case T_PROC:
                            case T_PROCEDURE:
                            case T_QUALIFY:
                            case T_QUERY_BAND:
                            case T_QUIT:
                            case T_QUOTED_IDENTIFIER:
                            case T_RAISE:
                            case T_REAL:
                            case T_REFERENCES:
                            case T_REGEXP:
                            case T_REPLACE:
                            case T_RESIGNAL:
                            case T_RESTRICT:
                            case T_RESULT:
                            case T_RESULT_SET_LOCATOR:
                            case T_RETURN:
                            case T_RETURNS:
                            case T_REVERSE:
                            case T_RIGHT:
                            case T_RLIKE:
                            case T_ROLE:
                            case T_ROLLBACK:
                            case T_ROW:
                            case T_ROWS:
                            case T_ROW_COUNT:
                            case T_RR:
                            case T_RS:
                            case T_PWD:
                            case T_TRIM:
                            case T_SCHEMA:
                            case T_SECOND:
                            case T_SECONDS:
                            case T_SECURITY:
                            case T_SEGMENT:
                            case T_SEL:
                            case T_SELECT:
                            case T_SET:
                            case T_SESSION:
                            case T_SESSIONS:
                            case T_SETS:
                            case T_SHARE:
                            case T_SIGNAL:
                            case T_SIMPLE_DOUBLE:
                            case T_SIMPLE_FLOAT:
                            case T_SMALLDATETIME:
                            case T_SMALLINT:
                            case T_SQL:
                            case T_SQLEXCEPTION:
                            case T_SQLINSERT:
                            case T_SQLSTATE:
                            case T_SQLWARNING:
                            case T_STATS:
                            case T_STATISTICS:
                            case T_STEP:
                            case T_STORAGE:
                            case T_STORED:
                            case T_STRING:
                            case T_SUBDIR:
                            case T_SUBSTRING:
                            case T_SUM:
                            case T_SYS_REFCURSOR:
                            case T_TABLE:
                            case T_TABLESPACE:
                            case T_TEMPORARY:
                            case T_TERMINATED:
                            case T_TEXTIMAGE_ON:
                            case T_THEN:
                            case T_TIMESTAMP:
                            case T_TITLE:
                            case T_TO:
                            case T_TOP:
                            case T_TRANSACTION:
                            case T_TRUE:
                            case T_TRUNCATE:
                            case T_UNIQUE:
                            case T_UPDATE:
                            case T_UR:
                            case T_USE:
                            case T_USING:
                            case T_VALUE:
                            case T_VALUES:
                            case T_VAR:
                            case T_VARCHAR:
                            case T_VARCHAR2:
                            case T_VARYING:
                            case T_VOLATILE:
                            case T_WHILE:
                            case T_WITH:
                            case T_WITHOUT:
                            case T_WORK:
                            case T_XACT_ABORT:
                            case T_XML:
                            case T_YES:
                            case T_ACTIVITY_COUNT:
                            case T_CUME_DIST:
                            case T_CURRENT_DATE:
                            case T_CURRENT_TIMESTAMP:
                            case T_CURRENT_USER:
                            case T_DENSE_RANK:
                            case T_FIRST_VALUE:
                            case T_LAG:
                            case T_LAST_VALUE:
                            case T_LEAD:
                            case T_MAX_PART_STRING:
                            case T_MIN_PART_STRING:
                            case T_MAX_PART_INT:
                            case T_MIN_PART_INT:
                            case T_MAX_PART_DATE:
                            case T_MIN_PART_DATE:
                            case T_PART_COUNT:
                            case T_PART_LOC:
                            case T_RANK:
                            case T_ROW_NUMBER:
                            case T_STDEV:
                            case T_SYSDATE:
                            case T_VARIANCE:
                            case T_USER:
                            case T_ADD:
                            case T_OPEN_P:
                            case T_SUB:
                            case L_ID:
                            case L_S_STRING:
                            case L_D_STRING:
                            case L_INT:
                            case L_DEC:
                                {
                                    {
                                        setState(2837);
                                        _errHandler.sync(this);
                                        switch (getInterpreter()
                                                .adaptivePredict(_input, 356, _ctx)) {
                                            case 1:
                                                {
                                                    setState(2836);
                                                    expr_func_all_distinct();
                                                }
                                                break;
                                        }
                                        setState(2839);
                                        expr(0);
                                    }
                                }
                                break;
                            case T_MUL:
                                {
                                    setState(2840);
                                    match(T_MUL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(2843);
                        match(T_CLOSE_P);
                        setState(2845);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 358, _ctx)) {
                            case 1:
                                {
                                    setState(2844);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_CUME_DIST:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(2847);
                        match(T_CUME_DIST);
                        setState(2848);
                        match(T_OPEN_P);
                        setState(2849);
                        match(T_CLOSE_P);
                        setState(2850);
                        expr_func_over_clause();
                    }
                    break;
                case T_DENSE_RANK:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(2851);
                        match(T_DENSE_RANK);
                        setState(2852);
                        match(T_OPEN_P);
                        setState(2853);
                        match(T_CLOSE_P);
                        setState(2854);
                        expr_func_over_clause();
                    }
                    break;
                case T_FIRST_VALUE:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(2855);
                        match(T_FIRST_VALUE);
                        setState(2856);
                        match(T_OPEN_P);
                        setState(2857);
                        expr(0);
                        setState(2858);
                        match(T_CLOSE_P);
                        setState(2859);
                        expr_func_over_clause();
                    }
                    break;
                case T_LAG:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(2861);
                        match(T_LAG);
                        setState(2862);
                        match(T_OPEN_P);
                        setState(2863);
                        expr(0);
                        setState(2870);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(2864);
                                match(T_COMMA);
                                setState(2865);
                                expr(0);
                                setState(2868);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if (_la == T_COMMA) {
                                    {
                                        setState(2866);
                                        match(T_COMMA);
                                        setState(2867);
                                        expr(0);
                                    }
                                }
                            }
                        }

                        setState(2872);
                        match(T_CLOSE_P);
                        setState(2873);
                        expr_func_over_clause();
                    }
                    break;
                case T_LAST_VALUE:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(2875);
                        match(T_LAST_VALUE);
                        setState(2876);
                        match(T_OPEN_P);
                        setState(2877);
                        expr(0);
                        setState(2878);
                        match(T_CLOSE_P);
                        setState(2879);
                        expr_func_over_clause();
                    }
                    break;
                case T_LEAD:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(2881);
                        match(T_LEAD);
                        setState(2882);
                        match(T_OPEN_P);
                        setState(2883);
                        expr(0);
                        setState(2890);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(2884);
                                match(T_COMMA);
                                setState(2885);
                                expr(0);
                                setState(2888);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                if (_la == T_COMMA) {
                                    {
                                        setState(2886);
                                        match(T_COMMA);
                                        setState(2887);
                                        expr(0);
                                    }
                                }
                            }
                        }

                        setState(2892);
                        match(T_CLOSE_P);
                        setState(2893);
                        expr_func_over_clause();
                    }
                    break;
                case T_MAX:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(2895);
                        match(T_MAX);
                        setState(2896);
                        match(T_OPEN_P);
                        setState(2898);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 363, _ctx)) {
                            case 1:
                                {
                                    setState(2897);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2900);
                        expr(0);
                        setState(2901);
                        match(T_CLOSE_P);
                        setState(2903);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 364, _ctx)) {
                            case 1:
                                {
                                    setState(2902);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_MIN:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(2905);
                        match(T_MIN);
                        setState(2906);
                        match(T_OPEN_P);
                        setState(2908);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 365, _ctx)) {
                            case 1:
                                {
                                    setState(2907);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2910);
                        expr(0);
                        setState(2911);
                        match(T_CLOSE_P);
                        setState(2913);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 366, _ctx)) {
                            case 1:
                                {
                                    setState(2912);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_RANK:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(2915);
                        match(T_RANK);
                        setState(2916);
                        match(T_OPEN_P);
                        setState(2917);
                        match(T_CLOSE_P);
                        setState(2918);
                        expr_func_over_clause();
                    }
                    break;
                case T_ROW_NUMBER:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(2919);
                        match(T_ROW_NUMBER);
                        setState(2920);
                        match(T_OPEN_P);
                        setState(2921);
                        match(T_CLOSE_P);
                        setState(2922);
                        expr_func_over_clause();
                    }
                    break;
                case T_STDEV:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(2923);
                        match(T_STDEV);
                        setState(2924);
                        match(T_OPEN_P);
                        setState(2926);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 367, _ctx)) {
                            case 1:
                                {
                                    setState(2925);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2928);
                        expr(0);
                        setState(2929);
                        match(T_CLOSE_P);
                        setState(2931);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 368, _ctx)) {
                            case 1:
                                {
                                    setState(2930);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_SUM:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(2933);
                        match(T_SUM);
                        setState(2934);
                        match(T_OPEN_P);
                        setState(2936);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 369, _ctx)) {
                            case 1:
                                {
                                    setState(2935);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2938);
                        expr(0);
                        setState(2939);
                        match(T_CLOSE_P);
                        setState(2941);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 370, _ctx)) {
                            case 1:
                                {
                                    setState(2940);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_VAR:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(2943);
                        match(T_VAR);
                        setState(2944);
                        match(T_OPEN_P);
                        setState(2946);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 371, _ctx)) {
                            case 1:
                                {
                                    setState(2945);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2948);
                        expr(0);
                        setState(2949);
                        match(T_CLOSE_P);
                        setState(2951);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 372, _ctx)) {
                            case 1:
                                {
                                    setState(2950);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                case T_VARIANCE:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(2953);
                        match(T_VARIANCE);
                        setState(2954);
                        match(T_OPEN_P);
                        setState(2956);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 373, _ctx)) {
                            case 1:
                                {
                                    setState(2955);
                                    expr_func_all_distinct();
                                }
                                break;
                        }
                        setState(2958);
                        expr(0);
                        setState(2959);
                        match(T_CLOSE_P);
                        setState(2961);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 374, _ctx)) {
                            case 1:
                                {
                                    setState(2960);
                                    expr_func_over_clause();
                                }
                                break;
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_func_all_distinctContext extends ParserRuleContext {
        public TerminalNode T_ALL() {
            return getToken(HplsqlParser.T_ALL, 0);
        }

        public TerminalNode T_DISTINCT() {
            return getToken(HplsqlParser.T_DISTINCT, 0);
        }

        public Expr_func_all_distinctContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_func_all_distinct;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_func_all_distinct(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_func_all_distinct(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_func_all_distinct(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_func_all_distinctContext expr_func_all_distinct()
            throws RecognitionException {
        Expr_func_all_distinctContext _localctx =
                new Expr_func_all_distinctContext(_ctx, getState());
        enterRule(_localctx, 402, RULE_expr_func_all_distinct);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2965);
                _la = _input.LA(1);
                if (!(_la == T_ALL || _la == T_DISTINCT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_func_over_clauseContext extends ParserRuleContext {
        public TerminalNode T_OVER() {
            return getToken(HplsqlParser.T_OVER, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Expr_func_partition_by_clauseContext expr_func_partition_by_clause() {
            return getRuleContext(Expr_func_partition_by_clauseContext.class, 0);
        }

        public Order_by_clauseContext order_by_clause() {
            return getRuleContext(Order_by_clauseContext.class, 0);
        }

        public Expr_func_over_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_func_over_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_func_over_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_func_over_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_func_over_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_func_over_clauseContext expr_func_over_clause() throws RecognitionException {
        Expr_func_over_clauseContext _localctx = new Expr_func_over_clauseContext(_ctx, getState());
        enterRule(_localctx, 404, RULE_expr_func_over_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2967);
                match(T_OVER);
                setState(2968);
                match(T_OPEN_P);
                setState(2970);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_PARTITION) {
                    {
                        setState(2969);
                        expr_func_partition_by_clause();
                    }
                }

                setState(2973);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ORDER) {
                    {
                        setState(2972);
                        order_by_clause();
                    }
                }

                setState(2975);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_func_partition_by_clauseContext extends ParserRuleContext {
        public TerminalNode T_PARTITION() {
            return getToken(HplsqlParser.T_PARTITION, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Expr_func_partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_func_partition_by_clause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_func_partition_by_clause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_func_partition_by_clause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor)
                        .visitExpr_func_partition_by_clause(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_func_partition_by_clauseContext expr_func_partition_by_clause()
            throws RecognitionException {
        Expr_func_partition_by_clauseContext _localctx =
                new Expr_func_partition_by_clauseContext(_ctx, getState());
        enterRule(_localctx, 406, RULE_expr_func_partition_by_clause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2977);
                match(T_PARTITION);
                setState(2978);
                match(T_BY);
                setState(2979);
                expr(0);
                setState(2984);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == T_COMMA) {
                    {
                        {
                            setState(2980);
                            match(T_COMMA);
                            setState(2981);
                            expr(0);
                        }
                    }
                    setState(2986);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_spec_funcContext extends ParserRuleContext {
        public TerminalNode T_ACTIVITY_COUNT() {
            return getToken(HplsqlParser.T_ACTIVITY_COUNT, 0);
        }

        public TerminalNode T_CAST() {
            return getToken(HplsqlParser.T_CAST, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public List<ExprContext> expr() {
            return getRuleContexts(ExprContext.class);
        }

        public ExprContext expr(int i) {
            return getRuleContext(ExprContext.class, i);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public DtypeContext dtype() {
            return getRuleContext(DtypeContext.class, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Dtype_lenContext dtype_len() {
            return getRuleContext(Dtype_lenContext.class, 0);
        }

        public TerminalNode T_COUNT() {
            return getToken(HplsqlParser.T_COUNT, 0);
        }

        public TerminalNode T_MUL() {
            return getToken(HplsqlParser.T_MUL, 0);
        }

        public TerminalNode T_CURRENT_DATE() {
            return getToken(HplsqlParser.T_CURRENT_DATE, 0);
        }

        public TerminalNode T_CURRENT() {
            return getToken(HplsqlParser.T_CURRENT, 0);
        }

        public TerminalNode T_DATE() {
            return getToken(HplsqlParser.T_DATE, 0);
        }

        public TerminalNode T_CURRENT_TIMESTAMP() {
            return getToken(HplsqlParser.T_CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode T_TIMESTAMP() {
            return getToken(HplsqlParser.T_TIMESTAMP, 0);
        }

        public TerminalNode T_CURRENT_USER() {
            return getToken(HplsqlParser.T_CURRENT_USER, 0);
        }

        public TerminalNode T_USER() {
            return getToken(HplsqlParser.T_USER, 0);
        }

        public TerminalNode T_MAX_PART_STRING() {
            return getToken(HplsqlParser.T_MAX_PART_STRING, 0);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public List<TerminalNode> T_EQUAL() {
            return getTokens(HplsqlParser.T_EQUAL);
        }

        public TerminalNode T_EQUAL(int i) {
            return getToken(HplsqlParser.T_EQUAL, i);
        }

        public TerminalNode T_MIN_PART_STRING() {
            return getToken(HplsqlParser.T_MIN_PART_STRING, 0);
        }

        public TerminalNode T_MAX_PART_INT() {
            return getToken(HplsqlParser.T_MAX_PART_INT, 0);
        }

        public TerminalNode T_MIN_PART_INT() {
            return getToken(HplsqlParser.T_MIN_PART_INT, 0);
        }

        public TerminalNode T_MAX_PART_DATE() {
            return getToken(HplsqlParser.T_MAX_PART_DATE, 0);
        }

        public TerminalNode T_MIN_PART_DATE() {
            return getToken(HplsqlParser.T_MIN_PART_DATE, 0);
        }

        public TerminalNode T_PART_COUNT() {
            return getToken(HplsqlParser.T_PART_COUNT, 0);
        }

        public TerminalNode T_PART_LOC() {
            return getToken(HplsqlParser.T_PART_LOC, 0);
        }

        public TerminalNode T_TRIM() {
            return getToken(HplsqlParser.T_TRIM, 0);
        }

        public TerminalNode T_SUBSTRING() {
            return getToken(HplsqlParser.T_SUBSTRING, 0);
        }

        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode T_SYSDATE() {
            return getToken(HplsqlParser.T_SYSDATE, 0);
        }

        public Expr_spec_funcContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_spec_func;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_spec_func(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_spec_func(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_spec_func(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_spec_funcContext expr_spec_func() throws RecognitionException {
        Expr_spec_funcContext _localctx = new Expr_spec_funcContext(_ctx, getState());
        enterRule(_localctx, 408, RULE_expr_spec_func);
        int _la;
        try {
            int _alt;
            setState(3187);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 399, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(2987);
                        match(T_ACTIVITY_COUNT);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(2988);
                        match(T_CAST);
                        setState(2989);
                        match(T_OPEN_P);
                        setState(2990);
                        expr(0);
                        setState(2991);
                        match(T_AS);
                        setState(2992);
                        dtype();
                        setState(2994);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_OPEN_P) {
                            {
                                setState(2993);
                                dtype_len();
                            }
                        }

                        setState(2996);
                        match(T_CLOSE_P);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(2998);
                        match(T_COUNT);
                        setState(2999);
                        match(T_OPEN_P);
                        setState(3002);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_ACTION:
                            case T_ADD2:
                            case T_ALL:
                            case T_ALLOCATE:
                            case T_ALTER:
                            case T_AND:
                            case T_ANSI_NULLS:
                            case T_ANSI_PADDING:
                            case T_AS:
                            case T_ASC:
                            case T_ASSOCIATE:
                            case T_AT:
                            case T_AUTO_INCREMENT:
                            case T_AVG:
                            case T_BATCHSIZE:
                            case T_BEGIN:
                            case T_BETWEEN:
                            case T_BIGINT:
                            case T_BINARY_DOUBLE:
                            case T_BINARY_FLOAT:
                            case T_BIT:
                            case T_BODY:
                            case T_BREAK:
                            case T_BY:
                            case T_BYTE:
                            case T_CALL:
                            case T_CALLER:
                            case T_CASCADE:
                            case T_CASE:
                            case T_CASESPECIFIC:
                            case T_CAST:
                            case T_CHAR:
                            case T_CHARACTER:
                            case T_CHARSET:
                            case T_CLIENT:
                            case T_CLOSE:
                            case T_CLUSTERED:
                            case T_CMP:
                            case T_COLLECT:
                            case T_COLLECTION:
                            case T_COLUMN:
                            case T_COMMENT:
                            case T_CONSTANT:
                            case T_COMMIT:
                            case T_COMPRESS:
                            case T_CONCAT:
                            case T_CONDITION:
                            case T_CONSTRAINT:
                            case T_CONTINUE:
                            case T_COPY:
                            case T_COUNT:
                            case T_COUNT_BIG:
                            case T_CREATE:
                            case T_CREATION:
                            case T_CREATOR:
                            case T_CS:
                            case T_CURRENT:
                            case T_CURRENT_SCHEMA:
                            case T_CURSOR:
                            case T_DATABASE:
                            case T_DATA:
                            case T_DATE:
                            case T_DATETIME:
                            case T_DAY:
                            case T_DAYS:
                            case T_DEC:
                            case T_DECIMAL:
                            case T_DECLARE:
                            case T_DEFAULT:
                            case T_DEFERRED:
                            case T_DEFINED:
                            case T_DEFINER:
                            case T_DEFINITION:
                            case T_DELETE:
                            case T_DELIMITED:
                            case T_DELIMITER:
                            case T_DESC:
                            case T_DESCRIBE:
                            case T_DIAGNOSTICS:
                            case T_DIR:
                            case T_DIRECTORY:
                            case T_DISTINCT:
                            case T_DISTRIBUTE:
                            case T_DO:
                            case T_DOUBLE:
                            case T_DROP:
                            case T_DYNAMIC:
                            case T_ENABLE:
                            case T_ENGINE:
                            case T_ESCAPED:
                            case T_EXCEPT:
                            case T_EXEC:
                            case T_EXECUTE:
                            case T_EXCEPTION:
                            case T_EXCLUSIVE:
                            case T_EXISTS:
                            case T_EXIT:
                            case T_FALLBACK:
                            case T_FALSE:
                            case T_FETCH:
                            case T_FIELDS:
                            case T_FILE:
                            case T_FILES:
                            case T_FLOAT:
                            case T_FOR:
                            case T_FOREIGN:
                            case T_FORMAT:
                            case T_FOUND:
                            case T_FROM:
                            case T_FULL:
                            case T_FUNCTION:
                            case T_GET:
                            case T_GLOBAL:
                            case T_GO:
                            case T_GRANT:
                            case T_GROUP:
                            case T_HANDLER:
                            case T_HASH:
                            case T_HAVING:
                            case T_HDFS:
                            case T_HIVE:
                            case T_HOST:
                            case T_IDENTITY:
                            case T_IF:
                            case T_IGNORE:
                            case T_IMMEDIATE:
                            case T_IN:
                            case T_INCLUDE:
                            case T_INDEX:
                            case T_INITRANS:
                            case T_INNER:
                            case T_INOUT:
                            case T_INSERT:
                            case T_INT:
                            case T_INT2:
                            case T_INT4:
                            case T_INT8:
                            case T_INTEGER:
                            case T_INTERSECT:
                            case T_INTERVAL:
                            case T_INTO:
                            case T_INVOKER:
                            case T_IS:
                            case T_ISOPEN:
                            case T_ITEMS:
                            case T_JOIN:
                            case T_KEEP:
                            case T_KEY:
                            case T_KEYS:
                            case T_LANGUAGE:
                            case T_LEAVE:
                            case T_LEFT:
                            case T_LIKE:
                            case T_LIMIT:
                            case T_LINES:
                            case T_LOCAL:
                            case T_LOCATION:
                            case T_LOCATOR:
                            case T_LOCATORS:
                            case T_LOCKS:
                            case T_LOG:
                            case T_LOGGED:
                            case T_LOGGING:
                            case T_LOOP:
                            case T_MAP:
                            case T_MATCHED:
                            case T_MAX:
                            case T_MAXTRANS:
                            case T_MERGE:
                            case T_MESSAGE_TEXT:
                            case T_MICROSECOND:
                            case T_MICROSECONDS:
                            case T_MIN:
                            case T_MULTISET:
                            case T_NCHAR:
                            case T_NEW:
                            case T_NVARCHAR:
                            case T_NO:
                            case T_NOCOUNT:
                            case T_NOCOMPRESS:
                            case T_NOLOGGING:
                            case T_NONE:
                            case T_NOT:
                            case T_NOTFOUND:
                            case T_NULL:
                            case T_NUMERIC:
                            case T_NUMBER:
                            case T_OBJECT:
                            case T_OFF:
                            case T_ON:
                            case T_ONLY:
                            case T_OPEN:
                            case T_OR:
                            case T_ORDER:
                            case T_OUT:
                            case T_OUTER:
                            case T_OVER:
                            case T_OVERWRITE:
                            case T_OWNER:
                            case T_PACKAGE:
                            case T_PARTITION:
                            case T_PCTFREE:
                            case T_PCTUSED:
                            case T_PRECISION:
                            case T_PRESERVE:
                            case T_PRIMARY:
                            case T_PRINT:
                            case T_PROC:
                            case T_PROCEDURE:
                            case T_QUALIFY:
                            case T_QUERY_BAND:
                            case T_QUIT:
                            case T_QUOTED_IDENTIFIER:
                            case T_RAISE:
                            case T_REAL:
                            case T_REFERENCES:
                            case T_REGEXP:
                            case T_REPLACE:
                            case T_RESIGNAL:
                            case T_RESTRICT:
                            case T_RESULT:
                            case T_RESULT_SET_LOCATOR:
                            case T_RETURN:
                            case T_RETURNS:
                            case T_REVERSE:
                            case T_RIGHT:
                            case T_RLIKE:
                            case T_ROLE:
                            case T_ROLLBACK:
                            case T_ROW:
                            case T_ROWS:
                            case T_ROW_COUNT:
                            case T_RR:
                            case T_RS:
                            case T_PWD:
                            case T_TRIM:
                            case T_SCHEMA:
                            case T_SECOND:
                            case T_SECONDS:
                            case T_SECURITY:
                            case T_SEGMENT:
                            case T_SEL:
                            case T_SELECT:
                            case T_SET:
                            case T_SESSION:
                            case T_SESSIONS:
                            case T_SETS:
                            case T_SHARE:
                            case T_SIGNAL:
                            case T_SIMPLE_DOUBLE:
                            case T_SIMPLE_FLOAT:
                            case T_SMALLDATETIME:
                            case T_SMALLINT:
                            case T_SQL:
                            case T_SQLEXCEPTION:
                            case T_SQLINSERT:
                            case T_SQLSTATE:
                            case T_SQLWARNING:
                            case T_STATS:
                            case T_STATISTICS:
                            case T_STEP:
                            case T_STORAGE:
                            case T_STORED:
                            case T_STRING:
                            case T_SUBDIR:
                            case T_SUBSTRING:
                            case T_SUM:
                            case T_SYS_REFCURSOR:
                            case T_TABLE:
                            case T_TABLESPACE:
                            case T_TEMPORARY:
                            case T_TERMINATED:
                            case T_TEXTIMAGE_ON:
                            case T_THEN:
                            case T_TIMESTAMP:
                            case T_TITLE:
                            case T_TO:
                            case T_TOP:
                            case T_TRANSACTION:
                            case T_TRUE:
                            case T_TRUNCATE:
                            case T_UNIQUE:
                            case T_UPDATE:
                            case T_UR:
                            case T_USE:
                            case T_USING:
                            case T_VALUE:
                            case T_VALUES:
                            case T_VAR:
                            case T_VARCHAR:
                            case T_VARCHAR2:
                            case T_VARYING:
                            case T_VOLATILE:
                            case T_WHILE:
                            case T_WITH:
                            case T_WITHOUT:
                            case T_WORK:
                            case T_XACT_ABORT:
                            case T_XML:
                            case T_YES:
                            case T_ACTIVITY_COUNT:
                            case T_CUME_DIST:
                            case T_CURRENT_DATE:
                            case T_CURRENT_TIMESTAMP:
                            case T_CURRENT_USER:
                            case T_DENSE_RANK:
                            case T_FIRST_VALUE:
                            case T_LAG:
                            case T_LAST_VALUE:
                            case T_LEAD:
                            case T_MAX_PART_STRING:
                            case T_MIN_PART_STRING:
                            case T_MAX_PART_INT:
                            case T_MIN_PART_INT:
                            case T_MAX_PART_DATE:
                            case T_MIN_PART_DATE:
                            case T_PART_COUNT:
                            case T_PART_LOC:
                            case T_RANK:
                            case T_ROW_NUMBER:
                            case T_STDEV:
                            case T_SYSDATE:
                            case T_VARIANCE:
                            case T_USER:
                            case T_ADD:
                            case T_OPEN_P:
                            case T_SUB:
                            case L_ID:
                            case L_S_STRING:
                            case L_D_STRING:
                            case L_INT:
                            case L_DEC:
                                {
                                    setState(3000);
                                    expr(0);
                                }
                                break;
                            case T_MUL:
                                {
                                    setState(3001);
                                    match(T_MUL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3004);
                        match(T_CLOSE_P);
                    }
                    break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                    {
                        setState(3005);
                        match(T_CURRENT_DATE);
                    }
                    break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                    {
                        setState(3006);
                        match(T_CURRENT);
                        setState(3007);
                        match(T_DATE);
                    }
                    break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                    {
                        setState(3011);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_CURRENT_TIMESTAMP:
                                {
                                    setState(3008);
                                    match(T_CURRENT_TIMESTAMP);
                                }
                                break;
                            case T_CURRENT:
                                {
                                    setState(3009);
                                    match(T_CURRENT);
                                    setState(3010);
                                    match(T_TIMESTAMP);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3017);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 382, _ctx)) {
                            case 1:
                                {
                                    setState(3013);
                                    match(T_OPEN_P);
                                    setState(3014);
                                    expr(0);
                                    setState(3015);
                                    match(T_CLOSE_P);
                                }
                                break;
                        }
                    }
                    break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                    {
                        setState(3019);
                        match(T_CURRENT_USER);
                    }
                    break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                    {
                        setState(3020);
                        match(T_CURRENT);
                        setState(3021);
                        match(T_USER);
                    }
                    break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                    {
                        setState(3022);
                        match(T_MAX_PART_STRING);
                        setState(3023);
                        match(T_OPEN_P);
                        setState(3024);
                        expr(0);
                        setState(3037);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3025);
                                match(T_COMMA);
                                setState(3026);
                                expr(0);
                                setState(3034);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3027);
                                            match(T_COMMA);
                                            setState(3028);
                                            expr(0);
                                            setState(3029);
                                            match(T_EQUAL);
                                            setState(3030);
                                            expr(0);
                                        }
                                    }
                                    setState(3036);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3039);
                        match(T_CLOSE_P);
                    }
                    break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                    {
                        setState(3041);
                        match(T_MIN_PART_STRING);
                        setState(3042);
                        match(T_OPEN_P);
                        setState(3043);
                        expr(0);
                        setState(3056);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3044);
                                match(T_COMMA);
                                setState(3045);
                                expr(0);
                                setState(3053);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3046);
                                            match(T_COMMA);
                                            setState(3047);
                                            expr(0);
                                            setState(3048);
                                            match(T_EQUAL);
                                            setState(3049);
                                            expr(0);
                                        }
                                    }
                                    setState(3055);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3058);
                        match(T_CLOSE_P);
                    }
                    break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                    {
                        setState(3060);
                        match(T_MAX_PART_INT);
                        setState(3061);
                        match(T_OPEN_P);
                        setState(3062);
                        expr(0);
                        setState(3075);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3063);
                                match(T_COMMA);
                                setState(3064);
                                expr(0);
                                setState(3072);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3065);
                                            match(T_COMMA);
                                            setState(3066);
                                            expr(0);
                                            setState(3067);
                                            match(T_EQUAL);
                                            setState(3068);
                                            expr(0);
                                        }
                                    }
                                    setState(3074);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3077);
                        match(T_CLOSE_P);
                    }
                    break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                    {
                        setState(3079);
                        match(T_MIN_PART_INT);
                        setState(3080);
                        match(T_OPEN_P);
                        setState(3081);
                        expr(0);
                        setState(3094);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3082);
                                match(T_COMMA);
                                setState(3083);
                                expr(0);
                                setState(3091);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3084);
                                            match(T_COMMA);
                                            setState(3085);
                                            expr(0);
                                            setState(3086);
                                            match(T_EQUAL);
                                            setState(3087);
                                            expr(0);
                                        }
                                    }
                                    setState(3093);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3096);
                        match(T_CLOSE_P);
                    }
                    break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                    {
                        setState(3098);
                        match(T_MAX_PART_DATE);
                        setState(3099);
                        match(T_OPEN_P);
                        setState(3100);
                        expr(0);
                        setState(3113);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3101);
                                match(T_COMMA);
                                setState(3102);
                                expr(0);
                                setState(3110);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3103);
                                            match(T_COMMA);
                                            setState(3104);
                                            expr(0);
                                            setState(3105);
                                            match(T_EQUAL);
                                            setState(3106);
                                            expr(0);
                                        }
                                    }
                                    setState(3112);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3115);
                        match(T_CLOSE_P);
                    }
                    break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                    {
                        setState(3117);
                        match(T_MIN_PART_DATE);
                        setState(3118);
                        match(T_OPEN_P);
                        setState(3119);
                        expr(0);
                        setState(3132);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3120);
                                match(T_COMMA);
                                setState(3121);
                                expr(0);
                                setState(3129);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == T_COMMA) {
                                    {
                                        {
                                            setState(3122);
                                            match(T_COMMA);
                                            setState(3123);
                                            expr(0);
                                            setState(3124);
                                            match(T_EQUAL);
                                            setState(3125);
                                            expr(0);
                                        }
                                    }
                                    setState(3131);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                        setState(3134);
                        match(T_CLOSE_P);
                    }
                    break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                    {
                        setState(3136);
                        match(T_PART_COUNT);
                        setState(3137);
                        match(T_OPEN_P);
                        setState(3138);
                        expr(0);
                        setState(3146);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == T_COMMA) {
                            {
                                {
                                    setState(3139);
                                    match(T_COMMA);
                                    setState(3140);
                                    expr(0);
                                    setState(3141);
                                    match(T_EQUAL);
                                    setState(3142);
                                    expr(0);
                                }
                            }
                            setState(3148);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                        setState(3149);
                        match(T_CLOSE_P);
                    }
                    break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                    {
                        setState(3151);
                        match(T_PART_LOC);
                        setState(3152);
                        match(T_OPEN_P);
                        setState(3153);
                        expr(0);
                        setState(3159);
                        _errHandler.sync(this);
                        _alt = 1;
                        do {
                            switch (_alt) {
                                case 1:
                                    {
                                        {
                                            setState(3154);
                                            match(T_COMMA);
                                            setState(3155);
                                            expr(0);
                                            setState(3156);
                                            match(T_EQUAL);
                                            setState(3157);
                                            expr(0);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            setState(3161);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 396, _ctx);
                        } while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                        setState(3165);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_COMMA) {
                            {
                                setState(3163);
                                match(T_COMMA);
                                setState(3164);
                                expr(0);
                            }
                        }

                        setState(3167);
                        match(T_CLOSE_P);
                    }
                    break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                    {
                        setState(3169);
                        match(T_TRIM);
                        setState(3170);
                        match(T_OPEN_P);
                        setState(3171);
                        expr(0);
                        setState(3172);
                        match(T_CLOSE_P);
                    }
                    break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                    {
                        setState(3174);
                        match(T_SUBSTRING);
                        setState(3175);
                        match(T_OPEN_P);
                        setState(3176);
                        expr(0);
                        setState(3177);
                        match(T_FROM);
                        setState(3178);
                        expr(0);
                        setState(3181);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == T_FOR) {
                            {
                                setState(3179);
                                match(T_FOR);
                                setState(3180);
                                expr(0);
                            }
                        }

                        setState(3183);
                        match(T_CLOSE_P);
                    }
                    break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                    {
                        setState(3185);
                        match(T_SYSDATE);
                    }
                    break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                    {
                        setState(3186);
                        match(T_USER);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_funcContext extends ParserRuleContext {
        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_OPEN_P() {
            return getToken(HplsqlParser.T_OPEN_P, 0);
        }

        public TerminalNode T_CLOSE_P() {
            return getToken(HplsqlParser.T_CLOSE_P, 0);
        }

        public Expr_func_paramsContext expr_func_params() {
            return getRuleContext(Expr_func_paramsContext.class, 0);
        }

        public Expr_funcContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_func;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_func(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr_func(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_func(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_funcContext expr_func() throws RecognitionException {
        Expr_funcContext _localctx = new Expr_funcContext(_ctx, getState());
        enterRule(_localctx, 410, RULE_expr_func);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3189);
                ident();
                setState(3190);
                match(T_OPEN_P);
                setState(3192);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 400, _ctx)) {
                    case 1:
                        {
                            setState(3191);
                            expr_func_params();
                        }
                        break;
                }
                setState(3194);
                match(T_CLOSE_P);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_func_paramsContext extends ParserRuleContext {
        public List<Func_paramContext> func_param() {
            return getRuleContexts(Func_paramContext.class);
        }

        public Func_paramContext func_param(int i) {
            return getRuleContext(Func_paramContext.class, i);
        }

        public List<TerminalNode> T_COMMA() {
            return getTokens(HplsqlParser.T_COMMA);
        }

        public TerminalNode T_COMMA(int i) {
            return getToken(HplsqlParser.T_COMMA, i);
        }

        public Expr_func_paramsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_func_params;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_func_params(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_func_params(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_func_params(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_func_paramsContext expr_func_params() throws RecognitionException {
        Expr_func_paramsContext _localctx = new Expr_func_paramsContext(_ctx, getState());
        enterRule(_localctx, 412, RULE_expr_func_params);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3196);
                func_param();
                setState(3201);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 401, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3197);
                                match(T_COMMA);
                                setState(3198);
                                func_param();
                            }
                        }
                    }
                    setState(3203);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 401, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Func_paramContext extends ParserRuleContext {
        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public TerminalNode T_GREATER() {
            return getToken(HplsqlParser.T_GREATER, 0);
        }

        public Func_paramContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_func_param;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFunc_param(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitFunc_param(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFunc_param(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Func_paramContext func_param() throws RecognitionException {
        Func_paramContext _localctx = new Func_paramContext(_ctx, getState());
        enterRule(_localctx, 414, RULE_func_param);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3204);
                if (!(!_input.LT(1).getText().equalsIgnoreCase("INTO")))
                    throw new FailedPredicateException(
                            this, "!_input.LT(1).getText().equalsIgnoreCase(\"INTO\")");
                setState(3210);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 403, _ctx)) {
                    case 1:
                        {
                            setState(3205);
                            ident();
                            setState(3206);
                            match(T_EQUAL);
                            setState(3208);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == T_GREATER) {
                                {
                                    setState(3207);
                                    match(T_GREATER);
                                }
                            }
                        }
                        break;
                }
                setState(3212);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_selectContext extends ParserRuleContext {
        public Select_stmtContext select_stmt() {
            return getRuleContext(Select_stmtContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Expr_selectContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_select;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_select(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitExpr_select(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_select(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_selectContext expr_select() throws RecognitionException {
        Expr_selectContext _localctx = new Expr_selectContext(_ctx, getState());
        enterRule(_localctx, 416, RULE_expr_select);
        try {
            setState(3216);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 404, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3214);
                        select_stmt();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3215);
                        expr(0);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Expr_fileContext extends ParserRuleContext {
        public File_nameContext file_name() {
            return getRuleContext(File_nameContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Expr_fileContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expr_file;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterExpr_file(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitExpr_file(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitExpr_file(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Expr_fileContext expr_file() throws RecognitionException {
        Expr_fileContext _localctx = new Expr_fileContext(_ctx, getState());
        enterRule(_localctx, 418, RULE_expr_file);
        try {
            setState(3220);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 405, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3218);
                        file_name();
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3219);
                        expr(0);
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HiveContext extends ParserRuleContext {
        public TerminalNode T_HIVE() {
            return getToken(HplsqlParser.T_HIVE, 0);
        }

        public List<Hive_itemContext> hive_item() {
            return getRuleContexts(Hive_itemContext.class);
        }

        public Hive_itemContext hive_item(int i) {
            return getRuleContext(Hive_itemContext.class, i);
        }

        public HiveContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hive;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterHive(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitHive(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHive(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HiveContext hive() throws RecognitionException {
        HiveContext _localctx = new HiveContext(_ctx, getState());
        enterRule(_localctx, 420, RULE_hive);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3222);
                match(T_HIVE);
                setState(3226);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 406, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3223);
                                hive_item();
                            }
                        }
                    }
                    setState(3228);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 406, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Hive_itemContext extends ParserRuleContext {
        public TerminalNode T_SUB() {
            return getToken(HplsqlParser.T_SUB, 0);
        }

        public IdentContext ident() {
            return getRuleContext(IdentContext.class, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public TerminalNode L_ID() {
            return getToken(HplsqlParser.L_ID, 0);
        }

        public TerminalNode T_EQUAL() {
            return getToken(HplsqlParser.T_EQUAL, 0);
        }

        public Hive_itemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hive_item;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterHive_item(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitHive_item(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHive_item(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Hive_itemContext hive_item() throws RecognitionException {
        Hive_itemContext _localctx = new Hive_itemContext(_ctx, getState());
        enterRule(_localctx, 422, RULE_hive_item);
        try {
            setState(3241);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 407, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3229);
                        match(T_SUB);
                        setState(3230);
                        ident();
                        setState(3231);
                        expr(0);
                    }
                    break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3233);
                        match(T_SUB);
                        setState(3234);
                        ident();
                        setState(3235);
                        match(L_ID);
                        setState(3236);
                        match(T_EQUAL);
                        setState(3237);
                        expr(0);
                    }
                    break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                    {
                        setState(3239);
                        match(T_SUB);
                        setState(3240);
                        ident();
                    }
                    break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class HostContext extends ParserRuleContext {
        public Host_cmdContext host_cmd() {
            return getRuleContext(Host_cmdContext.class, 0);
        }

        public TerminalNode T_SEMICOLON() {
            return getToken(HplsqlParser.T_SEMICOLON, 0);
        }

        public Host_stmtContext host_stmt() {
            return getRuleContext(Host_stmtContext.class, 0);
        }

        public HostContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_host;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterHost(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitHost(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHost(this);
            else return visitor.visitChildren(this);
        }
    }

    public final HostContext host() throws RecognitionException {
        HostContext _localctx = new HostContext(_ctx, getState());
        enterRule(_localctx, 424, RULE_host);
        try {
            setState(3248);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case T__4:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3243);
                        match(T__4);
                        setState(3244);
                        host_cmd();
                        setState(3245);
                        match(T_SEMICOLON);
                    }
                    break;
                case T_HOST:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3247);
                        host_stmt();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Host_cmdContext extends ParserRuleContext {
        public Host_cmdContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_host_cmd;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterHost_cmd(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitHost_cmd(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHost_cmd(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Host_cmdContext host_cmd() throws RecognitionException {
        Host_cmdContext _localctx = new Host_cmdContext(_ctx, getState());
        enterRule(_localctx, 426, RULE_host_cmd);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3253);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 409, _ctx);
                while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1 + 1) {
                        {
                            {
                                setState(3250);
                                matchWildcard();
                            }
                        }
                    }
                    setState(3255);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 409, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Host_stmtContext extends ParserRuleContext {
        public TerminalNode T_HOST() {
            return getToken(HplsqlParser.T_HOST, 0);
        }

        public ExprContext expr() {
            return getRuleContext(ExprContext.class, 0);
        }

        public Host_stmtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_host_stmt;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterHost_stmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitHost_stmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitHost_stmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Host_stmtContext host_stmt() throws RecognitionException {
        Host_stmtContext _localctx = new Host_stmtContext(_ctx, getState());
        enterRule(_localctx, 428, RULE_host_stmt);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3256);
                match(T_HOST);
                setState(3257);
                expr(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class File_nameContext extends ParserRuleContext {
        public TerminalNode L_FILE() {
            return getToken(HplsqlParser.L_FILE, 0);
        }

        public List<IdentContext> ident() {
            return getRuleContexts(IdentContext.class);
        }

        public IdentContext ident(int i) {
            return getRuleContext(IdentContext.class, i);
        }

        public List<TerminalNode> T_DIV() {
            return getTokens(HplsqlParser.T_DIV);
        }

        public TerminalNode T_DIV(int i) {
            return getToken(HplsqlParser.T_DIV, i);
        }

        public File_nameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_file_name;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterFile_name(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitFile_name(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitFile_name(this);
            else return visitor.visitChildren(this);
        }
    }

    public final File_nameContext file_name() throws RecognitionException {
        File_nameContext _localctx = new File_nameContext(_ctx, getState());
        enterRule(_localctx, 430, RULE_file_name);
        try {
            int _alt;
            setState(3273);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case L_FILE:
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3259);
                        match(L_FILE);
                    }
                    break;
                case T__3:
                case T_ACTION:
                case T_ADD2:
                case T_ALL:
                case T_ALLOCATE:
                case T_ALTER:
                case T_AND:
                case T_ANSI_NULLS:
                case T_ANSI_PADDING:
                case T_AS:
                case T_ASC:
                case T_ASSOCIATE:
                case T_AT:
                case T_AUTO_INCREMENT:
                case T_AVG:
                case T_BATCHSIZE:
                case T_BEGIN:
                case T_BETWEEN:
                case T_BIGINT:
                case T_BINARY_DOUBLE:
                case T_BINARY_FLOAT:
                case T_BIT:
                case T_BODY:
                case T_BREAK:
                case T_BY:
                case T_BYTE:
                case T_CALL:
                case T_CALLER:
                case T_CASCADE:
                case T_CASE:
                case T_CASESPECIFIC:
                case T_CAST:
                case T_CHAR:
                case T_CHARACTER:
                case T_CHARSET:
                case T_CLIENT:
                case T_CLOSE:
                case T_CLUSTERED:
                case T_CMP:
                case T_COLLECT:
                case T_COLLECTION:
                case T_COLUMN:
                case T_COMMENT:
                case T_CONSTANT:
                case T_COMMIT:
                case T_COMPRESS:
                case T_CONCAT:
                case T_CONDITION:
                case T_CONSTRAINT:
                case T_CONTINUE:
                case T_COPY:
                case T_COUNT:
                case T_COUNT_BIG:
                case T_CREATE:
                case T_CREATION:
                case T_CREATOR:
                case T_CS:
                case T_CURRENT:
                case T_CURRENT_SCHEMA:
                case T_CURSOR:
                case T_DATABASE:
                case T_DATA:
                case T_DATE:
                case T_DATETIME:
                case T_DAY:
                case T_DAYS:
                case T_DEC:
                case T_DECIMAL:
                case T_DECLARE:
                case T_DEFAULT:
                case T_DEFERRED:
                case T_DEFINED:
                case T_DEFINER:
                case T_DEFINITION:
                case T_DELETE:
                case T_DELIMITED:
                case T_DELIMITER:
                case T_DESC:
                case T_DESCRIBE:
                case T_DIAGNOSTICS:
                case T_DIR:
                case T_DIRECTORY:
                case T_DISTINCT:
                case T_DISTRIBUTE:
                case T_DO:
                case T_DOUBLE:
                case T_DROP:
                case T_DYNAMIC:
                case T_ENABLE:
                case T_ENGINE:
                case T_ESCAPED:
                case T_EXCEPT:
                case T_EXEC:
                case T_EXECUTE:
                case T_EXCEPTION:
                case T_EXCLUSIVE:
                case T_EXISTS:
                case T_EXIT:
                case T_FALLBACK:
                case T_FALSE:
                case T_FETCH:
                case T_FIELDS:
                case T_FILE:
                case T_FILES:
                case T_FLOAT:
                case T_FOR:
                case T_FOREIGN:
                case T_FORMAT:
                case T_FOUND:
                case T_FROM:
                case T_FULL:
                case T_FUNCTION:
                case T_GET:
                case T_GLOBAL:
                case T_GO:
                case T_GRANT:
                case T_GROUP:
                case T_HANDLER:
                case T_HASH:
                case T_HAVING:
                case T_HDFS:
                case T_HIVE:
                case T_HOST:
                case T_IDENTITY:
                case T_IF:
                case T_IGNORE:
                case T_IMMEDIATE:
                case T_IN:
                case T_INCLUDE:
                case T_INDEX:
                case T_INITRANS:
                case T_INNER:
                case T_INOUT:
                case T_INSERT:
                case T_INT:
                case T_INT2:
                case T_INT4:
                case T_INT8:
                case T_INTEGER:
                case T_INTERSECT:
                case T_INTERVAL:
                case T_INTO:
                case T_INVOKER:
                case T_IS:
                case T_ISOPEN:
                case T_ITEMS:
                case T_JOIN:
                case T_KEEP:
                case T_KEY:
                case T_KEYS:
                case T_LANGUAGE:
                case T_LEAVE:
                case T_LEFT:
                case T_LIKE:
                case T_LIMIT:
                case T_LINES:
                case T_LOCAL:
                case T_LOCATION:
                case T_LOCATOR:
                case T_LOCATORS:
                case T_LOCKS:
                case T_LOG:
                case T_LOGGED:
                case T_LOGGING:
                case T_LOOP:
                case T_MAP:
                case T_MATCHED:
                case T_MAX:
                case T_MAXTRANS:
                case T_MERGE:
                case T_MESSAGE_TEXT:
                case T_MICROSECOND:
                case T_MICROSECONDS:
                case T_MIN:
                case T_MULTISET:
                case T_NCHAR:
                case T_NEW:
                case T_NVARCHAR:
                case T_NO:
                case T_NOCOUNT:
                case T_NOCOMPRESS:
                case T_NOLOGGING:
                case T_NONE:
                case T_NOT:
                case T_NOTFOUND:
                case T_NUMERIC:
                case T_NUMBER:
                case T_OBJECT:
                case T_OFF:
                case T_ON:
                case T_ONLY:
                case T_OPEN:
                case T_OR:
                case T_ORDER:
                case T_OUT:
                case T_OUTER:
                case T_OVER:
                case T_OVERWRITE:
                case T_OWNER:
                case T_PACKAGE:
                case T_PARTITION:
                case T_PCTFREE:
                case T_PCTUSED:
                case T_PRECISION:
                case T_PRESERVE:
                case T_PRIMARY:
                case T_PRINT:
                case T_PROC:
                case T_PROCEDURE:
                case T_QUALIFY:
                case T_QUERY_BAND:
                case T_QUIT:
                case T_QUOTED_IDENTIFIER:
                case T_RAISE:
                case T_REAL:
                case T_REFERENCES:
                case T_REGEXP:
                case T_REPLACE:
                case T_RESIGNAL:
                case T_RESTRICT:
                case T_RESULT:
                case T_RESULT_SET_LOCATOR:
                case T_RETURN:
                case T_RETURNS:
                case T_REVERSE:
                case T_RIGHT:
                case T_RLIKE:
                case T_ROLE:
                case T_ROLLBACK:
                case T_ROW:
                case T_ROWS:
                case T_ROW_COUNT:
                case T_RR:
                case T_RS:
                case T_PWD:
                case T_TRIM:
                case T_SCHEMA:
                case T_SECOND:
                case T_SECONDS:
                case T_SECURITY:
                case T_SEGMENT:
                case T_SEL:
                case T_SELECT:
                case T_SET:
                case T_SESSION:
                case T_SESSIONS:
                case T_SETS:
                case T_SHARE:
                case T_SIGNAL:
                case T_SIMPLE_DOUBLE:
                case T_SIMPLE_FLOAT:
                case T_SMALLDATETIME:
                case T_SMALLINT:
                case T_SQL:
                case T_SQLEXCEPTION:
                case T_SQLINSERT:
                case T_SQLSTATE:
                case T_SQLWARNING:
                case T_STATS:
                case T_STATISTICS:
                case T_STEP:
                case T_STORAGE:
                case T_STORED:
                case T_STRING:
                case T_SUBDIR:
                case T_SUBSTRING:
                case T_SUM:
                case T_SYS_REFCURSOR:
                case T_TABLE:
                case T_TABLESPACE:
                case T_TEMPORARY:
                case T_TERMINATED:
                case T_TEXTIMAGE_ON:
                case T_THEN:
                case T_TIMESTAMP:
                case T_TITLE:
                case T_TO:
                case T_TOP:
                case T_TRANSACTION:
                case T_TRUE:
                case T_TRUNCATE:
                case T_UNIQUE:
                case T_UPDATE:
                case T_UR:
                case T_USE:
                case T_USING:
                case T_VALUE:
                case T_VALUES:
                case T_VAR:
                case T_VARCHAR:
                case T_VARCHAR2:
                case T_VARYING:
                case T_VOLATILE:
                case T_WHILE:
                case T_WITH:
                case T_WITHOUT:
                case T_WORK:
                case T_XACT_ABORT:
                case T_XML:
                case T_YES:
                case T_ACTIVITY_COUNT:
                case T_CUME_DIST:
                case T_CURRENT_DATE:
                case T_CURRENT_TIMESTAMP:
                case T_CURRENT_USER:
                case T_DENSE_RANK:
                case T_FIRST_VALUE:
                case T_LAG:
                case T_LAST_VALUE:
                case T_LEAD:
                case T_PART_COUNT:
                case T_PART_LOC:
                case T_RANK:
                case T_ROW_NUMBER:
                case T_STDEV:
                case T_SYSDATE:
                case T_VARIANCE:
                case T_USER:
                case T_DIV:
                case L_ID:
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3263);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case T_DIV:
                                {
                                    setState(3260);
                                    match(T_DIV);
                                }
                                break;
                            case T__3:
                                {
                                    setState(3261);
                                    match(T__3);
                                    setState(3262);
                                    match(T_DIV);
                                }
                                break;
                            case T_ACTION:
                            case T_ADD2:
                            case T_ALL:
                            case T_ALLOCATE:
                            case T_ALTER:
                            case T_AND:
                            case T_ANSI_NULLS:
                            case T_ANSI_PADDING:
                            case T_AS:
                            case T_ASC:
                            case T_ASSOCIATE:
                            case T_AT:
                            case T_AUTO_INCREMENT:
                            case T_AVG:
                            case T_BATCHSIZE:
                            case T_BEGIN:
                            case T_BETWEEN:
                            case T_BIGINT:
                            case T_BINARY_DOUBLE:
                            case T_BINARY_FLOAT:
                            case T_BIT:
                            case T_BODY:
                            case T_BREAK:
                            case T_BY:
                            case T_BYTE:
                            case T_CALL:
                            case T_CALLER:
                            case T_CASCADE:
                            case T_CASE:
                            case T_CASESPECIFIC:
                            case T_CAST:
                            case T_CHAR:
                            case T_CHARACTER:
                            case T_CHARSET:
                            case T_CLIENT:
                            case T_CLOSE:
                            case T_CLUSTERED:
                            case T_CMP:
                            case T_COLLECT:
                            case T_COLLECTION:
                            case T_COLUMN:
                            case T_COMMENT:
                            case T_CONSTANT:
                            case T_COMMIT:
                            case T_COMPRESS:
                            case T_CONCAT:
                            case T_CONDITION:
                            case T_CONSTRAINT:
                            case T_CONTINUE:
                            case T_COPY:
                            case T_COUNT:
                            case T_COUNT_BIG:
                            case T_CREATE:
                            case T_CREATION:
                            case T_CREATOR:
                            case T_CS:
                            case T_CURRENT:
                            case T_CURRENT_SCHEMA:
                            case T_CURSOR:
                            case T_DATABASE:
                            case T_DATA:
                            case T_DATE:
                            case T_DATETIME:
                            case T_DAY:
                            case T_DAYS:
                            case T_DEC:
                            case T_DECIMAL:
                            case T_DECLARE:
                            case T_DEFAULT:
                            case T_DEFERRED:
                            case T_DEFINED:
                            case T_DEFINER:
                            case T_DEFINITION:
                            case T_DELETE:
                            case T_DELIMITED:
                            case T_DELIMITER:
                            case T_DESC:
                            case T_DESCRIBE:
                            case T_DIAGNOSTICS:
                            case T_DIR:
                            case T_DIRECTORY:
                            case T_DISTINCT:
                            case T_DISTRIBUTE:
                            case T_DO:
                            case T_DOUBLE:
                            case T_DROP:
                            case T_DYNAMIC:
                            case T_ENABLE:
                            case T_ENGINE:
                            case T_ESCAPED:
                            case T_EXCEPT:
                            case T_EXEC:
                            case T_EXECUTE:
                            case T_EXCEPTION:
                            case T_EXCLUSIVE:
                            case T_EXISTS:
                            case T_EXIT:
                            case T_FALLBACK:
                            case T_FALSE:
                            case T_FETCH:
                            case T_FIELDS:
                            case T_FILE:
                            case T_FILES:
                            case T_FLOAT:
                            case T_FOR:
                            case T_FOREIGN:
                            case T_FORMAT:
                            case T_FOUND:
                            case T_FROM:
                            case T_FULL:
                            case T_FUNCTION:
                            case T_GET:
                            case T_GLOBAL:
                            case T_GO:
                            case T_GRANT:
                            case T_GROUP:
                            case T_HANDLER:
                            case T_HASH:
                            case T_HAVING:
                            case T_HDFS:
                            case T_HIVE:
                            case T_HOST:
                            case T_IDENTITY:
                            case T_IF:
                            case T_IGNORE:
                            case T_IMMEDIATE:
                            case T_IN:
                            case T_INCLUDE:
                            case T_INDEX:
                            case T_INITRANS:
                            case T_INNER:
                            case T_INOUT:
                            case T_INSERT:
                            case T_INT:
                            case T_INT2:
                            case T_INT4:
                            case T_INT8:
                            case T_INTEGER:
                            case T_INTERSECT:
                            case T_INTERVAL:
                            case T_INTO:
                            case T_INVOKER:
                            case T_IS:
                            case T_ISOPEN:
                            case T_ITEMS:
                            case T_JOIN:
                            case T_KEEP:
                            case T_KEY:
                            case T_KEYS:
                            case T_LANGUAGE:
                            case T_LEAVE:
                            case T_LEFT:
                            case T_LIKE:
                            case T_LIMIT:
                            case T_LINES:
                            case T_LOCAL:
                            case T_LOCATION:
                            case T_LOCATOR:
                            case T_LOCATORS:
                            case T_LOCKS:
                            case T_LOG:
                            case T_LOGGED:
                            case T_LOGGING:
                            case T_LOOP:
                            case T_MAP:
                            case T_MATCHED:
                            case T_MAX:
                            case T_MAXTRANS:
                            case T_MERGE:
                            case T_MESSAGE_TEXT:
                            case T_MICROSECOND:
                            case T_MICROSECONDS:
                            case T_MIN:
                            case T_MULTISET:
                            case T_NCHAR:
                            case T_NEW:
                            case T_NVARCHAR:
                            case T_NO:
                            case T_NOCOUNT:
                            case T_NOCOMPRESS:
                            case T_NOLOGGING:
                            case T_NONE:
                            case T_NOT:
                            case T_NOTFOUND:
                            case T_NUMERIC:
                            case T_NUMBER:
                            case T_OBJECT:
                            case T_OFF:
                            case T_ON:
                            case T_ONLY:
                            case T_OPEN:
                            case T_OR:
                            case T_ORDER:
                            case T_OUT:
                            case T_OUTER:
                            case T_OVER:
                            case T_OVERWRITE:
                            case T_OWNER:
                            case T_PACKAGE:
                            case T_PARTITION:
                            case T_PCTFREE:
                            case T_PCTUSED:
                            case T_PRECISION:
                            case T_PRESERVE:
                            case T_PRIMARY:
                            case T_PRINT:
                            case T_PROC:
                            case T_PROCEDURE:
                            case T_QUALIFY:
                            case T_QUERY_BAND:
                            case T_QUIT:
                            case T_QUOTED_IDENTIFIER:
                            case T_RAISE:
                            case T_REAL:
                            case T_REFERENCES:
                            case T_REGEXP:
                            case T_REPLACE:
                            case T_RESIGNAL:
                            case T_RESTRICT:
                            case T_RESULT:
                            case T_RESULT_SET_LOCATOR:
                            case T_RETURN:
                            case T_RETURNS:
                            case T_REVERSE:
                            case T_RIGHT:
                            case T_RLIKE:
                            case T_ROLE:
                            case T_ROLLBACK:
                            case T_ROW:
                            case T_ROWS:
                            case T_ROW_COUNT:
                            case T_RR:
                            case T_RS:
                            case T_PWD:
                            case T_TRIM:
                            case T_SCHEMA:
                            case T_SECOND:
                            case T_SECONDS:
                            case T_SECURITY:
                            case T_SEGMENT:
                            case T_SEL:
                            case T_SELECT:
                            case T_SET:
                            case T_SESSION:
                            case T_SESSIONS:
                            case T_SETS:
                            case T_SHARE:
                            case T_SIGNAL:
                            case T_SIMPLE_DOUBLE:
                            case T_SIMPLE_FLOAT:
                            case T_SMALLDATETIME:
                            case T_SMALLINT:
                            case T_SQL:
                            case T_SQLEXCEPTION:
                            case T_SQLINSERT:
                            case T_SQLSTATE:
                            case T_SQLWARNING:
                            case T_STATS:
                            case T_STATISTICS:
                            case T_STEP:
                            case T_STORAGE:
                            case T_STORED:
                            case T_STRING:
                            case T_SUBDIR:
                            case T_SUBSTRING:
                            case T_SUM:
                            case T_SYS_REFCURSOR:
                            case T_TABLE:
                            case T_TABLESPACE:
                            case T_TEMPORARY:
                            case T_TERMINATED:
                            case T_TEXTIMAGE_ON:
                            case T_THEN:
                            case T_TIMESTAMP:
                            case T_TITLE:
                            case T_TO:
                            case T_TOP:
                            case T_TRANSACTION:
                            case T_TRUE:
                            case T_TRUNCATE:
                            case T_UNIQUE:
                            case T_UPDATE:
                            case T_UR:
                            case T_USE:
                            case T_USING:
                            case T_VALUE:
                            case T_VALUES:
                            case T_VAR:
                            case T_VARCHAR:
                            case T_VARCHAR2:
                            case T_VARYING:
                            case T_VOLATILE:
                            case T_WHILE:
                            case T_WITH:
                            case T_WITHOUT:
                            case T_WORK:
                            case T_XACT_ABORT:
                            case T_XML:
                            case T_YES:
                            case T_ACTIVITY_COUNT:
                            case T_CUME_DIST:
                            case T_CURRENT_DATE:
                            case T_CURRENT_TIMESTAMP:
                            case T_CURRENT_USER:
                            case T_DENSE_RANK:
                            case T_FIRST_VALUE:
                            case T_LAG:
                            case T_LAST_VALUE:
                            case T_LEAD:
                            case T_PART_COUNT:
                            case T_PART_LOC:
                            case T_RANK:
                            case T_ROW_NUMBER:
                            case T_STDEV:
                            case T_SYSDATE:
                            case T_VARIANCE:
                            case T_USER:
                            case L_ID:
                                break;
                            default:
                                break;
                        }
                        setState(3265);
                        ident();
                        setState(3270);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 411, _ctx);
                        while (_alt != 2
                                && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(3266);
                                        match(T_DIV);
                                        setState(3267);
                                        ident();
                                    }
                                }
                            }
                            setState(3272);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 411, _ctx);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Date_literalContext extends ParserRuleContext {
        public TerminalNode T_DATE() {
            return getToken(HplsqlParser.T_DATE, 0);
        }

        public StringContext string() {
            return getRuleContext(StringContext.class, 0);
        }

        public Date_literalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_date_literal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDate_literal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDate_literal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDate_literal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Date_literalContext date_literal() throws RecognitionException {
        Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
        enterRule(_localctx, 432, RULE_date_literal);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3275);
                match(T_DATE);
                setState(3276);
                string();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Timestamp_literalContext extends ParserRuleContext {
        public TerminalNode T_TIMESTAMP() {
            return getToken(HplsqlParser.T_TIMESTAMP, 0);
        }

        public StringContext string() {
            return getRuleContext(StringContext.class, 0);
        }

        public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_timestamp_literal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterTimestamp_literal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitTimestamp_literal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitTimestamp_literal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
        Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
        enterRule(_localctx, 434, RULE_timestamp_literal);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3278);
                match(T_TIMESTAMP);
                setState(3279);
                string();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class IdentContext extends ParserRuleContext {
        public List<TerminalNode> L_ID() {
            return getTokens(HplsqlParser.L_ID);
        }

        public TerminalNode L_ID(int i) {
            return getToken(HplsqlParser.L_ID, i);
        }

        public List<Non_reserved_wordsContext> non_reserved_words() {
            return getRuleContexts(Non_reserved_wordsContext.class);
        }

        public Non_reserved_wordsContext non_reserved_words(int i) {
            return getRuleContext(Non_reserved_wordsContext.class, i);
        }

        public IdentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ident;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).enterIdent(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener) ((HplsqlListener) listener).exitIdent(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitIdent(this);
            else return visitor.visitChildren(this);
        }
    }

    public final IdentContext ident() throws RecognitionException {
        IdentContext _localctx = new IdentContext(_ctx, getState());
        enterRule(_localctx, 436, RULE_ident);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3283);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case L_ID:
                        {
                            setState(3281);
                            match(L_ID);
                        }
                        break;
                    case T_ACTION:
                    case T_ADD2:
                    case T_ALL:
                    case T_ALLOCATE:
                    case T_ALTER:
                    case T_AND:
                    case T_ANSI_NULLS:
                    case T_ANSI_PADDING:
                    case T_AS:
                    case T_ASC:
                    case T_ASSOCIATE:
                    case T_AT:
                    case T_AUTO_INCREMENT:
                    case T_AVG:
                    case T_BATCHSIZE:
                    case T_BEGIN:
                    case T_BETWEEN:
                    case T_BIGINT:
                    case T_BINARY_DOUBLE:
                    case T_BINARY_FLOAT:
                    case T_BIT:
                    case T_BODY:
                    case T_BREAK:
                    case T_BY:
                    case T_BYTE:
                    case T_CALL:
                    case T_CALLER:
                    case T_CASCADE:
                    case T_CASE:
                    case T_CASESPECIFIC:
                    case T_CAST:
                    case T_CHAR:
                    case T_CHARACTER:
                    case T_CHARSET:
                    case T_CLIENT:
                    case T_CLOSE:
                    case T_CLUSTERED:
                    case T_CMP:
                    case T_COLLECT:
                    case T_COLLECTION:
                    case T_COLUMN:
                    case T_COMMENT:
                    case T_CONSTANT:
                    case T_COMMIT:
                    case T_COMPRESS:
                    case T_CONCAT:
                    case T_CONDITION:
                    case T_CONSTRAINT:
                    case T_CONTINUE:
                    case T_COPY:
                    case T_COUNT:
                    case T_COUNT_BIG:
                    case T_CREATE:
                    case T_CREATION:
                    case T_CREATOR:
                    case T_CS:
                    case T_CURRENT:
                    case T_CURRENT_SCHEMA:
                    case T_CURSOR:
                    case T_DATABASE:
                    case T_DATA:
                    case T_DATE:
                    case T_DATETIME:
                    case T_DAY:
                    case T_DAYS:
                    case T_DEC:
                    case T_DECIMAL:
                    case T_DECLARE:
                    case T_DEFAULT:
                    case T_DEFERRED:
                    case T_DEFINED:
                    case T_DEFINER:
                    case T_DEFINITION:
                    case T_DELETE:
                    case T_DELIMITED:
                    case T_DELIMITER:
                    case T_DESC:
                    case T_DESCRIBE:
                    case T_DIAGNOSTICS:
                    case T_DIR:
                    case T_DIRECTORY:
                    case T_DISTINCT:
                    case T_DISTRIBUTE:
                    case T_DO:
                    case T_DOUBLE:
                    case T_DROP:
                    case T_DYNAMIC:
                    case T_ENABLE:
                    case T_ENGINE:
                    case T_ESCAPED:
                    case T_EXCEPT:
                    case T_EXEC:
                    case T_EXECUTE:
                    case T_EXCEPTION:
                    case T_EXCLUSIVE:
                    case T_EXISTS:
                    case T_EXIT:
                    case T_FALLBACK:
                    case T_FALSE:
                    case T_FETCH:
                    case T_FIELDS:
                    case T_FILE:
                    case T_FILES:
                    case T_FLOAT:
                    case T_FOR:
                    case T_FOREIGN:
                    case T_FORMAT:
                    case T_FOUND:
                    case T_FROM:
                    case T_FULL:
                    case T_FUNCTION:
                    case T_GET:
                    case T_GLOBAL:
                    case T_GO:
                    case T_GRANT:
                    case T_GROUP:
                    case T_HANDLER:
                    case T_HASH:
                    case T_HAVING:
                    case T_HDFS:
                    case T_HIVE:
                    case T_HOST:
                    case T_IDENTITY:
                    case T_IF:
                    case T_IGNORE:
                    case T_IMMEDIATE:
                    case T_IN:
                    case T_INCLUDE:
                    case T_INDEX:
                    case T_INITRANS:
                    case T_INNER:
                    case T_INOUT:
                    case T_INSERT:
                    case T_INT:
                    case T_INT2:
                    case T_INT4:
                    case T_INT8:
                    case T_INTEGER:
                    case T_INTERSECT:
                    case T_INTERVAL:
                    case T_INTO:
                    case T_INVOKER:
                    case T_IS:
                    case T_ISOPEN:
                    case T_ITEMS:
                    case T_JOIN:
                    case T_KEEP:
                    case T_KEY:
                    case T_KEYS:
                    case T_LANGUAGE:
                    case T_LEAVE:
                    case T_LEFT:
                    case T_LIKE:
                    case T_LIMIT:
                    case T_LINES:
                    case T_LOCAL:
                    case T_LOCATION:
                    case T_LOCATOR:
                    case T_LOCATORS:
                    case T_LOCKS:
                    case T_LOG:
                    case T_LOGGED:
                    case T_LOGGING:
                    case T_LOOP:
                    case T_MAP:
                    case T_MATCHED:
                    case T_MAX:
                    case T_MAXTRANS:
                    case T_MERGE:
                    case T_MESSAGE_TEXT:
                    case T_MICROSECOND:
                    case T_MICROSECONDS:
                    case T_MIN:
                    case T_MULTISET:
                    case T_NCHAR:
                    case T_NEW:
                    case T_NVARCHAR:
                    case T_NO:
                    case T_NOCOUNT:
                    case T_NOCOMPRESS:
                    case T_NOLOGGING:
                    case T_NONE:
                    case T_NOT:
                    case T_NOTFOUND:
                    case T_NUMERIC:
                    case T_NUMBER:
                    case T_OBJECT:
                    case T_OFF:
                    case T_ON:
                    case T_ONLY:
                    case T_OPEN:
                    case T_OR:
                    case T_ORDER:
                    case T_OUT:
                    case T_OUTER:
                    case T_OVER:
                    case T_OVERWRITE:
                    case T_OWNER:
                    case T_PACKAGE:
                    case T_PARTITION:
                    case T_PCTFREE:
                    case T_PCTUSED:
                    case T_PRECISION:
                    case T_PRESERVE:
                    case T_PRIMARY:
                    case T_PRINT:
                    case T_PROC:
                    case T_PROCEDURE:
                    case T_QUALIFY:
                    case T_QUERY_BAND:
                    case T_QUIT:
                    case T_QUOTED_IDENTIFIER:
                    case T_RAISE:
                    case T_REAL:
                    case T_REFERENCES:
                    case T_REGEXP:
                    case T_REPLACE:
                    case T_RESIGNAL:
                    case T_RESTRICT:
                    case T_RESULT:
                    case T_RESULT_SET_LOCATOR:
                    case T_RETURN:
                    case T_RETURNS:
                    case T_REVERSE:
                    case T_RIGHT:
                    case T_RLIKE:
                    case T_ROLE:
                    case T_ROLLBACK:
                    case T_ROW:
                    case T_ROWS:
                    case T_ROW_COUNT:
                    case T_RR:
                    case T_RS:
                    case T_PWD:
                    case T_TRIM:
                    case T_SCHEMA:
                    case T_SECOND:
                    case T_SECONDS:
                    case T_SECURITY:
                    case T_SEGMENT:
                    case T_SEL:
                    case T_SELECT:
                    case T_SET:
                    case T_SESSION:
                    case T_SESSIONS:
                    case T_SETS:
                    case T_SHARE:
                    case T_SIGNAL:
                    case T_SIMPLE_DOUBLE:
                    case T_SIMPLE_FLOAT:
                    case T_SMALLDATETIME:
                    case T_SMALLINT:
                    case T_SQL:
                    case T_SQLEXCEPTION:
                    case T_SQLINSERT:
                    case T_SQLSTATE:
                    case T_SQLWARNING:
                    case T_STATS:
                    case T_STATISTICS:
                    case T_STEP:
                    case T_STORAGE:
                    case T_STORED:
                    case T_STRING:
                    case T_SUBDIR:
                    case T_SUBSTRING:
                    case T_SUM:
                    case T_SYS_REFCURSOR:
                    case T_TABLE:
                    case T_TABLESPACE:
                    case T_TEMPORARY:
                    case T_TERMINATED:
                    case T_TEXTIMAGE_ON:
                    case T_THEN:
                    case T_TIMESTAMP:
                    case T_TITLE:
                    case T_TO:
                    case T_TOP:
                    case T_TRANSACTION:
                    case T_TRUE:
                    case T_TRUNCATE:
                    case T_UNIQUE:
                    case T_UPDATE:
                    case T_UR:
                    case T_USE:
                    case T_USING:
                    case T_VALUE:
                    case T_VALUES:
                    case T_VAR:
                    case T_VARCHAR:
                    case T_VARCHAR2:
                    case T_VARYING:
                    case T_VOLATILE:
                    case T_WHILE:
                    case T_WITH:
                    case T_WITHOUT:
                    case T_WORK:
                    case T_XACT_ABORT:
                    case T_XML:
                    case T_YES:
                    case T_ACTIVITY_COUNT:
                    case T_CUME_DIST:
                    case T_CURRENT_DATE:
                    case T_CURRENT_TIMESTAMP:
                    case T_CURRENT_USER:
                    case T_DENSE_RANK:
                    case T_FIRST_VALUE:
                    case T_LAG:
                    case T_LAST_VALUE:
                    case T_LEAD:
                    case T_PART_COUNT:
                    case T_PART_LOC:
                    case T_RANK:
                    case T_ROW_NUMBER:
                    case T_STDEV:
                    case T_SYSDATE:
                    case T_VARIANCE:
                    case T_USER:
                        {
                            setState(3282);
                            non_reserved_words();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(3292);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 415, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3285);
                                match(T__3);
                                setState(3288);
                                _errHandler.sync(this);
                                switch (_input.LA(1)) {
                                    case L_ID:
                                        {
                                            setState(3286);
                                            match(L_ID);
                                        }
                                        break;
                                    case T_ACTION:
                                    case T_ADD2:
                                    case T_ALL:
                                    case T_ALLOCATE:
                                    case T_ALTER:
                                    case T_AND:
                                    case T_ANSI_NULLS:
                                    case T_ANSI_PADDING:
                                    case T_AS:
                                    case T_ASC:
                                    case T_ASSOCIATE:
                                    case T_AT:
                                    case T_AUTO_INCREMENT:
                                    case T_AVG:
                                    case T_BATCHSIZE:
                                    case T_BEGIN:
                                    case T_BETWEEN:
                                    case T_BIGINT:
                                    case T_BINARY_DOUBLE:
                                    case T_BINARY_FLOAT:
                                    case T_BIT:
                                    case T_BODY:
                                    case T_BREAK:
                                    case T_BY:
                                    case T_BYTE:
                                    case T_CALL:
                                    case T_CALLER:
                                    case T_CASCADE:
                                    case T_CASE:
                                    case T_CASESPECIFIC:
                                    case T_CAST:
                                    case T_CHAR:
                                    case T_CHARACTER:
                                    case T_CHARSET:
                                    case T_CLIENT:
                                    case T_CLOSE:
                                    case T_CLUSTERED:
                                    case T_CMP:
                                    case T_COLLECT:
                                    case T_COLLECTION:
                                    case T_COLUMN:
                                    case T_COMMENT:
                                    case T_CONSTANT:
                                    case T_COMMIT:
                                    case T_COMPRESS:
                                    case T_CONCAT:
                                    case T_CONDITION:
                                    case T_CONSTRAINT:
                                    case T_CONTINUE:
                                    case T_COPY:
                                    case T_COUNT:
                                    case T_COUNT_BIG:
                                    case T_CREATE:
                                    case T_CREATION:
                                    case T_CREATOR:
                                    case T_CS:
                                    case T_CURRENT:
                                    case T_CURRENT_SCHEMA:
                                    case T_CURSOR:
                                    case T_DATABASE:
                                    case T_DATA:
                                    case T_DATE:
                                    case T_DATETIME:
                                    case T_DAY:
                                    case T_DAYS:
                                    case T_DEC:
                                    case T_DECIMAL:
                                    case T_DECLARE:
                                    case T_DEFAULT:
                                    case T_DEFERRED:
                                    case T_DEFINED:
                                    case T_DEFINER:
                                    case T_DEFINITION:
                                    case T_DELETE:
                                    case T_DELIMITED:
                                    case T_DELIMITER:
                                    case T_DESC:
                                    case T_DESCRIBE:
                                    case T_DIAGNOSTICS:
                                    case T_DIR:
                                    case T_DIRECTORY:
                                    case T_DISTINCT:
                                    case T_DISTRIBUTE:
                                    case T_DO:
                                    case T_DOUBLE:
                                    case T_DROP:
                                    case T_DYNAMIC:
                                    case T_ENABLE:
                                    case T_ENGINE:
                                    case T_ESCAPED:
                                    case T_EXCEPT:
                                    case T_EXEC:
                                    case T_EXECUTE:
                                    case T_EXCEPTION:
                                    case T_EXCLUSIVE:
                                    case T_EXISTS:
                                    case T_EXIT:
                                    case T_FALLBACK:
                                    case T_FALSE:
                                    case T_FETCH:
                                    case T_FIELDS:
                                    case T_FILE:
                                    case T_FILES:
                                    case T_FLOAT:
                                    case T_FOR:
                                    case T_FOREIGN:
                                    case T_FORMAT:
                                    case T_FOUND:
                                    case T_FROM:
                                    case T_FULL:
                                    case T_FUNCTION:
                                    case T_GET:
                                    case T_GLOBAL:
                                    case T_GO:
                                    case T_GRANT:
                                    case T_GROUP:
                                    case T_HANDLER:
                                    case T_HASH:
                                    case T_HAVING:
                                    case T_HDFS:
                                    case T_HIVE:
                                    case T_HOST:
                                    case T_IDENTITY:
                                    case T_IF:
                                    case T_IGNORE:
                                    case T_IMMEDIATE:
                                    case T_IN:
                                    case T_INCLUDE:
                                    case T_INDEX:
                                    case T_INITRANS:
                                    case T_INNER:
                                    case T_INOUT:
                                    case T_INSERT:
                                    case T_INT:
                                    case T_INT2:
                                    case T_INT4:
                                    case T_INT8:
                                    case T_INTEGER:
                                    case T_INTERSECT:
                                    case T_INTERVAL:
                                    case T_INTO:
                                    case T_INVOKER:
                                    case T_IS:
                                    case T_ISOPEN:
                                    case T_ITEMS:
                                    case T_JOIN:
                                    case T_KEEP:
                                    case T_KEY:
                                    case T_KEYS:
                                    case T_LANGUAGE:
                                    case T_LEAVE:
                                    case T_LEFT:
                                    case T_LIKE:
                                    case T_LIMIT:
                                    case T_LINES:
                                    case T_LOCAL:
                                    case T_LOCATION:
                                    case T_LOCATOR:
                                    case T_LOCATORS:
                                    case T_LOCKS:
                                    case T_LOG:
                                    case T_LOGGED:
                                    case T_LOGGING:
                                    case T_LOOP:
                                    case T_MAP:
                                    case T_MATCHED:
                                    case T_MAX:
                                    case T_MAXTRANS:
                                    case T_MERGE:
                                    case T_MESSAGE_TEXT:
                                    case T_MICROSECOND:
                                    case T_MICROSECONDS:
                                    case T_MIN:
                                    case T_MULTISET:
                                    case T_NCHAR:
                                    case T_NEW:
                                    case T_NVARCHAR:
                                    case T_NO:
                                    case T_NOCOUNT:
                                    case T_NOCOMPRESS:
                                    case T_NOLOGGING:
                                    case T_NONE:
                                    case T_NOT:
                                    case T_NOTFOUND:
                                    case T_NUMERIC:
                                    case T_NUMBER:
                                    case T_OBJECT:
                                    case T_OFF:
                                    case T_ON:
                                    case T_ONLY:
                                    case T_OPEN:
                                    case T_OR:
                                    case T_ORDER:
                                    case T_OUT:
                                    case T_OUTER:
                                    case T_OVER:
                                    case T_OVERWRITE:
                                    case T_OWNER:
                                    case T_PACKAGE:
                                    case T_PARTITION:
                                    case T_PCTFREE:
                                    case T_PCTUSED:
                                    case T_PRECISION:
                                    case T_PRESERVE:
                                    case T_PRIMARY:
                                    case T_PRINT:
                                    case T_PROC:
                                    case T_PROCEDURE:
                                    case T_QUALIFY:
                                    case T_QUERY_BAND:
                                    case T_QUIT:
                                    case T_QUOTED_IDENTIFIER:
                                    case T_RAISE:
                                    case T_REAL:
                                    case T_REFERENCES:
                                    case T_REGEXP:
                                    case T_REPLACE:
                                    case T_RESIGNAL:
                                    case T_RESTRICT:
                                    case T_RESULT:
                                    case T_RESULT_SET_LOCATOR:
                                    case T_RETURN:
                                    case T_RETURNS:
                                    case T_REVERSE:
                                    case T_RIGHT:
                                    case T_RLIKE:
                                    case T_ROLE:
                                    case T_ROLLBACK:
                                    case T_ROW:
                                    case T_ROWS:
                                    case T_ROW_COUNT:
                                    case T_RR:
                                    case T_RS:
                                    case T_PWD:
                                    case T_TRIM:
                                    case T_SCHEMA:
                                    case T_SECOND:
                                    case T_SECONDS:
                                    case T_SECURITY:
                                    case T_SEGMENT:
                                    case T_SEL:
                                    case T_SELECT:
                                    case T_SET:
                                    case T_SESSION:
                                    case T_SESSIONS:
                                    case T_SETS:
                                    case T_SHARE:
                                    case T_SIGNAL:
                                    case T_SIMPLE_DOUBLE:
                                    case T_SIMPLE_FLOAT:
                                    case T_SMALLDATETIME:
                                    case T_SMALLINT:
                                    case T_SQL:
                                    case T_SQLEXCEPTION:
                                    case T_SQLINSERT:
                                    case T_SQLSTATE:
                                    case T_SQLWARNING:
                                    case T_STATS:
                                    case T_STATISTICS:
                                    case T_STEP:
                                    case T_STORAGE:
                                    case T_STORED:
                                    case T_STRING:
                                    case T_SUBDIR:
                                    case T_SUBSTRING:
                                    case T_SUM:
                                    case T_SYS_REFCURSOR:
                                    case T_TABLE:
                                    case T_TABLESPACE:
                                    case T_TEMPORARY:
                                    case T_TERMINATED:
                                    case T_TEXTIMAGE_ON:
                                    case T_THEN:
                                    case T_TIMESTAMP:
                                    case T_TITLE:
                                    case T_TO:
                                    case T_TOP:
                                    case T_TRANSACTION:
                                    case T_TRUE:
                                    case T_TRUNCATE:
                                    case T_UNIQUE:
                                    case T_UPDATE:
                                    case T_UR:
                                    case T_USE:
                                    case T_USING:
                                    case T_VALUE:
                                    case T_VALUES:
                                    case T_VAR:
                                    case T_VARCHAR:
                                    case T_VARCHAR2:
                                    case T_VARYING:
                                    case T_VOLATILE:
                                    case T_WHILE:
                                    case T_WITH:
                                    case T_WITHOUT:
                                    case T_WORK:
                                    case T_XACT_ABORT:
                                    case T_XML:
                                    case T_YES:
                                    case T_ACTIVITY_COUNT:
                                    case T_CUME_DIST:
                                    case T_CURRENT_DATE:
                                    case T_CURRENT_TIMESTAMP:
                                    case T_CURRENT_USER:
                                    case T_DENSE_RANK:
                                    case T_FIRST_VALUE:
                                    case T_LAG:
                                    case T_LAST_VALUE:
                                    case T_LEAD:
                                    case T_PART_COUNT:
                                    case T_PART_LOC:
                                    case T_RANK:
                                    case T_ROW_NUMBER:
                                    case T_STDEV:
                                    case T_SYSDATE:
                                    case T_VARIANCE:
                                    case T_USER:
                                        {
                                            setState(3287);
                                            non_reserved_words();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }
                    }
                    setState(3294);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 415, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class StringContext extends ParserRuleContext {
        public StringContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_string;
        }

        public StringContext() {}

        public void copyFrom(StringContext ctx) {
            super.copyFrom(ctx);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Double_quotedStringContext extends StringContext {
        public TerminalNode L_D_STRING() {
            return getToken(HplsqlParser.L_D_STRING, 0);
        }

        public Double_quotedStringContext(StringContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDouble_quotedString(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDouble_quotedString(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDouble_quotedString(this);
            else return visitor.visitChildren(this);
        }
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Single_quotedStringContext extends StringContext {
        public TerminalNode L_S_STRING() {
            return getToken(HplsqlParser.L_S_STRING, 0);
        }

        public Single_quotedStringContext(StringContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterSingle_quotedString(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitSingle_quotedString(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitSingle_quotedString(this);
            else return visitor.visitChildren(this);
        }
    }

    public final StringContext string() throws RecognitionException {
        StringContext _localctx = new StringContext(_ctx, getState());
        enterRule(_localctx, 438, RULE_string);
        try {
            setState(3297);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case L_S_STRING:
                    _localctx = new Single_quotedStringContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                    {
                        setState(3295);
                        match(L_S_STRING);
                    }
                    break;
                case L_D_STRING:
                    _localctx = new Double_quotedStringContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                    {
                        setState(3296);
                        match(L_D_STRING);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Int_numberContext extends ParserRuleContext {
        public TerminalNode L_INT() {
            return getToken(HplsqlParser.L_INT, 0);
        }

        public TerminalNode T_SUB() {
            return getToken(HplsqlParser.T_SUB, 0);
        }

        public TerminalNode T_ADD() {
            return getToken(HplsqlParser.T_ADD, 0);
        }

        public Int_numberContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_int_number;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterInt_number(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitInt_number(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitInt_number(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Int_numberContext int_number() throws RecognitionException {
        Int_numberContext _localctx = new Int_numberContext(_ctx, getState());
        enterRule(_localctx, 440, RULE_int_number);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3300);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ADD || _la == T_SUB) {
                    {
                        setState(3299);
                        _la = _input.LA(1);
                        if (!(_la == T_ADD || _la == T_SUB)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

                setState(3302);
                match(L_INT);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Dec_numberContext extends ParserRuleContext {
        public TerminalNode L_DEC() {
            return getToken(HplsqlParser.L_DEC, 0);
        }

        public TerminalNode T_SUB() {
            return getToken(HplsqlParser.T_SUB, 0);
        }

        public TerminalNode T_ADD() {
            return getToken(HplsqlParser.T_ADD, 0);
        }

        public Dec_numberContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_dec_number;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterDec_number(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitDec_number(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitDec_number(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Dec_numberContext dec_number() throws RecognitionException {
        Dec_numberContext _localctx = new Dec_numberContext(_ctx, getState());
        enterRule(_localctx, 442, RULE_dec_number);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3305);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == T_ADD || _la == T_SUB) {
                    {
                        setState(3304);
                        _la = _input.LA(1);
                        if (!(_la == T_ADD || _la == T_SUB)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

                setState(3307);
                match(L_DEC);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Bool_literalContext extends ParserRuleContext {
        public TerminalNode T_TRUE() {
            return getToken(HplsqlParser.T_TRUE, 0);
        }

        public TerminalNode T_FALSE() {
            return getToken(HplsqlParser.T_FALSE, 0);
        }

        public Bool_literalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bool_literal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterBool_literal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitBool_literal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitBool_literal(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Bool_literalContext bool_literal() throws RecognitionException {
        Bool_literalContext _localctx = new Bool_literalContext(_ctx, getState());
        enterRule(_localctx, 444, RULE_bool_literal);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3309);
                _la = _input.LA(1);
                if (!(_la == T_FALSE || _la == T_TRUE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Null_constContext extends ParserRuleContext {
        public TerminalNode T_NULL() {
            return getToken(HplsqlParser.T_NULL, 0);
        }

        public Null_constContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_null_const;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterNull_const(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitNull_const(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitNull_const(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Null_constContext null_const() throws RecognitionException {
        Null_constContext _localctx = new Null_constContext(_ctx, getState());
        enterRule(_localctx, 446, RULE_null_const);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3311);
                match(T_NULL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    @SuppressWarnings("CheckReturnValue")
    public static class Non_reserved_wordsContext extends ParserRuleContext {
        public TerminalNode T_ACTION() {
            return getToken(HplsqlParser.T_ACTION, 0);
        }

        public TerminalNode T_ACTIVITY_COUNT() {
            return getToken(HplsqlParser.T_ACTIVITY_COUNT, 0);
        }

        public TerminalNode T_ADD2() {
            return getToken(HplsqlParser.T_ADD2, 0);
        }

        public TerminalNode T_ALL() {
            return getToken(HplsqlParser.T_ALL, 0);
        }

        public TerminalNode T_ALLOCATE() {
            return getToken(HplsqlParser.T_ALLOCATE, 0);
        }

        public TerminalNode T_ALTER() {
            return getToken(HplsqlParser.T_ALTER, 0);
        }

        public TerminalNode T_AND() {
            return getToken(HplsqlParser.T_AND, 0);
        }

        public TerminalNode T_ANSI_NULLS() {
            return getToken(HplsqlParser.T_ANSI_NULLS, 0);
        }

        public TerminalNode T_ANSI_PADDING() {
            return getToken(HplsqlParser.T_ANSI_PADDING, 0);
        }

        public TerminalNode T_AS() {
            return getToken(HplsqlParser.T_AS, 0);
        }

        public TerminalNode T_ASC() {
            return getToken(HplsqlParser.T_ASC, 0);
        }

        public TerminalNode T_ASSOCIATE() {
            return getToken(HplsqlParser.T_ASSOCIATE, 0);
        }

        public TerminalNode T_AT() {
            return getToken(HplsqlParser.T_AT, 0);
        }

        public TerminalNode T_AUTO_INCREMENT() {
            return getToken(HplsqlParser.T_AUTO_INCREMENT, 0);
        }

        public TerminalNode T_AVG() {
            return getToken(HplsqlParser.T_AVG, 0);
        }

        public TerminalNode T_BATCHSIZE() {
            return getToken(HplsqlParser.T_BATCHSIZE, 0);
        }

        public TerminalNode T_BEGIN() {
            return getToken(HplsqlParser.T_BEGIN, 0);
        }

        public TerminalNode T_BETWEEN() {
            return getToken(HplsqlParser.T_BETWEEN, 0);
        }

        public TerminalNode T_BIGINT() {
            return getToken(HplsqlParser.T_BIGINT, 0);
        }

        public TerminalNode T_BINARY_DOUBLE() {
            return getToken(HplsqlParser.T_BINARY_DOUBLE, 0);
        }

        public TerminalNode T_BINARY_FLOAT() {
            return getToken(HplsqlParser.T_BINARY_FLOAT, 0);
        }

        public TerminalNode T_BIT() {
            return getToken(HplsqlParser.T_BIT, 0);
        }

        public TerminalNode T_BODY() {
            return getToken(HplsqlParser.T_BODY, 0);
        }

        public TerminalNode T_BREAK() {
            return getToken(HplsqlParser.T_BREAK, 0);
        }

        public TerminalNode T_BY() {
            return getToken(HplsqlParser.T_BY, 0);
        }

        public TerminalNode T_BYTE() {
            return getToken(HplsqlParser.T_BYTE, 0);
        }

        public TerminalNode T_CALL() {
            return getToken(HplsqlParser.T_CALL, 0);
        }

        public TerminalNode T_CALLER() {
            return getToken(HplsqlParser.T_CALLER, 0);
        }

        public TerminalNode T_CASCADE() {
            return getToken(HplsqlParser.T_CASCADE, 0);
        }

        public TerminalNode T_CASE() {
            return getToken(HplsqlParser.T_CASE, 0);
        }

        public TerminalNode T_CASESPECIFIC() {
            return getToken(HplsqlParser.T_CASESPECIFIC, 0);
        }

        public TerminalNode T_CAST() {
            return getToken(HplsqlParser.T_CAST, 0);
        }

        public TerminalNode T_CHAR() {
            return getToken(HplsqlParser.T_CHAR, 0);
        }

        public TerminalNode T_CHARACTER() {
            return getToken(HplsqlParser.T_CHARACTER, 0);
        }

        public TerminalNode T_CHARSET() {
            return getToken(HplsqlParser.T_CHARSET, 0);
        }

        public TerminalNode T_CLIENT() {
            return getToken(HplsqlParser.T_CLIENT, 0);
        }

        public TerminalNode T_CLOSE() {
            return getToken(HplsqlParser.T_CLOSE, 0);
        }

        public TerminalNode T_CLUSTERED() {
            return getToken(HplsqlParser.T_CLUSTERED, 0);
        }

        public TerminalNode T_CMP() {
            return getToken(HplsqlParser.T_CMP, 0);
        }

        public TerminalNode T_COLLECT() {
            return getToken(HplsqlParser.T_COLLECT, 0);
        }

        public TerminalNode T_COLLECTION() {
            return getToken(HplsqlParser.T_COLLECTION, 0);
        }

        public TerminalNode T_COLUMN() {
            return getToken(HplsqlParser.T_COLUMN, 0);
        }

        public TerminalNode T_COMMENT() {
            return getToken(HplsqlParser.T_COMMENT, 0);
        }

        public TerminalNode T_COMPRESS() {
            return getToken(HplsqlParser.T_COMPRESS, 0);
        }

        public TerminalNode T_CONSTANT() {
            return getToken(HplsqlParser.T_CONSTANT, 0);
        }

        public TerminalNode T_COPY() {
            return getToken(HplsqlParser.T_COPY, 0);
        }

        public TerminalNode T_COMMIT() {
            return getToken(HplsqlParser.T_COMMIT, 0);
        }

        public TerminalNode T_CONCAT() {
            return getToken(HplsqlParser.T_CONCAT, 0);
        }

        public TerminalNode T_CONDITION() {
            return getToken(HplsqlParser.T_CONDITION, 0);
        }

        public TerminalNode T_CONSTRAINT() {
            return getToken(HplsqlParser.T_CONSTRAINT, 0);
        }

        public TerminalNode T_CONTINUE() {
            return getToken(HplsqlParser.T_CONTINUE, 0);
        }

        public TerminalNode T_COUNT() {
            return getToken(HplsqlParser.T_COUNT, 0);
        }

        public TerminalNode T_COUNT_BIG() {
            return getToken(HplsqlParser.T_COUNT_BIG, 0);
        }

        public TerminalNode T_CREATE() {
            return getToken(HplsqlParser.T_CREATE, 0);
        }

        public TerminalNode T_CREATION() {
            return getToken(HplsqlParser.T_CREATION, 0);
        }

        public TerminalNode T_CREATOR() {
            return getToken(HplsqlParser.T_CREATOR, 0);
        }

        public TerminalNode T_CS() {
            return getToken(HplsqlParser.T_CS, 0);
        }

        public TerminalNode T_CUME_DIST() {
            return getToken(HplsqlParser.T_CUME_DIST, 0);
        }

        public TerminalNode T_CURRENT() {
            return getToken(HplsqlParser.T_CURRENT, 0);
        }

        public TerminalNode T_CURRENT_DATE() {
            return getToken(HplsqlParser.T_CURRENT_DATE, 0);
        }

        public TerminalNode T_CURRENT_SCHEMA() {
            return getToken(HplsqlParser.T_CURRENT_SCHEMA, 0);
        }

        public TerminalNode T_CURRENT_TIMESTAMP() {
            return getToken(HplsqlParser.T_CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode T_CURRENT_USER() {
            return getToken(HplsqlParser.T_CURRENT_USER, 0);
        }

        public TerminalNode T_CURSOR() {
            return getToken(HplsqlParser.T_CURSOR, 0);
        }

        public TerminalNode T_DATA() {
            return getToken(HplsqlParser.T_DATA, 0);
        }

        public TerminalNode T_DATABASE() {
            return getToken(HplsqlParser.T_DATABASE, 0);
        }

        public TerminalNode T_DATE() {
            return getToken(HplsqlParser.T_DATE, 0);
        }

        public TerminalNode T_DATETIME() {
            return getToken(HplsqlParser.T_DATETIME, 0);
        }

        public TerminalNode T_DAY() {
            return getToken(HplsqlParser.T_DAY, 0);
        }

        public TerminalNode T_DAYS() {
            return getToken(HplsqlParser.T_DAYS, 0);
        }

        public TerminalNode T_DEC() {
            return getToken(HplsqlParser.T_DEC, 0);
        }

        public TerminalNode T_DECIMAL() {
            return getToken(HplsqlParser.T_DECIMAL, 0);
        }

        public TerminalNode T_DECLARE() {
            return getToken(HplsqlParser.T_DECLARE, 0);
        }

        public TerminalNode T_DEFAULT() {
            return getToken(HplsqlParser.T_DEFAULT, 0);
        }

        public TerminalNode T_DEFERRED() {
            return getToken(HplsqlParser.T_DEFERRED, 0);
        }

        public TerminalNode T_DEFINED() {
            return getToken(HplsqlParser.T_DEFINED, 0);
        }

        public TerminalNode T_DEFINER() {
            return getToken(HplsqlParser.T_DEFINER, 0);
        }

        public TerminalNode T_DEFINITION() {
            return getToken(HplsqlParser.T_DEFINITION, 0);
        }

        public TerminalNode T_DELETE() {
            return getToken(HplsqlParser.T_DELETE, 0);
        }

        public TerminalNode T_DELIMITED() {
            return getToken(HplsqlParser.T_DELIMITED, 0);
        }

        public TerminalNode T_DELIMITER() {
            return getToken(HplsqlParser.T_DELIMITER, 0);
        }

        public TerminalNode T_DENSE_RANK() {
            return getToken(HplsqlParser.T_DENSE_RANK, 0);
        }

        public TerminalNode T_DESC() {
            return getToken(HplsqlParser.T_DESC, 0);
        }

        public TerminalNode T_DESCRIBE() {
            return getToken(HplsqlParser.T_DESCRIBE, 0);
        }

        public TerminalNode T_DIAGNOSTICS() {
            return getToken(HplsqlParser.T_DIAGNOSTICS, 0);
        }

        public TerminalNode T_DIR() {
            return getToken(HplsqlParser.T_DIR, 0);
        }

        public TerminalNode T_DIRECTORY() {
            return getToken(HplsqlParser.T_DIRECTORY, 0);
        }

        public TerminalNode T_DISTINCT() {
            return getToken(HplsqlParser.T_DISTINCT, 0);
        }

        public TerminalNode T_DISTRIBUTE() {
            return getToken(HplsqlParser.T_DISTRIBUTE, 0);
        }

        public TerminalNode T_DO() {
            return getToken(HplsqlParser.T_DO, 0);
        }

        public TerminalNode T_DOUBLE() {
            return getToken(HplsqlParser.T_DOUBLE, 0);
        }

        public TerminalNode T_DROP() {
            return getToken(HplsqlParser.T_DROP, 0);
        }

        public TerminalNode T_DYNAMIC() {
            return getToken(HplsqlParser.T_DYNAMIC, 0);
        }

        public TerminalNode T_ENABLE() {
            return getToken(HplsqlParser.T_ENABLE, 0);
        }

        public TerminalNode T_ENGINE() {
            return getToken(HplsqlParser.T_ENGINE, 0);
        }

        public TerminalNode T_ESCAPED() {
            return getToken(HplsqlParser.T_ESCAPED, 0);
        }

        public TerminalNode T_EXCEPT() {
            return getToken(HplsqlParser.T_EXCEPT, 0);
        }

        public TerminalNode T_EXEC() {
            return getToken(HplsqlParser.T_EXEC, 0);
        }

        public TerminalNode T_EXECUTE() {
            return getToken(HplsqlParser.T_EXECUTE, 0);
        }

        public TerminalNode T_EXCEPTION() {
            return getToken(HplsqlParser.T_EXCEPTION, 0);
        }

        public TerminalNode T_EXCLUSIVE() {
            return getToken(HplsqlParser.T_EXCLUSIVE, 0);
        }

        public TerminalNode T_EXISTS() {
            return getToken(HplsqlParser.T_EXISTS, 0);
        }

        public TerminalNode T_EXIT() {
            return getToken(HplsqlParser.T_EXIT, 0);
        }

        public TerminalNode T_FALLBACK() {
            return getToken(HplsqlParser.T_FALLBACK, 0);
        }

        public TerminalNode T_FALSE() {
            return getToken(HplsqlParser.T_FALSE, 0);
        }

        public TerminalNode T_FETCH() {
            return getToken(HplsqlParser.T_FETCH, 0);
        }

        public TerminalNode T_FIELDS() {
            return getToken(HplsqlParser.T_FIELDS, 0);
        }

        public TerminalNode T_FILE() {
            return getToken(HplsqlParser.T_FILE, 0);
        }

        public TerminalNode T_FILES() {
            return getToken(HplsqlParser.T_FILES, 0);
        }

        public TerminalNode T_FIRST_VALUE() {
            return getToken(HplsqlParser.T_FIRST_VALUE, 0);
        }

        public TerminalNode T_FLOAT() {
            return getToken(HplsqlParser.T_FLOAT, 0);
        }

        public TerminalNode T_FOR() {
            return getToken(HplsqlParser.T_FOR, 0);
        }

        public TerminalNode T_FOREIGN() {
            return getToken(HplsqlParser.T_FOREIGN, 0);
        }

        public TerminalNode T_FORMAT() {
            return getToken(HplsqlParser.T_FORMAT, 0);
        }

        public TerminalNode T_FOUND() {
            return getToken(HplsqlParser.T_FOUND, 0);
        }

        public TerminalNode T_FROM() {
            return getToken(HplsqlParser.T_FROM, 0);
        }

        public TerminalNode T_FULL() {
            return getToken(HplsqlParser.T_FULL, 0);
        }

        public TerminalNode T_FUNCTION() {
            return getToken(HplsqlParser.T_FUNCTION, 0);
        }

        public TerminalNode T_GET() {
            return getToken(HplsqlParser.T_GET, 0);
        }

        public TerminalNode T_GLOBAL() {
            return getToken(HplsqlParser.T_GLOBAL, 0);
        }

        public TerminalNode T_GO() {
            return getToken(HplsqlParser.T_GO, 0);
        }

        public TerminalNode T_GRANT() {
            return getToken(HplsqlParser.T_GRANT, 0);
        }

        public TerminalNode T_GROUP() {
            return getToken(HplsqlParser.T_GROUP, 0);
        }

        public TerminalNode T_HANDLER() {
            return getToken(HplsqlParser.T_HANDLER, 0);
        }

        public TerminalNode T_HASH() {
            return getToken(HplsqlParser.T_HASH, 0);
        }

        public TerminalNode T_HAVING() {
            return getToken(HplsqlParser.T_HAVING, 0);
        }

        public TerminalNode T_HDFS() {
            return getToken(HplsqlParser.T_HDFS, 0);
        }

        public TerminalNode T_HIVE() {
            return getToken(HplsqlParser.T_HIVE, 0);
        }

        public TerminalNode T_HOST() {
            return getToken(HplsqlParser.T_HOST, 0);
        }

        public TerminalNode T_IDENTITY() {
            return getToken(HplsqlParser.T_IDENTITY, 0);
        }

        public TerminalNode T_IF() {
            return getToken(HplsqlParser.T_IF, 0);
        }

        public TerminalNode T_IGNORE() {
            return getToken(HplsqlParser.T_IGNORE, 0);
        }

        public TerminalNode T_IMMEDIATE() {
            return getToken(HplsqlParser.T_IMMEDIATE, 0);
        }

        public TerminalNode T_IN() {
            return getToken(HplsqlParser.T_IN, 0);
        }

        public TerminalNode T_INCLUDE() {
            return getToken(HplsqlParser.T_INCLUDE, 0);
        }

        public TerminalNode T_INDEX() {
            return getToken(HplsqlParser.T_INDEX, 0);
        }

        public TerminalNode T_INITRANS() {
            return getToken(HplsqlParser.T_INITRANS, 0);
        }

        public TerminalNode T_INNER() {
            return getToken(HplsqlParser.T_INNER, 0);
        }

        public TerminalNode T_INOUT() {
            return getToken(HplsqlParser.T_INOUT, 0);
        }

        public TerminalNode T_INSERT() {
            return getToken(HplsqlParser.T_INSERT, 0);
        }

        public TerminalNode T_INT() {
            return getToken(HplsqlParser.T_INT, 0);
        }

        public TerminalNode T_INT2() {
            return getToken(HplsqlParser.T_INT2, 0);
        }

        public TerminalNode T_INT4() {
            return getToken(HplsqlParser.T_INT4, 0);
        }

        public TerminalNode T_INT8() {
            return getToken(HplsqlParser.T_INT8, 0);
        }

        public TerminalNode T_INTEGER() {
            return getToken(HplsqlParser.T_INTEGER, 0);
        }

        public TerminalNode T_INTERSECT() {
            return getToken(HplsqlParser.T_INTERSECT, 0);
        }

        public TerminalNode T_INTERVAL() {
            return getToken(HplsqlParser.T_INTERVAL, 0);
        }

        public TerminalNode T_INTO() {
            return getToken(HplsqlParser.T_INTO, 0);
        }

        public TerminalNode T_INVOKER() {
            return getToken(HplsqlParser.T_INVOKER, 0);
        }

        public TerminalNode T_ITEMS() {
            return getToken(HplsqlParser.T_ITEMS, 0);
        }

        public TerminalNode T_IS() {
            return getToken(HplsqlParser.T_IS, 0);
        }

        public TerminalNode T_ISOPEN() {
            return getToken(HplsqlParser.T_ISOPEN, 0);
        }

        public TerminalNode T_JOIN() {
            return getToken(HplsqlParser.T_JOIN, 0);
        }

        public TerminalNode T_KEEP() {
            return getToken(HplsqlParser.T_KEEP, 0);
        }

        public TerminalNode T_KEY() {
            return getToken(HplsqlParser.T_KEY, 0);
        }

        public TerminalNode T_KEYS() {
            return getToken(HplsqlParser.T_KEYS, 0);
        }

        public TerminalNode T_LAG() {
            return getToken(HplsqlParser.T_LAG, 0);
        }

        public TerminalNode T_LANGUAGE() {
            return getToken(HplsqlParser.T_LANGUAGE, 0);
        }

        public TerminalNode T_LAST_VALUE() {
            return getToken(HplsqlParser.T_LAST_VALUE, 0);
        }

        public TerminalNode T_LEAD() {
            return getToken(HplsqlParser.T_LEAD, 0);
        }

        public TerminalNode T_LEAVE() {
            return getToken(HplsqlParser.T_LEAVE, 0);
        }

        public TerminalNode T_LEFT() {
            return getToken(HplsqlParser.T_LEFT, 0);
        }

        public TerminalNode T_LIKE() {
            return getToken(HplsqlParser.T_LIKE, 0);
        }

        public TerminalNode T_LIMIT() {
            return getToken(HplsqlParser.T_LIMIT, 0);
        }

        public TerminalNode T_LINES() {
            return getToken(HplsqlParser.T_LINES, 0);
        }

        public TerminalNode T_LOCAL() {
            return getToken(HplsqlParser.T_LOCAL, 0);
        }

        public TerminalNode T_LOCATION() {
            return getToken(HplsqlParser.T_LOCATION, 0);
        }

        public TerminalNode T_LOCATOR() {
            return getToken(HplsqlParser.T_LOCATOR, 0);
        }

        public TerminalNode T_LOCATORS() {
            return getToken(HplsqlParser.T_LOCATORS, 0);
        }

        public TerminalNode T_LOCKS() {
            return getToken(HplsqlParser.T_LOCKS, 0);
        }

        public TerminalNode T_LOG() {
            return getToken(HplsqlParser.T_LOG, 0);
        }

        public TerminalNode T_LOGGED() {
            return getToken(HplsqlParser.T_LOGGED, 0);
        }

        public TerminalNode T_LOGGING() {
            return getToken(HplsqlParser.T_LOGGING, 0);
        }

        public TerminalNode T_LOOP() {
            return getToken(HplsqlParser.T_LOOP, 0);
        }

        public TerminalNode T_MAP() {
            return getToken(HplsqlParser.T_MAP, 0);
        }

        public TerminalNode T_MATCHED() {
            return getToken(HplsqlParser.T_MATCHED, 0);
        }

        public TerminalNode T_MAX() {
            return getToken(HplsqlParser.T_MAX, 0);
        }

        public TerminalNode T_MAXTRANS() {
            return getToken(HplsqlParser.T_MAXTRANS, 0);
        }

        public TerminalNode T_MERGE() {
            return getToken(HplsqlParser.T_MERGE, 0);
        }

        public TerminalNode T_MESSAGE_TEXT() {
            return getToken(HplsqlParser.T_MESSAGE_TEXT, 0);
        }

        public TerminalNode T_MICROSECOND() {
            return getToken(HplsqlParser.T_MICROSECOND, 0);
        }

        public TerminalNode T_MICROSECONDS() {
            return getToken(HplsqlParser.T_MICROSECONDS, 0);
        }

        public TerminalNode T_MIN() {
            return getToken(HplsqlParser.T_MIN, 0);
        }

        public TerminalNode T_MULTISET() {
            return getToken(HplsqlParser.T_MULTISET, 0);
        }

        public TerminalNode T_NCHAR() {
            return getToken(HplsqlParser.T_NCHAR, 0);
        }

        public TerminalNode T_NEW() {
            return getToken(HplsqlParser.T_NEW, 0);
        }

        public TerminalNode T_NVARCHAR() {
            return getToken(HplsqlParser.T_NVARCHAR, 0);
        }

        public TerminalNode T_NO() {
            return getToken(HplsqlParser.T_NO, 0);
        }

        public TerminalNode T_NOCOMPRESS() {
            return getToken(HplsqlParser.T_NOCOMPRESS, 0);
        }

        public TerminalNode T_NOCOUNT() {
            return getToken(HplsqlParser.T_NOCOUNT, 0);
        }

        public TerminalNode T_NOLOGGING() {
            return getToken(HplsqlParser.T_NOLOGGING, 0);
        }

        public TerminalNode T_NONE() {
            return getToken(HplsqlParser.T_NONE, 0);
        }

        public TerminalNode T_NOT() {
            return getToken(HplsqlParser.T_NOT, 0);
        }

        public TerminalNode T_NOTFOUND() {
            return getToken(HplsqlParser.T_NOTFOUND, 0);
        }

        public TerminalNode T_NUMERIC() {
            return getToken(HplsqlParser.T_NUMERIC, 0);
        }

        public TerminalNode T_NUMBER() {
            return getToken(HplsqlParser.T_NUMBER, 0);
        }

        public TerminalNode T_OBJECT() {
            return getToken(HplsqlParser.T_OBJECT, 0);
        }

        public TerminalNode T_OFF() {
            return getToken(HplsqlParser.T_OFF, 0);
        }

        public TerminalNode T_ON() {
            return getToken(HplsqlParser.T_ON, 0);
        }

        public TerminalNode T_ONLY() {
            return getToken(HplsqlParser.T_ONLY, 0);
        }

        public TerminalNode T_OPEN() {
            return getToken(HplsqlParser.T_OPEN, 0);
        }

        public TerminalNode T_OR() {
            return getToken(HplsqlParser.T_OR, 0);
        }

        public TerminalNode T_ORDER() {
            return getToken(HplsqlParser.T_ORDER, 0);
        }

        public TerminalNode T_OUT() {
            return getToken(HplsqlParser.T_OUT, 0);
        }

        public TerminalNode T_OUTER() {
            return getToken(HplsqlParser.T_OUTER, 0);
        }

        public TerminalNode T_OVER() {
            return getToken(HplsqlParser.T_OVER, 0);
        }

        public TerminalNode T_OVERWRITE() {
            return getToken(HplsqlParser.T_OVERWRITE, 0);
        }

        public TerminalNode T_OWNER() {
            return getToken(HplsqlParser.T_OWNER, 0);
        }

        public TerminalNode T_PACKAGE() {
            return getToken(HplsqlParser.T_PACKAGE, 0);
        }

        public TerminalNode T_PART_COUNT() {
            return getToken(HplsqlParser.T_PART_COUNT, 0);
        }

        public TerminalNode T_PART_LOC() {
            return getToken(HplsqlParser.T_PART_LOC, 0);
        }

        public TerminalNode T_PARTITION() {
            return getToken(HplsqlParser.T_PARTITION, 0);
        }

        public TerminalNode T_PCTFREE() {
            return getToken(HplsqlParser.T_PCTFREE, 0);
        }

        public TerminalNode T_PCTUSED() {
            return getToken(HplsqlParser.T_PCTUSED, 0);
        }

        public TerminalNode T_PRECISION() {
            return getToken(HplsqlParser.T_PRECISION, 0);
        }

        public TerminalNode T_PRESERVE() {
            return getToken(HplsqlParser.T_PRESERVE, 0);
        }

        public TerminalNode T_PRIMARY() {
            return getToken(HplsqlParser.T_PRIMARY, 0);
        }

        public TerminalNode T_PRINT() {
            return getToken(HplsqlParser.T_PRINT, 0);
        }

        public TerminalNode T_PROC() {
            return getToken(HplsqlParser.T_PROC, 0);
        }

        public TerminalNode T_PROCEDURE() {
            return getToken(HplsqlParser.T_PROCEDURE, 0);
        }

        public TerminalNode T_PWD() {
            return getToken(HplsqlParser.T_PWD, 0);
        }

        public TerminalNode T_QUALIFY() {
            return getToken(HplsqlParser.T_QUALIFY, 0);
        }

        public TerminalNode T_QUERY_BAND() {
            return getToken(HplsqlParser.T_QUERY_BAND, 0);
        }

        public TerminalNode T_QUIT() {
            return getToken(HplsqlParser.T_QUIT, 0);
        }

        public TerminalNode T_QUOTED_IDENTIFIER() {
            return getToken(HplsqlParser.T_QUOTED_IDENTIFIER, 0);
        }

        public TerminalNode T_RAISE() {
            return getToken(HplsqlParser.T_RAISE, 0);
        }

        public TerminalNode T_RANK() {
            return getToken(HplsqlParser.T_RANK, 0);
        }

        public TerminalNode T_REAL() {
            return getToken(HplsqlParser.T_REAL, 0);
        }

        public TerminalNode T_REFERENCES() {
            return getToken(HplsqlParser.T_REFERENCES, 0);
        }

        public TerminalNode T_REGEXP() {
            return getToken(HplsqlParser.T_REGEXP, 0);
        }

        public TerminalNode T_RR() {
            return getToken(HplsqlParser.T_RR, 0);
        }

        public TerminalNode T_REPLACE() {
            return getToken(HplsqlParser.T_REPLACE, 0);
        }

        public TerminalNode T_RESIGNAL() {
            return getToken(HplsqlParser.T_RESIGNAL, 0);
        }

        public TerminalNode T_RESTRICT() {
            return getToken(HplsqlParser.T_RESTRICT, 0);
        }

        public TerminalNode T_RESULT() {
            return getToken(HplsqlParser.T_RESULT, 0);
        }

        public TerminalNode T_RESULT_SET_LOCATOR() {
            return getToken(HplsqlParser.T_RESULT_SET_LOCATOR, 0);
        }

        public TerminalNode T_RETURN() {
            return getToken(HplsqlParser.T_RETURN, 0);
        }

        public TerminalNode T_RETURNS() {
            return getToken(HplsqlParser.T_RETURNS, 0);
        }

        public TerminalNode T_REVERSE() {
            return getToken(HplsqlParser.T_REVERSE, 0);
        }

        public TerminalNode T_RIGHT() {
            return getToken(HplsqlParser.T_RIGHT, 0);
        }

        public TerminalNode T_RLIKE() {
            return getToken(HplsqlParser.T_RLIKE, 0);
        }

        public TerminalNode T_RS() {
            return getToken(HplsqlParser.T_RS, 0);
        }

        public TerminalNode T_ROLE() {
            return getToken(HplsqlParser.T_ROLE, 0);
        }

        public TerminalNode T_ROLLBACK() {
            return getToken(HplsqlParser.T_ROLLBACK, 0);
        }

        public TerminalNode T_ROW() {
            return getToken(HplsqlParser.T_ROW, 0);
        }

        public TerminalNode T_ROWS() {
            return getToken(HplsqlParser.T_ROWS, 0);
        }

        public TerminalNode T_ROW_COUNT() {
            return getToken(HplsqlParser.T_ROW_COUNT, 0);
        }

        public TerminalNode T_ROW_NUMBER() {
            return getToken(HplsqlParser.T_ROW_NUMBER, 0);
        }

        public TerminalNode T_SCHEMA() {
            return getToken(HplsqlParser.T_SCHEMA, 0);
        }

        public TerminalNode T_SECOND() {
            return getToken(HplsqlParser.T_SECOND, 0);
        }

        public TerminalNode T_SECONDS() {
            return getToken(HplsqlParser.T_SECONDS, 0);
        }

        public TerminalNode T_SECURITY() {
            return getToken(HplsqlParser.T_SECURITY, 0);
        }

        public TerminalNode T_SEGMENT() {
            return getToken(HplsqlParser.T_SEGMENT, 0);
        }

        public TerminalNode T_SEL() {
            return getToken(HplsqlParser.T_SEL, 0);
        }

        public TerminalNode T_SELECT() {
            return getToken(HplsqlParser.T_SELECT, 0);
        }

        public TerminalNode T_SESSION() {
            return getToken(HplsqlParser.T_SESSION, 0);
        }

        public TerminalNode T_SESSIONS() {
            return getToken(HplsqlParser.T_SESSIONS, 0);
        }

        public TerminalNode T_SET() {
            return getToken(HplsqlParser.T_SET, 0);
        }

        public TerminalNode T_SETS() {
            return getToken(HplsqlParser.T_SETS, 0);
        }

        public TerminalNode T_SHARE() {
            return getToken(HplsqlParser.T_SHARE, 0);
        }

        public TerminalNode T_SIGNAL() {
            return getToken(HplsqlParser.T_SIGNAL, 0);
        }

        public TerminalNode T_SIMPLE_DOUBLE() {
            return getToken(HplsqlParser.T_SIMPLE_DOUBLE, 0);
        }

        public TerminalNode T_SIMPLE_FLOAT() {
            return getToken(HplsqlParser.T_SIMPLE_FLOAT, 0);
        }

        public TerminalNode T_SMALLDATETIME() {
            return getToken(HplsqlParser.T_SMALLDATETIME, 0);
        }

        public TerminalNode T_SMALLINT() {
            return getToken(HplsqlParser.T_SMALLINT, 0);
        }

        public TerminalNode T_SQL() {
            return getToken(HplsqlParser.T_SQL, 0);
        }

        public TerminalNode T_SQLEXCEPTION() {
            return getToken(HplsqlParser.T_SQLEXCEPTION, 0);
        }

        public TerminalNode T_SQLINSERT() {
            return getToken(HplsqlParser.T_SQLINSERT, 0);
        }

        public TerminalNode T_SQLSTATE() {
            return getToken(HplsqlParser.T_SQLSTATE, 0);
        }

        public TerminalNode T_SQLWARNING() {
            return getToken(HplsqlParser.T_SQLWARNING, 0);
        }

        public TerminalNode T_STATS() {
            return getToken(HplsqlParser.T_STATS, 0);
        }

        public TerminalNode T_STATISTICS() {
            return getToken(HplsqlParser.T_STATISTICS, 0);
        }

        public TerminalNode T_STEP() {
            return getToken(HplsqlParser.T_STEP, 0);
        }

        public TerminalNode T_STDEV() {
            return getToken(HplsqlParser.T_STDEV, 0);
        }

        public TerminalNode T_STORAGE() {
            return getToken(HplsqlParser.T_STORAGE, 0);
        }

        public TerminalNode T_STORED() {
            return getToken(HplsqlParser.T_STORED, 0);
        }

        public TerminalNode T_STRING() {
            return getToken(HplsqlParser.T_STRING, 0);
        }

        public TerminalNode T_SUBDIR() {
            return getToken(HplsqlParser.T_SUBDIR, 0);
        }

        public TerminalNode T_SUBSTRING() {
            return getToken(HplsqlParser.T_SUBSTRING, 0);
        }

        public TerminalNode T_SUM() {
            return getToken(HplsqlParser.T_SUM, 0);
        }

        public TerminalNode T_SYSDATE() {
            return getToken(HplsqlParser.T_SYSDATE, 0);
        }

        public TerminalNode T_SYS_REFCURSOR() {
            return getToken(HplsqlParser.T_SYS_REFCURSOR, 0);
        }

        public TerminalNode T_TABLE() {
            return getToken(HplsqlParser.T_TABLE, 0);
        }

        public TerminalNode T_TABLESPACE() {
            return getToken(HplsqlParser.T_TABLESPACE, 0);
        }

        public TerminalNode T_TEMPORARY() {
            return getToken(HplsqlParser.T_TEMPORARY, 0);
        }

        public TerminalNode T_TERMINATED() {
            return getToken(HplsqlParser.T_TERMINATED, 0);
        }

        public TerminalNode T_TEXTIMAGE_ON() {
            return getToken(HplsqlParser.T_TEXTIMAGE_ON, 0);
        }

        public TerminalNode T_THEN() {
            return getToken(HplsqlParser.T_THEN, 0);
        }

        public TerminalNode T_TIMESTAMP() {
            return getToken(HplsqlParser.T_TIMESTAMP, 0);
        }

        public TerminalNode T_TITLE() {
            return getToken(HplsqlParser.T_TITLE, 0);
        }

        public TerminalNode T_TO() {
            return getToken(HplsqlParser.T_TO, 0);
        }

        public TerminalNode T_TOP() {
            return getToken(HplsqlParser.T_TOP, 0);
        }

        public TerminalNode T_TRANSACTION() {
            return getToken(HplsqlParser.T_TRANSACTION, 0);
        }

        public TerminalNode T_TRIM() {
            return getToken(HplsqlParser.T_TRIM, 0);
        }

        public TerminalNode T_TRUE() {
            return getToken(HplsqlParser.T_TRUE, 0);
        }

        public TerminalNode T_TRUNCATE() {
            return getToken(HplsqlParser.T_TRUNCATE, 0);
        }

        public TerminalNode T_UNIQUE() {
            return getToken(HplsqlParser.T_UNIQUE, 0);
        }

        public TerminalNode T_UPDATE() {
            return getToken(HplsqlParser.T_UPDATE, 0);
        }

        public TerminalNode T_UR() {
            return getToken(HplsqlParser.T_UR, 0);
        }

        public TerminalNode T_USE() {
            return getToken(HplsqlParser.T_USE, 0);
        }

        public TerminalNode T_USER() {
            return getToken(HplsqlParser.T_USER, 0);
        }

        public TerminalNode T_USING() {
            return getToken(HplsqlParser.T_USING, 0);
        }

        public TerminalNode T_VALUE() {
            return getToken(HplsqlParser.T_VALUE, 0);
        }

        public TerminalNode T_VALUES() {
            return getToken(HplsqlParser.T_VALUES, 0);
        }

        public TerminalNode T_VAR() {
            return getToken(HplsqlParser.T_VAR, 0);
        }

        public TerminalNode T_VARCHAR() {
            return getToken(HplsqlParser.T_VARCHAR, 0);
        }

        public TerminalNode T_VARCHAR2() {
            return getToken(HplsqlParser.T_VARCHAR2, 0);
        }

        public TerminalNode T_VARYING() {
            return getToken(HplsqlParser.T_VARYING, 0);
        }

        public TerminalNode T_VARIANCE() {
            return getToken(HplsqlParser.T_VARIANCE, 0);
        }

        public TerminalNode T_VOLATILE() {
            return getToken(HplsqlParser.T_VOLATILE, 0);
        }

        public TerminalNode T_WHILE() {
            return getToken(HplsqlParser.T_WHILE, 0);
        }

        public TerminalNode T_WITH() {
            return getToken(HplsqlParser.T_WITH, 0);
        }

        public TerminalNode T_WITHOUT() {
            return getToken(HplsqlParser.T_WITHOUT, 0);
        }

        public TerminalNode T_WORK() {
            return getToken(HplsqlParser.T_WORK, 0);
        }

        public TerminalNode T_XACT_ABORT() {
            return getToken(HplsqlParser.T_XACT_ABORT, 0);
        }

        public TerminalNode T_XML() {
            return getToken(HplsqlParser.T_XML, 0);
        }

        public TerminalNode T_YES() {
            return getToken(HplsqlParser.T_YES, 0);
        }

        public Non_reserved_wordsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        @Override
        public int getRuleIndex() {
            return RULE_non_reserved_words;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).enterNon_reserved_words(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof HplsqlListener)
                ((HplsqlListener) listener).exitNon_reserved_words(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof HplsqlVisitor)
                return ((HplsqlVisitor<? extends T>) visitor).visitNon_reserved_words(this);
            else return visitor.visitChildren(this);
        }
    }

    public final Non_reserved_wordsContext non_reserved_words() throws RecognitionException {
        Non_reserved_wordsContext _localctx = new Non_reserved_wordsContext(_ctx, getState());
        enterRule(_localctx, 448, RULE_non_reserved_words);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3313);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & -67108928L) != 0)
                        || ((((_la - 64)) & ~0x3f) == 0
                                && ((1L << (_la - 64)) & -24696061953L) != 0)
                        || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0)
                        || ((((_la - 192)) & ~0x3f) == 0
                                && ((1L << (_la - 192)) & -2251799817879561L) != 0)
                        || ((((_la - 256)) & ~0x3f) == 0
                                && ((1L << (_la - 256)) & -54046502653264129L) != 0)
                        || ((((_la - 320)) & ~0x3f) == 0
                                && ((1L << (_la - 320)) & 8356351L) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
            case 4:
                return block_end_sempred((Block_endContext) _localctx, predIndex);
            case 11:
                return expr_stmt_sempred((Expr_stmtContext) _localctx, predIndex);
            case 74:
                return create_routine_params_sempred(
                        (Create_routine_paramsContext) _localctx, predIndex);
            case 151:
                return select_list_alias_sempred((Select_list_aliasContext) _localctx, predIndex);
            case 162:
                return from_alias_clause_sempred((From_alias_clauseContext) _localctx, predIndex);
            case 180:
                return delete_alias_sempred((Delete_aliasContext) _localctx, predIndex);
            case 182:
                return bool_expr_sempred((Bool_exprContext) _localctx, predIndex);
            case 190:
                return expr_sempred((ExprContext) _localctx, predIndex);
            case 207:
                return func_param_sempred((Func_paramContext) _localctx, predIndex);
        }
        return true;
    }

    private boolean block_end_sempred(Block_endContext _localctx, int predIndex) {
        switch (predIndex) {
            case 0:
                return !_input.LT(2).getText().equalsIgnoreCase("TRANSACTION");
        }
        return true;
    }

    private boolean expr_stmt_sempred(Expr_stmtContext _localctx, int predIndex) {
        switch (predIndex) {
            case 1:
                return !_input.LT(1).getText().equalsIgnoreCase("GO");
        }
        return true;
    }

    private boolean create_routine_params_sempred(
            Create_routine_paramsContext _localctx, int predIndex) {
        switch (predIndex) {
            case 2:
                return !_input.LT(1).getText().equalsIgnoreCase("IS")
                        && !_input.LT(1).getText().equalsIgnoreCase("AS")
                        && !(_input.LT(1).getText().equalsIgnoreCase("DYNAMIC")
                                && _input.LT(2).getText().equalsIgnoreCase("RESULT"));
        }
        return true;
    }

    private boolean select_list_alias_sempred(Select_list_aliasContext _localctx, int predIndex) {
        switch (predIndex) {
            case 3:
                return !_input.LT(1).getText().equalsIgnoreCase("INTO")
                        && !_input.LT(1).getText().equalsIgnoreCase("FROM");
        }
        return true;
    }

    private boolean from_alias_clause_sempred(From_alias_clauseContext _localctx, int predIndex) {
        switch (predIndex) {
            case 4:
                return !_input.LT(1).getText().equalsIgnoreCase("EXEC")
                        && !_input.LT(1).getText().equalsIgnoreCase("EXECUTE")
                        && !_input.LT(1).getText().equalsIgnoreCase("INNER")
                        && !_input.LT(1).getText().equalsIgnoreCase("LEFT")
                        && !_input.LT(1).getText().equalsIgnoreCase("GROUP")
                        && !_input.LT(1).getText().equalsIgnoreCase("ORDER")
                        && !_input.LT(1).getText().equalsIgnoreCase("LIMIT")
                        && !_input.LT(1).getText().equalsIgnoreCase("WITH");
        }
        return true;
    }

    private boolean delete_alias_sempred(Delete_aliasContext _localctx, int predIndex) {
        switch (predIndex) {
            case 5:
                return !_input.LT(1).getText().equalsIgnoreCase("ALL");
        }
        return true;
    }

    private boolean bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
        switch (predIndex) {
            case 6:
                return precpred(_ctx, 2);
        }
        return true;
    }

    private boolean expr_sempred(ExprContext _localctx, int predIndex) {
        switch (predIndex) {
            case 7:
                return precpred(_ctx, 14);
            case 8:
                return precpred(_ctx, 13);
            case 9:
                return precpred(_ctx, 12);
            case 10:
                return precpred(_ctx, 11);
            case 11:
                return precpred(_ctx, 15);
        }
        return true;
    }

    private boolean func_param_sempred(Func_paramContext _localctx, int predIndex) {
        switch (predIndex) {
            case 12:
                return !_input.LT(1).getText().equalsIgnoreCase("INTO");
        }
        return true;
    }

    private static final String _serializedATNSegment0 =
            "\u0004\u0001\u0177\u0cf4\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"
                    + "\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"
                    + "\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"
                    + "\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"
                    + "\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"
                    + "\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"
                    + "\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"
                    + "\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"
                    + "\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"
                    + "\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"
                    + "\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"
                    + "\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"
                    + "\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"
                    + ",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"
                    + "1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"
                    + "6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"
                    + ";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"
                    + "@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"
                    + "E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"
                    + "J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"
                    + "O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"
                    + "T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"
                    + "Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"
                    + "^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"
                    + "c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"
                    + "h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"
                    + "m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"
                    + "r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"
                    + "w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"
                    + "|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"
                    + "\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"
                    + "\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"
                    + "\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"
                    + "\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"
                    + "\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"
                    + "\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"
                    + "\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"
                    + "\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"
                    + "\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"
                    + "\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"
                    + "\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"
                    + "\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"
                    + "\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"
                    + "\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"
                    + "\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"
                    + "\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"
                    + "\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"
                    + "\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"
                    + "\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"
                    + "\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"
                    + "\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"
                    + "\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"
                    + "\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"
                    + "\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"
                    + "\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"
                    + "\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"
                    + "\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"
                    + "\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"
                    + "\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"
                    + "\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"
                    + "\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"
                    + "\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"
                    + "\u00e0\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0003\u0001\u01c7"
                    + "\b\u0001\u0001\u0001\u0003\u0001\u01ca\b\u0001\u0004\u0001\u01cc\b\u0001"
                    + "\u000b\u0001\f\u0001\u01cd\u0001\u0002\u0003\u0002\u01d1\b\u0002\u0001"
                    + "\u0002\u0001\u0002\u0001\u0002\u0003\u0002\u01d6\b\u0002\u0001\u0002\u0001"
                    + "\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u01dd\b\u0003\u0001"
                    + "\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u01e3\b\u0003\u0003"
                    + "\u0003\u01e5\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001"
                    + "\u0005\u0004\u0005\u01ec\b\u0005\u000b\u0005\f\u0005\u01ed\u0001\u0005"
                    + "\u0003\u0005\u01f1\b\u0005\u0003\u0005\u01f3\b\u0005\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"
                    + "\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0231"
                    + "\b\u0006\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0004\b\u0237\b\b\u000b"
                    + "\b\f\b\u0238\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001"
                    + "\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0003\f"
                    + "\u0249\b\f\u0001\f\u0001\f\u0001\f\u0005\f\u024e\b\f\n\f\f\f\u0251\t\f"
                    + "\u0003\f\u0253\b\f\u0001\r\u0001\r\u0001\r\u0003\r\u0258\b\r\u0001\u000e"
                    + "\u0001\u000e\u0003\u000e\u025c\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e"
                    + "\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0265\b\u000e"
                    + "\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u026a\b\u000e\u0001\u000f"
                    + "\u0001\u000f\u0001\u000f\u0001\u000f\u0005\u000f\u0270\b\u000f\n\u000f"
                    + "\f\u000f\u0273\t\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0277\b\u000f"
                    + "\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0005\u000f"
                    + "\u027e\b\u000f\n\u000f\f\u000f\u0281\t\u000f\u0001\u000f\u0001\u000f\u0001"
                    + "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0005\u0010\u028a"
                    + "\b\u0010\n\u0010\f\u0010\u028d\t\u0010\u0001\u0010\u0001\u0010\u0003\u0010"
                    + "\u0291\b\u0010\u0001\u0010\u0003\u0010\u0294\b\u0010\u0001\u0010\u0001"
                    + "\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001"
                    + "\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u02a2"
                    + "\b\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0003"
                    + "\u0012\u02a9\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"
                    + "\u0012\u0005\u0012\u02b0\b\u0012\n\u0012\f\u0012\u02b3\t\u0012\u0001\u0012"
                    + "\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013"
                    + "\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015"
                    + "\u0001\u0015\u0003\u0015\u02c3\b\u0015\u0001\u0015\u0001\u0015\u0003\u0015"
                    + "\u02c7\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0005\u0016"
                    + "\u02cd\b\u0016\n\u0016\f\u0016\u02d0\t\u0016\u0001\u0017\u0001\u0017\u0001"
                    + "\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0005\u0017\u02d8\b\u0017\n"
                    + "\u0017\f\u0017\u02db\t\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001"
                    + "\u0018\u0001\u0018\u0005\u0018\u02e2\b\u0018\n\u0018\f\u0018\u02e5\t\u0018"
                    + "\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019"
                    + "\u02ec\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0005\u001a\u02f1\b"
                    + "\u001a\n\u001a\f\u001a\u02f4\t\u001a\u0001\u001a\u0003\u001a\u02f7\b\u001a"
                    + "\u0001\u001a\u0001\u001a\u0003\u001a\u02fb\b\u001a\u0001\u001a\u0005\u001a"
                    + "\u02fe\b\u001a\n\u001a\f\u001a\u0301\t\u001a\u0001\u001a\u0003\u001a\u0304"
                    + "\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0309\b\u001a"
                    + "\u0001\u001a\u0001\u001a\u0003\u001a\u030d\b\u001a\u0001\u001a\u0001\u001a"
                    + "\u0003\u001a\u0311\b\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c"
                    + "\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u031b\b\u001c"
                    + "\u0001\u001c\u0001\u001c\u0003\u001c\u031f\b\u001c\u0001\u001c\u0001\u001c"
                    + "\u0001\u001c\u0003\u001c\u0324\b\u001c\u0001\u001d\u0001\u001d\u0001\u001d"
                    + "\u0003\u001d\u0329\b\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u032d\b"
                    + "\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f\u0001\u001f\u0001"
                    + "\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003"
                    + "\u001f\u033a\b\u001f\u0001\u001f\u0001\u001f\u0001 \u0003 \u033f\b \u0001"
                    + " \u0001 \u0001 \u0001 \u0003 \u0345\b \u0001 \u0001 \u0001!\u0001!\u0001"
                    + "!\u0001!\u0001!\u0003!\u034e\b!\u0001!\u0001!\u0003!\u0352\b!\u0001!\u0001"
                    + "!\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u035a\b\"\u0001\"\u0003\"\u035d"
                    + "\b\"\u0001\"\u0001\"\u0001\"\u0003\"\u0362\b\"\u0001\"\u0001\"\u0001#"
                    + "\u0003#\u0367\b#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u036e\b#\u0001"
                    + "#\u0001#\u0001#\u0001#\u0001#\u0003#\u0375\b#\u0001#\u0003#\u0378\b#\u0001"
                    + "$\u0001$\u0001$\u0005$\u037d\b$\n$\f$\u0380\t$\u0001%\u0001%\u0001%\u0003"
                    + "%\u0385\b%\u0001%\u0005%\u0388\b%\n%\f%\u038b\t%\u0001%\u0005%\u038e\b"
                    + "%\n%\f%\u0391\t%\u0001%\u0001%\u0003%\u0395\b%\u0001%\u0003%\u0398\b%"
                    + "\u0001&\u0001&\u0001\'\u0001\'\u0003\'\u039e\b\'\u0001\'\u0001\'\u0001"
                    + "\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0005\'\u03aa"
                    + "\b\'\n\'\f\'\u03ad\t\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0005\'"
                    + "\u03b4\b\'\n\'\f\'\u03b7\t\'\u0001\'\u0001\'\u0001\'\u0003\'\u03bc\b\'"
                    + "\u0001(\u0001(\u0001(\u0003(\u03c1\b(\u0001(\u0001(\u0001(\u0003(\u03c6"
                    + "\b(\u0001(\u0001(\u0001(\u0003(\u03cb\b(\u0005(\u03cd\b(\n(\f(\u03d0\t"
                    + "(\u0001(\u0001(\u0003(\u03d4\b(\u0001(\u0003(\u03d7\b(\u0001(\u0001(\u0001"
                    + "(\u0001(\u0001(\u0001(\u0005(\u03df\b(\n(\f(\u03e2\t(\u0001(\u0001(\u0001"
                    + "(\u0001(\u0001(\u0001(\u0001(\u0005(\u03eb\b(\n(\f(\u03ee\t(\u0001(\u0001"
                    + "(\u0005(\u03f2\b(\n(\f(\u03f5\t(\u0003(\u03f7\b(\u0001)\u0001)\u0001)"
                    + "\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0003)\u0403\b)\u0001"
                    + "*\u0004*\u0406\b*\u000b*\f*\u0407\u0001+\u0001+\u0001+\u0003+\u040d\b"
                    + "+\u0001,\u0003,\u0410\b,\u0001,\u0001,\u0001-\u0004-\u0415\b-\u000b-\f"
                    + "-\u0416\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"
                    + ".\u0001.\u0003.\u0423\b.\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001"
                    + "/\u0001/\u0001/\u0001/\u0001/\u0004/\u0430\b/\u000b/\f/\u0431\u0001/\u0001"
                    + "/\u0001/\u0003/\u0437\b/\u00010\u00030\u043a\b0\u00010\u00010\u00010\u0001"
                    + "0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00050\u0447\b0\n0"
                    + "\f0\u044a\t0\u00010\u00010\u00010\u00030\u044f\b0\u00010\u00010\u0001"
                    + "0\u00010\u00010\u00010\u00010\u00010\u00010\u00030\u045a\b0\u00011\u0003"
                    + "1\u045d\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00051\u0465\b1\n"
                    + "1\f1\u0468\t1\u00011\u00011\u00011\u00011\u00031\u046e\b1\u00012\u0001"
                    + "2\u00012\u00012\u00032\u0474\b2\u00013\u00013\u00013\u00013\u00053\u047a"
                    + "\b3\n3\f3\u047d\t3\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0003"
                    + "4\u0486\b4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0001"
                    + "4\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u00014\u0003"
                    + "4\u049a\b4\u00015\u00015\u00015\u00015\u00035\u04a0\b5\u00016\u00016\u0003"
                    + "6\u04a4\b6\u00016\u00016\u00016\u00036\u04a9\b6\u00016\u00016\u00036\u04ad"
                    + "\b6\u00016\u00016\u00016\u00036\u04b2\b6\u00016\u00036\u04b5\b6\u0001"
                    + "6\u00016\u00016\u00036\u04ba\b6\u00016\u00036\u04bd\b6\u00017\u00017\u0001"
                    + "7\u00017\u00017\u00018\u00018\u00019\u00019\u00019\u00039\u04c9\b9\u0001"
                    + "9\u00019\u0001:\u0001:\u0001:\u0003:\u04d0\b:\u0001:\u0001:\u0001:\u0003"
                    + ":\u04d5\b:\u0001:\u0001:\u0001:\u0003:\u04da\b:\u0005:\u04dc\b:\n:\f:"
                    + "\u04df\t:\u0001:\u0001:\u0003:\u04e3\b:\u0001:\u0003:\u04e6\b:\u0001:"
                    + "\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u04ee\b:\n:\f:\u04f1\t:\u0001"
                    + ":\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0005:\u04fa\b:\n:\f:\u04fd"
                    + "\t:\u0001:\u0001:\u0005:\u0501\b:\n:\f:\u0504\t:\u0001:\u0001:\u0001:"
                    + "\u0001:\u0001:\u0003:\u050b\b:\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"
                    + ";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u0519\b;\u0001;\u0001"
                    + ";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"
                    + ";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"
                    + ";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u0538\b;\u0003"
                    + ";\u053a\b;\u0001<\u0001<\u0001<\u0003<\u053f\b<\u0001<\u0001<\u0003<\u0543"
                    + "\b<\u0001<\u0001<\u0001=\u0003=\u0548\b=\u0001=\u0001=\u0001=\u0001=\u0001"
                    + "=\u0003=\u054f\b=\u0001=\u0003=\u0552\b=\u0001>\u0003>\u0555\b>\u0001"
                    + ">\u0001>\u0001>\u0003>\u055a\b>\u0001>\u0001>\u0003>\u055e\b>\u0003>\u0560"
                    + "\b>\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u0567\b?\u0001?\u0001?\u0005"
                    + "?\u056b\b?\n?\f?\u056e\t?\u0001@\u0001@\u0001@\u0001@\u0003@\u0574\b@"
                    + "\u0001A\u0001A\u0001A\u0001A\u0003A\u057a\bA\u0001A\u0003A\u057d\bA\u0001"
                    + "A\u0001A\u0001A\u0003A\u0582\bA\u0001A\u0001A\u0003A\u0586\bA\u0001A\u0003"
                    + "A\u0589\bA\u0001A\u0001A\u0001B\u0001B\u0001B\u0003B\u0590\bB\u0001C\u0001"
                    + "C\u0001C\u0001C\u0003C\u0596\bC\u0001C\u0003C\u0599\bC\u0001C\u0001C\u0001"
                    + "C\u0001C\u0001C\u0001C\u0001C\u0001C\u0003C\u05a3\bC\u0001D\u0001D\u0001"
                    + "D\u0001D\u0001D\u0005D\u05aa\bD\nD\fD\u05ad\tD\u0001E\u0001E\u0001E\u0001"
                    + "E\u0003E\u05b3\bE\u0001E\u0001E\u0001E\u0001E\u0001E\u0003E\u05ba\bE\u0003"
                    + "E\u05bc\bE\u0001F\u0001F\u0001F\u0001F\u0003F\u05c2\bF\u0001F\u0003F\u05c5"
                    + "\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003"
                    + "F\u05d0\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0005G\u05d7\bG\nG\fG\u05da"
                    + "\tG\u0001H\u0001H\u0001H\u0003H\u05df\bH\u0001I\u0001I\u0001I\u0001I\u0003"
                    + "I\u05e5\bI\u0001I\u0003I\u05e8\bI\u0001I\u0001I\u0001I\u0003I\u05ed\b"
                    + "I\u0001I\u0003I\u05f0\bI\u0001I\u0003I\u05f3\bI\u0001I\u0003I\u05f6\b"
                    + "I\u0001I\u0003I\u05f9\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u05ff\bI\u0001"
                    + "J\u0001J\u0001J\u0001J\u0001J\u0001J\u0005J\u0607\bJ\nJ\fJ\u060a\tJ\u0001"
                    + "J\u0001J\u0001J\u0001J\u0001J\u0001J\u0005J\u0612\bJ\nJ\fJ\u0615\tJ\u0003"
                    + "J\u0617\bJ\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u061e\bK\u0001K\u0001"
                    + "K\u0001K\u0003K\u0623\bK\u0001K\u0005K\u0626\bK\nK\fK\u0629\tK\u0001K"
                    + "\u0003K\u062c\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0634"
                    + "\bK\u0001K\u0001K\u0003K\u0638\bK\u0001K\u0005K\u063b\bK\nK\fK\u063e\t"
                    + "K\u0001K\u0003K\u0641\bK\u0003K\u0643\bK\u0001L\u0004L\u0646\bL\u000b"
                    + "L\fL\u0647\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0650\bM\u0001"
                    + "M\u0001M\u0001M\u0003M\u0655\bM\u0001N\u0001N\u0001N\u0001N\u0003N\u065b"
                    + "\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003N\u0662\bN\u0001N\u0003N\u0665"
                    + "\bN\u0001O\u0001O\u0001O\u0001P\u0001P\u0003P\u066c\bP\u0001P\u0001P\u0001"
                    + "P\u0001P\u0001P\u0001P\u0003P\u0674\bP\u0001P\u0001P\u0001P\u0001P\u0005"
                    + "P\u067a\bP\nP\fP\u067d\tP\u0003P\u067f\bP\u0001P\u0003P\u0682\bP\u0001"
                    + "Q\u0001Q\u0001Q\u0003Q\u0687\bQ\u0001R\u0001R\u0001R\u0001R\u0001R\u0005"
                    + "R\u068e\bR\nR\fR\u0691\tR\u0001R\u0003R\u0694\bR\u0001R\u0001R\u0001R"
                    + "\u0001S\u0001S\u0001S\u0001S\u0001S\u0003S\u069e\bS\u0001T\u0001T\u0001"
                    + "T\u0001T\u0001T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001U\u0001V\u0001"
                    + "V\u0001V\u0001W\u0001W\u0001W\u0003W\u06b1\bW\u0001X\u0001X\u0001X\u0001"
                    + "X\u0001X\u0003X\u06b8\bX\u0003X\u06ba\bX\u0001X\u0001X\u0003X\u06be\b"
                    + "X\u0001X\u0001X\u0003X\u06c2\bX\u0001Y\u0001Y\u0001Y\u0001Y\u0005Y\u06c8"
                    + "\bY\nY\fY\u06cb\tY\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0005Z\u06d3"
                    + "\bZ\nZ\fZ\u06d6\tZ\u0001[\u0001[\u0001[\u0001[\u0005[\u06dc\b[\n[\f[\u06df"
                    + "\t[\u0001[\u0001[\u0001\\\u0001\\\u0001\\\u0003\\\u06e6\b\\\u0001\\\u0001"
                    + "\\\u0001\\\u0001\\\u0001]\u0001]\u0003]\u06ee\b]\u0001]\u0001]\u0003]"
                    + "\u06f2\b]\u0001^\u0001^\u0001^\u0001^\u0001_\u0001_\u0003_\u06fa\b_\u0001"
                    + "`\u0001`\u0001`\u0001`\u0001`\u0001`\u0001a\u0001a\u0001a\u0001a\u0001"
                    + "b\u0001b\u0001b\u0001b\u0005b\u070a\bb\nb\fb\u070d\tb\u0001b\u0001b\u0001"
                    + "b\u0001b\u0001c\u0001c\u0001c\u0001c\u0001c\u0001d\u0001d\u0003d\u071a"
                    + "\bd\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0721\be\u0001e\u0001e\u0003"
                    + "e\u0725\be\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u072c\bf\u0003f\u072e"
                    + "\bf\u0001g\u0001g\u0003g\u0732\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0005"
                    + "g\u0739\bg\ng\fg\u073c\tg\u0001h\u0001h\u0001h\u0001h\u0001h\u0003h\u0743"
                    + "\bh\u0001i\u0001i\u0001i\u0001i\u0001i\u0005i\u074a\bi\ni\fi\u074d\ti"
                    + "\u0001i\u0001i\u0001j\u0001j\u0001j\u0001k\u0001k\u0001k\u0001k\u0001"
                    + "k\u0001k\u0001l\u0001l\u0003l\u075c\bl\u0001l\u0001l\u0001l\u0001l\u0003"
                    + "l\u0762\bl\u0001l\u0001l\u0003l\u0766\bl\u0001m\u0001m\u0001m\u0001m\u0001"
                    + "m\u0001m\u0005m\u076e\bm\nm\fm\u0771\tm\u0001m\u0001m\u0001m\u0005m\u0776"
                    + "\bm\nm\fm\u0779\tm\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0003n\u0781"
                    + "\bn\u0001n\u0001n\u0003n\u0785\bn\u0001n\u0001n\u0005n\u0789\bn\nn\fn"
                    + "\u078c\tn\u0001o\u0001o\u0003o\u0790\bo\u0001p\u0001p\u0003p\u0794\bp"
                    + "\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q\u079e"
                    + "\bq\u0001r\u0001r\u0001s\u0001s\u0003s\u07a4\bs\u0001t\u0001t\u0003t\u07a8"
                    + "\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u07b2"
                    + "\bt\nt\ft\u07b5\tt\u0001t\u0001t\u0001u\u0001u\u0003u\u07bb\bu\u0001v"
                    + "\u0001v\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001"
                    + "w\u0001w\u0005w\u07c9\bw\nw\fw\u07cc\tw\u0001w\u0001w\u0005w\u07d0\bw"
                    + "\nw\fw\u07d3\tw\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0001x\u0003"
                    + "x\u07dc\bx\u0001y\u0003y\u07df\by\u0001y\u0001y\u0003y\u07e3\by\u0001"
                    + "z\u0001z\u0001{\u0001{\u0001{\u0003{\u07ea\b{\u0001{\u0001{\u0001{\u0001"
                    + "{\u0001{\u0003{\u07f1\b{\u0003{\u07f3\b{\u0001|\u0001|\u0003|\u07f7\b"
                    + "|\u0001}\u0001}\u0003}\u07fb\b}\u0001~\u0001~\u0001~\u0003~\u0800\b~\u0001"
                    + "\u007f\u0003\u007f\u0803\b\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0807"
                    + "\b\u007f\u0001\u007f\u0003\u007f\u080a\b\u007f\u0001\u007f\u0001\u007f"
                    + "\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0081\u0001\u0081\u0001\u0081"
                    + "\u0001\u0081\u0003\u0081\u0815\b\u0081\u0001\u0081\u0003\u0081\u0818\b"
                    + "\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0082\u0001\u0082\u0001"
                    + "\u0082\u0001\u0083\u0001\u0083\u0003\u0083\u0822\b\u0083\u0001\u0083\u0001"
                    + "\u0083\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0003"
                    + "\u0085\u082b\b\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085\u0830"
                    + "\b\u0085\n\u0085\f\u0085\u0833\t\u0085\u0001\u0085\u0003\u0085\u0836\b"
                    + "\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u083a\b\u0085\u0001\u0085\u0001"
                    + "\u0085\u0001\u0085\u0005\u0085\u083f\b\u0085\n\u0085\f\u0085\u0842\t\u0085"
                    + "\u0001\u0085\u0003\u0085\u0845\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086"
                    + "\u0001\u0086\u0001\u0086\u0001\u0086\u0003\u0086\u084d\b\u0086\u0001\u0087"
                    + "\u0001\u0087\u0001\u0087\u0001\u0087\u0003\u0087\u0853\b\u0087\u0001\u0087"
                    + "\u0001\u0087\u0003\u0087\u0857\b\u0087\u0001\u0087\u0001\u0087\u0001\u0087"
                    + "\u0001\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"
                    + "\u0003\u0088\u0862\b\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"
                    + "\u0001\u0088\u0003\u0088\u0869\b\u0088\u0001\u0088\u0001\u0088\u0001\u0088"
                    + "\u0001\u0088\u0001\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"
                    + "\u0001\u0089\u0001\u0089\u0003\u0089\u0876\b\u0089\u0001\u008a\u0001\u008a"
                    + "\u0001\u008a\u0001\u008a\u0005\u008a\u087c\b\u008a\n\u008a\f\u008a\u087f"
                    + "\t\u008a\u0001\u008b\u0003\u008b\u0882\b\u008b\u0001\u008b\u0001\u008b"
                    + "\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0005\u008c\u088a\b\u008c"
                    + "\n\u008c\f\u008c\u088d\t\u008c\u0001\u008d\u0001\u008d\u0003\u008d\u0891"
                    + "\b\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001"
                    + "\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008e\u089c\b\u008e\n"
                    + "\u008e\f\u008e\u089f\t\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001"
                    + "\u008f\u0001\u008f\u0001\u008f\u0005\u008f\u08a7\b\u008f\n\u008f\f\u008f"
                    + "\u08aa\t\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090"
                    + "\u0003\u0090\u08b1\b\u0090\u0001\u0091\u0001\u0091\u0003\u0091\u08b5\b"
                    + "\u0091\u0001\u0091\u0001\u0091\u0003\u0091\u08b9\b\u0091\u0001\u0091\u0001"
                    + "\u0091\u0003\u0091\u08bd\b\u0091\u0003\u0091\u08bf\b\u0091\u0001\u0092"
                    + "\u0001\u0092\u0001\u0092\u0003\u0092\u08c4\b\u0092\u0001\u0092\u0003\u0092"
                    + "\u08c7\b\u0092\u0001\u0092\u0003\u0092\u08ca\b\u0092\u0001\u0092\u0003"
                    + "\u0092\u08cd\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u08d1\b\u0092"
                    + "\u0001\u0092\u0003\u0092\u08d4\b\u0092\u0001\u0092\u0003\u0092\u08d7\b"
                    + "\u0092\u0001\u0093\u0003\u0093\u08da\b\u0093\u0001\u0093\u0003\u0093\u08dd"
                    + "\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0005\u0093\u08e2\b\u0093"
                    + "\n\u0093\f\u0093\u08e5\t\u0093\u0001\u0094\u0001\u0094\u0001\u0095\u0001"
                    + "\u0095\u0001\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u08ef"
                    + "\b\u0096\u0001\u0096\u0001\u0096\u0003\u0096\u08f3\b\u0096\u0001\u0096"
                    + "\u0003\u0096\u08f6\b\u0096\u0001\u0097\u0001\u0097\u0003\u0097\u08fa\b"
                    + "\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0003"
                    + "\u0097\u0901\b\u0097\u0001\u0098\u0001\u0098\u0003\u0098\u0905\b\u0098"
                    + "\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"
                    + "\u0005\u0099\u090d\b\u0099\n\u0099\f\u0099\u0910\t\u0099\u0001\u009a\u0001"
                    + "\u009a\u0001\u009a\u0005\u009a\u0915\b\u009a\n\u009a\f\u009a\u0918\t\u009a"
                    + "\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u091d\b\u009b\u0001\u009c"
                    + "\u0001\u009c\u0003\u009c\u0921\b\u009c\u0001\u009d\u0001\u009d\u0001\u009d"
                    + "\u0001\u009d\u0003\u009d\u0927\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e"
                    + "\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0930\b\u009e"
                    + "\u0001\u009f\u0003\u009f\u0933\b\u009f\u0001\u009f\u0001\u009f\u0001\u009f"
                    + "\u0003\u009f\u0938\b\u009f\u0001\u009f\u0003\u009f\u093b\b\u009f\u0001"
                    + "\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0005"
                    + "\u00a0\u0943\b\u00a0\n\u00a0\f\u00a0\u0946\t\u00a0\u0001\u00a0\u0001\u00a0"
                    + "\u0003\u00a0\u094a\b\u00a0\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"
                    + "\u0001\u00a1\u0005\u00a1\u0951\b\u00a1\n\u00a1\f\u00a1\u0954\t\u00a1\u0001"
                    + "\u00a1\u0001\u00a1\u0003\u00a1\u0958\b\u00a1\u0001\u00a2\u0001\u00a2\u0003"
                    + "\u00a2\u095c\b\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"
                    + "\u00a2\u0005\u00a2\u0963\b\u00a2\n\u00a2\f\u00a2\u0966\t\u00a2\u0001\u00a2"
                    + "\u0003\u00a2\u0969\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4"
                    + "\u0001\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"
                    + "\u0005\u00a5\u0975\b\u00a5\n\u00a5\f\u00a5\u0978\t\u00a5\u0001\u00a6\u0001"
                    + "\u00a6\u0001\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a8\u0001"
                    + "\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u0984\b\u00a8\u0001\u00a8\u0001"
                    + "\u00a8\u0001\u00a8\u0003\u00a8\u0989\b\u00a8\u0005\u00a8\u098b\b\u00a8"
                    + "\n\u00a8\f\u00a8\u098e\t\u00a8\u0001\u00a9\u0004\u00a9\u0991\b\u00a9\u000b"
                    + "\u00a9\f\u00a9\u0992\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"
                    + "\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u099e"
                    + "\b\u00aa\u0003\u00aa\u09a0\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab"
                    + "\u0001\u00ab\u0001\u00ab\u0003\u00ab\u09a7\b\u00ab\u0001\u00ab\u0003\u00ab"
                    + "\u09aa\b\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0005\u00ac\u09af\b"
                    + "\u00ac\n\u00ac\f\u00ac\u09b2\t\u00ac\u0001\u00ad\u0001\u00ad\u0003\u00ad"
                    + "\u09b6\b\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad"
                    + "\u09bc\b\u00ad\u0001\u00ad\u0003\u00ad\u09bf\b\u00ad\u0001\u00ad\u0003"
                    + "\u00ad\u09c2\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00af\u0001"
                    + "\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001"
                    + "\u00af\u0004\u00af\u09cf\b\u00af\u000b\u00af\f\u00af\u09d0\u0001\u00b0"
                    + "\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u09d8\b\u00b0"
                    + "\u0001\u00b0\u0003\u00b0\u09db\b\u00b0\u0001\u00b0\u0003\u00b0\u09de\b"
                    + "\u00b0\u0001\u00b1\u0001\u00b1\u0003\u00b1\u09e2\b\u00b1\u0001\u00b1\u0001"
                    + "\u00b1\u0001\u00b1\u0003\u00b1\u09e7\b\u00b1\u0001\u00b1\u0001\u00b1\u0001"
                    + "\u00b1\u0001\u00b1\u0003\u00b1\u09ed\b\u00b1\u0001\u00b2\u0001\u00b2\u0003"
                    + "\u00b2\u09f1\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001"
                    + "\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u09fa\b\u00b2\n\u00b2\f\u00b2"
                    + "\u09fd\t\u00b2\u0001\u00b2\u0003\u00b2\u0a00\b\u00b2\u0001\u00b2\u0003"
                    + "\u00b2\u0a03\b\u00b2\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0a07\b\u00b3"
                    + "\u0001\u00b3\u0001\u00b3\u0003\u00b3\u0a0b\b\u00b3\u0001\u00b3\u0001\u00b3"
                    + "\u0003\u00b3\u0a0f\b\u00b3\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0a13\b"
                    + "\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0a19"
                    + "\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0001\u00b6\u0003\u00b6\u0a1f"
                    + "\b\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003"
                    + "\u00b6\u0a26\b\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0005"
                    + "\u00b6\u0a2c\b\u00b6\n\u00b6\f\u00b6\u0a2f\t\u00b6\u0001\u00b7\u0001\u00b7"
                    + "\u0001\u00b7\u0003\u00b7\u0a34\b\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8"
                    + "\u0003\u00b8\u0a39\b\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8"
                    + "\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8"
                    + "\u0a44\b\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8"
                    + "\u0001\u00b8\u0001\u00b8\u0003\u00b8\u0a4d\b\u00b8\u0001\u00b9\u0001\u00b9"
                    + "\u0003\u00b9\u0a51\b\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9"
                    + "\u0001\u00b9\u0005\u00b9\u0a58\b\u00b9\n\u00b9\f\u00b9\u0a5b\t\u00b9\u0001"
                    + "\u00b9\u0003\u00b9\u0a5e\b\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00ba\u0001"
                    + "\u00ba\u0001\u00ba\u0001\u00ba\u0005\u00ba\u0a66\b\u00ba\n\u00ba\f\u00ba"
                    + "\u0a69\t\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0a6d\b\u00ba\u0001"
                    + "\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb\u0001"
                    + "\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bd\u0001"
                    + "\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"
                    + "\u00bd\u0001\u00bd\u0003\u00bd\u0a83\b\u00bd\u0001\u00bd\u0003\u00bd\u0a86"
                    + "\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"
                    + "\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"
                    + "\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003"
                    + "\u00be\u0a99\b\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"
                    + "\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001"
                    + "\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0005\u00be\u0aa9\b\u00be\n"
                    + "\u00be\f\u00be\u0aac\t\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001"
                    + "\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0003\u00bf\u0ab6"
                    + "\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c1\u0001"
                    + "\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0005"
                    + "\u00c2\u0ac3\b\u00c2\n\u00c2\f\u00c2\u0ac6\t\u00c2\u0001\u00c3\u0001\u00c3"
                    + "\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3"
                    + "\u0001\u00c3\u0003\u00c3\u0ad1\b\u00c3\u0001\u00c4\u0001\u00c4\u0003\u00c4"
                    + "\u0ad5\b\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5"
                    + "\u0001\u00c5\u0001\u00c5\u0004\u00c5\u0ade\b\u00c5\u000b\u00c5\f\u00c5"
                    + "\u0adf\u0001\u00c5\u0001\u00c5\u0003\u00c5\u0ae4\b\u00c5\u0001\u00c5\u0001"
                    + "\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001"
                    + "\u00c6\u0004\u00c6\u0aee\b\u00c6\u000b\u00c6\f\u00c6\u0aef\u0001\u00c6"
                    + "\u0001\u00c6\u0003\u00c6\u0af4\b\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c7"
                    + "\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0003\u00c8\u0aff\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8"
                    + "\u0b04\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b09\b"
                    + "\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b0d\b\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0003\u00c8\u0b11\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"
                    + "\u00c8\u0b16\b\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b1a\b\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b1e\b\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0003\u00c8\u0b35\b\u00c8\u0003\u00c8\u0b37\b\u00c8\u0001"
                    + "\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b49\b\u00c8\u0003"
                    + "\u00c8\u0b4b\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0001\u00c8\u0003\u00c8\u0b53\b\u00c8\u0001\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0003\u00c8\u0b58\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"
                    + "\u00c8\u0b5d\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b62"
                    + "\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"
                    + "\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"
                    + "\u00c8\u0b6f\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b74"
                    + "\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b79\b\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b7e\b\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0001\u00c8\u0003\u00c8\u0b83\b\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0001\u00c8\u0003\u00c8\u0b88\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"
                    + "\u0003\u00c8\u0b8d\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8"
                    + "\u0b92\b\u00c8\u0003\u00c8\u0b94\b\u00c8\u0001\u00c9\u0001\u00c9\u0001"
                    + "\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u0b9b\b\u00ca\u0001\u00ca\u0003"
                    + "\u00ca\u0b9e\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001"
                    + "\u00cb\u0001\u00cb\u0001\u00cb\u0005\u00cb\u0ba7\b\u00cb\n\u00cb\f\u00cb"
                    + "\u0baa\t\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0bb3\b\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0bbb\b\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0003\u00cc\u0bc4\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0003\u00cc\u0bca\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc\u0bd9\b\u00cc"
                    + "\n\u00cc\f\u00cc\u0bdc\t\u00cc\u0003\u00cc\u0bde\b\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc\u0bec"
                    + "\b\u00cc\n\u00cc\f\u00cc\u0bef\t\u00cc\u0003\u00cc\u0bf1\b\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005"
                    + "\u00cc\u0bff\b\u00cc\n\u00cc\f\u00cc\u0c02\t\u00cc\u0003\u00cc\u0c04\b"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0005\u00cc\u0c12\b\u00cc\n\u00cc\f\u00cc\u0c15\t\u00cc\u0003\u00cc"
                    + "\u0c17\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0005\u00cc\u0c25\b\u00cc\n\u00cc\f\u00cc\u0c28\t\u00cc\u0003"
                    + "\u00cc\u0c2a\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0005\u00cc\u0c38\b\u00cc\n\u00cc\f\u00cc\u0c3b\t\u00cc"
                    + "\u0003\u00cc\u0c3d\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0005\u00cc\u0c49\b\u00cc\n\u00cc\f\u00cc\u0c4c\t\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"
                    + "\u00cc\u0001\u00cc\u0001\u00cc\u0004\u00cc\u0c58\b\u00cc\u000b\u00cc\f"
                    + "\u00cc\u0c59\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0c5e\b\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0003\u00cc\u0c6e\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"
                    + "\u0001\u00cc\u0003\u00cc\u0c74\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd"
                    + "\u0003\u00cd\u0c79\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce"
                    + "\u0001\u00ce\u0005\u00ce\u0c80\b\u00ce\n\u00ce\f\u00ce\u0c83\t\u00ce\u0001"
                    + "\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003\u00cf\u0c89\b\u00cf\u0003"
                    + "\u00cf\u0c8b\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001\u00d0\u0003"
                    + "\u00d0\u0c91\b\u00d0\u0001\u00d1\u0001\u00d1\u0003\u00d1\u0c95\b\u00d1"
                    + "\u0001\u00d2\u0001\u00d2\u0005\u00d2\u0c99\b\u00d2\n\u00d2\f\u00d2\u0c9c"
                    + "\t\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001"
                    + "\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001"
                    + "\u00d3\u0003\u00d3\u0caa\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001"
                    + "\u00d4\u0001\u00d4\u0003\u00d4\u0cb1\b\u00d4\u0001\u00d5\u0005\u00d5\u0cb4"
                    + "\b\u00d5\n\u00d5\f\u00d5\u0cb7\t\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6"
                    + "\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0cc0\b\u00d7"
                    + "\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0005\u00d7\u0cc5\b\u00d7\n\u00d7"
                    + "\f\u00d7\u0cc8\t\u00d7\u0003\u00d7\u0cca\b\u00d7\u0001\u00d8\u0001\u00d8"
                    + "\u0001\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00da\u0001\u00da"
                    + "\u0003\u00da\u0cd4\b\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da"
                    + "\u0cd9\b\u00da\u0005\u00da\u0cdb\b\u00da\n\u00da\f\u00da\u0cde\t\u00da"
                    + "\u0001\u00db\u0001\u00db\u0003\u00db\u0ce2\b\u00db\u0001\u00dc\u0003\u00dc"
                    + "\u0ce5\b\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dd\u0003\u00dd\u0cea\b"
                    + "\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00de\u0001\u00de\u0001\u00df\u0001"
                    + "\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u0cb5\u0002\u016c\u017c"
                    + "\u00e1\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018"
                    + "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"
                    + "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"
                    + "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"
                    + "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"
                    + "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"
                    + "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"
                    + "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"
                    + "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"
                    + "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"
                    + "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"
                    + "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"
                    + "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"
                    + "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"
                    + "\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"
                    + "\u01ba\u01bc\u01be\u01c0\u00001\u0003\u0000\u0001\u0002\u015b\u015b\u016c"
                    + "\u016c\u0002\u0000bb\u0136\u0136\u0001\u0000\u00a8\u00a9\u0003\u0000\u000e"
                    + "\u000ess\u0099\u0099\u0002\u0000!!))\u0002\u000077kk\u0002\u0000\u00b8"
                    + "\u00b8\u0100\u0100\u0002\u0000\u000f\u000fSS\u0002\u0000PP\u012b\u012b"
                    + "\u0002\u0000ll\u00ab\u00ab\u0002\u0000PP\u00d8\u00d8\u0002\u0000LL\u0088"
                    + "\u0088\u0003\u0000\u008c\u008c\u00b2\u00b2\u00d4\u00d5\u0002\u0000\u00ad"
                    + "\u00ad\u00bf\u00bf\u0002\u0000\u00bc\u00bc\u013e\u013e\u0002\u0000\u00f3"
                    + "\u00f3\u0128\u0128\u0002\u0000\u00b1\u00b1\u0171\u0171\u0002\u0000\u001f"
                    + "\u001f&&\u0002\u0000$$>>\u0002\u0000BB\u00f9\u00f9\u0002\u0000\u000e\u000e"
                    + "\u0099\u0099\u0001\u0000\u00ea\u00eb\u0001\u0000\u00db\u00dc\u0004\u0000"
                    + "==NN\u0098\u0098\u00d1\u00d1\u0001\u0000fg\u0001\u0000_`\u0001\u0000\u0110"
                    + "\u0111\u0002\u0000\u00f4\u00f4\u0118\u0118\u0003\u0000PP\u0087\u0087\u00d0"
                    + "\u00d0\u0004\u0000\f\r\u00bd\u00bd\u00e0\u00e0\u013c\u013c\u0001\u0000"
                    + "\u00c7\u00c8\u0002\u0000\u0101\u0101\u0125\u0125\u0004\u0000\u0015\u0015"
                    + "ZZ\u00ae\u00ae\u011f\u011f\u0002\u0000\u00ae\u00ae\u0138\u0138\u0002\u0000"
                    + "\u001e\u001e\u0112\u0112\u0001\u0000\u00fe\u00ff\u0002\u0000\b\bXX\u0003"
                    + "\u0000xx\u00a2\u00a2\u00ed\u00ed\u0003\u0000>>\u00f5\u00f6\u012c\u012c"
                    + "\u0003\u0000ii\u0104\u0104\u012b\u012b\u0001\u0000ST\u0002\u0000\u000b"
                    + "\u000b\u00cb\u00cb\u0003\u0000\u00a3\u00a3\u00e4\u00e4\u00ee\u00ee\u0003"
                    + "\u0000FG\u00b5\u00b6\u00fa\u00fb\u0002\u000044\u015a\u015a\u0003\u0000"
                    + "vv\u009a\u009a\u00c2\u00c2\u0002\u0000\u0157\u0157\u016d\u016d\u0002\u0000"
                    + "mm\u0126\u0126\f\u0000\u0006\u0019\u001b]aac\u00c2\u00c4\u00d5\u00d7\u00f2"
                    + "\u00f4\u0107\u0109\u0120\u0122\u0127\u012a\u0135\u0138\u0148\u014f\u0156"
                    + "\u0e98\u0000\u01c2\u0001\u0000\u0000\u0000\u0002\u01cb\u0001\u0000\u0000"
                    + "\u0000\u0004\u01d0\u0001\u0000\u0000\u0000\u0006\u01e4\u0001\u0000\u0000"
                    + "\u0000\b\u01e6\u0001\u0000\u0000\u0000\n\u01f2\u0001\u0000\u0000\u0000"
                    + "\f\u0230\u0001\u0000\u0000\u0000\u000e\u0232\u0001\u0000\u0000\u0000\u0010"
                    + "\u0234\u0001\u0000\u0000\u0000\u0012\u023a\u0001\u0000\u0000\u0000\u0014"
                    + "\u0240\u0001\u0000\u0000\u0000\u0016\u0242\u0001\u0000\u0000\u0000\u0018"
                    + "\u0252\u0001\u0000\u0000\u0000\u001a\u0257\u0001\u0000\u0000\u0000\u001c"
                    + "\u0269\u0001\u0000\u0000\u0000\u001e\u026b\u0001\u0000\u0000\u0000 \u0290"
                    + "\u0001\u0000\u0000\u0000\"\u029a\u0001\u0000\u0000\u0000$\u02a5\u0001"
                    + "\u0000\u0000\u0000&\u02b9\u0001\u0000\u0000\u0000(\u02bc\u0001\u0000\u0000"
                    + "\u0000*\u02be\u0001\u0000\u0000\u0000,\u02c8\u0001\u0000\u0000\u0000."
                    + "\u02d1\u0001\u0000\u0000\u00000\u02dc\u0001\u0000\u0000\u00002\u02eb\u0001"
                    + "\u0000\u0000\u00004\u0310\u0001\u0000\u0000\u00006\u0312\u0001\u0000\u0000"
                    + "\u00008\u031a\u0001\u0000\u0000\u0000:\u0325\u0001\u0000\u0000\u0000<"
                    + "\u032e\u0001\u0000\u0000\u0000>\u0331\u0001\u0000\u0000\u0000@\u033e\u0001"
                    + "\u0000\u0000\u0000B\u0348\u0001\u0000\u0000\u0000D\u0355\u0001\u0000\u0000"
                    + "\u0000F\u0374\u0001\u0000\u0000\u0000H\u0379\u0001\u0000\u0000\u0000J"
                    + "\u0397\u0001\u0000\u0000\u0000L\u0399\u0001\u0000\u0000\u0000N\u03bb\u0001"
                    + "\u0000\u0000\u0000P\u03f6\u0001\u0000\u0000\u0000R\u03f8\u0001\u0000\u0000"
                    + "\u0000T\u0405\u0001\u0000\u0000\u0000V\u040c\u0001\u0000\u0000\u0000X"
                    + "\u040f\u0001\u0000\u0000\u0000Z\u0414\u0001\u0000\u0000\u0000\\\u0422"
                    + "\u0001\u0000\u0000\u0000^\u0436\u0001\u0000\u0000\u0000`\u0459\u0001\u0000"
                    + "\u0000\u0000b\u046d\u0001\u0000\u0000\u0000d\u0473\u0001\u0000\u0000\u0000"
                    + "f\u0475\u0001\u0000\u0000\u0000h\u0499\u0001\u0000\u0000\u0000j\u049f"
                    + "\u0001\u0000\u0000\u0000l\u04bc\u0001\u0000\u0000\u0000n\u04be\u0001\u0000"
                    + "\u0000\u0000p\u04c3\u0001\u0000\u0000\u0000r\u04c5\u0001\u0000\u0000\u0000"
                    + "t\u050a\u0001\u0000\u0000\u0000v\u0539\u0001\u0000\u0000\u0000x\u053b"
                    + "\u0001\u0000\u0000\u0000z\u0551\u0001\u0000\u0000\u0000|\u055f\u0001\u0000"
                    + "\u0000\u0000~\u0561\u0001\u0000\u0000\u0000\u0080\u0573\u0001\u0000\u0000"
                    + "\u0000\u0082\u057c\u0001\u0000\u0000\u0000\u0084\u058c\u0001\u0000\u0000"
                    + "\u0000\u0086\u0598\u0001\u0000\u0000\u0000\u0088\u05a4\u0001\u0000\u0000"
                    + "\u0000\u008a\u05bb\u0001\u0000\u0000\u0000\u008c\u05c4\u0001\u0000\u0000"
                    + "\u0000\u008e\u05d1\u0001\u0000\u0000\u0000\u0090\u05de\u0001\u0000\u0000"
                    + "\u0000\u0092\u05e7\u0001\u0000\u0000\u0000\u0094\u0616\u0001\u0000\u0000"
                    + "\u0000\u0096\u0642\u0001\u0000\u0000\u0000\u0098\u0645\u0001\u0000\u0000"
                    + "\u0000\u009a\u0654\u0001\u0000\u0000\u0000\u009c\u0664\u0001\u0000\u0000"
                    + "\u0000\u009e\u0666\u0001\u0000\u0000\u0000\u00a0\u0669\u0001\u0000\u0000"
                    + "\u0000\u00a2\u0686\u0001\u0000\u0000\u0000\u00a4\u0688\u0001\u0000\u0000"
                    + "\u0000\u00a6\u0698\u0001\u0000\u0000\u0000\u00a8\u069f\u0001\u0000\u0000"
                    + "\u0000\u00aa\u06a5\u0001\u0000\u0000\u0000\u00ac\u06aa\u0001\u0000\u0000"
                    + "\u0000\u00ae\u06ad\u0001\u0000\u0000\u0000\u00b0\u06b2\u0001\u0000\u0000"
                    + "\u0000\u00b2\u06c3\u0001\u0000\u0000\u0000\u00b4\u06ce\u0001\u0000\u0000"
                    + "\u0000\u00b6\u06d7\u0001\u0000\u0000\u0000\u00b8\u06e2\u0001\u0000\u0000"
                    + "\u0000\u00ba\u06eb\u0001\u0000\u0000\u0000\u00bc\u06f3\u0001\u0000\u0000"
                    + "\u0000\u00be\u06f9\u0001\u0000\u0000\u0000\u00c0\u06fb\u0001\u0000\u0000"
                    + "\u0000\u00c2\u0701\u0001\u0000\u0000\u0000\u00c4\u0705\u0001\u0000\u0000"
                    + "\u0000\u00c6\u0712\u0001\u0000\u0000\u0000\u00c8\u0717\u0001\u0000\u0000"
                    + "\u0000\u00ca\u071b\u0001\u0000\u0000\u0000\u00cc\u0726\u0001\u0000\u0000"
                    + "\u0000\u00ce\u072f\u0001\u0000\u0000\u0000\u00d0\u073d\u0001\u0000\u0000"
                    + "\u0000\u00d2\u0744\u0001\u0000\u0000\u0000\u00d4\u0750\u0001\u0000\u0000"
                    + "\u0000\u00d6\u0753\u0001\u0000\u0000\u0000\u00d8\u0761\u0001\u0000\u0000"
                    + "\u0000\u00da\u0767\u0001\u0000\u0000\u0000\u00dc\u077a\u0001\u0000\u0000"
                    + "\u0000\u00de\u078f\u0001\u0000\u0000\u0000\u00e0\u0793\u0001\u0000\u0000"
                    + "\u0000\u00e2\u079d\u0001\u0000\u0000\u0000\u00e4\u079f\u0001\u0000\u0000"
                    + "\u0000\u00e6\u07a1\u0001\u0000\u0000\u0000\u00e8\u07a5\u0001\u0000\u0000"
                    + "\u0000\u00ea\u07b8\u0001\u0000\u0000\u0000\u00ec\u07bc\u0001\u0000\u0000"
                    + "\u0000\u00ee\u07be\u0001\u0000\u0000\u0000\u00f0\u07db\u0001\u0000\u0000"
                    + "\u0000\u00f2\u07de\u0001\u0000\u0000\u0000\u00f4\u07e4\u0001\u0000\u0000"
                    + "\u0000\u00f6\u07e6\u0001\u0000\u0000\u0000\u00f8\u07f4\u0001\u0000\u0000"
                    + "\u0000\u00fa\u07f8\u0001\u0000\u0000\u0000\u00fc\u07ff\u0001\u0000\u0000"
                    + "\u0000\u00fe\u0806\u0001\u0000\u0000\u0000\u0100\u080d\u0001\u0000\u0000"
                    + "\u0000\u0102\u0810\u0001\u0000\u0000\u0000\u0104\u081c\u0001\u0000\u0000"
                    + "\u0000\u0106\u081f\u0001\u0000\u0000\u0000\u0108\u0825\u0001\u0000\u0000"
                    + "\u0000\u010a\u0828\u0001\u0000\u0000\u0000\u010c\u0846\u0001\u0000\u0000"
                    + "\u0000\u010e\u084e\u0001\u0000\u0000\u0000\u0110\u085d\u0001\u0000\u0000"
                    + "\u0000\u0112\u0875\u0001\u0000\u0000\u0000\u0114\u0877\u0001\u0000\u0000"
                    + "\u0000\u0116\u0881\u0001\u0000\u0000\u0000\u0118\u0885\u0001\u0000\u0000"
                    + "\u0000\u011a\u088e\u0001\u0000\u0000\u0000\u011c\u0897\u0001\u0000\u0000"
                    + "\u0000\u011e\u08a2\u0001\u0000\u0000\u0000\u0120\u08b0\u0001\u0000\u0000"
                    + "\u0000\u0122\u08be\u0001\u0000\u0000\u0000\u0124\u08c0\u0001\u0000\u0000"
                    + "\u0000\u0126\u08d9\u0001\u0000\u0000\u0000\u0128\u08e6\u0001\u0000\u0000"
                    + "\u0000\u012a\u08e8\u0001\u0000\u0000\u0000\u012c\u08f5\u0001\u0000\u0000"
                    + "\u0000\u012e\u0900\u0001\u0000\u0000\u0000\u0130\u0904\u0001\u0000\u0000"
                    + "\u0000\u0132\u0908\u0001\u0000\u0000\u0000\u0134\u0911\u0001\u0000\u0000"
                    + "\u0000\u0136\u091c\u0001\u0000\u0000\u0000\u0138\u091e\u0001\u0000\u0000"
                    + "\u0000\u013a\u0922\u0001\u0000\u0000\u0000\u013c\u092f\u0001\u0000\u0000"
                    + "\u0000\u013e\u093a\u0001\u0000\u0000\u0000\u0140\u093c\u0001\u0000\u0000"
                    + "\u0000\u0142\u0957\u0001\u0000\u0000\u0000\u0144\u0959\u0001\u0000\u0000"
                    + "\u0000\u0146\u096a\u0001\u0000\u0000\u0000\u0148\u096c\u0001\u0000\u0000"
                    + "\u0000\u014a\u096f\u0001\u0000\u0000\u0000\u014c\u0979\u0001\u0000\u0000"
                    + "\u0000\u014e\u097c\u0001\u0000\u0000\u0000\u0150\u097f\u0001\u0000\u0000"
                    + "\u0000\u0152\u0990\u0001\u0000\u0000\u0000\u0154\u099f\u0001\u0000\u0000"
                    + "\u0000\u0156\u09a1\u0001\u0000\u0000\u0000\u0158\u09ab\u0001\u0000\u0000"
                    + "\u0000\u015a\u09bb\u0001\u0000\u0000\u0000\u015c\u09c3\u0001\u0000\u0000"
                    + "\u0000\u015e\u09c6\u0001\u0000\u0000\u0000\u0160\u09d7\u0001\u0000\u0000"
                    + "\u0000\u0162\u09ec\u0001\u0000\u0000\u0000\u0164\u0a02\u0001\u0000\u0000"
                    + "\u0000\u0166\u0a04\u0001\u0000\u0000\u0000\u0168\u0a10\u0001\u0000\u0000"
                    + "\u0000\u016a\u0a16\u0001\u0000\u0000\u0000\u016c\u0a25\u0001\u0000\u0000"
                    + "\u0000\u016e\u0a33\u0001\u0000\u0000\u0000\u0170\u0a4c\u0001\u0000\u0000"
                    + "\u0000\u0172\u0a4e\u0001\u0000\u0000\u0000\u0174\u0a61\u0001\u0000\u0000"
                    + "\u0000\u0176\u0a73\u0001\u0000\u0000\u0000\u0178\u0a77\u0001\u0000\u0000"
                    + "\u0000\u017a\u0a85\u0001\u0000\u0000\u0000\u017c\u0a98\u0001\u0000\u0000"
                    + "\u0000\u017e\u0ab5\u0001\u0000\u0000\u0000\u0180\u0ab7\u0001\u0000\u0000"
                    + "\u0000\u0182\u0abb\u0001\u0000\u0000\u0000\u0184\u0abd\u0001\u0000\u0000"
                    + "\u0000\u0186\u0ad0\u0001\u0000\u0000\u0000\u0188\u0ad4\u0001\u0000\u0000"
                    + "\u0000\u018a\u0ad6\u0001\u0000\u0000\u0000\u018c\u0ae7\u0001\u0000\u0000"
                    + "\u0000\u018e\u0af7\u0001\u0000\u0000\u0000\u0190\u0b93\u0001\u0000\u0000"
                    + "\u0000\u0192\u0b95\u0001\u0000\u0000\u0000\u0194\u0b97\u0001\u0000\u0000"
                    + "\u0000\u0196\u0ba1\u0001\u0000\u0000\u0000\u0198\u0c73\u0001\u0000\u0000"
                    + "\u0000\u019a\u0c75\u0001\u0000\u0000\u0000\u019c\u0c7c\u0001\u0000\u0000"
                    + "\u0000\u019e\u0c84\u0001\u0000\u0000\u0000\u01a0\u0c90\u0001\u0000\u0000"
                    + "\u0000\u01a2\u0c94\u0001\u0000\u0000\u0000\u01a4\u0c96\u0001\u0000\u0000"
                    + "\u0000\u01a6\u0ca9\u0001\u0000\u0000\u0000\u01a8\u0cb0\u0001\u0000\u0000"
                    + "\u0000\u01aa\u0cb5\u0001\u0000\u0000\u0000\u01ac\u0cb8\u0001\u0000\u0000"
                    + "\u0000\u01ae\u0cc9\u0001\u0000\u0000\u0000\u01b0\u0ccb\u0001\u0000\u0000"
                    + "\u0000\u01b2\u0cce\u0001\u0000\u0000\u0000\u01b4\u0cd3\u0001\u0000\u0000"
                    + "\u0000\u01b6\u0ce1\u0001\u0000\u0000\u0000\u01b8\u0ce4\u0001\u0000\u0000"
                    + "\u0000\u01ba\u0ce9\u0001\u0000\u0000\u0000\u01bc\u0ced\u0001\u0000\u0000"
                    + "\u0000\u01be\u0cef\u0001\u0000\u0000\u0000\u01c0\u0cf1\u0001\u0000\u0000"
                    + "\u0000\u01c2\u01c3\u0003\u0002\u0001\u0000\u01c3\u0001\u0001\u0000\u0000"
                    + "\u0000\u01c4\u01c7\u0003\u0004\u0002\u0000\u01c5\u01c7\u0003\f\u0006\u0000"
                    + "\u01c6\u01c4\u0001\u0000\u0000\u0000\u01c6\u01c5\u0001\u0000\u0000\u0000"
                    + "\u01c7\u01c9\u0001\u0000\u0000\u0000\u01c8\u01ca\u0005|\u0000\u0000\u01c9"
                    + "\u01c8\u0001\u0000\u0000\u0000\u01c9\u01ca\u0001\u0000\u0000\u0000\u01ca"
                    + "\u01cc\u0001\u0000\u0000\u0000\u01cb\u01c6\u0001\u0000\u0000\u0000\u01cc"
                    + "\u01cd\u0001\u0000\u0000\u0000\u01cd\u01cb\u0001\u0000\u0000\u0000\u01cd"
                    + "\u01ce\u0001\u0000\u0000\u0000\u01ce\u0003\u0001\u0000\u0000\u0000\u01cf"
                    + "\u01d1\u0003.\u0017\u0000\u01d0\u01cf\u0001\u0000\u0000\u0000\u01d0\u01d1"
                    + "\u0001\u0000\u0000\u0000\u01d1\u01d2\u0001\u0000\u0000\u0000\u01d2\u01d3"
                    + "\u0005\u0015\u0000\u0000\u01d3\u01d5\u0003\u0002\u0001\u0000\u01d4\u01d6"
                    + "\u0003\u0010\b\u0000\u01d5\u01d4\u0001\u0000\u0000\u0000\u01d5\u01d6\u0001"
                    + "\u0000\u0000\u0000\u01d6\u01d7\u0001\u0000\u0000\u0000\u01d7\u01d8\u0003"
                    + "\b\u0004\u0000\u01d8\u0005\u0001\u0000\u0000\u0000\u01d9\u01da\u0005\u0015"
                    + "\u0000\u0000\u01da\u01dc\u0003\u0002\u0001\u0000\u01db\u01dd\u0003\u0010"
                    + "\b\u0000\u01dc\u01db\u0001\u0000\u0000\u0000\u01dc\u01dd\u0001\u0000\u0000"
                    + "\u0000\u01dd\u01de\u0001\u0000\u0000\u0000\u01de\u01df\u0003\b\u0004\u0000"
                    + "\u01df\u01e5\u0001\u0000\u0000\u0000\u01e0\u01e2\u0003\f\u0006\u0000\u01e1"
                    + "\u01e3\u0005\u016c\u0000\u0000\u01e2\u01e1\u0001\u0000\u0000\u0000\u01e2"
                    + "\u01e3\u0001\u0000\u0000\u0000\u01e3\u01e5\u0001\u0000\u0000\u0000\u01e4"
                    + "\u01d9\u0001\u0000\u0000\u0000\u01e4\u01e0\u0001\u0000\u0000\u0000\u01e5"
                    + "\u0007\u0001\u0000\u0000\u0000\u01e6\u01e7\u0004\u0004\u0000\u0000\u01e7"
                    + "\u01e8\u0005b\u0000\u0000\u01e8\t\u0001\u0000\u0000\u0000\u01e9\u01f3"
                    + "\u0003\u0004\u0002\u0000\u01ea\u01ec\u0003\f\u0006\u0000\u01eb\u01ea\u0001"
                    + "\u0000\u0000\u0000\u01ec\u01ed\u0001\u0000\u0000\u0000\u01ed\u01eb\u0001"
                    + "\u0000\u0000\u0000\u01ed\u01ee\u0001\u0000\u0000\u0000\u01ee\u01f0\u0001"
                    + "\u0000\u0000\u0000\u01ef\u01f1\u0005|\u0000\u0000\u01f0\u01ef\u0001\u0000"
                    + "\u0000\u0000\u01f0\u01f1\u0001\u0000\u0000\u0000\u01f1\u01f3\u0001\u0000"
                    + "\u0000\u0000\u01f2\u01e9\u0001\u0000\u0000\u0000\u01f2\u01eb\u0001\u0000"
                    + "\u0000\u0000\u01f3\u000b\u0001\u0000\u0000\u0000\u01f4\u0231\u0003\u0018"
                    + "\f\u0000\u01f5\u0231\u0003\"\u0011\u0000\u01f6\u0231\u0003n7\u0000\u01f7"
                    + "\u0231\u0003$\u0012\u0000\u01f8\u0231\u0003&\u0013\u0000\u01f9\u0231\u0003"
                    + "(\u0014\u0000\u01fa\u0231\u0003*\u0015\u0000\u01fb\u0231\u0003\u00d0h"
                    + "\u0000\u01fc\u0231\u0003\u00d4j\u0000\u01fd\u0231\u0003\u00d6k\u0000\u01fe"
                    + "\u0231\u0003\u00dam\u0000\u01ff\u0231\u0003\u00dcn\u0000\u0200\u0231\u0003"
                    + "\u00e6s\u0000\u0201\u0231\u0003~?\u0000\u0202\u0231\u0003\u0082A\u0000"
                    + "\u0203\u0231\u0003\u00e8t\u0000\u0204\u0231\u0003D\"\u0000\u0205\u0231"
                    + "\u0003\u0086C\u0000\u0206\u0231\u0003\u008cF\u0000\u0207\u0231\u0003\u0092"
                    + "I\u0000\u0208\u0231\u0003B!\u0000\u0209\u0231\u0003,\u0016\u0000\u020a"
                    + "\u0231\u0003\u0166\u00b3\u0000\u020b\u0231\u0003\u016a\u00b5\u0000\u020c"
                    + "\u0231\u0003\u009cN\u0000\u020d\u0231\u0003\u009eO\u0000\u020e\u0231\u0003"
                    + "\u00a0P\u0000\u020f\u0231\u0003\u00ba]\u0000\u0210\u0231\u0003\u00ceg"
                    + "\u0000\u0211\u0231\u0003\u010e\u0087\u0000\u0212\u0231\u0003\u0110\u0088"
                    + "\u0000\u0213\u0231\u0003\u00a2Q\u0000\u0214\u0231\u0003\u00aeW\u0000\u0215"
                    + "\u0231\u0003\u00b0X\u0000\u0216\u0231\u0003\u00b8\\\u0000\u0217\u0231"
                    + "\u0003\u00bc^\u0000\u0218\u0231\u0003\u00c4b\u0000\u0219\u0231\u0003\u00c8"
                    + "d\u0000\u021a\u0231\u0003\u00cae\u0000\u021b\u0231\u0003\u015e\u00af\u0000"
                    + "\u021c\u0231\u0003\u00ccf\u0000\u021d\u0231\u0003\u00f0x\u0000\u021e\u0231"
                    + "\u0003\u00f2y\u0000\u021f\u0231\u0003\u00f4z\u0000\u0220\u0231\u0003\u00f6"
                    + "{\u0000\u0221\u0231\u0003\u00f8|\u0000\u0222\u0231\u0003\u00fa}\u0000"
                    + "\u0223\u0231\u0003\u0116\u008b\u0000\u0224\u0231\u0003\u0104\u0082\u0000"
                    + "\u0225\u0231\u0003\u0156\u00ab\u0000\u0226\u0231\u0003\u0108\u0084\u0000"
                    + "\u0227\u0231\u0003\u0106\u0083\u0000\u0228\u0231\u0003\u010a\u0085\u0000"
                    + "\u0229\u0231\u0003\u010c\u0086\u0000\u022a\u0231\u0003\u0112\u0089\u0000"
                    + "\u022b\u0231\u0003\u01a4\u00d2\u0000\u022c\u0231\u0003\u01a8\u00d4\u0000"
                    + "\u022d\u0231\u0003\u0014\n\u0000\u022e\u0231\u0003\u0016\u000b\u0000\u022f"
                    + "\u0231\u0003\u000e\u0007\u0000\u0230\u01f4\u0001\u0000\u0000\u0000\u0230"
                    + "\u01f5\u0001\u0000\u0000\u0000\u0230\u01f6\u0001\u0000\u0000\u0000\u0230"
                    + "\u01f7\u0001\u0000\u0000\u0000\u0230\u01f8\u0001\u0000\u0000\u0000\u0230"
                    + "\u01f9\u0001\u0000\u0000\u0000\u0230\u01fa\u0001\u0000\u0000\u0000\u0230"
                    + "\u01fb\u0001\u0000\u0000\u0000\u0230\u01fc\u0001\u0000\u0000\u0000\u0230"
                    + "\u01fd\u0001\u0000\u0000\u0000\u0230\u01fe\u0001\u0000\u0000\u0000\u0230"
                    + "\u01ff\u0001\u0000\u0000\u0000\u0230\u0200\u0001\u0000\u0000\u0000\u0230"
                    + "\u0201\u0001\u0000\u0000\u0000\u0230\u0202\u0001\u0000\u0000\u0000\u0230"
                    + "\u0203\u0001\u0000\u0000\u0000\u0230\u0204\u0001\u0000\u0000\u0000\u0230"
                    + "\u0205\u0001\u0000\u0000\u0000\u0230\u0206\u0001\u0000\u0000\u0000\u0230"
                    + "\u0207\u0001\u0000\u0000\u0000\u0230\u0208\u0001\u0000\u0000\u0000\u0230"
                    + "\u0209\u0001\u0000\u0000\u0000\u0230\u020a\u0001\u0000\u0000\u0000\u0230"
                    + "\u020b\u0001\u0000\u0000\u0000\u0230\u020c\u0001\u0000\u0000\u0000\u0230"
                    + "\u020d\u0001\u0000\u0000\u0000\u0230\u020e\u0001\u0000\u0000\u0000\u0230"
                    + "\u020f\u0001\u0000\u0000\u0000\u0230\u0210\u0001\u0000\u0000\u0000\u0230"
                    + "\u0211\u0001\u0000\u0000\u0000\u0230\u0212\u0001\u0000\u0000\u0000\u0230"
                    + "\u0213\u0001\u0000\u0000\u0000\u0230\u0214\u0001\u0000\u0000\u0000\u0230"
                    + "\u0215\u0001\u0000\u0000\u0000\u0230\u0216\u0001\u0000\u0000\u0000\u0230"
                    + "\u0217\u0001\u0000\u0000\u0000\u0230\u0218\u0001\u0000\u0000\u0000\u0230"
                    + "\u0219\u0001\u0000\u0000\u0000\u0230\u021a\u0001\u0000\u0000\u0000\u0230"
                    + "\u021b\u0001\u0000\u0000\u0000\u0230\u021c\u0001\u0000\u0000\u0000\u0230"
                    + "\u021d\u0001\u0000\u0000\u0000\u0230\u021e\u0001\u0000\u0000\u0000\u0230"
                    + "\u021f\u0001\u0000\u0000\u0000\u0230\u0220\u0001\u0000\u0000\u0000\u0230"
                    + "\u0221\u0001\u0000\u0000\u0000\u0230\u0222\u0001\u0000\u0000\u0000\u0230"
                    + "\u0223\u0001\u0000\u0000\u0000\u0230\u0224\u0001\u0000\u0000\u0000\u0230"
                    + "\u0225\u0001\u0000\u0000\u0000\u0230\u0226\u0001\u0000\u0000\u0000\u0230"
                    + "\u0227\u0001\u0000\u0000\u0000\u0230\u0228\u0001\u0000\u0000\u0000\u0230"
                    + "\u0229\u0001\u0000\u0000\u0000\u0230\u022a\u0001\u0000\u0000\u0000\u0230"
                    + "\u022b\u0001\u0000\u0000\u0000\u0230\u022c\u0001\u0000\u0000\u0000\u0230"
                    + "\u022d\u0001\u0000\u0000\u0000\u0230\u022e\u0001\u0000\u0000\u0000\u0230"
                    + "\u022f\u0001\u0000\u0000\u0000\u0231\r\u0001\u0000\u0000\u0000\u0232\u0233"
                    + "\u0007\u0000\u0000\u0000\u0233\u000f\u0001\u0000\u0000\u0000\u0234\u0236"
                    + "\u0005h\u0000\u0000\u0235\u0237\u0003\u0012\t\u0000\u0236\u0235\u0001"
                    + "\u0000\u0000\u0000\u0237\u0238\u0001\u0000\u0000\u0000\u0238\u0236\u0001"
                    + "\u0000\u0000\u0000\u0238\u0239\u0001\u0000\u0000\u0000\u0239\u0011\u0001"
                    + "\u0000\u0000\u0000\u023a\u023b\u0005\u0136\u0000\u0000\u023b\u023c\u0005"
                    + "\u016e\u0000\u0000\u023c\u023d\u0005\u011f\u0000\u0000\u023d\u023e\u0003"
                    + "\u0002\u0001\u0000\u023e\u023f\b\u0001\u0000\u0000\u023f\u0013\u0001\u0000"
                    + "\u0000\u0000\u0240\u0241\u0005\u00c3\u0000\u0000\u0241\u0015\u0001\u0000"
                    + "\u0000\u0000\u0242\u0243\u0004\u000b\u0001\u0000\u0243\u0244\u0003\u017c"
                    + "\u00be\u0000\u0244\u0017\u0001\u0000\u0000\u0000\u0245\u0246\u0005\u0100"
                    + "\u0000\u0000\u0246\u0253\u0003\u00fc~\u0000\u0247\u0249\u0005\u0100\u0000"
                    + "\u0000\u0248\u0247\u0001\u0000\u0000\u0000\u0248\u0249\u0001\u0000\u0000"
                    + "\u0000\u0249\u024a\u0001\u0000\u0000\u0000\u024a\u024f\u0003\u001a\r\u0000"
                    + "\u024b\u024c\u0005\u0159\u0000\u0000\u024c\u024e\u0003\u001a\r\u0000\u024d"
                    + "\u024b\u0001\u0000\u0000\u0000\u024e\u0251\u0001\u0000\u0000\u0000\u024f"
                    + "\u024d\u0001\u0000\u0000\u0000\u024f\u0250\u0001\u0000\u0000\u0000\u0250"
                    + "\u0253\u0001\u0000\u0000\u0000\u0251\u024f\u0001\u0000\u0000\u0000\u0252"
                    + "\u0245\u0001\u0000\u0000\u0000\u0252\u0248\u0001\u0000\u0000\u0000\u0253"
                    + "\u0019\u0001\u0000\u0000\u0000\u0254\u0258\u0003\u001c\u000e\u0000\u0255"
                    + "\u0258\u0003\u001e\u000f\u0000\u0256\u0258\u0003 \u0010\u0000\u0257\u0254"
                    + "\u0001\u0000\u0000\u0000\u0257\u0255\u0001\u0000\u0000\u0000\u0257\u0256"
                    + "\u0001\u0000\u0000\u0000\u0258\u001b\u0001\u0000\u0000\u0000\u0259\u025b"
                    + "\u0003\u01b4\u00da\u0000\u025a\u025c\u0005\u0158\u0000\u0000\u025b\u025a"
                    + "\u0001\u0000\u0000\u0000\u025b\u025c\u0001\u0000\u0000\u0000\u025c\u025d"
                    + "\u0001\u0000\u0000\u0000\u025d\u025e\u0005\u015d\u0000\u0000\u025e\u025f"
                    + "\u0003\u017c\u00be\u0000\u025f\u026a\u0001\u0000\u0000\u0000\u0260\u0261"
                    + "\u0005\u0167\u0000\u0000\u0261\u0262\u0003\u01b4\u00da\u0000\u0262\u0264"
                    + "\u0005\u016a\u0000\u0000\u0263\u0265\u0005\u0158\u0000\u0000\u0264\u0263"
                    + "\u0001\u0000\u0000\u0000\u0264\u0265\u0001\u0000\u0000\u0000\u0265\u0266"
                    + "\u0001\u0000\u0000\u0000\u0266\u0267\u0005\u015d\u0000\u0000\u0267\u0268"
                    + "\u0003\u017c\u00be\u0000\u0268\u026a\u0001\u0000\u0000\u0000\u0269\u0259"
                    + "\u0001\u0000\u0000\u0000\u0269\u0260\u0001\u0000\u0000\u0000\u026a\u001d"
                    + "\u0001\u0000\u0000\u0000\u026b\u026c\u0005\u0167\u0000\u0000\u026c\u0271"
                    + "\u0003\u01b4\u00da\u0000\u026d\u026e\u0005\u0159\u0000\u0000\u026e\u0270"
                    + "\u0003\u01b4\u00da\u0000\u026f\u026d\u0001\u0000\u0000\u0000\u0270\u0273"
                    + "\u0001\u0000\u0000\u0000\u0271\u026f\u0001\u0000\u0000\u0000\u0271\u0272"
                    + "\u0001\u0000\u0000\u0000\u0272\u0274\u0001\u0000\u0000\u0000\u0273\u0271"
                    + "\u0001\u0000\u0000\u0000\u0274\u0276\u0005\u016a\u0000\u0000\u0275\u0277"
                    + "\u0005\u0158\u0000\u0000\u0276\u0275\u0001\u0000\u0000\u0000\u0276\u0277"
                    + "\u0001\u0000\u0000\u0000\u0277\u0278\u0001\u0000\u0000\u0000\u0278\u0279"
                    + "\u0005\u015d\u0000\u0000\u0279\u027a\u0005\u0167\u0000\u0000\u027a\u027f"
                    + "\u0003\u017c\u00be\u0000\u027b\u027c\u0005\u0159\u0000\u0000\u027c\u027e"
                    + "\u0003\u017c\u00be\u0000\u027d\u027b\u0001\u0000\u0000\u0000\u027e\u0281"
                    + "\u0001\u0000\u0000\u0000\u027f\u027d\u0001\u0000\u0000\u0000\u027f\u0280"
                    + "\u0001\u0000\u0000\u0000\u0280\u0282\u0001\u0000\u0000\u0000\u0281\u027f"
                    + "\u0001\u0000\u0000\u0000\u0282\u0283\u0005\u016a\u0000\u0000\u0283\u001f"
                    + "\u0001\u0000\u0000\u0000\u0284\u0291\u0003\u01b4\u00da\u0000\u0285\u0286"
                    + "\u0005\u0167\u0000\u0000\u0286\u028b\u0003\u01b4\u00da\u0000\u0287\u0288"
                    + "\u0005\u0159\u0000\u0000\u0288\u028a\u0003\u01b4\u00da\u0000\u0289\u0287"
                    + "\u0001\u0000\u0000\u0000\u028a\u028d\u0001\u0000\u0000\u0000\u028b\u0289"
                    + "\u0001\u0000\u0000\u0000\u028b\u028c\u0001\u0000\u0000\u0000\u028c\u028e"
                    + "\u0001\u0000\u0000\u0000\u028d\u028b\u0001\u0000\u0000\u0000\u028e\u028f"
                    + "\u0005\u016a\u0000\u0000\u028f\u0291\u0001\u0000\u0000\u0000\u0290\u0284"
                    + "\u0001\u0000\u0000\u0000\u0290\u0285\u0001\u0000\u0000\u0000\u0291\u0293"
                    + "\u0001\u0000\u0000\u0000\u0292\u0294\u0005\u0158\u0000\u0000\u0293\u0292"
                    + "\u0001\u0000\u0000\u0000\u0293\u0294\u0001\u0000\u0000\u0000\u0294\u0295"
                    + "\u0001\u0000\u0000\u0000\u0295\u0296\u0005\u015d\u0000\u0000\u0296\u0297"
                    + "\u0005\u0167\u0000\u0000\u0297\u0298\u0003\u0116\u008b\u0000\u0298\u0299"
                    + "\u0005\u016a\u0000\u0000\u0299!\u0001\u0000\u0000\u0000\u029a\u029b\u0005"
                    + "\t\u0000\u0000\u029b\u029c\u0003\u01b4\u00da\u0000\u029c\u029d\u0005A"
                    + "\u0000\u0000\u029d\u02a1\u0005s\u0000\u0000\u029e\u029f\u0005\u00e8\u0000"
                    + "\u0000\u029f\u02a2\u0005\u0100\u0000\u0000\u02a0\u02a2\u0005\u00dc\u0000"
                    + "\u0000\u02a1\u029e\u0001\u0000\u0000\u0000\u02a1\u02a0\u0001\u0000\u0000"
                    + "\u0000\u02a2\u02a3\u0001\u0000\u0000\u0000\u02a3\u02a4\u0003\u01b4\u00da"
                    + "\u0000\u02a4#\u0001\u0000\u0000\u0000\u02a5\u02a8\u0005\u0010\u0000\u0000"
                    + "\u02a6\u02a7\u0005\u00e8\u0000\u0000\u02a7\u02a9\u0005\u0100\u0000\u0000"
                    + "\u02a8\u02a6\u0001\u0000\u0000\u0000\u02a8\u02a9\u0001\u0000\u0000\u0000"
                    + "\u02a9\u02aa\u0001\u0000\u0000\u0000\u02aa\u02ab\u0007\u0002\u0000\u0000"
                    + "\u02ab\u02ac\u0005\u0167\u0000\u0000\u02ac\u02b1\u0003\u01b4\u00da\u0000"
                    + "\u02ad\u02ae\u0005\u0159\u0000\u0000\u02ae\u02b0\u0003\u01b4\u00da\u0000"
                    + "\u02af\u02ad\u0001\u0000\u0000\u0000\u02b0\u02b3\u0001\u0000\u0000\u0000"
                    + "\u02b1\u02af\u0001\u0000\u0000\u0000\u02b1\u02b2\u0001\u0000\u0000\u0000"
                    + "\u02b2\u02b4\u0001\u0000\u0000\u0000\u02b3\u02b1\u0001\u0000\u0000\u0000"
                    + "\u02b4\u02b5\u0005\u016a\u0000\u0000\u02b5\u02b6\u0005\u0139\u0000\u0000"
                    + "\u02b6\u02b7\u0005\u00dc\u0000\u0000\u02b7\u02b8\u0003\u01b4\u00da\u0000"
                    + "\u02b8%\u0001\u0000\u0000\u0000\u02b9\u02ba\u0005\u0015\u0000\u0000\u02ba"
                    + "\u02bb\u0005\u0125\u0000\u0000\u02bb\'\u0001\u0000\u0000\u0000\u02bc\u02bd"
                    + "\u0005\u001d\u0000\u0000\u02bd)\u0001\u0000\u0000\u0000\u02be\u02bf\u0005"
                    + " \u0000\u0000\u02bf\u02c6\u0003\u01b4\u00da\u0000\u02c0\u02c2\u0005\u0167"
                    + "\u0000\u0000\u02c1\u02c3\u0003\u019c\u00ce\u0000\u02c2\u02c1\u0001\u0000"
                    + "\u0000\u0000\u02c2\u02c3\u0001\u0000\u0000\u0000\u02c3\u02c4\u0001\u0000"
                    + "\u0000\u0000\u02c4\u02c7\u0005\u016a\u0000\u0000\u02c5\u02c7\u0003\u019c"
                    + "\u00ce\u0000\u02c6\u02c0\u0001\u0000\u0000\u0000\u02c6\u02c5\u0001\u0000"
                    + "\u0000\u0000\u02c6\u02c7\u0001\u0000\u0000\u0000\u02c7+\u0001\u0000\u0000"
                    + "\u0000\u02c8\u02c9\u0005J\u0000\u0000\u02c9\u02ce\u00032\u0019\u0000\u02ca"
                    + "\u02cb\u0005\u0159\u0000\u0000\u02cb\u02cd\u00032\u0019\u0000\u02cc\u02ca"
                    + "\u0001\u0000\u0000\u0000\u02cd\u02d0\u0001\u0000\u0000\u0000\u02ce\u02cc"
                    + "\u0001\u0000\u0000\u0000\u02ce\u02cf\u0001\u0000\u0000\u0000\u02cf-\u0001"
                    + "\u0000\u0000\u0000\u02d0\u02ce\u0001\u0000\u0000\u0000\u02d1\u02d2\u0005"
                    + "J\u0000\u0000\u02d2\u02d3\u00032\u0019\u0000\u02d3\u02d9\u0005\u016c\u0000"
                    + "\u0000\u02d4\u02d5\u00032\u0019\u0000\u02d5\u02d6\u0005\u016c\u0000\u0000"
                    + "\u02d6\u02d8\u0001\u0000\u0000\u0000\u02d7\u02d4\u0001\u0000\u0000\u0000"
                    + "\u02d8\u02db\u0001\u0000\u0000\u0000\u02d9\u02d7\u0001\u0000\u0000\u0000"
                    + "\u02d9\u02da\u0001\u0000\u0000\u0000\u02da/\u0001\u0000\u0000\u0000\u02db"
                    + "\u02d9\u0001\u0000\u0000\u0000\u02dc\u02dd\u00032\u0019\u0000\u02dd\u02e3"
                    + "\u0005\u016c\u0000\u0000\u02de\u02df\u00032\u0019\u0000\u02df\u02e0\u0005"
                    + "\u016c\u0000\u0000\u02e0\u02e2\u0001\u0000\u0000\u0000\u02e1\u02de\u0001"
                    + "\u0000\u0000\u0000\u02e2\u02e5\u0001\u0000\u0000\u0000\u02e3\u02e1\u0001"
                    + "\u0000\u0000\u0000\u02e3\u02e4\u0001\u0000\u0000\u0000\u02e41\u0001\u0000"
                    + "\u0000\u0000\u02e5\u02e3\u0001\u0000\u0000\u0000\u02e6\u02ec\u00038\u001c"
                    + "\u0000\u02e7\u02ec\u00036\u001b\u0000\u02e8\u02ec\u0003>\u001f\u0000\u02e9"
                    + "\u02ec\u00034\u001a\u0000\u02ea\u02ec\u0003@ \u0000\u02eb\u02e6\u0001"
                    + "\u0000\u0000\u0000\u02eb\u02e7\u0001\u0000\u0000\u0000\u02eb\u02e8\u0001"
                    + "\u0000\u0000\u0000\u02eb\u02e9\u0001\u0000\u0000\u0000\u02eb\u02ea\u0001"
                    + "\u0000\u0000\u0000\u02ec3\u0001\u0000\u0000\u0000\u02ed\u02f2\u0003\u01b4"
                    + "\u00da\u0000\u02ee\u02ef\u0005\u0159\u0000\u0000\u02ef\u02f1\u0003\u01b4"
                    + "\u00da\u0000\u02f0\u02ee\u0001\u0000\u0000\u0000\u02f1\u02f4\u0001\u0000"
                    + "\u0000\u0000\u02f2\u02f0\u0001\u0000\u0000\u0000\u02f2\u02f3\u0001\u0000"
                    + "\u0000\u0000\u02f3\u02f6\u0001\u0000\u0000\u0000\u02f4\u02f2\u0001\u0000"
                    + "\u0000\u0000\u02f5\u02f7\u0005\u000e\u0000\u0000\u02f6\u02f5\u0001\u0000"
                    + "\u0000\u0000\u02f6\u02f7\u0001\u0000\u0000\u0000\u02f7\u02f8\u0001\u0000"
                    + "\u0000\u0000\u02f8\u02fa\u0003v;\u0000\u02f9\u02fb\u0003x<\u0000\u02fa"
                    + "\u02f9\u0001\u0000\u0000\u0000\u02fa\u02fb\u0001\u0000\u0000\u0000\u02fb"
                    + "\u02ff\u0001\u0000\u0000\u0000\u02fc\u02fe\u0003z=\u0000\u02fd\u02fc\u0001"
                    + "\u0000\u0000\u0000\u02fe\u0301\u0001\u0000\u0000\u0000\u02ff\u02fd\u0001"
                    + "\u0000\u0000\u0000\u02ff\u0300\u0001\u0000\u0000\u0000\u0300\u0303\u0001"
                    + "\u0000\u0000\u0000\u0301\u02ff\u0001\u0000\u0000\u0000\u0302\u0304\u0003"
                    + "|>\u0000\u0303\u0302\u0001\u0000\u0000\u0000\u0303\u0304\u0001\u0000\u0000"
                    + "\u0000\u0304\u0311\u0001\u0000\u0000\u0000\u0305\u0306\u0003\u01b4\u00da"
                    + "\u0000\u0306\u0308\u00051\u0000\u0000\u0307\u0309\u0005\u000e\u0000\u0000"
                    + "\u0308\u0307\u0001\u0000\u0000\u0000\u0308\u0309\u0001\u0000\u0000\u0000"
                    + "\u0309\u030a\u0001\u0000\u0000\u0000\u030a\u030c\u0003v;\u0000\u030b\u030d"
                    + "\u0003x<\u0000\u030c\u030b\u0001\u0000\u0000\u0000\u030c\u030d\u0001\u0000"
                    + "\u0000\u0000\u030d\u030e\u0001\u0000\u0000\u0000\u030e\u030f\u0003|>\u0000"
                    + "\u030f\u0311\u0001\u0000\u0000\u0000\u0310\u02ed\u0001\u0000\u0000\u0000"
                    + "\u0310\u0305\u0001\u0000\u0000\u0000\u03115\u0001\u0000\u0000\u0000\u0312"
                    + "\u0313\u0003\u01b4\u00da\u0000\u0313\u0314\u00055\u0000\u0000\u03147\u0001"
                    + "\u0000\u0000\u0000\u0315\u0316\u0005A\u0000\u0000\u0316\u031b\u0003\u01b4"
                    + "\u00da\u0000\u0317\u0318\u0003\u01b4\u00da\u0000\u0318\u0319\u0005A\u0000"
                    + "\u0000\u0319\u031b\u0001\u0000\u0000\u0000\u031a\u0315\u0001\u0000\u0000"
                    + "\u0000\u031a\u0317\u0001\u0000\u0000\u0000\u031b\u031e\u0001\u0000\u0000"
                    + "\u0000\u031c\u031f\u0003:\u001d\u0000\u031d\u031f\u0003<\u001e\u0000\u031e"
                    + "\u031c\u0001\u0000\u0000\u0000\u031e\u031d\u0001\u0000\u0000\u0000\u031e"
                    + "\u031f\u0001\u0000\u0000\u0000\u031f\u0320\u0001\u0000\u0000\u0000\u0320"
                    + "\u0323\u0007\u0003\u0000\u0000\u0321\u0324\u0003\u0116\u008b\u0000\u0322"
                    + "\u0324\u0003\u017c\u00be\u0000\u0323\u0321\u0001\u0000\u0000\u0000\u0323"
                    + "\u0322\u0001\u0000\u0000\u0000\u03249\u0001\u0000\u0000\u0000\u0325\u0326"
                    + "\u0005\u0139\u0000\u0000\u0326\u0328\u0005\u00ea\u0000\u0000\u0327\u0329"
                    + "\u0005\u00c9\u0000\u0000\u0328\u0327\u0001\u0000\u0000\u0000\u0328\u0329"
                    + "\u0001\u0000\u0000\u0000\u0329\u032c\u0001\u0000\u0000\u0000\u032a\u032b"
                    + "\u0005\u0123\u0000\u0000\u032b\u032d\u0007\u0004\u0000\u0000\u032c\u032a"
                    + "\u0001\u0000\u0000\u0000\u032c\u032d\u0001\u0000\u0000\u0000\u032d;\u0001"
                    + "\u0000\u0000\u0000\u032e\u032f\u0005\u013a\u0000\u0000\u032f\u0330\u0005"
                    + "\u00ea\u0000\u0000\u0330=\u0001\u0000\u0000\u0000\u0331\u0332\u0007\u0005"
                    + "\u0000\u0000\u0332\u0333\u0005\u007f\u0000\u0000\u0333\u0339\u0005s\u0000"
                    + "\u0000\u0334\u033a\u0005\u010c\u0000\u0000\u0335\u033a\u0005\u010f\u0000"
                    + "\u0000\u0336\u0337\u0005\u00c1\u0000\u0000\u0337\u033a\u0005v\u0000\u0000"
                    + "\u0338\u033a\u0003\u01b4\u00da\u0000\u0339\u0334\u0001\u0000\u0000\u0000"
                    + "\u0339\u0335\u0001\u0000\u0000\u0000\u0339\u0336\u0001\u0000\u0000\u0000"
                    + "\u0339\u0338\u0001\u0000\u0000\u0000\u033a\u033b\u0001\u0000\u0000\u0000"
                    + "\u033b\u033c\u0003\u0006\u0003\u0000\u033c?\u0001\u0000\u0000\u0000\u033d"
                    + "\u033f\u0005{\u0000\u0000\u033e\u033d\u0001\u0000\u0000\u0000\u033e\u033f"
                    + "\u0001\u0000\u0000\u0000\u033f\u0340\u0001\u0000\u0000\u0000\u0340\u0341"
                    + "\u0005\u011c\u0000\u0000\u0341\u0342\u0005\u011a\u0000\u0000\u0342\u0344"
                    + "\u0003\u01b4\u00da\u0000\u0343\u0345\u0003T*\u0000\u0344\u0343\u0001\u0000"
                    + "\u0000\u0000\u0344\u0345\u0001\u0000\u0000\u0000\u0345\u0346\u0001\u0000"
                    + "\u0000\u0000\u0346\u0347\u0003F#\u0000\u0347A\u0001\u0000\u0000\u0000"
                    + "\u0348\u0349\u0005;\u0000\u0000\u0349\u034d\u0005\u011a\u0000\u0000\u034a"
                    + "\u034b\u0005\u0086\u0000\u0000\u034b\u034c\u0005\u00c1\u0000\u0000\u034c"
                    + "\u034e\u0005j\u0000\u0000\u034d\u034a\u0001\u0000\u0000\u0000\u034d\u034e"
                    + "\u0001\u0000\u0000\u0000\u034e\u034f\u0001\u0000\u0000\u0000\u034f\u0351"
                    + "\u0003\u0146\u00a3\u0000\u0350\u0352\u0003T*\u0000\u0351\u0350\u0001\u0000"
                    + "\u0000\u0000\u0351\u0352\u0001\u0000\u0000\u0000\u0352\u0353\u0001\u0000"
                    + "\u0000\u0000\u0353\u0354\u0003F#\u0000\u0354C\u0001\u0000\u0000\u0000"
                    + "\u0355\u035c\u0005;\u0000\u0000\u0356\u0357\u0005\u00a6\u0000\u0000\u0357"
                    + "\u035d\u0005\u011c\u0000\u0000\u0358\u035a\u0007\u0006\u0000\u0000\u0359"
                    + "\u0358\u0001\u0000\u0000\u0000\u0359\u035a\u0001\u0000\u0000\u0000\u035a"
                    + "\u035b\u0001\u0000\u0000\u0000\u035b\u035d\u0005\u0135\u0000\u0000\u035c"
                    + "\u0356\u0001\u0000\u0000\u0000\u035c\u0359\u0001\u0000\u0000\u0000\u035d"
                    + "\u035e\u0001\u0000\u0000\u0000\u035e\u035f\u0005\u011a\u0000\u0000\u035f"
                    + "\u0361\u0003\u01b4\u00da\u0000\u0360\u0362\u0003T*\u0000\u0361\u0360\u0001"
                    + "\u0000\u0000\u0000\u0361\u0362\u0001\u0000\u0000\u0000\u0362\u0363\u0001"
                    + "\u0000\u0000\u0000\u0363\u0364\u0003F#\u0000\u0364E\u0001\u0000\u0000"
                    + "\u0000\u0365\u0367\u0005\u000e\u0000\u0000\u0366\u0365\u0001\u0000\u0000"
                    + "\u0000\u0366\u0367\u0001\u0000\u0000\u0000\u0367\u0368\u0001\u0000\u0000"
                    + "\u0000\u0368\u0369\u0005\u0167\u0000\u0000\u0369\u036a\u0003\u0116\u008b"
                    + "\u0000\u036a\u036b\u0005\u016a\u0000\u0000\u036b\u0375\u0001\u0000\u0000"
                    + "\u0000\u036c\u036e\u0005\u000e\u0000\u0000\u036d\u036c\u0001\u0000\u0000"
                    + "\u0000\u036d\u036e\u0001\u0000\u0000\u0000\u036e\u036f\u0001\u0000\u0000"
                    + "\u0000\u036f\u0375\u0003\u0116\u008b\u0000\u0370\u0371\u0005\u0167\u0000"
                    + "\u0000\u0371\u0372\u0003H$\u0000\u0372\u0373\u0005\u016a\u0000\u0000\u0373"
                    + "\u0375\u0001\u0000\u0000\u0000\u0374\u0366\u0001\u0000\u0000\u0000\u0374"
                    + "\u036d\u0001\u0000\u0000\u0000\u0374\u0370\u0001\u0000\u0000\u0000\u0375"
                    + "\u0377\u0001\u0000\u0000\u0000\u0376\u0378\u0003Z-\u0000\u0377\u0376\u0001"
                    + "\u0000\u0000\u0000\u0377\u0378\u0001\u0000\u0000\u0000\u0378G\u0001\u0000"
                    + "\u0000\u0000\u0379\u037e\u0003J%\u0000\u037a\u037b\u0005\u0159\u0000\u0000"
                    + "\u037b\u037d\u0003J%\u0000\u037c\u037a\u0001\u0000\u0000\u0000\u037d\u0380"
                    + "\u0001\u0000\u0000\u0000\u037e\u037c\u0001\u0000\u0000\u0000\u037e\u037f"
                    + "\u0001\u0000\u0000\u0000\u037fI\u0001\u0000\u0000\u0000\u0380\u037e\u0001"
                    + "\u0000\u0000\u0000\u0381\u0382\u0003L&\u0000\u0382\u0384\u0003v;\u0000"
                    + "\u0383\u0385\u0003x<\u0000\u0384\u0383\u0001\u0000\u0000\u0000\u0384\u0385"
                    + "\u0001\u0000\u0000\u0000\u0385\u0389\u0001\u0000\u0000\u0000\u0386\u0388"
                    + "\u0003z=\u0000\u0387\u0386\u0001\u0000\u0000\u0000\u0388\u038b\u0001\u0000"
                    + "\u0000\u0000\u0389\u0387\u0001\u0000\u0000\u0000\u0389\u038a\u0001\u0000"
                    + "\u0000\u0000\u038a\u038f\u0001\u0000\u0000\u0000\u038b\u0389\u0001\u0000"
                    + "\u0000\u0000\u038c\u038e\u0003N\'\u0000\u038d\u038c\u0001\u0000\u0000"
                    + "\u0000\u038e\u0391\u0001\u0000\u0000\u0000\u038f\u038d\u0001\u0000\u0000"
                    + "\u0000\u038f\u0390\u0001\u0000\u0000\u0000\u0390\u0398\u0001\u0000\u0000"
                    + "\u0000\u0391\u038f\u0001\u0000\u0000\u0000\u0392\u0393\u00056\u0000\u0000"
                    + "\u0393\u0395\u0003\u01b4\u00da\u0000\u0394\u0392\u0001\u0000\u0000\u0000"
                    + "\u0394\u0395\u0001\u0000\u0000\u0000\u0395\u0396\u0001\u0000\u0000\u0000"
                    + "\u0396\u0398\u0003P(\u0000\u0397\u0381\u0001\u0000\u0000\u0000\u0397\u0394"
                    + "\u0001\u0000\u0000\u0000\u0398K\u0001\u0000\u0000\u0000\u0399\u039a\u0003"
                    + "\u01b4\u00da\u0000\u039aM\u0001\u0000\u0000\u0000\u039b\u03bc\u0003|>"
                    + "\u0000\u039c\u039e\u0005\u00c1\u0000\u0000\u039d\u039c\u0001\u0000\u0000"
                    + "\u0000\u039d\u039e\u0001\u0000\u0000\u0000\u039e\u039f\u0001\u0000\u0000"
                    + "\u0000\u039f\u03bc\u0005\u00c3\u0000\u0000\u03a0\u03a1\u0005\u00d9\u0000"
                    + "\u0000\u03a1\u03bc\u0005\u009e\u0000\u0000\u03a2\u03bc\u0005\u012a\u0000"
                    + "\u0000\u03a3\u03a4\u0005\u00e3\u0000\u0000\u03a4\u03a5\u0003\u0146\u00a3"
                    + "\u0000\u03a5\u03a6\u0005\u0167\u0000\u0000\u03a6\u03a7\u0003\u01b4\u00da"
                    + "\u0000\u03a7\u03ab\u0005\u016a\u0000\u0000\u03a8\u03aa\u0003R)\u0000\u03a9"
                    + "\u03a8\u0001\u0000\u0000\u0000\u03aa\u03ad\u0001\u0000\u0000\u0000\u03ab"
                    + "\u03a9\u0001\u0000\u0000\u0000\u03ab\u03ac\u0001\u0000\u0000\u0000\u03ac"
                    + "\u03bc\u0001\u0000\u0000\u0000\u03ad\u03ab\u0001\u0000\u0000\u0000\u03ae"
                    + "\u03af\u0005\u0085\u0000\u0000\u03af\u03b0\u0005\u0167\u0000\u0000\u03b0"
                    + "\u03b5\u0005\u0171\u0000\u0000\u03b1\u03b2\u0005\u0159\u0000\u0000\u03b2"
                    + "\u03b4\u0005\u0171\u0000\u0000\u03b3\u03b1\u0001\u0000\u0000\u0000\u03b4"
                    + "\u03b7\u0001\u0000\u0000\u0000\u03b5\u03b3\u0001\u0000\u0000\u0000\u03b5"
                    + "\u03b6\u0001\u0000\u0000\u0000\u03b6\u03b8\u0001\u0000\u0000\u0000\u03b7"
                    + "\u03b5\u0001\u0000\u0000\u0000\u03b8\u03bc\u0005\u016a\u0000\u0000\u03b9"
                    + "\u03bc\u0005\u0012\u0000\u0000\u03ba\u03bc\u0005a\u0000\u0000\u03bb\u039b"
                    + "\u0001\u0000\u0000\u0000\u03bb\u039d\u0001\u0000\u0000\u0000\u03bb\u03a0"
                    + "\u0001\u0000\u0000\u0000\u03bb\u03a2\u0001\u0000\u0000\u0000\u03bb\u03a3"
                    + "\u0001\u0000\u0000\u0000\u03bb\u03ae\u0001\u0000\u0000\u0000\u03bb\u03b9"
                    + "\u0001\u0000\u0000\u0000\u03bb\u03ba\u0001\u0000\u0000\u0000\u03bcO\u0001"
                    + "\u0000\u0000\u0000\u03bd\u03be\u0005\u00d9\u0000\u0000\u03be\u03c0\u0005"
                    + "\u009e\u0000\u0000\u03bf\u03c1\u0005+\u0000\u0000\u03c0\u03bf\u0001\u0000"
                    + "\u0000\u0000\u03c0\u03c1\u0001\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000"
                    + "\u0000\u0000\u03c2\u03c3\u0005\u0167\u0000\u0000\u03c3\u03c5\u0003\u01b4"
                    + "\u00da\u0000\u03c4\u03c6\u0007\u0007\u0000\u0000\u03c5\u03c4\u0001\u0000"
                    + "\u0000\u0000\u03c5\u03c6\u0001\u0000\u0000\u0000\u03c6\u03ce\u0001\u0000"
                    + "\u0000\u0000\u03c7\u03c8\u0005\u0159\u0000\u0000\u03c8\u03ca\u0003\u01b4"
                    + "\u00da\u0000\u03c9\u03cb\u0007\u0007\u0000\u0000\u03ca\u03c9\u0001\u0000"
                    + "\u0000\u0000\u03ca\u03cb\u0001\u0000\u0000\u0000\u03cb\u03cd\u0001\u0000"
                    + "\u0000\u0000\u03cc\u03c7\u0001\u0000\u0000\u0000\u03cd\u03d0\u0001\u0000"
                    + "\u0000\u0000\u03ce\u03cc\u0001\u0000\u0000\u0000\u03ce\u03cf\u0001\u0000"
                    + "\u0000\u0000\u03cf\u03d1\u0001\u0000\u0000\u0000\u03d0\u03ce\u0001\u0000"
                    + "\u0000\u0000\u03d1\u03d3\u0005\u016a\u0000\u0000\u03d2\u03d4\u0005a\u0000"
                    + "\u0000\u03d3\u03d2\u0001\u0000\u0000\u0000\u03d3\u03d4\u0001\u0000\u0000"
                    + "\u0000\u03d4\u03d6\u0001\u0000\u0000\u0000\u03d5\u03d7\u0003\u00ecv\u0000"
                    + "\u03d6\u03d5\u0001\u0000\u0000\u0000\u03d6\u03d7\u0001\u0000\u0000\u0000"
                    + "\u03d7\u03f7\u0001\u0000\u0000\u0000\u03d8\u03d9\u0005t\u0000\u0000\u03d9"
                    + "\u03da\u0005\u009e\u0000\u0000\u03da\u03db\u0005\u0167\u0000\u0000\u03db"
                    + "\u03e0\u0003\u01b4\u00da\u0000\u03dc\u03dd\u0005\u0159\u0000\u0000\u03dd"
                    + "\u03df\u0003\u01b4\u00da\u0000\u03de\u03dc\u0001\u0000\u0000\u0000\u03df"
                    + "\u03e2\u0001\u0000\u0000\u0000\u03e0\u03de\u0001\u0000\u0000\u0000\u03e0"
                    + "\u03e1\u0001\u0000\u0000\u0000\u03e1\u03e3\u0001\u0000\u0000\u0000\u03e2"
                    + "\u03e0\u0001\u0000\u0000\u0000\u03e3\u03e4\u0005\u016a\u0000\u0000\u03e4"
                    + "\u03e5\u0005\u00e3\u0000\u0000\u03e5\u03e6\u0003\u0146\u00a3\u0000\u03e6"
                    + "\u03e7\u0005\u0167\u0000\u0000\u03e7\u03ec\u0003\u01b4\u00da\u0000\u03e8"
                    + "\u03e9\u0005\u0159\u0000\u0000\u03e9\u03eb\u0003\u01b4\u00da\u0000\u03ea"
                    + "\u03e8\u0001\u0000\u0000\u0000\u03eb\u03ee\u0001\u0000\u0000\u0000\u03ec"
                    + "\u03ea\u0001\u0000\u0000\u0000\u03ec\u03ed\u0001\u0000\u0000\u0000\u03ed"
                    + "\u03ef\u0001\u0000\u0000\u0000\u03ee\u03ec\u0001\u0000\u0000\u0000\u03ef"
                    + "\u03f3\u0005\u016a\u0000\u0000\u03f0\u03f2\u0003R)\u0000\u03f1\u03f0\u0001"
                    + "\u0000\u0000\u0000\u03f2\u03f5\u0001\u0000\u0000\u0000\u03f3\u03f1\u0001"
                    + "\u0000\u0000\u0000\u03f3\u03f4\u0001\u0000\u0000\u0000\u03f4\u03f7\u0001"
                    + "\u0000\u0000\u0000\u03f5\u03f3\u0001\u0000\u0000\u0000\u03f6\u03bd\u0001"
                    + "\u0000\u0000\u0000\u03f6\u03d8\u0001\u0000\u0000\u0000\u03f7Q\u0001\u0000"
                    + "\u0000\u0000\u03f8\u03f9\u0005\u00c8\u0000\u0000\u03f9\u0402\u0007\b\u0000"
                    + "\u0000\u03fa\u03fb\u0005\u00bc\u0000\u0000\u03fb\u0403\u0005\u0006\u0000"
                    + "\u0000\u03fc\u0403\u0005\u00e7\u0000\u0000\u03fd\u03fe\u0005\u0100\u0000"
                    + "\u0000\u03fe\u0403\u0005\u00c3\u0000\u0000\u03ff\u0400\u0005\u0100\u0000"
                    + "\u0000\u0400\u0403\u0005K\u0000\u0000\u0401\u0403\u0005\"\u0000\u0000"
                    + "\u0402\u03fa\u0001\u0000\u0000\u0000\u0402\u03fc\u0001\u0000\u0000\u0000"
                    + "\u0402\u03fd\u0001\u0000\u0000\u0000\u0402\u03ff\u0001\u0000\u0000\u0000"
                    + "\u0402\u0401\u0001\u0000\u0000\u0000\u0403S\u0001\u0000\u0000\u0000\u0404"
                    + "\u0406\u0003V+\u0000\u0405\u0404\u0001\u0000\u0000\u0000\u0406\u0407\u0001"
                    + "\u0000\u0000\u0000\u0407\u0405\u0001\u0000\u0000\u0000\u0407\u0408\u0001"
                    + "\u0000\u0000\u0000\u0408U\u0001\u0000\u0000\u0000\u0409\u040a\u0005\u0159"
                    + "\u0000\u0000\u040a\u040d\u0003X,\u0000\u040b\u040d\u0003d2\u0000\u040c"
                    + "\u0409\u0001\u0000\u0000\u0000\u040c\u040b\u0001\u0000\u0000\u0000\u040d"
                    + "W\u0001\u0000\u0000\u0000\u040e\u0410\u0005\u00bc\u0000\u0000\u040f\u040e"
                    + "\u0001\u0000\u0000\u0000\u040f\u0410\u0001\u0000\u0000\u0000\u0410\u0411"
                    + "\u0001\u0000\u0000\u0000\u0411\u0412\u0007\t\u0000\u0000\u0412Y\u0001"
                    + "\u0000\u0000\u0000\u0413\u0415\u0003\\.\u0000\u0414\u0413\u0001\u0000"
                    + "\u0000\u0000\u0415\u0416\u0001\u0000\u0000\u0000\u0416\u0414\u0001\u0000"
                    + "\u0000\u0000\u0416\u0417\u0001\u0000\u0000\u0000\u0417[\u0001\u0000\u0000"
                    + "\u0000\u0418\u0419\u0005\u00c8\u0000\u0000\u0419\u041a\u00052\u0000\u0000"
                    + "\u041a\u041b\u0007\n\u0000\u0000\u041b\u0423\u0005\u00f2\u0000\u0000\u041c"
                    + "\u0423\u0003^/\u0000\u041d\u0423\u0003`0\u0000\u041e\u0423\u0003b1\u0000"
                    + "\u041f\u0423\u0003d2\u0000\u0420\u0423\u0003j5\u0000\u0421\u0423\u0003"
                    + "l6\u0000\u0422\u0418\u0001\u0000\u0000\u0000\u0422\u041c\u0001\u0000\u0000"
                    + "\u0000\u0422\u041d\u0001\u0000\u0000\u0000\u0422\u041e\u0001\u0000\u0000"
                    + "\u0000\u0422\u041f\u0001\u0000\u0000\u0000\u0422\u0420\u0001\u0000\u0000"
                    + "\u0000\u0422\u0421\u0001\u0000\u0000\u0000\u0423]\u0001\u0000\u0000\u0000"
                    + "\u0424\u0425\u0005\u00fd\u0000\u0000\u0425\u0426\u0005<\u0000\u0000\u0426"
                    + "\u0437\u0007\u000b\u0000\u0000\u0427\u0428\u0007\f\u0000\u0000\u0428\u0437"
                    + "\u0005\u0171\u0000\u0000\u0429\u0437\u0005\u00be\u0000\u0000\u042a\u0437"
                    + "\u0007\r\u0000\u0000\u042b\u042c\u0005\u0113\u0000\u0000\u042c\u042f\u0005"
                    + "\u0167\u0000\u0000\u042d\u0430\u0003\u01b4\u00da\u0000\u042e\u0430\u0005"
                    + "\u0171\u0000\u0000\u042f\u042d\u0001\u0000\u0000\u0000\u042f\u042e\u0001"
                    + "\u0000\u0000\u0000\u0430\u0431\u0001\u0000\u0000\u0000\u0431\u042f\u0001"
                    + "\u0000\u0000\u0000\u0431\u0432\u0001\u0000\u0000\u0000\u0432\u0433\u0001"
                    + "\u0000\u0000\u0000\u0433\u0437\u0005\u016a\u0000\u0000\u0434\u0435\u0005"
                    + "\u011b\u0000\u0000\u0435\u0437\u0003\u01b4\u00da\u0000\u0436\u0424\u0001"
                    + "\u0000\u0000\u0000\u0436\u0427\u0001\u0000\u0000\u0000\u0436\u0429\u0001"
                    + "\u0000\u0000\u0000\u0436\u042a\u0001\u0000\u0000\u0000\u0436\u042b\u0001"
                    + "\u0000\u0000\u0000\u0436\u0434\u0001\u0000\u0000\u0000\u0437_\u0001\u0000"
                    + "\u0000\u0000\u0438\u043a\u0005\u008b\u0000\u0000\u0439\u0438\u0001\u0000"
                    + "\u0000\u0000\u0439\u043a\u0001\u0000\u0000\u0000\u043a\u043b\u0001\u0000"
                    + "\u0000\u0000\u043b\u043c\u0005\u0089\u0000\u0000\u043c\u045a\u0003\u01b4"
                    + "\u00da\u0000\u043d\u043e\u0005\u0139\u0000\u0000\u043e\u045a\u0005\u00e5"
                    + "\u0000\u0000\u043f\u0440\u0005Y\u0000\u0000\u0440\u0441\u0005\u001e\u0000"
                    + "\u0000\u0441\u0442\u0005\u0080\u0000\u0000\u0442\u0443\u0005\u0167\u0000"
                    + "\u0000\u0443\u0448\u0003\u01b4\u00da\u0000\u0444\u0445\u0005\u0159\u0000"
                    + "\u0000\u0445\u0447\u0003\u01b4\u00da\u0000\u0446\u0444\u0001\u0000\u0000"
                    + "\u0000\u0447\u044a\u0001\u0000\u0000\u0000\u0448\u0446\u0001\u0000\u0000"
                    + "\u0000\u0448\u0449\u0001\u0000\u0000\u0000\u0449\u044b\u0001\u0000\u0000"
                    + "\u0000\u044a\u0448\u0001\u0000\u0000\u0000\u044b\u044c\u0005\u016a\u0000"
                    + "\u0000\u044c\u045a\u0001\u0000\u0000\u0000\u044d\u044f\u0005\u00c1\u0000"
                    + "\u0000\u044e\u044d\u0001\u0000\u0000\u0000\u044e\u044f\u0001\u0000\u0000"
                    + "\u0000\u044f\u0450\u0001\u0000\u0000\u0000\u0450\u045a\u0005\u00ac\u0000"
                    + "\u0000\u0451\u0452\u00053\u0000\u0000\u0452\u045a\u0007\u000e\u0000\u0000"
                    + "\u0453\u0454\u0005O\u0000\u0000\u0454\u045a\u0005\u00c9\u0000\u0000\u0455"
                    + "\u0456\u0005\u0139\u0000\u0000\u0456\u0457\u0005\u00e7\u0000\u0000\u0457"
                    + "\u0458\u0005\u00c8\u0000\u0000\u0458\u045a\u0005\\\u0000\u0000\u0459\u0439"
                    + "\u0001\u0000\u0000\u0000\u0459\u043d\u0001\u0000\u0000\u0000\u0459\u043f"
                    + "\u0001\u0000\u0000\u0000\u0459\u044e\u0001\u0000\u0000\u0000\u0459\u0451"
                    + "\u0001\u0000\u0000\u0000\u0459\u0453\u0001\u0000\u0000\u0000\u0459\u0455"
                    + "\u0001\u0000\u0000\u0000\u045aa\u0001\u0000\u0000\u0000\u045b\u045d\u0005"
                    + "\u012a\u0000\u0000\u045c\u045b\u0001\u0000\u0000\u0000\u045c\u045d\u0001"
                    + "\u0000\u0000\u0000\u045d\u045e\u0001\u0000\u0000\u0000\u045e\u045f\u0005"
                    + "\u00d9\u0000\u0000\u045f\u0460\u0005\u008b\u0000\u0000\u0460\u0461\u0005"
                    + "\u0167\u0000\u0000\u0461\u0466\u0003\u01b4\u00da\u0000\u0462\u0463\u0005"
                    + "\u0159\u0000\u0000\u0463\u0465\u0003\u01b4\u00da\u0000\u0464\u0462\u0001"
                    + "\u0000\u0000\u0000\u0465\u0468\u0001\u0000\u0000\u0000\u0466\u0464\u0001"
                    + "\u0000\u0000\u0000\u0466\u0467\u0001\u0000\u0000\u0000\u0467\u0469\u0001"
                    + "\u0000\u0000\u0000\u0468\u0466\u0001\u0000\u0000\u0000\u0469\u046a\u0005"
                    + "\u016a\u0000\u0000\u046a\u046e\u0001\u0000\u0000\u0000\u046b\u046c\u0005"
                    + "\u0139\u0000\u0000\u046c\u046e\u0005C\u0000\u0000\u046d\u045c\u0001\u0000"
                    + "\u0000\u0000\u046d\u046b\u0001\u0000\u0000\u0000\u046ec\u0001\u0000\u0000"
                    + "\u0000\u046f\u0474\u0003f3\u0000\u0470\u0471\u0005\u0114\u0000\u0000\u0471"
                    + "\u0472\u0005\u000e\u0000\u0000\u0472\u0474\u0003\u01b4\u00da\u0000\u0473"
                    + "\u046f\u0001\u0000\u0000\u0000\u0473\u0470\u0001\u0000\u0000\u0000\u0474"
                    + "e\u0001\u0000\u0000\u0000\u0475\u0476\u0005\u00f1\u0000\u0000\u0476\u0477"
                    + "\u0005u\u0000\u0000\u0477\u047b\u0005Q\u0000\u0000\u0478\u047a\u0003h"
                    + "4\u0000\u0479\u0478\u0001\u0000\u0000\u0000\u047a\u047d\u0001\u0000\u0000"
                    + "\u0000\u047b\u0479\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000"
                    + "\u0000\u047cg\u0001\u0000\u0000\u0000\u047d\u047b\u0001\u0000\u0000\u0000"
                    + "\u047e\u047f\u0005o\u0000\u0000\u047f\u0480\u0005\u011d\u0000\u0000\u0480"
                    + "\u0481\u0005\u001e\u0000\u0000\u0481\u0485\u0003\u017c\u00be\u0000\u0482"
                    + "\u0483\u0005d\u0000\u0000\u0483\u0484\u0005\u001e\u0000\u0000\u0484\u0486"
                    + "\u0003\u017c\u00be\u0000\u0485\u0482\u0001\u0000\u0000\u0000\u0485\u0486"
                    + "\u0001\u0000\u0000\u0000\u0486\u049a\u0001\u0000\u0000\u0000\u0487\u0488"
                    + "\u0005.\u0000\u0000\u0488\u0489\u0005\u009b\u0000\u0000\u0489\u048a\u0005"
                    + "\u011d\u0000\u0000\u048a\u048b\u0005\u001e\u0000\u0000\u048b\u049a\u0003"
                    + "\u017c\u00be\u0000\u048c\u048d\u0005\u00af\u0000\u0000\u048d\u048e\u0005"
                    + "\u009f\u0000\u0000\u048e\u048f\u0005\u011d\u0000\u0000\u048f\u0490\u0005"
                    + "\u001e\u0000\u0000\u0490\u049a\u0003\u017c\u00be\u0000\u0491\u0492\u0005"
                    + "\u00a5\u0000\u0000\u0492\u0493\u0005\u011d\u0000\u0000\u0493\u0494\u0005"
                    + "\u001e\u0000\u0000\u0494\u049a\u0003\u017c\u00be\u0000\u0495\u0496\u0005"
                    + "\u00c3\u0000\u0000\u0496\u0497\u0005M\u0000\u0000\u0497\u0498\u0005\u000e"
                    + "\u0000\u0000\u0498\u049a\u0003\u017c\u00be\u0000\u0499\u047e\u0001\u0000"
                    + "\u0000\u0000\u0499\u0487\u0001\u0000\u0000\u0000\u0499\u048c\u0001\u0000"
                    + "\u0000\u0000\u0499\u0491\u0001\u0000\u0000\u0000\u0499\u0495\u0001\u0000"
                    + "\u0000\u0000\u049ai\u0001\u0000\u0000\u0000\u049b\u049c\u0005\u00c8\u0000"
                    + "\u0000\u049c\u04a0\u0003\u01b4\u00da\u0000\u049d\u049e\u0005\u011e\u0000"
                    + "\u0000\u049e\u04a0\u0003\u01b4\u00da\u0000\u049f\u049b\u0001\u0000\u0000"
                    + "\u0000\u049f\u049d\u0001\u0000\u0000\u0000\u04a0k\u0001\u0000\u0000\u0000"
                    + "\u04a1\u04a3\u0005\u0012\u0000\u0000\u04a2\u04a4\u0005\u015d\u0000\u0000"
                    + "\u04a3\u04a2\u0001\u0000\u0000\u0000\u04a3\u04a4\u0001\u0000\u0000\u0000"
                    + "\u04a4\u04a5\u0001\u0000\u0000\u0000\u04a5\u04bd\u0003\u017c\u00be\u0000"
                    + "\u04a6\u04a8\u00050\u0000\u0000\u04a7\u04a9\u0005\u015d\u0000\u0000\u04a8"
                    + "\u04a7\u0001\u0000\u0000\u0000\u04a8\u04a9\u0001\u0000\u0000\u0000\u04a9"
                    + "\u04aa\u0001\u0000\u0000\u0000\u04aa\u04bd\u0003\u017c\u00be\u0000\u04ab"
                    + "\u04ad\u0005K\u0000\u0000\u04ac\u04ab\u0001\u0000\u0000\u0000\u04ac\u04ad"
                    + "\u0001\u0000\u0000\u0000\u04ad\u04b1\u0001\u0000\u0000\u0000\u04ae\u04af"
                    + "\u0005\'\u0000\u0000\u04af\u04b2\u0005\u0100\u0000\u0000\u04b0\u04b2\u0005"
                    + "(\u0000\u0000\u04b1\u04ae\u0001\u0000\u0000\u0000\u04b1\u04b0\u0001\u0000"
                    + "\u0000\u0000\u04b2\u04b4\u0001\u0000\u0000\u0000\u04b3\u04b5\u0005\u015d"
                    + "\u0000\u0000\u04b4\u04b3\u0001\u0000\u0000\u0000\u04b4\u04b5\u0001\u0000"
                    + "\u0000\u0000\u04b5\u04b6\u0001\u0000\u0000\u0000\u04b6\u04bd\u0003\u017c"
                    + "\u00be\u0000\u04b7\u04b9\u0005c\u0000\u0000\u04b8\u04ba\u0005\u015d\u0000"
                    + "\u0000\u04b9\u04b8\u0001\u0000\u0000\u0000\u04b9\u04ba\u0001\u0000\u0000"
                    + "\u0000\u04ba\u04bb\u0001\u0000\u0000\u0000\u04bb\u04bd\u0003\u017c\u00be"
                    + "\u0000\u04bc\u04a1\u0001\u0000\u0000\u0000\u04bc\u04a6\u0001\u0000\u0000"
                    + "\u0000\u04bc\u04ac\u0001\u0000\u0000\u0000\u04bc\u04b7\u0001\u0000\u0000"
                    + "\u0000\u04bdm\u0001\u0000\u0000\u0000\u04be\u04bf\u0005\n\u0000\u0000"
                    + "\u04bf\u04c0\u0005\u011a\u0000\u0000\u04c0\u04c1\u0003\u0146\u00a3\u0000"
                    + "\u04c1\u04c2\u0003p8\u0000\u04c2o\u0001\u0000\u0000\u0000\u04c3\u04c4"
                    + "\u0003r9\u0000\u04c4q\u0001\u0000\u0000\u0000\u04c5\u04c8\u0005\u0007"
                    + "\u0000\u0000\u04c6\u04c7\u00056\u0000\u0000\u04c7\u04c9\u0003\u01b4\u00da"
                    + "\u0000\u04c8\u04c6\u0001\u0000\u0000\u0000\u04c8\u04c9\u0001\u0000\u0000"
                    + "\u0000\u04c9\u04ca\u0001\u0000\u0000\u0000\u04ca\u04cb\u0003t:\u0000\u04cb"
                    + "s\u0001\u0000\u0000\u0000\u04cc\u04cd\u0005\u00d9\u0000\u0000\u04cd\u04cf"
                    + "\u0005\u009e\u0000\u0000\u04ce\u04d0\u0005+\u0000\u0000\u04cf\u04ce\u0001"
                    + "\u0000\u0000\u0000\u04cf\u04d0\u0001\u0000\u0000\u0000\u04d0\u04d1\u0001"
                    + "\u0000\u0000\u0000\u04d1\u04d2\u0005\u0167\u0000\u0000\u04d2\u04d4\u0003"
                    + "\u01b4\u00da\u0000\u04d3\u04d5\u0007\u0007\u0000\u0000\u04d4\u04d3\u0001"
                    + "\u0000\u0000\u0000\u04d4\u04d5\u0001\u0000\u0000\u0000\u04d5\u04dd\u0001"
                    + "\u0000\u0000\u0000\u04d6\u04d7\u0005\u0159\u0000\u0000\u04d7\u04d9\u0003"
                    + "\u01b4\u00da\u0000\u04d8\u04da\u0007\u0007\u0000\u0000\u04d9\u04d8\u0001"
                    + "\u0000\u0000\u0000\u04d9\u04da\u0001\u0000\u0000\u0000\u04da\u04dc\u0001"
                    + "\u0000\u0000\u0000\u04db\u04d6\u0001\u0000\u0000\u0000\u04dc\u04df\u0001"
                    + "\u0000\u0000\u0000\u04dd\u04db\u0001\u0000\u0000\u0000\u04dd\u04de\u0001"
                    + "\u0000\u0000\u0000\u04de\u04e0\u0001\u0000\u0000\u0000\u04df\u04dd\u0001"
                    + "\u0000\u0000\u0000\u04e0\u04e2\u0005\u016a\u0000\u0000\u04e1\u04e3\u0005"
                    + "a\u0000\u0000\u04e2\u04e1\u0001\u0000\u0000\u0000\u04e2\u04e3\u0001\u0000"
                    + "\u0000\u0000\u04e3\u04e5\u0001\u0000\u0000\u0000\u04e4\u04e6\u0003\u00ec"
                    + "v\u0000\u04e5\u04e4\u0001\u0000\u0000\u0000\u04e5\u04e6\u0001\u0000\u0000"
                    + "\u0000\u04e6\u050b\u0001\u0000\u0000\u0000\u04e7\u04e8\u0005t\u0000\u0000"
                    + "\u04e8\u04e9\u0005\u009e\u0000\u0000\u04e9\u04ea\u0005\u0167\u0000\u0000"
                    + "\u04ea\u04ef\u0003\u01b4\u00da\u0000\u04eb\u04ec\u0005\u0159\u0000\u0000"
                    + "\u04ec\u04ee\u0003\u01b4\u00da\u0000\u04ed\u04eb\u0001\u0000\u0000\u0000"
                    + "\u04ee\u04f1\u0001\u0000\u0000\u0000\u04ef\u04ed\u0001\u0000\u0000\u0000"
                    + "\u04ef\u04f0\u0001\u0000\u0000\u0000\u04f0\u04f2\u0001\u0000\u0000\u0000"
                    + "\u04f1\u04ef\u0001\u0000\u0000\u0000\u04f2\u04f3\u0005\u016a\u0000\u0000"
                    + "\u04f3\u04f4\u0005\u00e3\u0000\u0000\u04f4\u04f5\u0003\u0146\u00a3\u0000"
                    + "\u04f5\u04f6\u0005\u0167\u0000\u0000\u04f6\u04fb\u0003\u01b4\u00da\u0000"
                    + "\u04f7\u04f8\u0005\u0159\u0000\u0000\u04f8\u04fa\u0003\u01b4\u00da\u0000"
                    + "\u04f9\u04f7\u0001\u0000\u0000\u0000\u04fa\u04fd\u0001\u0000\u0000\u0000"
                    + "\u04fb\u04f9\u0001\u0000\u0000\u0000\u04fb\u04fc\u0001\u0000\u0000\u0000"
                    + "\u04fc\u04fe\u0001\u0000\u0000\u0000\u04fd\u04fb\u0001\u0000\u0000\u0000"
                    + "\u04fe\u0502\u0005\u016a\u0000\u0000\u04ff\u0501\u0003R)\u0000\u0500\u04ff"
                    + "\u0001\u0000\u0000\u0000\u0501\u0504\u0001\u0000\u0000\u0000\u0502\u0500"
                    + "\u0001\u0000\u0000\u0000\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u050b"
                    + "\u0001\u0000\u0000\u0000\u0504\u0502\u0001\u0000\u0000\u0000\u0505\u0506"
                    + "\u0005K\u0000\u0000\u0506\u0507\u0003\u017c\u00be\u0000\u0507\u0508\u0005"
                    + "s\u0000\u0000\u0508\u0509\u0003\u01b4\u00da\u0000\u0509\u050b\u0001\u0000"
                    + "\u0000\u0000\u050a\u04cc\u0001\u0000\u0000\u0000\u050a\u04e7\u0001\u0000"
                    + "\u0000\u0000\u050a\u0505\u0001\u0000\u0000\u0000\u050bu\u0001\u0000\u0000"
                    + "\u0000\u050c\u053a\u0005&\u0000\u0000\u050d\u053a\u0005\u0017\u0000\u0000"
                    + "\u050e\u053a\u0005\u0018\u0000\u0000\u050f\u053a\u0005\u0019\u0000\u0000"
                    + "\u0510\u053a\u0005\u001a\u0000\u0000\u0511\u053a\u0005\u001b\u0000\u0000"
                    + "\u0512\u053a\u0005D\u0000\u0000\u0513\u053a\u0005E\u0000\u0000\u0514\u053a"
                    + "\u0005H\u0000\u0000\u0515\u053a\u0005I\u0000\u0000\u0516\u0518\u0005["
                    + "\u0000\u0000\u0517\u0519\u0005\u00d7\u0000\u0000\u0518\u0517\u0001\u0000"
                    + "\u0000\u0000\u0518\u0519\u0001\u0000\u0000\u0000\u0519\u053a\u0001\u0000"
                    + "\u0000\u0000\u051a\u053a\u0005r\u0000\u0000\u051b\u053a\u0005\u0090\u0000"
                    + "\u0000\u051c\u053a\u0005\u0091\u0000\u0000\u051d\u053a\u0005\u0092\u0000"
                    + "\u0000\u051e\u053a\u0005\u0093\u0000\u0000\u051f\u053a\u0005\u0094\u0000"
                    + "\u0000\u0520\u053a\u0005\u00b9\u0000\u0000\u0521\u053a\u0005\u00bb\u0000"
                    + "\u0000\u0522\u053a\u0005\u00c5\u0000\u0000\u0523\u053a\u0005\u00c4\u0000"
                    + "\u0000\u0524\u053a\u0005\u00d6\u0000\u0000\u0525\u053a\u0005\u00e2\u0000"
                    + "\u0000\u0526\u0527\u0005\u00e9\u0000\u0000\u0527\u053a\u0005\u0134\u0000"
                    + "\u0000\u0528\u053a\u0005\u0107\u0000\u0000\u0529\u053a\u0005\u0106\u0000"
                    + "\u0000\u052a\u053a\u0005\u0108\u0000\u0000\u052b\u053a\u0005\u010a\u0000"
                    + "\u0000\u052c\u053a\u0005\u0109\u0000\u0000\u052d\u053a\u0005\u0115\u0000"
                    + "\u0000\u052e\u053a\u0005\u0119\u0000\u0000\u052f\u053a\u0005\u0120\u0000"
                    + "\u0000\u0530\u053a\u0005\u0121\u0000\u0000\u0531\u053a\u0005\u0132\u0000"
                    + "\u0000\u0532\u053a\u0005\u0133\u0000\u0000\u0533\u053a\u0005\u013d\u0000"
                    + "\u0000\u0534\u0537\u0003\u01b4\u00da\u0000\u0535\u0536\u0005\u0003\u0000"
                    + "\u0000\u0536\u0538\u0007\u000f\u0000\u0000\u0537\u0535\u0001\u0000\u0000"
                    + "\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538\u053a\u0001\u0000\u0000"
                    + "\u0000\u0539\u050c\u0001\u0000\u0000\u0000\u0539\u050d\u0001\u0000\u0000"
                    + "\u0000\u0539\u050e\u0001\u0000\u0000\u0000\u0539\u050f\u0001\u0000\u0000"
                    + "\u0000\u0539\u0510\u0001\u0000\u0000\u0000\u0539\u0511\u0001\u0000\u0000"
                    + "\u0000\u0539\u0512\u0001\u0000\u0000\u0000\u0539\u0513\u0001\u0000\u0000"
                    + "\u0000\u0539\u0514\u0001\u0000\u0000\u0000\u0539\u0515\u0001\u0000\u0000"
                    + "\u0000\u0539\u0516\u0001\u0000\u0000\u0000\u0539\u051a\u0001\u0000\u0000"
                    + "\u0000\u0539\u051b\u0001\u0000\u0000\u0000\u0539\u051c\u0001\u0000\u0000"
                    + "\u0000\u0539\u051d\u0001\u0000\u0000\u0000\u0539\u051e\u0001\u0000\u0000"
                    + "\u0000\u0539\u051f\u0001\u0000\u0000\u0000\u0539\u0520\u0001\u0000\u0000"
                    + "\u0000\u0539\u0521\u0001\u0000\u0000\u0000\u0539\u0522\u0001\u0000\u0000"
                    + "\u0000\u0539\u0523\u0001\u0000\u0000\u0000\u0539\u0524\u0001\u0000\u0000"
                    + "\u0000\u0539\u0525\u0001\u0000\u0000\u0000\u0539\u0526\u0001\u0000\u0000"
                    + "\u0000\u0539\u0528\u0001\u0000\u0000\u0000\u0539\u0529\u0001\u0000\u0000"
                    + "\u0000\u0539\u052a\u0001\u0000\u0000\u0000\u0539\u052b\u0001\u0000\u0000"
                    + "\u0000\u0539\u052c\u0001\u0000\u0000\u0000\u0539\u052d\u0001\u0000\u0000"
                    + "\u0000\u0539\u052e\u0001\u0000\u0000\u0000\u0539\u052f\u0001\u0000\u0000"
                    + "\u0000\u0539\u0530\u0001\u0000\u0000\u0000\u0539\u0531\u0001\u0000\u0000"
                    + "\u0000\u0539\u0532\u0001\u0000\u0000\u0000\u0539\u0533\u0001\u0000\u0000"
                    + "\u0000\u0539\u0534\u0001\u0000\u0000\u0000\u053aw\u0001\u0000\u0000\u0000"
                    + "\u053b\u053c\u0005\u0167\u0000\u0000\u053c\u053e\u0007\u0010\u0000\u0000"
                    + "\u053d\u053f\u0007\u0011\u0000\u0000\u053e\u053d\u0001\u0000\u0000\u0000"
                    + "\u053e\u053f\u0001\u0000\u0000\u0000\u053f\u0542\u0001\u0000\u0000\u0000"
                    + "\u0540\u0541\u0005\u0159\u0000\u0000\u0541\u0543\u0005\u0171\u0000\u0000"
                    + "\u0542\u0540\u0001\u0000\u0000\u0000\u0542\u0543\u0001\u0000\u0000\u0000"
                    + "\u0543\u0544\u0001\u0000\u0000\u0000\u0544\u0545\u0005\u016a\u0000\u0000"
                    + "\u0545y\u0001\u0000\u0000\u0000\u0546\u0548\u0005\u00c1\u0000\u0000\u0547"
                    + "\u0546\u0001\u0000\u0000\u0000\u0547\u0548\u0001\u0000\u0000\u0000\u0548"
                    + "\u0549\u0001\u0000\u0000\u0000\u0549\u0552\u0005\u00c3\u0000\u0000\u054a"
                    + "\u054b\u0005\'\u0000\u0000\u054b\u054c\u0005\u0100\u0000\u0000\u054c\u0552"
                    + "\u0003\u01b4\u00da\u0000\u054d\u054f\u0005\u00c1\u0000\u0000\u054e\u054d"
                    + "\u0001\u0000\u0000\u0000\u054e\u054f\u0001\u0000\u0000\u0000\u054f\u0550"
                    + "\u0001\u0000\u0000\u0000\u0550\u0552\u0007\u0012\u0000\u0000\u0551\u0547"
                    + "\u0001\u0000\u0000\u0000\u0551\u054a\u0001\u0000\u0000\u0000\u0551\u054e"
                    + "\u0001\u0000\u0000\u0000\u0552{\u0001\u0000\u0000\u0000\u0553\u0555\u0005"
                    + "\u0158\u0000\u0000\u0554\u0553\u0001\u0000\u0000\u0000\u0554\u0555\u0001"
                    + "\u0000\u0000\u0000\u0555\u0556\u0001\u0000\u0000\u0000\u0556\u0557\u0005"
                    + "\u015d\u0000\u0000\u0557\u0560\u0003\u017c\u00be\u0000\u0558\u055a\u0005"
                    + "\u0139\u0000\u0000\u0559\u0558\u0001\u0000\u0000\u0000\u0559\u055a\u0001"
                    + "\u0000\u0000\u0000\u055a\u055b\u0001\u0000\u0000\u0000\u055b\u055d\u0005"
                    + "K\u0000\u0000\u055c\u055e\u0003\u017c\u00be\u0000\u055d\u055c\u0001\u0000"
                    + "\u0000\u0000\u055d\u055e\u0001\u0000\u0000\u0000\u055e\u0560\u0001\u0000"
                    + "\u0000\u0000\u055f\u0554\u0001\u0000\u0000\u0000\u055f\u0559\u0001\u0000"
                    + "\u0000\u0000\u0560}\u0001\u0000\u0000\u0000\u0561\u0562\u0005;\u0000\u0000"
                    + "\u0562\u0566\u0007\u0013\u0000\u0000\u0563\u0564\u0005\u0086\u0000\u0000"
                    + "\u0564\u0565\u0005\u00c1\u0000\u0000\u0565\u0567\u0005j\u0000\u0000\u0566"
                    + "\u0563\u0001\u0000\u0000\u0000\u0566\u0567\u0001\u0000\u0000\u0000\u0567"
                    + "\u0568\u0001\u0000\u0000\u0000\u0568\u056c\u0003\u017c\u00be\u0000\u0569"
                    + "\u056b\u0003\u0080@\u0000\u056a\u0569\u0001\u0000\u0000\u0000\u056b\u056e"
                    + "\u0001\u0000\u0000\u0000\u056c\u056a\u0001\u0000\u0000\u0000\u056c\u056d"
                    + "\u0001\u0000\u0000\u0000\u056d\u007f\u0001\u0000\u0000\u0000\u056e\u056c"
                    + "\u0001\u0000\u0000\u0000\u056f\u0570\u00050\u0000\u0000\u0570\u0574\u0003"
                    + "\u017c\u00be\u0000\u0571\u0572\u0005\u00a7\u0000\u0000\u0572\u0574\u0003"
                    + "\u017c\u00be\u0000\u0573\u056f\u0001\u0000\u0000\u0000\u0573\u0571\u0001"
                    + "\u0000\u0000\u0000\u0574\u0081\u0001\u0000\u0000\u0000\u0575\u057d\u0005"
                    + "\n\u0000\u0000\u0576\u0579\u0005;\u0000\u0000\u0577\u0578\u0005\u00cb"
                    + "\u0000\u0000\u0578\u057a\u0005\u00e5\u0000\u0000\u0579\u0577\u0001\u0000"
                    + "\u0000\u0000\u0579\u057a\u0001\u0000\u0000\u0000\u057a\u057d\u0001\u0000"
                    + "\u0000\u0000\u057b\u057d\u0005\u00e5\u0000\u0000\u057c\u0575\u0001\u0000"
                    + "\u0000\u0000\u057c\u0576\u0001\u0000\u0000\u0000\u057c\u057b\u0001\u0000"
                    + "\u0000\u0000\u057c\u057d\u0001\u0000\u0000\u0000\u057d\u057e\u0001\u0000"
                    + "\u0000\u0000\u057e\u057f\u0005y\u0000\u0000\u057f\u0581\u0003\u01b4\u00da"
                    + "\u0000\u0580\u0582\u0003\u0094J\u0000\u0581\u0580\u0001\u0000\u0000\u0000"
                    + "\u0581\u0582\u0001\u0000\u0000\u0000\u0582\u0583\u0001\u0000\u0000\u0000"
                    + "\u0583\u0585\u0003\u0084B\u0000\u0584\u0586\u0007\u0014\u0000\u0000\u0585"
                    + "\u0584\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000\u0000\u0586"
                    + "\u0588\u0001\u0000\u0000\u0000\u0587\u0589\u00030\u0018\u0000\u0588\u0587"
                    + "\u0001\u0000\u0000\u0000\u0588\u0589\u0001\u0000\u0000\u0000\u0589\u058a"
                    + "\u0001\u0000\u0000\u0000\u058a\u058b\u0003\u0006\u0003\u0000\u058b\u0083"
                    + "\u0001\u0000\u0000\u0000\u058c\u058d\u0007\u0015\u0000\u0000\u058d\u058f"
                    + "\u0003v;\u0000\u058e\u0590\u0003x<\u0000\u058f\u058e\u0001\u0000\u0000"
                    + "\u0000\u058f\u0590\u0001\u0000\u0000\u0000\u0590\u0085\u0001\u0000\u0000"
                    + "\u0000\u0591\u0599\u0005\n\u0000\u0000\u0592\u0595\u0005;\u0000\u0000"
                    + "\u0593\u0594\u0005\u00cb\u0000\u0000\u0594\u0596\u0005\u00e5\u0000\u0000"
                    + "\u0595\u0593\u0001\u0000\u0000\u0000\u0595\u0596\u0001\u0000\u0000\u0000"
                    + "\u0596\u0599\u0001\u0000\u0000\u0000\u0597\u0599\u0005\u00e5\u0000\u0000"
                    + "\u0598\u0591\u0001\u0000\u0000\u0000\u0598\u0592\u0001\u0000\u0000\u0000"
                    + "\u0598\u0597\u0001\u0000\u0000\u0000\u0598\u0599\u0001\u0000\u0000\u0000"
                    + "\u0599\u059a\u0001\u0000\u0000\u0000\u059a\u059b\u0005\u00d2\u0000\u0000"
                    + "\u059b\u059c\u0003\u01b4\u00da\u0000\u059c\u059d\u0007\u0014\u0000\u0000"
                    + "\u059d\u059e\u0003\u0088D\u0000\u059e\u05a2\u0005b\u0000\u0000\u059f\u05a0"
                    + "\u0003\u01b4\u00da\u0000\u05a0\u05a1\u0005\u016c\u0000\u0000\u05a1\u05a3"
                    + "\u0001\u0000\u0000\u0000\u05a2\u059f\u0001\u0000\u0000\u0000\u05a2\u05a3"
                    + "\u0001\u0000\u0000\u0000\u05a3\u0087\u0001\u0000\u0000\u0000\u05a4\u05a5"
                    + "\u0003\u008aE\u0000\u05a5\u05ab\u0005\u016c\u0000\u0000\u05a6\u05a7\u0003"
                    + "\u008aE\u0000\u05a7\u05a8\u0005\u016c\u0000\u0000\u05a8\u05aa\u0001\u0000"
                    + "\u0000\u0000\u05a9\u05a6\u0001\u0000\u0000\u0000\u05aa\u05ad\u0001\u0000"
                    + "\u0000\u0000\u05ab\u05a9\u0001\u0000\u0000\u0000\u05ab\u05ac\u0001\u0000"
                    + "\u0000\u0000\u05ac\u0089\u0001\u0000\u0000\u0000\u05ad\u05ab\u0001\u0000"
                    + "\u0000\u0000\u05ae\u05bc\u00032\u0019\u0000\u05af\u05b0\u0005y\u0000\u0000"
                    + "\u05b0\u05b2\u0003\u01b4\u00da\u0000\u05b1\u05b3\u0003\u0094J\u0000\u05b2"
                    + "\u05b1\u0001\u0000\u0000\u0000\u05b2\u05b3\u0001\u0000\u0000\u0000\u05b3"
                    + "\u05b4\u0001\u0000\u0000\u0000\u05b4\u05b5\u0003\u0084B\u0000\u05b5\u05bc"
                    + "\u0001\u0000\u0000\u0000\u05b6\u05b7\u0007\u0016\u0000\u0000\u05b7\u05b9"
                    + "\u0003\u01b4\u00da\u0000\u05b8\u05ba\u0003\u0094J\u0000\u05b9\u05b8\u0001"
                    + "\u0000\u0000\u0000\u05b9\u05ba\u0001\u0000\u0000\u0000\u05ba\u05bc\u0001"
                    + "\u0000\u0000\u0000\u05bb\u05ae\u0001\u0000\u0000\u0000\u05bb\u05af\u0001"
                    + "\u0000\u0000\u0000\u05bb\u05b6\u0001\u0000\u0000\u0000\u05bc\u008b\u0001"
                    + "\u0000\u0000\u0000\u05bd\u05c5\u0005\n\u0000\u0000\u05be\u05c1\u0005;"
                    + "\u0000\u0000\u05bf\u05c0\u0005\u00cb\u0000\u0000\u05c0\u05c2\u0005\u00e5"
                    + "\u0000\u0000\u05c1\u05bf\u0001\u0000\u0000\u0000\u05c1\u05c2\u0001\u0000"
                    + "\u0000\u0000\u05c2\u05c5\u0001\u0000\u0000\u0000\u05c3\u05c5\u0005\u00e5"
                    + "\u0000\u0000\u05c4\u05bd\u0001\u0000\u0000\u0000\u05c4\u05be\u0001\u0000"
                    + "\u0000\u0000\u05c4\u05c3\u0001\u0000\u0000\u0000\u05c4\u05c5\u0001\u0000"
                    + "\u0000\u0000\u05c5\u05c6\u0001\u0000\u0000\u0000\u05c6\u05c7\u0005\u00d2"
                    + "\u0000\u0000\u05c7\u05c8\u0005\u001c\u0000\u0000\u05c8\u05c9\u0003\u01b4"
                    + "\u00da\u0000\u05c9\u05ca\u0007\u0014\u0000\u0000\u05ca\u05cb\u0003\u008e"
                    + "G\u0000\u05cb\u05cf\u0005b\u0000\u0000\u05cc\u05cd\u0003\u01b4\u00da\u0000"
                    + "\u05cd\u05ce\u0005\u016c\u0000\u0000\u05ce\u05d0\u0001\u0000\u0000\u0000"
                    + "\u05cf\u05cc\u0001\u0000\u0000\u0000\u05cf\u05d0\u0001\u0000\u0000\u0000"
                    + "\u05d0\u008d\u0001\u0000\u0000\u0000\u05d1\u05d2\u0003\u0090H\u0000\u05d2"
                    + "\u05d8\u0005\u016c\u0000\u0000\u05d3\u05d4\u0003\u0090H\u0000\u05d4\u05d5"
                    + "\u0005\u016c\u0000\u0000\u05d5\u05d7\u0001\u0000\u0000\u0000\u05d6\u05d3"
                    + "\u0001\u0000\u0000\u0000\u05d7\u05da\u0001\u0000\u0000\u0000\u05d8\u05d6"
                    + "\u0001\u0000\u0000\u0000\u05d8\u05d9\u0001\u0000\u0000\u0000\u05d9\u008f"
                    + "\u0001\u0000\u0000\u0000\u05da\u05d8\u0001\u0000\u0000\u0000\u05db\u05df"
                    + "\u00032\u0019\u0000\u05dc\u05df\u0003\u0082A\u0000\u05dd\u05df\u0003\u0092"
                    + "I\u0000\u05de\u05db\u0001\u0000\u0000\u0000\u05de\u05dc\u0001\u0000\u0000"
                    + "\u0000\u05de\u05dd\u0001\u0000\u0000\u0000\u05df\u0091\u0001\u0000\u0000"
                    + "\u0000\u05e0\u05e8\u0005\n\u0000\u0000\u05e1\u05e4\u0005;\u0000\u0000"
                    + "\u05e2\u05e3\u0005\u00cb\u0000\u0000\u05e3\u05e5\u0005\u00e5\u0000\u0000"
                    + "\u05e4\u05e2\u0001\u0000\u0000\u0000\u05e4\u05e5\u0001\u0000\u0000\u0000"
                    + "\u05e5\u05e8\u0001\u0000\u0000\u0000\u05e6\u05e8\u0005\u00e5\u0000\u0000"
                    + "\u05e7\u05e0\u0001\u0000\u0000\u0000\u05e7\u05e1\u0001\u0000\u0000\u0000"
                    + "\u05e7\u05e6\u0001\u0000\u0000\u0000\u05e7\u05e8\u0001\u0000\u0000\u0000"
                    + "\u05e8\u05e9\u0001\u0000\u0000\u0000\u05e9\u05ea\u0007\u0016\u0000\u0000"
                    + "\u05ea\u05ec\u0003\u01b4\u00da\u0000\u05eb\u05ed\u0003\u0094J\u0000\u05ec"
                    + "\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001\u0000\u0000\u0000\u05ed"
                    + "\u05ef\u0001\u0000\u0000\u0000\u05ee\u05f0\u0003\u0098L\u0000\u05ef\u05ee"
                    + "\u0001\u0000\u0000\u0000\u05ef\u05f0\u0001\u0000\u0000\u0000\u05f0\u05f2"
                    + "\u0001\u0000\u0000\u0000\u05f1\u05f3\u0007\u0014\u0000\u0000\u05f2\u05f1"
                    + "\u0001\u0000\u0000\u0000\u05f2\u05f3\u0001\u0000\u0000\u0000\u05f3\u05f5"
                    + "\u0001\u0000\u0000\u0000\u05f4\u05f6\u00030\u0018\u0000\u05f5\u05f4\u0001"
                    + "\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000\u05f6\u05f8\u0001"
                    + "\u0000\u0000\u0000\u05f7\u05f9\u0003\u0112\u0089\u0000\u05f8\u05f7\u0001"
                    + "\u0000\u0000\u0000\u05f8\u05f9\u0001\u0000\u0000\u0000\u05f9\u05fa\u0001"
                    + "\u0000\u0000\u0000\u05fa\u05fe\u0003\n\u0005\u0000\u05fb\u05fc\u0003\u01b4"
                    + "\u00da\u0000\u05fc\u05fd\u0005\u016c\u0000\u0000\u05fd\u05ff\u0001\u0000"
                    + "\u0000\u0000\u05fe\u05fb\u0001\u0000\u0000\u0000\u05fe\u05ff\u0001\u0000"
                    + "\u0000\u0000\u05ff\u0093\u0001\u0000\u0000\u0000\u0600\u0601\u0005\u0167"
                    + "\u0000\u0000\u0601\u0617\u0005\u016a\u0000\u0000\u0602\u0603\u0005\u0167"
                    + "\u0000\u0000\u0603\u0608\u0003\u0096K\u0000\u0604\u0605\u0005\u0159\u0000"
                    + "\u0000\u0605\u0607\u0003\u0096K\u0000\u0606\u0604\u0001\u0000\u0000\u0000"
                    + "\u0607\u060a\u0001\u0000\u0000\u0000\u0608\u0606\u0001\u0000\u0000\u0000"
                    + "\u0608\u0609\u0001\u0000\u0000\u0000\u0609\u060b\u0001\u0000\u0000\u0000"
                    + "\u060a\u0608\u0001\u0000\u0000\u0000\u060b\u060c\u0005\u016a\u0000\u0000"
                    + "\u060c\u0617\u0001\u0000\u0000\u0000\u060d\u060e\u0004J\u0002\u0000\u060e"
                    + "\u0613\u0003\u0096K\u0000\u060f\u0610\u0005\u0159\u0000\u0000\u0610\u0612"
                    + "\u0003\u0096K\u0000\u0611\u060f\u0001\u0000\u0000\u0000\u0612\u0615\u0001"
                    + "\u0000\u0000\u0000\u0613\u0611\u0001\u0000\u0000\u0000\u0613\u0614\u0001"
                    + "\u0000\u0000\u0000\u0614\u0617\u0001\u0000\u0000\u0000\u0615\u0613\u0001"
                    + "\u0000\u0000\u0000\u0616\u0600\u0001\u0000\u0000\u0000\u0616\u0602\u0001"
                    + "\u0000\u0000\u0000\u0616\u060d\u0001\u0000\u0000\u0000\u0617\u0095\u0001"
                    + "\u0000\u0000\u0000\u0618\u061e\u0005\u0089\u0000\u0000\u0619\u061e\u0005"
                    + "\u00cd\u0000\u0000\u061a\u061e\u0005\u008e\u0000\u0000\u061b\u061c\u0005"
                    + "\u0089\u0000\u0000\u061c\u061e\u0005\u00cd\u0000\u0000\u061d\u0618\u0001"
                    + "\u0000\u0000\u0000\u061d\u0619\u0001\u0000\u0000\u0000\u061d\u061a\u0001"
                    + "\u0000\u0000\u0000\u061d\u061b\u0001\u0000\u0000\u0000\u061d\u061e\u0001"
                    + "\u0000\u0000\u0000\u061e\u061f\u0001\u0000\u0000\u0000\u061f\u0620\u0003"
                    + "\u01b4\u00da\u0000\u0620\u0622\u0003v;\u0000\u0621\u0623\u0003x<\u0000"
                    + "\u0622\u0621\u0001\u0000\u0000\u0000\u0622\u0623\u0001\u0000\u0000\u0000"
                    + "\u0623\u0627\u0001\u0000\u0000\u0000\u0624\u0626\u0003z=\u0000\u0625\u0624"
                    + "\u0001\u0000\u0000\u0000\u0626\u0629\u0001\u0000\u0000\u0000\u0627\u0625"
                    + "\u0001\u0000\u0000\u0000\u0627\u0628\u0001\u0000\u0000\u0000\u0628\u062b"
                    + "\u0001\u0000\u0000\u0000\u0629\u0627\u0001\u0000\u0000\u0000\u062a\u062c"
                    + "\u0003|>\u0000\u062b\u062a\u0001\u0000\u0000\u0000\u062b\u062c\u0001\u0000"
                    + "\u0000\u0000\u062c\u0643\u0001\u0000\u0000\u0000\u062d\u0633\u0003\u01b4"
                    + "\u00da\u0000\u062e\u0634\u0005\u0089\u0000\u0000\u062f\u0634\u0005\u00cd"
                    + "\u0000\u0000\u0630\u0634\u0005\u008e\u0000\u0000\u0631\u0632\u0005\u0089"
                    + "\u0000\u0000\u0632\u0634\u0005\u00cd\u0000\u0000\u0633\u062e\u0001\u0000"
                    + "\u0000\u0000\u0633\u062f\u0001\u0000\u0000\u0000\u0633\u0630\u0001\u0000"
                    + "\u0000\u0000\u0633\u0631\u0001\u0000\u0000\u0000\u0633\u0634\u0001\u0000"
                    + "\u0000\u0000\u0634\u0635\u0001\u0000\u0000\u0000\u0635\u0637\u0003v;\u0000"
                    + "\u0636\u0638\u0003x<\u0000\u0637\u0636\u0001\u0000\u0000\u0000\u0637\u0638"
                    + "\u0001\u0000\u0000\u0000\u0638\u063c\u0001\u0000\u0000\u0000\u0639\u063b"
                    + "\u0003z=\u0000\u063a\u0639\u0001\u0000\u0000\u0000\u063b\u063e\u0001\u0000"
                    + "\u0000\u0000\u063c\u063a\u0001\u0000\u0000\u0000\u063c\u063d\u0001\u0000"
                    + "\u0000\u0000\u063d\u0640\u0001\u0000\u0000\u0000\u063e\u063c\u0001\u0000"
                    + "\u0000\u0000\u063f\u0641\u0003|>\u0000\u0640\u063f\u0001\u0000\u0000\u0000"
                    + "\u0640\u0641\u0001\u0000\u0000\u0000\u0641\u0643\u0001\u0000\u0000\u0000"
                    + "\u0642\u061d\u0001\u0000\u0000\u0000\u0642\u062d\u0001\u0000\u0000\u0000"
                    + "\u0643\u0097\u0001\u0000\u0000\u0000\u0644\u0646\u0003\u009aM\u0000\u0645"
                    + "\u0644\u0001\u0000\u0000\u0000\u0646\u0647\u0001\u0000\u0000\u0000\u0647"
                    + "\u0645\u0001\u0000\u0000\u0000\u0647\u0648\u0001\u0000\u0000\u0000\u0648"
                    + "\u0099\u0001\u0000\u0000\u0000\u0649\u064a\u0005\u00a0\u0000\u0000\u064a"
                    + "\u0655\u0005\u010b\u0000\u0000\u064b\u064c\u0005\u010b\u0000\u0000\u064c"
                    + "\u064d\u0005\u00fc\u0000\u0000\u064d\u0655\u0007\u0017\u0000\u0000\u064e"
                    + "\u0650\u0005]\u0000\u0000\u064f\u064e\u0001\u0000\u0000\u0000\u064f\u0650"
                    + "\u0001\u0000\u0000\u0000\u0650\u0651\u0001\u0000\u0000\u0000\u0651\u0652"
                    + "\u0005\u00e8\u0000\u0000\u0652\u0653\u0005\u0103\u0000\u0000\u0653\u0655"
                    + "\u0005\u0171\u0000\u0000\u0654\u0649\u0001\u0000\u0000\u0000\u0654\u064b"
                    + "\u0001\u0000\u0000\u0000\u0654\u064f\u0001\u0000\u0000\u0000\u0655\u009b"
                    + "\u0001\u0000\u0000\u0000\u0656\u0657\u0005\\\u0000\u0000\u0657\u065a\u0005"
                    + "\u011a\u0000\u0000\u0658\u0659\u0005\u0086\u0000\u0000\u0659\u065b\u0005"
                    + "j\u0000\u0000\u065a\u0658\u0001\u0000\u0000\u0000\u065a\u065b\u0001\u0000"
                    + "\u0000\u0000\u065b\u065c\u0001\u0000\u0000\u0000\u065c\u0665\u0003\u0146"
                    + "\u00a3\u0000\u065d\u065e\u0005\\\u0000\u0000\u065e\u0661\u0007\u0013\u0000"
                    + "\u0000\u065f\u0660\u0005\u0086\u0000\u0000\u0660\u0662\u0005j\u0000\u0000"
                    + "\u0661\u065f\u0001\u0000\u0000\u0000\u0661\u0662\u0001\u0000\u0000\u0000"
                    + "\u0662\u0663\u0001\u0000\u0000\u0000\u0663\u0665\u0003\u017c\u00be\u0000"
                    + "\u0664\u0656\u0001\u0000\u0000\u0000\u0664\u065d\u0001\u0000\u0000\u0000"
                    + "\u0665\u009d\u0001\u0000\u0000\u0000\u0666\u0667\u0005b\u0000\u0000\u0667"
                    + "\u0668\u0005\u0125\u0000\u0000\u0668\u009f\u0001\u0000\u0000\u0000\u0669"
                    + "\u066b\u0007\u0018\u0000\u0000\u066a\u066c\u0005\u0088\u0000\u0000\u066b"
                    + "\u066a\u0001\u0000\u0000\u0000\u066b\u066c\u0001\u0000\u0000\u0000\u066c"
                    + "\u066d\u0001\u0000\u0000\u0000\u066d\u0673\u0003\u017c\u00be\u0000\u066e"
                    + "\u066f\u0005\u0167\u0000\u0000\u066f\u0670\u0003\u019c\u00ce\u0000\u0670"
                    + "\u0671\u0005\u016a\u0000\u0000\u0671\u0674\u0001\u0000\u0000\u0000\u0672"
                    + "\u0674\u0003\u019c\u00ce\u0000\u0673\u066e\u0001\u0000\u0000\u0000\u0673"
                    + "\u0672\u0001\u0000\u0000\u0000\u0673\u0674\u0001\u0000\u0000\u0000\u0674"
                    + "\u067e\u0001\u0000\u0000\u0000\u0675\u0676\u0005\u0097\u0000\u0000\u0676"
                    + "\u067b\u0005\u016e\u0000\u0000\u0677\u0678\u0005\u0159\u0000\u0000\u0678"
                    + "\u067a\u0005\u016e\u0000\u0000\u0679\u0677\u0001\u0000\u0000\u0000\u067a"
                    + "\u067d\u0001\u0000\u0000\u0000\u067b\u0679\u0001\u0000\u0000\u0000\u067b"
                    + "\u067c\u0001\u0000\u0000\u0000\u067c\u067f\u0001\u0000\u0000\u0000\u067d"
                    + "\u067b\u0001\u0000\u0000\u0000\u067e\u0675\u0001\u0000\u0000\u0000\u067e"
                    + "\u067f\u0001\u0000\u0000\u0000\u067f\u0681\u0001\u0000\u0000\u0000\u0680"
                    + "\u0682\u0003\u0114\u008a\u0000\u0681\u0680\u0001\u0000\u0000\u0000\u0681"
                    + "\u0682\u0001\u0000\u0000\u0000\u0682\u00a1\u0001\u0000\u0000\u0000\u0683"
                    + "\u0687\u0003\u00a4R\u0000\u0684\u0687\u0003\u00a6S\u0000\u0685\u0687\u0003"
                    + "\u00a8T\u0000\u0686\u0683\u0001\u0000\u0000\u0000\u0686\u0684\u0001\u0000"
                    + "\u0000\u0000\u0686\u0685\u0001\u0000\u0000\u0000\u0687\u00a3\u0001\u0000"
                    + "\u0000\u0000\u0688\u0689\u0005\u0086\u0000\u0000\u0689\u068a\u0003\u016c"
                    + "\u00b6\u0000\u068a\u068b\u0005\u011f\u0000\u0000\u068b\u068f\u0003\u0002"
                    + "\u0001\u0000\u068c\u068e\u0003\u00aaU\u0000\u068d\u068c\u0001\u0000\u0000"
                    + "\u0000\u068e\u0691\u0001\u0000\u0000\u0000\u068f\u068d\u0001\u0000\u0000"
                    + "\u0000\u068f\u0690\u0001\u0000\u0000\u0000\u0690\u0693\u0001\u0000\u0000"
                    + "\u0000\u0691\u068f\u0001\u0000\u0000\u0000\u0692\u0694\u0003\u00acV\u0000"
                    + "\u0693\u0692\u0001\u0000\u0000\u0000\u0693\u0694\u0001\u0000\u0000\u0000"
                    + "\u0694\u0695\u0001\u0000\u0000\u0000\u0695\u0696\u0005b\u0000\u0000\u0696"
                    + "\u0697\u0005\u0086\u0000\u0000\u0697\u00a5\u0001\u0000\u0000\u0000\u0698"
                    + "\u0699\u0005\u0086\u0000\u0000\u0699\u069a\u0003\u016c\u00b6\u0000\u069a"
                    + "\u069d\u0003\u0006\u0003\u0000\u069b\u069c\u0005^\u0000\u0000\u069c\u069e"
                    + "\u0003\u0006\u0003\u0000\u069d\u069b\u0001\u0000\u0000\u0000\u069d\u069e"
                    + "\u0001\u0000\u0000\u0000\u069e\u00a7\u0001\u0000\u0000\u0000\u069f\u06a0"
                    + "\u0005\u0004\u0000\u0000\u06a0\u06a1\u0005\u0086\u0000\u0000\u06a1\u06a2"
                    + "\u0003\u016c\u00b6\u0000\u06a2\u06a3\u0005\u011f\u0000\u0000\u06a3\u06a4"
                    + "\u0003\u0006\u0003\u0000\u06a4\u00a9\u0001\u0000\u0000\u0000\u06a5\u06a6"
                    + "\u0007\u0019\u0000\u0000\u06a6\u06a7\u0003\u016c\u00b6\u0000\u06a7\u06a8"
                    + "\u0005\u011f\u0000\u0000\u06a8\u06a9\u0003\u0002\u0001\u0000\u06a9\u00ab"
                    + "\u0001\u0000\u0000\u0000\u06aa\u06ab\u0005^\u0000\u0000\u06ab\u06ac\u0003"
                    + "\u0002\u0001\u0000\u06ac\u00ad\u0001\u0000\u0000\u0000\u06ad\u06b0\u0005"
                    + "\u008a\u0000\u0000\u06ae\u06b1\u0003\u01ae\u00d7\u0000\u06af\u06b1\u0003"
                    + "\u017c\u00be\u0000\u06b0\u06ae\u0001\u0000\u0000\u0000\u06b0\u06af\u0001"
                    + "\u0000\u0000\u0000\u06b1\u00af\u0001\u0000\u0000\u0000\u06b2\u06b9\u0005"
                    + "\u008f\u0000\u0000\u06b3\u06b4\u0005\u00d0\u0000\u0000\u06b4\u06ba\u0005"
                    + "\u011a\u0000\u0000\u06b5\u06b7\u0005\u0097\u0000\u0000\u06b6\u06b8\u0005"
                    + "\u011a\u0000\u0000\u06b7\u06b6\u0001\u0000\u0000\u0000\u06b7\u06b8\u0001"
                    + "\u0000\u0000\u0000\u06b8\u06ba\u0001\u0000\u0000\u0000\u06b9\u06b3\u0001"
                    + "\u0000\u0000\u0000\u06b9\u06b5\u0001\u0000\u0000\u0000\u06ba\u06bb\u0001"
                    + "\u0000\u0000\u0000\u06bb\u06bd\u0003\u0146\u00a3\u0000\u06bc\u06be\u0003"
                    + "\u00b2Y\u0000\u06bd\u06bc\u0001\u0000\u0000\u0000\u06bd\u06be\u0001\u0000"
                    + "\u0000\u0000\u06be\u06c1\u0001\u0000\u0000\u0000\u06bf\u06c2\u0003\u0116"
                    + "\u008b\u0000\u06c0\u06c2\u0003\u00b4Z\u0000\u06c1\u06bf\u0001\u0000\u0000"
                    + "\u0000\u06c1\u06c0\u0001\u0000\u0000\u0000\u06c2\u00b1\u0001\u0000\u0000"
                    + "\u0000\u06c3\u06c4\u0005\u0167\u0000\u0000\u06c4\u06c9\u0003\u01b4\u00da"
                    + "\u0000\u06c5\u06c6\u0005\u0159\u0000\u0000\u06c6\u06c8\u0003\u01b4\u00da"
                    + "\u0000\u06c7\u06c5\u0001\u0000\u0000\u0000\u06c8\u06cb\u0001\u0000\u0000"
                    + "\u0000\u06c9\u06c7\u0001\u0000\u0000\u0000\u06c9\u06ca\u0001\u0000\u0000"
                    + "\u0000\u06ca\u06cc\u0001\u0000\u0000\u0000\u06cb\u06c9\u0001\u0000\u0000"
                    + "\u0000\u06cc\u06cd\u0005\u016a\u0000\u0000\u06cd\u00b3\u0001\u0000\u0000"
                    + "\u0000\u06ce\u06cf\u0005\u0130\u0000\u0000\u06cf\u06d4\u0003\u00b6[\u0000"
                    + "\u06d0\u06d1\u0005\u0159\u0000\u0000\u06d1\u06d3\u0003\u00b6[\u0000\u06d2"
                    + "\u06d0\u0001\u0000\u0000\u0000\u06d3\u06d6\u0001\u0000\u0000\u0000\u06d4"
                    + "\u06d2\u0001\u0000\u0000\u0000\u06d4\u06d5\u0001\u0000\u0000\u0000\u06d5"
                    + "\u00b5\u0001\u0000\u0000\u0000\u06d6\u06d4\u0001\u0000\u0000\u0000\u06d7"
                    + "\u06d8\u0005\u0167\u0000\u0000\u06d8\u06dd\u0003\u017c\u00be\u0000\u06d9"
                    + "\u06da\u0005\u0159\u0000\u0000\u06da\u06dc\u0003\u017c\u00be\u0000\u06db"
                    + "\u06d9\u0001\u0000\u0000\u0000\u06dc\u06df\u0001\u0000\u0000\u0000\u06dd"
                    + "\u06db\u0001\u0000\u0000\u0000\u06dd\u06de\u0001\u0000\u0000\u0000\u06de"
                    + "\u06e0\u0001\u0000\u0000\u0000\u06df\u06dd\u0001\u0000\u0000\u0000\u06e0"
                    + "\u06e1\u0005\u016a\u0000\u0000\u06e1\u00b7\u0001\u0000\u0000\u0000\u06e2"
                    + "\u06e3\u0005\u008f\u0000\u0000\u06e3\u06e5\u0005\u00d0\u0000\u0000\u06e4"
                    + "\u06e6\u0005\u00a6\u0000\u0000\u06e5\u06e4\u0001\u0000\u0000\u0000\u06e5"
                    + "\u06e6\u0001\u0000\u0000\u0000\u06e6\u06e7\u0001\u0000\u0000\u0000\u06e7"
                    + "\u06e8\u0005W\u0000\u0000\u06e8\u06e9\u0003\u01a2\u00d1\u0000\u06e9\u06ea"
                    + "\u0003\u01a0\u00d0\u0000\u06ea\u00b9\u0001\u0000\u0000\u0000\u06eb\u06ed"
                    + "\u0005k\u0000\u0000\u06ec\u06ee\u0005\u016e\u0000\u0000\u06ed\u06ec\u0001"
                    + "\u0000\u0000\u0000\u06ed\u06ee\u0001\u0000\u0000\u0000\u06ee\u06f1\u0001"
                    + "\u0000\u0000\u0000\u06ef\u06f0\u0005\u0136\u0000\u0000\u06f0\u06f2\u0003"
                    + "\u016c\u00b6\u0000\u06f1\u06ef\u0001\u0000\u0000\u0000\u06f1\u06f2\u0001"
                    + "\u0000\u0000\u0000\u06f2\u00bb\u0001\u0000\u0000\u0000\u06f3\u06f4\u0005"
                    + "z\u0000\u0000\u06f4\u06f5\u0005U\u0000\u0000\u06f5\u06f6\u0003\u00be_"
                    + "\u0000\u06f6\u00bd\u0001\u0000\u0000\u0000\u06f7\u06fa\u0003\u00c0`\u0000"
                    + "\u06f8\u06fa\u0003\u00c2a\u0000\u06f9\u06f7\u0001\u0000\u0000\u0000\u06f9"
                    + "\u06f8\u0001\u0000\u0000\u0000\u06fa\u00bf\u0001\u0000\u0000\u0000\u06fb"
                    + "\u06fc\u0005h\u0000\u0000\u06fc\u06fd\u0005\u0171\u0000\u0000\u06fd\u06fe"
                    + "\u0003\u01b4\u00da\u0000\u06fe\u06ff\u0005\u015d\u0000\u0000\u06ff\u0700"
                    + "\u0005\u00b4\u0000\u0000\u0700\u00c1\u0001\u0000\u0000\u0000\u0701\u0702"
                    + "\u0003\u01b4\u00da\u0000\u0702\u0703\u0005\u015d\u0000\u0000\u0703\u0704"
                    + "\u0005\u00f4\u0000\u0000\u0704\u00c3\u0001\u0000\u0000\u0000\u0705\u0706"
                    + "\u0005}\u0000\u0000\u0706\u070b\u0003\u00c6c\u0000\u0707\u0708\u0005\u0159"
                    + "\u0000\u0000\u0708\u070a\u0003\u00c6c\u0000\u0709\u0707\u0001\u0000\u0000"
                    + "\u0000\u070a\u070d\u0001\u0000\u0000\u0000\u070b\u0709\u0001\u0000\u0000"
                    + "\u0000\u070b\u070c\u0001\u0000\u0000\u0000\u070c\u070e\u0001\u0000\u0000"
                    + "\u0000\u070d\u070b\u0001\u0000\u0000\u0000\u070e\u070f\u0005\u0123\u0000"
                    + "\u0000\u070f\u0710\u0005\u00ef\u0000\u0000\u0710\u0711\u0003\u01b4\u00da"
                    + "\u0000\u0711\u00c5\u0001\u0000\u0000\u0000\u0712\u0713\u0005g\u0000\u0000"
                    + "\u0713\u0714\u0005\u00c8\u0000\u0000\u0714\u0715\u0005\u00dc\u0000\u0000"
                    + "\u0715\u0716\u0003\u01b4\u00da\u0000\u0716\u00c7\u0001\u0000\u0000\u0000"
                    + "\u0717\u0719\u0005\u00a1\u0000\u0000\u0718\u071a\u0005\u016e\u0000\u0000"
                    + "\u0719\u0718\u0001\u0000\u0000\u0000\u0719\u071a\u0001\u0000\u0000\u0000"
                    + "\u071a\u00c9\u0001\u0000\u0000\u0000\u071b\u071c\u0005\u00af\u0000\u0000"
                    + "\u071c\u071d\u0005\u00c6\u0000\u0000\u071d\u0720\u0003\u017c\u00be\u0000"
                    + "\u071e\u071f\u0005\u0123\u0000\u0000\u071f\u0721\u0003\u017c\u00be\u0000"
                    + "\u0720\u071e\u0001\u0000\u0000\u0000\u0720\u0721\u0001\u0000\u0000\u0000"
                    + "\u0721\u0724\u0001\u0000\u0000\u0000\u0722\u0723\u0005\u0011\u0000\u0000"
                    + "\u0723\u0725\u0003\u017c\u00be\u0000\u0724\u0722\u0001\u0000\u0000\u0000"
                    + "\u0724\u0725\u0001\u0000\u0000\u0000\u0725\u00cb\u0001\u0000\u0000\u0000"
                    + "\u0726\u0727\u0005\u00ca\u0000\u0000\u0727\u072d\u0005\u016e\u0000\u0000"
                    + "\u0728\u072b\u0005s\u0000\u0000\u0729\u072c\u0003\u0116\u008b\u0000\u072a"
                    + "\u072c\u0003\u017c\u00be\u0000\u072b\u0729\u0001\u0000\u0000\u0000\u072b"
                    + "\u072a\u0001\u0000\u0000\u0000\u072c\u072e\u0001\u0000\u0000\u0000\u072d"
                    + "\u0728\u0001\u0000\u0000\u0000\u072d\u072e\u0001\u0000\u0000\u0000\u072e"
                    + "\u00cd\u0001\u0000\u0000\u0000\u072f\u0731\u0005n\u0000\u0000\u0730\u0732"
                    + "\u0005w\u0000\u0000\u0731\u0730\u0001\u0000\u0000\u0000\u0731\u0732\u0001"
                    + "\u0000\u0000\u0000\u0732\u0733\u0001\u0000\u0000\u0000\u0733\u0734\u0005"
                    + "\u016e\u0000\u0000\u0734\u0735\u0005\u0097\u0000\u0000\u0735\u073a\u0005"
                    + "\u016e\u0000\u0000\u0736\u0737\u0005\u0159\u0000\u0000\u0737\u0739\u0005"
                    + "\u016e\u0000\u0000\u0738\u0736\u0001\u0000\u0000\u0000\u0739\u073c\u0001"
                    + "\u0000\u0000\u0000\u073a\u0738\u0001\u0000\u0000\u0000\u073a\u073b\u0001"
                    + "\u0000\u0000\u0000\u073b\u00cf\u0001\u0000\u0000\u0000\u073c\u073a\u0001"
                    + "\u0000\u0000\u0000\u073d\u073e\u0005-\u0000\u0000\u073e\u073f\u0007\u001a"
                    + "\u0000\u0000\u073f\u0740\u0005\u00c8\u0000\u0000\u0740\u0742\u0003\u0146"
                    + "\u00a3\u0000\u0741\u0743\u0003\u00d2i\u0000\u0742\u0741\u0001\u0000\u0000"
                    + "\u0000\u0742\u0743\u0001\u0000\u0000\u0000\u0743\u00d1\u0001\u0000\u0000"
                    + "\u0000\u0744\u0745\u0005/\u0000\u0000\u0745\u0746\u0005\u0167\u0000\u0000"
                    + "\u0746\u074b\u0003\u01b4\u00da\u0000\u0747\u0748\u0005\u0159\u0000\u0000"
                    + "\u0748\u074a\u0003\u01b4\u00da\u0000\u0749\u0747\u0001\u0000\u0000\u0000"
                    + "\u074a\u074d\u0001\u0000\u0000\u0000\u074b\u0749\u0001\u0000\u0000\u0000"
                    + "\u074b\u074c\u0001\u0000\u0000\u0000\u074c\u074e\u0001\u0000\u0000\u0000"
                    + "\u074d\u074b\u0001\u0000\u0000\u0000\u074e\u074f\u0005\u016a\u0000\u0000"
                    + "\u074f\u00d3\u0001\u0000\u0000\u0000\u0750\u0751\u0005*\u0000\u0000\u0751"
                    + "\u0752\u0005\u016e\u0000\u0000\u0752\u00d5\u0001\u0000\u0000\u0000\u0753"
                    + "\u0754\u0005,\u0000\u0000\u0754\u0755\u0007\u001b\u0000\u0000\u0755\u0756"
                    + "\u0003\u00d8l\u0000\u0756\u0757\u0005\u0159\u0000\u0000\u0757\u0758\u0003"
                    + "\u00d8l\u0000\u0758\u00d7\u0001\u0000\u0000\u0000\u0759\u075b\u0003\u0146"
                    + "\u00a3\u0000\u075a\u075c\u0003\u0148\u00a4\u0000\u075b\u075a\u0001\u0000"
                    + "\u0000\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u0762\u0001\u0000"
                    + "\u0000\u0000\u075d\u075e\u0005\u0167\u0000\u0000\u075e\u075f\u0003\u0116"
                    + "\u008b\u0000\u075f\u0760\u0005\u016a\u0000\u0000\u0760\u0762\u0001\u0000"
                    + "\u0000\u0000\u0761\u0759\u0001\u0000\u0000\u0000\u0761\u075d\u0001\u0000"
                    + "\u0000\u0000\u0762\u0765\u0001\u0000\u0000\u0000\u0763\u0764\u0005\u0011"
                    + "\u0000\u0000\u0764\u0766\u0003\u01b4\u00da\u0000\u0765\u0763\u0001\u0000"
                    + "\u0000\u0000\u0765\u0766\u0001\u0000\u0000\u0000\u0766\u00d9\u0001\u0000"
                    + "\u0000\u0000\u0767\u0768\u00058\u0000\u0000\u0768\u0769\u0005w\u0000\u0000"
                    + "\u0769\u076a\u0005\u00a6\u0000\u0000\u076a\u076f\u0003\u00deo\u0000\u076b"
                    + "\u076c\u0005\u0159\u0000\u0000\u076c\u076e\u0003\u00deo\u0000\u076d\u076b"
                    + "\u0001\u0000\u0000\u0000\u076e\u0771\u0001\u0000\u0000\u0000\u076f\u076d"
                    + "\u0001\u0000\u0000\u0000\u076f\u0770\u0001\u0000\u0000\u0000\u0770\u0772"
                    + "\u0001\u0000\u0000\u0000\u0771\u076f\u0001\u0000\u0000\u0000\u0772\u0773"
                    + "\u0005\u0123\u0000\u0000\u0773\u0777\u0003\u00e0p\u0000\u0774\u0776\u0003"
                    + "\u00e4r\u0000\u0775\u0774\u0001\u0000\u0000\u0000\u0776\u0779\u0001\u0000"
                    + "\u0000\u0000\u0777\u0775\u0001\u0000\u0000\u0000\u0777\u0778\u0001\u0000"
                    + "\u0000\u0000\u0778\u00db\u0001\u0000\u0000\u0000\u0779\u0777\u0001\u0000"
                    + "\u0000\u0000\u077a\u0780\u00058\u0000\u0000\u077b\u0781\u0003\u0146\u00a3"
                    + "\u0000\u077c\u077d\u0005\u0167\u0000\u0000\u077d\u077e\u0003\u0116\u008b"
                    + "\u0000\u077e\u077f\u0005\u016a\u0000\u0000\u077f\u0781\u0001\u0000\u0000"
                    + "\u0000\u0780\u077b\u0001\u0000\u0000\u0000\u0780\u077c\u0001\u0000\u0000"
                    + "\u0000\u0781\u0782\u0001\u0000\u0000\u0000\u0782\u0784\u0005\u0123\u0000"
                    + "\u0000\u0783\u0785\u0005\u0082\u0000\u0000\u0784\u0783\u0001\u0000\u0000"
                    + "\u0000\u0784\u0785\u0001\u0000\u0000\u0000\u0785\u0786\u0001\u0000\u0000"
                    + "\u0000\u0786\u078a\u0003\u00e0p\u0000\u0787\u0789\u0003\u00e2q\u0000\u0788"
                    + "\u0787\u0001\u0000\u0000\u0000\u0789\u078c\u0001\u0000\u0000\u0000\u078a"
                    + "\u0788\u0001\u0000\u0000\u0000\u078a\u078b\u0001\u0000\u0000\u0000\u078b"
                    + "\u00dd\u0001\u0000\u0000\u0000\u078c\u078a\u0001\u0000\u0000\u0000\u078d"
                    + "\u0790\u0003\u01ae\u00d7\u0000\u078e\u0790\u0003\u017c\u00be\u0000\u078f"
                    + "\u078d\u0001\u0000\u0000\u0000\u078f\u078e\u0001\u0000\u0000\u0000\u0790"
                    + "\u00df\u0001\u0000\u0000\u0000\u0791\u0794\u0003\u01ae\u00d7\u0000\u0792"
                    + "\u0794\u0003\u017c\u00be\u0000\u0793\u0791\u0001\u0000\u0000\u0000\u0793"
                    + "\u0792\u0001\u0000\u0000\u0000\u0794\u00e1\u0001\u0000\u0000\u0000\u0795"
                    + "\u0796\u0005\u0011\u0000\u0000\u0796\u079e\u0003\u01b4\u00da\u0000\u0797"
                    + "\u0798\u0005\u0014\u0000\u0000\u0798\u079e\u0003\u017c\u00be\u0000\u0799"
                    + "\u079a\u0005R\u0000\u0000\u079a\u079e\u0003\u017c\u00be\u0000\u079b\u079c"
                    + "\u0005\u010d\u0000\u0000\u079c\u079e\u0003\u01b4\u00da\u0000\u079d\u0795"
                    + "\u0001\u0000\u0000\u0000\u079d\u0797\u0001\u0000\u0000\u0000\u079d\u0799"
                    + "\u0001\u0000\u0000\u0000\u079d\u079b\u0001\u0000\u0000\u0000\u079e\u00e3"
                    + "\u0001\u0000\u0000\u0000\u079f\u07a0\u0007\u001c\u0000\u0000\u07a0\u00e5"
                    + "\u0001\u0000\u0000\u0000\u07a1\u07a3\u00052\u0000\u0000\u07a2\u07a4\u0005"
                    + "\u013b\u0000\u0000\u07a3\u07a2\u0001\u0000\u0000\u0000\u07a3\u07a4\u0001"
                    + "\u0000\u0000\u0000\u07a4\u00e7\u0001\u0000\u0000\u0000\u07a5\u07a7\u0005"
                    + ";\u0000\u0000\u07a6\u07a8\u0005\u012a\u0000\u0000\u07a7\u07a6\u0001\u0000"
                    + "\u0000\u0000\u07a7\u07a8\u0001\u0000\u0000\u0000\u07a8\u07a9\u0001\u0000"
                    + "\u0000\u0000\u07a9\u07aa\u0005\u008b\u0000\u0000\u07aa\u07ab\u0003\u01b4"
                    + "\u00da\u0000\u07ab\u07ac\u0005\u00c8\u0000\u0000\u07ac\u07ad\u0003\u0146"
                    + "\u00a3\u0000\u07ad\u07ae\u0005\u0167\u0000\u0000\u07ae\u07b3\u0003\u00ea"
                    + "u\u0000\u07af\u07b0\u0005\u0159\u0000\u0000\u07b0\u07b2\u0003\u00eau\u0000"
                    + "\u07b1\u07af\u0001\u0000\u0000\u0000\u07b2\u07b5\u0001\u0000\u0000\u0000"
                    + "\u07b3\u07b1\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000\u0000"
                    + "\u07b4\u07b6\u0001\u0000\u0000\u0000\u07b5\u07b3\u0001\u0000\u0000\u0000"
                    + "\u07b6\u07b7\u0005\u016a\u0000\u0000\u07b7\u00e9\u0001\u0000\u0000\u0000"
                    + "\u07b8\u07ba\u0003\u01b4\u00da\u0000\u07b9\u07bb\u0007\u0007\u0000\u0000"
                    + "\u07ba\u07b9\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000\u0000"
                    + "\u07bb\u00eb\u0001\u0000\u0000\u0000\u07bc\u07bd\u0003\u00eew\u0000\u07bd"
                    + "\u00ed\u0001\u0000\u0000\u0000\u07be\u07bf\u0005\u0139\u0000\u0000\u07bf"
                    + "\u07c0\u0005\u0167\u0000\u0000\u07c0\u07c1\u0003\u01b4\u00da\u0000\u07c1"
                    + "\u07c2\u0005\u015d\u0000\u0000\u07c2\u07ca\u0003\u01b4\u00da\u0000\u07c3"
                    + "\u07c4\u0005\u0159\u0000\u0000\u07c4\u07c5\u0003\u01b4\u00da\u0000\u07c5"
                    + "\u07c6\u0005\u015d\u0000\u0000\u07c6\u07c7\u0003\u01b4\u00da\u0000\u07c7"
                    + "\u07c9\u0001\u0000\u0000\u0000\u07c8\u07c3\u0001\u0000\u0000\u0000\u07c9"
                    + "\u07cc\u0001\u0000\u0000\u0000\u07ca\u07c8\u0001\u0000\u0000\u0000\u07ca"
                    + "\u07cb\u0001\u0000\u0000\u0000\u07cb\u07cd\u0001\u0000\u0000\u0000\u07cc"
                    + "\u07ca\u0001\u0000\u0000\u0000\u07cd\u07d1\u0005\u016a\u0000\u0000\u07ce"
                    + "\u07d0\u0003j5\u0000\u07cf\u07ce\u0001\u0000\u0000\u0000\u07d0\u07d3\u0001"
                    + "\u0000\u0000\u0000\u07d1\u07cf\u0001\u0000\u0000\u0000\u07d1\u07d2\u0001"
                    + "\u0000\u0000\u0000\u07d2\u00ef\u0001\u0000\u0000\u0000\u07d3\u07d1\u0001"
                    + "\u0000\u0000\u0000\u07d4\u07d5\u0005\u00da\u0000\u0000\u07d5\u07dc\u0003"
                    + "\u017c\u00be\u0000\u07d6\u07d7\u0005\u00da\u0000\u0000\u07d7\u07d8\u0005"
                    + "\u0167\u0000\u0000\u07d8\u07d9\u0003\u017c\u00be\u0000\u07d9\u07da\u0005"
                    + "\u016a\u0000\u0000\u07da\u07dc\u0001\u0000\u0000\u0000\u07db\u07d4\u0001"
                    + "\u0000\u0000\u0000\u07db\u07d6\u0001\u0000\u0000\u0000\u07dc\u00f1\u0001"
                    + "\u0000\u0000\u0000\u07dd\u07df\u0005\u0004\u0000\u0000\u07de\u07dd\u0001"
                    + "\u0000\u0000\u0000\u07de\u07df\u0001\u0000\u0000\u0000\u07df\u07e0\u0001"
                    + "\u0000\u0000\u0000\u07e0\u07e2\u0005\u00df\u0000\u0000\u07e1\u07e3\u0003"
                    + "\u017c\u00be\u0000\u07e2\u07e1\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001"
                    + "\u0000\u0000\u0000\u07e3\u00f3\u0001\u0000\u0000\u0000\u07e4\u07e5\u0005"
                    + "\u00e1\u0000\u0000\u07e5\u00f5\u0001\u0000\u0000\u0000\u07e6\u07f2\u0005"
                    + "\u00e6\u0000\u0000\u07e7\u07e9\u0005\u010e\u0000\u0000\u07e8\u07ea\u0005"
                    + "\u012f\u0000\u0000\u07e9\u07e8\u0001\u0000\u0000\u0000\u07e9\u07ea\u0001"
                    + "\u0000\u0000\u0000\u07ea\u07eb\u0001\u0000\u0000\u0000\u07eb\u07f0\u0003"
                    + "\u017c\u00be\u0000\u07ec\u07ed\u0005\u0100\u0000\u0000\u07ed\u07ee\u0005"
                    + "\u00b4\u0000\u0000\u07ee\u07ef\u0005\u015d\u0000\u0000\u07ef\u07f1\u0003"
                    + "\u017c\u00be\u0000\u07f0\u07ec\u0001\u0000\u0000\u0000\u07f0\u07f1\u0001"
                    + "\u0000\u0000\u0000\u07f1\u07f3\u0001\u0000\u0000\u0000\u07f2\u07e7\u0001"
                    + "\u0000\u0000\u0000\u07f2\u07f3\u0001\u0000\u0000\u0000\u07f3\u00f7\u0001"
                    + "\u0000\u0000\u0000\u07f4\u07f6\u0005\u00ea\u0000\u0000\u07f5\u07f7\u0003"
                    + "\u017c\u00be\u0000\u07f6\u07f5\u0001\u0000\u0000\u0000\u07f6\u07f7\u0001"
                    + "\u0000\u0000\u0000\u07f7\u00f9\u0001\u0000\u0000\u0000\u07f8\u07fa\u0005"
                    + "\u00f0\u0000\u0000\u07f9\u07fb\u0005\u013b\u0000\u0000\u07fa\u07f9\u0001"
                    + "\u0000\u0000\u0000\u07fa\u07fb\u0001\u0000\u0000\u0000\u07fb\u00fb\u0001"
                    + "\u0000\u0000\u0000\u07fc\u0800\u0003\u00fe\u007f\u0000\u07fd\u0800\u0003"
                    + "\u0100\u0080\u0000\u07fe\u0800\u0003\u0102\u0081\u0000\u07ff\u07fc\u0001"
                    + "\u0000\u0000\u0000\u07ff\u07fd\u0001\u0000\u0000\u0000\u07ff\u07fe\u0001"
                    + "\u0000\u0000\u0000\u0800\u00fd\u0001\u0000\u0000\u0000\u0801\u0803\u0005"
                    + "?\u0000\u0000\u0802\u0801\u0001\u0000\u0000\u0000\u0802\u0803\u0001\u0000"
                    + "\u0000\u0000\u0803\u0804\u0001\u0000\u0000\u0000\u0804\u0807\u0005\u00f9"
                    + "\u0000\u0000\u0805\u0807\u0005@\u0000\u0000\u0806\u0802\u0001\u0000\u0000"
                    + "\u0000\u0806\u0805\u0001\u0000\u0000\u0000\u0807\u0809\u0001\u0000\u0000"
                    + "\u0000\u0808\u080a\u0005\u015d\u0000\u0000\u0809\u0808\u0001\u0000\u0000"
                    + "\u0000\u0809\u080a\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000\u0000"
                    + "\u0000\u080b\u080c\u0003\u017c\u00be\u0000\u080c\u00ff\u0001\u0000\u0000"
                    + "\u0000\u080d\u080e\u0007\u001d\u0000\u0000\u080e\u080f\u0007\u001e\u0000"
                    + "\u0000\u080f\u0101\u0001\u0000\u0000\u0000\u0810\u0811\u0005\u00de\u0000"
                    + "\u0000\u0811\u0814\u0005\u015d\u0000\u0000\u0812\u0815\u0003\u017c\u00be"
                    + "\u0000\u0813\u0815\u0005\u00c0\u0000\u0000\u0814\u0812\u0001\u0000\u0000"
                    + "\u0000\u0814\u0813\u0001\u0000\u0000\u0000\u0815\u0817\u0001\u0000\u0000"
                    + "\u0000\u0816\u0818\u0005\u012b\u0000\u0000\u0817\u0816\u0001\u0000\u0000"
                    + "\u0000\u0817\u0818\u0001\u0000\u0000\u0000\u0818\u0819\u0001\u0000\u0000"
                    + "\u0000\u0819\u081a\u0005s\u0000\u0000\u081a\u081b\u0007\u001f\u0000\u0000"
                    + "\u081b\u0103\u0001\u0000\u0000\u0000\u081c\u081d\u0005\u0105\u0000\u0000"
                    + "\u081d\u081e\u0003\u01b4\u00da\u0000\u081e\u0105\u0001\u0000\u0000\u0000"
                    + "\u081f\u0821\u0005\u0127\u0000\u0000\u0820\u0822\u0005\u011a\u0000\u0000"
                    + "\u0821\u0820\u0001\u0000\u0000\u0000\u0821\u0822\u0001\u0000\u0000\u0000"
                    + "\u0822\u0823\u0001\u0000\u0000\u0000\u0823\u0824\u0003\u0146\u00a3\u0000"
                    + "\u0824\u0107\u0001\u0000\u0000\u0000\u0825\u0826\u0005\u012d\u0000\u0000"
                    + "\u0826\u0827\u0003\u017c\u00be\u0000\u0827\u0109\u0001\u0000\u0000\u0000"
                    + "\u0828\u082a\u0005\u0130\u0000\u0000\u0829\u082b\u0005\u0167\u0000\u0000"
                    + "\u082a\u0829\u0001\u0000\u0000\u0000\u082a\u082b\u0001\u0000\u0000\u0000"
                    + "\u082b\u082c\u0001\u0000\u0000\u0000\u082c\u0831\u0003\u017c\u00be\u0000"
                    + "\u082d\u082e\u0005\u0159\u0000\u0000\u082e\u0830\u0003\u017c\u00be\u0000"
                    + "\u082f\u082d\u0001\u0000\u0000\u0000\u0830\u0833\u0001\u0000\u0000\u0000"
                    + "\u0831\u082f\u0001\u0000\u0000\u0000\u0831\u0832\u0001\u0000\u0000\u0000"
                    + "\u0832\u0835\u0001\u0000\u0000\u0000\u0833\u0831\u0001\u0000\u0000\u0000"
                    + "\u0834\u0836\u0005\u016a\u0000\u0000\u0835\u0834\u0001\u0000\u0000\u0000"
                    + "\u0835\u0836\u0001\u0000\u0000\u0000\u0836\u0837\u0001\u0000\u0000\u0000"
                    + "\u0837\u0839\u0005\u0097\u0000\u0000\u0838\u083a\u0005\u0167\u0000\u0000"
                    + "\u0839\u0838\u0001\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000\u0000"
                    + "\u083a\u083b\u0001\u0000\u0000\u0000\u083b\u0840\u0003\u01b4\u00da\u0000"
                    + "\u083c\u083d\u0005\u0159\u0000\u0000\u083d\u083f\u0003\u01b4\u00da\u0000"
                    + "\u083e\u083c\u0001\u0000\u0000\u0000\u083f\u0842\u0001\u0000\u0000\u0000"
                    + "\u0840\u083e\u0001\u0000\u0000\u0000\u0840\u0841\u0001\u0000\u0000\u0000"
                    + "\u0841\u0844\u0001\u0000\u0000\u0000\u0842\u0840\u0001\u0000\u0000\u0000"
                    + "\u0843\u0845\u0005\u016a\u0000\u0000\u0844\u0843\u0001\u0000\u0000\u0000"
                    + "\u0844\u0845\u0001\u0000\u0000\u0000\u0845\u010b\u0001\u0000\u0000\u0000"
                    + "\u0846\u0847\u0005\u0138\u0000\u0000\u0847\u0848\u0003\u016c\u00b6\u0000"
                    + "\u0848\u0849\u0007 \u0000\u0000\u0849\u084a\u0003\u0002\u0001\u0000\u084a"
                    + "\u084c\u0005b\u0000\u0000\u084b\u084d\u0007!\u0000\u0000\u084c\u084b\u0001"
                    + "\u0000\u0000\u0000\u084c\u084d\u0001\u0000\u0000\u0000\u084d\u010d\u0001"
                    + "\u0000\u0000\u0000\u084e\u084f\u0005s\u0000\u0000\u084f\u0850\u0005\u016e"
                    + "\u0000\u0000\u0850\u0852\u0005\u0089\u0000\u0000\u0851\u0853\u0005\u0167"
                    + "\u0000\u0000\u0852\u0851\u0001\u0000\u0000\u0000\u0852\u0853\u0001\u0000"
                    + "\u0000\u0000\u0853\u0854\u0001\u0000\u0000\u0000\u0854\u0856\u0003\u0116"
                    + "\u008b\u0000\u0855\u0857\u0005\u016a\u0000\u0000\u0856\u0855\u0001\u0000"
                    + "\u0000\u0000\u0856\u0857\u0001\u0000\u0000\u0000\u0857\u0858\u0001\u0000"
                    + "\u0000\u0000\u0858\u0859\u0005\u00ae\u0000\u0000\u0859\u085a\u0003\u0002"
                    + "\u0001\u0000\u085a\u085b\u0005b\u0000\u0000\u085b\u085c\u0005\u00ae\u0000"
                    + "\u0000\u085c\u010f\u0001\u0000\u0000\u0000\u085d\u085e\u0005s\u0000\u0000"
                    + "\u085e\u085f\u0005\u016e\u0000\u0000\u085f\u0861\u0005\u0089\u0000\u0000"
                    + "\u0860\u0862\u0005\u00ec\u0000\u0000\u0861\u0860\u0001\u0000\u0000\u0000"
                    + "\u0861\u0862\u0001\u0000\u0000\u0000\u0862\u0863\u0001\u0000\u0000\u0000"
                    + "\u0863\u0864\u0003\u017c\u00be\u0000\u0864\u0865\u0005\u015c\u0000\u0000"
                    + "\u0865\u0868\u0003\u017c\u00be\u0000\u0866\u0867\u0007\"\u0000\u0000\u0867"
                    + "\u0869\u0003\u017c\u00be\u0000\u0868\u0866\u0001\u0000\u0000\u0000\u0868"
                    + "\u0869\u0001\u0000\u0000\u0000\u0869\u086a\u0001\u0000\u0000\u0000\u086a"
                    + "\u086b\u0005\u00ae\u0000\u0000\u086b\u086c\u0003\u0002\u0001\u0000\u086c"
                    + "\u086d\u0005b\u0000\u0000\u086d\u086e\u0005\u00ae\u0000\u0000\u086e\u0111"
                    + "\u0001\u0000\u0000\u0000\u086f\u0876\u0005\u0177\u0000\u0000\u0870\u0871"
                    + "\u0005\u0163\u0000\u0000\u0871\u0872\u0005\u0163\u0000\u0000\u0872\u0873"
                    + "\u0005\u016e\u0000\u0000\u0873\u0874\u0005\u0161\u0000\u0000\u0874\u0876"
                    + "\u0005\u0161\u0000\u0000\u0875\u086f\u0001\u0000\u0000\u0000\u0875\u0870"
                    + "\u0001\u0000\u0000\u0000\u0876\u0113\u0001\u0000\u0000\u0000\u0877\u0878"
                    + "\u0005\u012e\u0000\u0000\u0878\u087d\u0003\u017c\u00be\u0000\u0879\u087a"
                    + "\u0005\u0159\u0000\u0000\u087a\u087c\u0003\u017c\u00be\u0000\u087b\u0879"
                    + "\u0001\u0000\u0000\u0000\u087c\u087f\u0001\u0000\u0000\u0000\u087d";
    private static final String _serializedATNSegment1 =
            "\u087b\u0001\u0000\u0000\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e"
                    + "\u0115\u0001\u0000\u0000\u0000\u087f\u087d\u0001\u0000\u0000\u0000\u0880"
                    + "\u0882\u0003\u0118\u008c\u0000\u0881\u0880\u0001\u0000\u0000\u0000\u0881"
                    + "\u0882\u0001\u0000\u0000\u0000\u0882\u0883\u0001\u0000\u0000\u0000\u0883"
                    + "\u0884\u0003\u011e\u008f\u0000\u0884\u0117\u0001\u0000\u0000\u0000\u0885"
                    + "\u0886\u0005\u0139\u0000\u0000\u0886\u088b\u0003\u011a\u008d\u0000\u0887"
                    + "\u0888\u0005\u0159\u0000\u0000\u0888\u088a\u0003\u011a\u008d\u0000\u0889"
                    + "\u0887\u0001\u0000\u0000\u0000\u088a\u088d\u0001\u0000\u0000\u0000\u088b"
                    + "\u0889\u0001\u0000\u0000\u0000\u088b\u088c\u0001\u0000\u0000\u0000\u088c"
                    + "\u0119\u0001\u0000\u0000\u0000\u088d\u088b\u0001\u0000\u0000\u0000\u088e"
                    + "\u0890\u0003\u01b4\u00da\u0000\u088f\u0891\u0003\u011c\u008e\u0000\u0890"
                    + "\u088f\u0001\u0000\u0000\u0000\u0890\u0891\u0001\u0000\u0000\u0000\u0891"
                    + "\u0892\u0001\u0000\u0000\u0000\u0892\u0893\u0005\u000e\u0000\u0000\u0893"
                    + "\u0894\u0005\u0167\u0000\u0000\u0894\u0895\u0003\u011e\u008f\u0000\u0895"
                    + "\u0896\u0005\u016a\u0000\u0000\u0896\u011b\u0001\u0000\u0000\u0000\u0897"
                    + "\u0898\u0005\u0167\u0000\u0000\u0898\u089d\u0003\u01b4\u00da\u0000\u0899"
                    + "\u089a\u0005\u0159\u0000\u0000\u089a\u089c\u0003\u01b4\u00da\u0000\u089b"
                    + "\u0899\u0001\u0000\u0000\u0000\u089c\u089f\u0001\u0000\u0000\u0000\u089d"
                    + "\u089b\u0001\u0000\u0000\u0000\u089d\u089e\u0001\u0000\u0000\u0000\u089e"
                    + "\u08a0\u0001\u0000\u0000\u0000\u089f\u089d\u0001\u0000\u0000\u0000\u08a0"
                    + "\u08a1\u0005\u016a\u0000\u0000\u08a1\u011d\u0001\u0000\u0000\u0000\u08a2"
                    + "\u08a8\u0003\u0120\u0090\u0000\u08a3\u08a4\u0003\u0122\u0091\u0000\u08a4"
                    + "\u08a5\u0003\u0120\u0090\u0000\u08a5\u08a7\u0001\u0000\u0000\u0000\u08a6"
                    + "\u08a3\u0001\u0000\u0000\u0000\u08a7\u08aa\u0001\u0000\u0000\u0000\u08a8"
                    + "\u08a6\u0001\u0000\u0000\u0000\u08a8\u08a9\u0001\u0000\u0000\u0000\u08a9"
                    + "\u011f\u0001\u0000\u0000\u0000\u08aa\u08a8\u0001\u0000\u0000\u0000\u08ab"
                    + "\u08b1\u0003\u0124\u0092\u0000\u08ac\u08ad\u0005\u0167\u0000\u0000\u08ad"
                    + "\u08ae\u0003\u011e\u008f\u0000\u08ae\u08af\u0005\u016a\u0000\u0000\u08af"
                    + "\u08b1\u0001\u0000\u0000\u0000\u08b0\u08ab\u0001\u0000\u0000\u0000\u08b0"
                    + "\u08ac\u0001\u0000\u0000\u0000\u08b1\u0121\u0001\u0000\u0000\u0000\u08b2"
                    + "\u08b4\u0005\u0129\u0000\u0000\u08b3\u08b5\u0005\b\u0000\u0000\u08b4\u08b3"
                    + "\u0001\u0000\u0000\u0000\u08b4\u08b5\u0001\u0000\u0000\u0000\u08b5\u08bf"
                    + "\u0001\u0000\u0000\u0000\u08b6\u08b8\u0005e\u0000\u0000\u08b7\u08b9\u0005"
                    + "\b\u0000\u0000\u08b8\u08b7\u0001\u0000\u0000\u0000\u08b8\u08b9\u0001\u0000"
                    + "\u0000\u0000\u08b9\u08bf\u0001\u0000\u0000\u0000\u08ba\u08bc\u0005\u0095"
                    + "\u0000\u0000\u08bb\u08bd\u0005\b\u0000\u0000\u08bc\u08bb\u0001\u0000\u0000"
                    + "\u0000\u08bc\u08bd\u0001\u0000\u0000\u0000\u08bd\u08bf\u0001\u0000\u0000"
                    + "\u0000\u08be\u08b2\u0001\u0000\u0000\u0000\u08be\u08b6\u0001\u0000\u0000"
                    + "\u0000\u08be\u08ba\u0001\u0000\u0000\u0000\u08bf\u0123\u0001\u0000\u0000"
                    + "\u0000\u08c0\u08c1\u0007#\u0000\u0000\u08c1\u08c3\u0003\u0126\u0093\u0000"
                    + "\u08c2\u08c4\u0003\u0132\u0099\u0000\u08c3\u08c2\u0001\u0000\u0000\u0000"
                    + "\u08c3\u08c4\u0001\u0000\u0000\u0000\u08c4\u08c6\u0001\u0000\u0000\u0000"
                    + "\u08c5\u08c7\u0003\u0134\u009a\u0000\u08c6\u08c5\u0001\u0000\u0000\u0000"
                    + "\u08c6\u08c7\u0001\u0000\u0000\u0000\u08c7\u08c9\u0001\u0000\u0000\u0000"
                    + "\u08c8\u08ca\u0003\u0148\u00a4\u0000\u08c9\u08c8\u0001\u0000\u0000\u0000"
                    + "\u08c9\u08ca\u0001\u0000\u0000\u0000\u08ca\u08cc\u0001\u0000\u0000\u0000"
                    + "\u08cb\u08cd\u0003\u014a\u00a5\u0000\u08cc\u08cb\u0001\u0000\u0000\u0000"
                    + "\u08cc\u08cd\u0001\u0000\u0000\u0000\u08cd\u08d0\u0001\u0000\u0000\u0000"
                    + "\u08ce\u08d1\u0003\u014c\u00a6\u0000\u08cf\u08d1\u0003\u014e\u00a7\u0000"
                    + "\u08d0\u08ce\u0001\u0000\u0000\u0000\u08d0\u08cf\u0001\u0000\u0000\u0000"
                    + "\u08d0\u08d1\u0001\u0000\u0000\u0000\u08d1\u08d3\u0001\u0000\u0000\u0000"
                    + "\u08d2\u08d4\u0003\u0150\u00a8\u0000\u08d3\u08d2\u0001\u0000\u0000\u0000"
                    + "\u08d3\u08d4\u0001\u0000\u0000\u0000\u08d4\u08d6\u0001\u0000\u0000\u0000"
                    + "\u08d5\u08d7\u0003\u0152\u00a9\u0000\u08d6\u08d5\u0001\u0000\u0000\u0000"
                    + "\u08d6\u08d7\u0001\u0000\u0000\u0000\u08d7\u0125\u0001\u0000\u0000\u0000"
                    + "\u08d8\u08da\u0003\u0128\u0094\u0000\u08d9\u08d8\u0001\u0000\u0000\u0000"
                    + "\u08d9\u08da\u0001\u0000\u0000\u0000\u08da\u08dc\u0001\u0000\u0000\u0000"
                    + "\u08db\u08dd\u0003\u012a\u0095\u0000\u08dc\u08db\u0001\u0000\u0000\u0000"
                    + "\u08dc\u08dd\u0001\u0000\u0000\u0000\u08dd\u08de\u0001\u0000\u0000\u0000"
                    + "\u08de\u08e3\u0003\u012c\u0096\u0000\u08df\u08e0\u0005\u0159\u0000\u0000"
                    + "\u08e0\u08e2\u0003\u012c\u0096\u0000\u08e1\u08df\u0001\u0000\u0000\u0000"
                    + "\u08e2\u08e5\u0001\u0000\u0000\u0000\u08e3\u08e1\u0001\u0000\u0000\u0000"
                    + "\u08e3\u08e4\u0001\u0000\u0000\u0000\u08e4\u0127\u0001\u0000\u0000\u0000"
                    + "\u08e5\u08e3\u0001\u0000\u0000\u0000\u08e6\u08e7\u0007$\u0000\u0000\u08e7"
                    + "\u0129\u0001\u0000\u0000\u0000\u08e8\u08e9\u0005\u0124\u0000\u0000\u08e9"
                    + "\u08ea\u0003\u017c\u00be\u0000\u08ea\u012b\u0001\u0000\u0000\u0000\u08eb"
                    + "\u08ec\u0003\u01b4\u00da\u0000\u08ec\u08ed\u0005\u015d\u0000\u0000\u08ed"
                    + "\u08ef\u0001\u0000\u0000\u0000\u08ee\u08eb\u0001\u0000\u0000\u0000\u08ee"
                    + "\u08ef\u0001\u0000\u0000\u0000\u08ef\u08f0\u0001\u0000\u0000\u0000\u08f0"
                    + "\u08f2\u0003\u017c\u00be\u0000\u08f1\u08f3\u0003\u012e\u0097\u0000\u08f2"
                    + "\u08f1\u0001\u0000\u0000\u0000\u08f2\u08f3\u0001\u0000\u0000\u0000\u08f3"
                    + "\u08f6\u0001\u0000\u0000\u0000\u08f4\u08f6\u0003\u0130\u0098\u0000\u08f5"
                    + "\u08ee\u0001\u0000\u0000\u0000\u08f5\u08f4\u0001\u0000\u0000\u0000\u08f6"
                    + "\u012d\u0001\u0000\u0000\u0000\u08f7\u08f9\u0004\u0097\u0003\u0000\u08f8"
                    + "\u08fa\u0005\u000e\u0000\u0000\u08f9\u08f8\u0001\u0000\u0000\u0000\u08f9"
                    + "\u08fa\u0001\u0000\u0000\u0000\u08fa\u08fb\u0001\u0000\u0000\u0000\u08fb"
                    + "\u0901\u0003\u01b4\u00da\u0000\u08fc\u08fd\u0005\u0167\u0000\u0000\u08fd"
                    + "\u08fe\u0005\u0122\u0000\u0000\u08fe\u08ff\u0005\u016f\u0000\u0000\u08ff"
                    + "\u0901\u0005\u016a\u0000\u0000\u0900\u08f7\u0001\u0000\u0000\u0000\u0900"
                    + "\u08fc\u0001\u0000\u0000\u0000\u0901\u012f\u0001\u0000\u0000\u0000\u0902"
                    + "\u0903\u0005\u016e\u0000\u0000\u0903\u0905\u0005\u0004\u0000\u0000\u0904"
                    + "\u0902\u0001\u0000\u0000\u0000\u0904\u0905\u0001\u0000\u0000\u0000\u0905"
                    + "\u0906\u0001\u0000\u0000\u0000\u0906\u0907\u0005\u0165\u0000\u0000\u0907"
                    + "\u0131\u0001\u0000\u0000\u0000\u0908\u0909\u0005\u0097\u0000\u0000\u0909"
                    + "\u090e\u0003\u01b4\u00da\u0000\u090a\u090b\u0005\u0159\u0000\u0000\u090b"
                    + "\u090d\u0003\u01b4\u00da\u0000\u090c\u090a\u0001\u0000\u0000\u0000\u090d"
                    + "\u0910\u0001\u0000\u0000\u0000\u090e\u090c\u0001\u0000\u0000\u0000\u090e"
                    + "\u090f\u0001\u0000\u0000\u0000\u090f\u0133\u0001\u0000\u0000\u0000\u0910"
                    + "\u090e\u0001\u0000\u0000\u0000\u0911\u0912\u0005w\u0000\u0000\u0912\u0916"
                    + "\u0003\u0136\u009b\u0000\u0913\u0915\u0003\u013c\u009e\u0000\u0914\u0913"
                    + "\u0001\u0000\u0000\u0000\u0915\u0918\u0001\u0000\u0000\u0000\u0916\u0914"
                    + "\u0001\u0000\u0000\u0000\u0916\u0917\u0001\u0000\u0000\u0000\u0917\u0135"
                    + "\u0001\u0000\u0000\u0000\u0918\u0916\u0001\u0000\u0000\u0000\u0919\u091d"
                    + "\u0003\u0138\u009c\u0000\u091a\u091d\u0003\u013a\u009d\u0000\u091b\u091d"
                    + "\u0003\u0140\u00a0\u0000\u091c\u0919\u0001\u0000\u0000\u0000\u091c\u091a"
                    + "\u0001\u0000\u0000\u0000\u091c\u091b\u0001\u0000\u0000\u0000\u091d\u0137"
                    + "\u0001\u0000\u0000\u0000\u091e\u0920\u0003\u0146\u00a3\u0000\u091f\u0921"
                    + "\u0003\u0144\u00a2\u0000\u0920\u091f\u0001\u0000\u0000\u0000\u0920\u0921"
                    + "\u0001\u0000\u0000\u0000\u0921\u0139\u0001\u0000\u0000\u0000\u0922\u0923"
                    + "\u0005\u0167\u0000\u0000\u0923\u0924\u0003\u0116\u008b\u0000\u0924\u0926"
                    + "\u0005\u016a\u0000\u0000\u0925\u0927\u0003\u0144\u00a2\u0000\u0926\u0925"
                    + "\u0001\u0000\u0000\u0000\u0926\u0927\u0001\u0000\u0000\u0000\u0927\u013b"
                    + "\u0001\u0000\u0000\u0000\u0928\u0929\u0005\u0159\u0000\u0000\u0929\u0930"
                    + "\u0003\u0136\u009b\u0000\u092a\u092b\u0003\u013e\u009f\u0000\u092b\u092c"
                    + "\u0003\u0136\u009b\u0000\u092c\u092d\u0005\u00c8\u0000\u0000\u092d\u092e"
                    + "\u0003\u016c\u00b6\u0000\u092e\u0930\u0001\u0000\u0000\u0000\u092f\u0928"
                    + "\u0001\u0000\u0000\u0000\u092f\u092a\u0001\u0000\u0000\u0000\u0930\u013d"
                    + "\u0001\u0000\u0000\u0000\u0931\u0933\u0005\u008d\u0000\u0000\u0932\u0931"
                    + "\u0001\u0000\u0000\u0000\u0932\u0933\u0001\u0000\u0000\u0000\u0933\u0934"
                    + "\u0001\u0000\u0000\u0000\u0934\u093b\u0005\u009c\u0000\u0000\u0935\u0937"
                    + "\u0007%\u0000\u0000\u0936\u0938\u0005\u00ce\u0000\u0000\u0937\u0936\u0001"
                    + "\u0000\u0000\u0000\u0937\u0938\u0001\u0000\u0000\u0000\u0938\u0939\u0001"
                    + "\u0000\u0000\u0000\u0939\u093b\u0005\u009c\u0000\u0000\u093a\u0932\u0001"
                    + "\u0000\u0000\u0000\u093a\u0935\u0001\u0000\u0000\u0000\u093b\u013f\u0001"
                    + "\u0000\u0000\u0000\u093c\u093d\u0005\u011a\u0000\u0000\u093d\u093e\u0005"
                    + "\u0167\u0000\u0000\u093e\u093f\u0005\u0130\u0000\u0000\u093f\u0944\u0003"
                    + "\u0142\u00a1\u0000\u0940\u0941\u0005\u0159\u0000\u0000\u0941\u0943\u0003"
                    + "\u0142\u00a1\u0000\u0942\u0940\u0001\u0000\u0000\u0000\u0943\u0946\u0001"
                    + "\u0000\u0000\u0000\u0944\u0942\u0001\u0000\u0000\u0000\u0944\u0945\u0001"
                    + "\u0000\u0000\u0000\u0945\u0947\u0001\u0000\u0000\u0000\u0946\u0944\u0001"
                    + "\u0000\u0000\u0000\u0947\u0949\u0005\u016a\u0000\u0000\u0948\u094a\u0003"
                    + "\u0144\u00a2\u0000\u0949\u0948\u0001\u0000\u0000\u0000\u0949\u094a\u0001"
                    + "\u0000\u0000\u0000\u094a\u0141\u0001\u0000\u0000\u0000\u094b\u0958\u0003"
                    + "\u017c\u00be\u0000\u094c\u094d\u0005\u0167\u0000\u0000\u094d\u0952\u0003"
                    + "\u017c\u00be\u0000\u094e\u094f\u0005\u0159\u0000\u0000\u094f\u0951\u0003"
                    + "\u017c\u00be\u0000\u0950\u094e\u0001\u0000\u0000\u0000\u0951\u0954\u0001"
                    + "\u0000\u0000\u0000\u0952\u0950\u0001\u0000\u0000\u0000\u0952\u0953\u0001"
                    + "\u0000\u0000\u0000\u0953\u0955\u0001\u0000\u0000\u0000\u0954\u0952\u0001"
                    + "\u0000\u0000\u0000\u0955\u0956\u0005\u016a\u0000\u0000\u0956\u0958\u0001"
                    + "\u0000\u0000\u0000\u0957\u094b\u0001\u0000\u0000\u0000\u0957\u094c\u0001"
                    + "\u0000\u0000\u0000\u0958\u0143\u0001\u0000\u0000\u0000\u0959\u095b\u0004"
                    + "\u00a2\u0004\u0000\u095a\u095c\u0005\u000e\u0000\u0000\u095b\u095a\u0001"
                    + "\u0000\u0000\u0000\u095b\u095c\u0001\u0000\u0000\u0000\u095c\u095d\u0001"
                    + "\u0000\u0000\u0000\u095d\u0968\u0003\u01b4\u00da\u0000\u095e\u095f\u0005"
                    + "\u0167\u0000\u0000\u095f\u0964\u0005\u016e\u0000\u0000\u0960\u0961\u0005"
                    + "\u0159\u0000\u0000\u0961\u0963\u0005\u016e\u0000\u0000\u0962\u0960\u0001"
                    + "\u0000\u0000\u0000\u0963\u0966\u0001\u0000\u0000\u0000\u0964\u0962\u0001"
                    + "\u0000\u0000\u0000\u0964\u0965\u0001\u0000\u0000\u0000\u0965\u0967\u0001"
                    + "\u0000\u0000\u0000\u0966\u0964\u0001\u0000\u0000\u0000\u0967\u0969\u0005"
                    + "\u016a\u0000\u0000\u0968\u095e\u0001\u0000\u0000\u0000\u0968\u0969\u0001"
                    + "\u0000\u0000\u0000\u0969\u0145\u0001\u0000\u0000\u0000\u096a\u096b\u0003"
                    + "\u01b4\u00da\u0000\u096b\u0147\u0001\u0000\u0000\u0000\u096c\u096d\u0005"
                    + "\u0137\u0000\u0000\u096d\u096e\u0003\u016c\u00b6\u0000\u096e\u0149\u0001"
                    + "\u0000\u0000\u0000\u096f\u0970\u0005~\u0000\u0000\u0970\u0971\u0005\u001e"
                    + "\u0000\u0000\u0971\u0976\u0003\u017c\u00be\u0000\u0972\u0973\u0005\u0159"
                    + "\u0000\u0000\u0973\u0975\u0003\u017c\u00be\u0000\u0974\u0972\u0001\u0000"
                    + "\u0000\u0000\u0975\u0978\u0001\u0000\u0000\u0000\u0976\u0974\u0001\u0000"
                    + "\u0000\u0000\u0976\u0977\u0001\u0000\u0000\u0000\u0977\u014b\u0001\u0000"
                    + "\u0000\u0000\u0978\u0976\u0001\u0000\u0000\u0000\u0979\u097a\u0005\u0081"
                    + "\u0000\u0000\u097a\u097b\u0003\u016c\u00b6\u0000\u097b\u014d\u0001\u0000"
                    + "\u0000\u0000\u097c\u097d\u0005\u00dd\u0000\u0000\u097d\u097e\u0003\u016c"
                    + "\u00b6\u0000\u097e\u014f\u0001\u0000\u0000\u0000\u097f\u0980\u0005\u00cc"
                    + "\u0000\u0000\u0980\u0981\u0005\u001e\u0000\u0000\u0981\u0983\u0003\u017c"
                    + "\u00be\u0000\u0982\u0984\u0007\u0007\u0000\u0000\u0983\u0982\u0001\u0000"
                    + "\u0000\u0000\u0983\u0984\u0001\u0000\u0000\u0000\u0984\u098c\u0001\u0000"
                    + "\u0000\u0000\u0985\u0986\u0005\u0159\u0000\u0000\u0986\u0988\u0003\u017c"
                    + "\u00be\u0000\u0987\u0989\u0007\u0007\u0000\u0000\u0988\u0987\u0001\u0000"
                    + "\u0000\u0000\u0988\u0989\u0001\u0000\u0000\u0000\u0989\u098b\u0001\u0000"
                    + "\u0000\u0000\u098a\u0985\u0001\u0000\u0000\u0000\u098b\u098e\u0001\u0000"
                    + "\u0000\u0000\u098c\u098a\u0001\u0000\u0000\u0000\u098c\u098d\u0001\u0000"
                    + "\u0000\u0000\u098d\u0151\u0001\u0000\u0000\u0000\u098e\u098c\u0001\u0000"
                    + "\u0000\u0000\u098f\u0991\u0003\u0154\u00aa\u0000\u0990\u098f\u0001\u0000"
                    + "\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992\u0990\u0001\u0000"
                    + "\u0000\u0000\u0992\u0993\u0001\u0000\u0000\u0000\u0993\u0153\u0001\u0000"
                    + "\u0000\u0000\u0994\u0995\u0005\u00a4\u0000\u0000\u0995\u09a0\u0003\u017c"
                    + "\u00be\u0000\u0996\u0997\u0005\u0139\u0000\u0000\u0997\u099d\u0007&\u0000"
                    + "\u0000\u0998\u0999\u0005\u012d\u0000\u0000\u0999\u099a\u0005\u000b\u0000"
                    + "\u0000\u099a\u099b\u0005\u009d\u0000\u0000\u099b\u099c\u0007\'\u0000\u0000"
                    + "\u099c\u099e\u0005\u00aa\u0000\u0000\u099d\u0998\u0001\u0000\u0000\u0000"
                    + "\u099d\u099e\u0001\u0000\u0000\u0000\u099e\u09a0\u0001\u0000\u0000\u0000"
                    + "\u099f\u0994\u0001\u0000\u0000\u0000\u099f\u0996\u0001\u0000\u0000\u0000"
                    + "\u09a0\u0155\u0001\u0000\u0000\u0000\u09a1\u09a2\u0005\u012b\u0000\u0000"
                    + "\u09a2\u09a3\u0003\u015a\u00ad\u0000\u09a3\u09a4\u0005\u0100\u0000\u0000"
                    + "\u09a4\u09a6\u0003\u0158\u00ac\u0000\u09a5\u09a7\u0003\u0148\u00a4\u0000"
                    + "\u09a6\u09a5\u0001\u0000\u0000\u0000\u09a6\u09a7\u0001\u0000\u0000\u0000"
                    + "\u09a7\u09a9\u0001\u0000\u0000\u0000\u09a8\u09aa\u0003\u015c\u00ae\u0000"
                    + "\u09a9\u09a8\u0001\u0000\u0000\u0000\u09a9\u09aa\u0001\u0000\u0000\u0000"
                    + "\u09aa\u0157\u0001\u0000\u0000\u0000\u09ab\u09b0\u0003\u001a\r\u0000\u09ac"
                    + "\u09ad\u0005\u0159\u0000\u0000\u09ad\u09af\u0003\u001a\r\u0000\u09ae\u09ac"
                    + "\u0001\u0000\u0000\u0000\u09af\u09b2\u0001\u0000\u0000\u0000\u09b0\u09ae"
                    + "\u0001\u0000\u0000\u0000\u09b0\u09b1\u0001\u0000\u0000\u0000\u09b1\u0159"
                    + "\u0001\u0000\u0000\u0000\u09b2\u09b0\u0001\u0000\u0000\u0000\u09b3\u09b5"
                    + "\u0003\u0146\u00a3\u0000\u09b4\u09b6\u0003\u0134\u009a\u0000\u09b5\u09b4"
                    + "\u0001\u0000\u0000\u0000\u09b5\u09b6\u0001\u0000\u0000\u0000\u09b6\u09bc"
                    + "\u0001\u0000\u0000\u0000\u09b7\u09b8\u0005\u0167\u0000\u0000\u09b8\u09b9"
                    + "\u0003\u0116\u008b\u0000\u09b9\u09ba\u0005\u016a\u0000\u0000\u09ba\u09bc"
                    + "\u0001\u0000\u0000\u0000\u09bb\u09b3\u0001\u0000\u0000\u0000\u09bb\u09b7"
                    + "\u0001\u0000\u0000\u0000\u09bc\u09c1\u0001\u0000\u0000\u0000\u09bd\u09bf"
                    + "\u0005\u000e\u0000\u0000\u09be\u09bd\u0001\u0000\u0000\u0000\u09be\u09bf"
                    + "\u0001\u0000\u0000\u0000\u09bf\u09c0\u0001\u0000\u0000\u0000\u09c0\u09c2"
                    + "\u0003\u01b4\u00da\u0000\u09c1\u09be\u0001\u0000\u0000\u0000\u09c1\u09c2"
                    + "\u0001\u0000\u0000\u0000\u09c2\u015b\u0001\u0000\u0000\u0000\u09c3\u09c4"
                    + "\u0005^\u0000\u0000\u09c4\u09c5\u0003\u00b0X\u0000\u09c5\u015d\u0001\u0000"
                    + "\u0000\u0000\u09c6\u09c7\u0005\u00b3\u0000\u0000\u09c7\u09c8\u0005\u0097"
                    + "\u0000\u0000\u09c8\u09c9\u0003\u0160\u00b0\u0000\u09c9\u09ca\u0005\u012e"
                    + "\u0000\u0000\u09ca\u09cb\u0003\u0160\u00b0\u0000\u09cb\u09cc\u0005\u00c8"
                    + "\u0000\u0000\u09cc\u09ce\u0003\u016c\u00b6\u0000\u09cd\u09cf\u0003\u0162"
                    + "\u00b1\u0000\u09ce\u09cd\u0001\u0000\u0000\u0000\u09cf\u09d0\u0001\u0000"
                    + "\u0000\u0000\u09d0\u09ce\u0001\u0000\u0000\u0000\u09d0\u09d1\u0001\u0000"
                    + "\u0000\u0000\u09d1\u015f\u0001\u0000\u0000\u0000\u09d2\u09d8\u0003\u0146"
                    + "\u00a3\u0000\u09d3\u09d4\u0005\u0167\u0000\u0000\u09d4\u09d5\u0003\u0116"
                    + "\u008b\u0000\u09d5\u09d6\u0005\u016a\u0000\u0000\u09d6\u09d8\u0001\u0000"
                    + "\u0000\u0000\u09d7\u09d2\u0001\u0000\u0000\u0000\u09d7\u09d3\u0001\u0000"
                    + "\u0000\u0000\u09d8\u09dd\u0001\u0000\u0000\u0000\u09d9\u09db\u0005\u000e"
                    + "\u0000\u0000\u09da\u09d9\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000"
                    + "\u0000\u0000\u09db\u09dc\u0001\u0000\u0000\u0000\u09dc\u09de\u0003\u01b4"
                    + "\u00da\u0000\u09dd\u09da\u0001\u0000\u0000\u0000\u09dd\u09de\u0001\u0000"
                    + "\u0000\u0000\u09de\u0161\u0001\u0000\u0000\u0000\u09df\u09e1\u0005\u0136"
                    + "\u0000\u0000\u09e0\u09e2\u0005\u00c1\u0000\u0000\u09e1\u09e0\u0001\u0000"
                    + "\u0000\u0000\u09e1\u09e2\u0001\u0000\u0000\u0000\u09e2\u09e3\u0001\u0000"
                    + "\u0000\u0000\u09e3\u09e6\u0005\u00b0\u0000\u0000\u09e4\u09e5\u0005\u000b"
                    + "\u0000\u0000\u09e5\u09e7\u0003\u016c\u00b6\u0000\u09e6\u09e4\u0001\u0000"
                    + "\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000\u0000\u09e7\u09e8\u0001\u0000"
                    + "\u0000\u0000\u09e8\u09e9\u0005\u011f\u0000\u0000\u09e9\u09ed\u0003\u0164"
                    + "\u00b2\u0000\u09ea\u09eb\u0005^\u0000\u0000\u09eb\u09ed\u0005\u0087\u0000"
                    + "\u0000\u09ec\u09df\u0001\u0000\u0000\u0000\u09ec\u09ea\u0001\u0000\u0000"
                    + "\u0000\u09ed\u0163\u0001\u0000\u0000\u0000\u09ee\u09f0\u0005\u008f\u0000"
                    + "\u0000\u09ef\u09f1\u0003\u00b2Y\u0000\u09f0\u09ef\u0001\u0000\u0000\u0000"
                    + "\u09f0\u09f1\u0001\u0000\u0000\u0000\u09f1\u09f2\u0001\u0000\u0000\u0000"
                    + "\u09f2\u09f3\u0005\u0130\u0000\u0000\u09f3\u0a03\u0003\u00b6[\u0000\u09f4"
                    + "\u09f5\u0005\u012b\u0000\u0000\u09f5\u09f6\u0005\u0100\u0000\u0000\u09f6"
                    + "\u09fb\u0003\u001a\r\u0000\u09f7\u09f8\u0005\u0159\u0000\u0000\u09f8\u09fa"
                    + "\u0003\u001a\r\u0000\u09f9\u09f7\u0001\u0000\u0000\u0000\u09fa\u09fd\u0001"
                    + "\u0000\u0000\u0000\u09fb\u09f9\u0001\u0000\u0000\u0000\u09fb\u09fc\u0001"
                    + "\u0000\u0000\u0000\u09fc\u09ff\u0001\u0000\u0000\u0000\u09fd\u09fb\u0001"
                    + "\u0000\u0000\u0000\u09fe\u0a00\u0003\u0148\u00a4\u0000\u09ff\u09fe\u0001"
                    + "\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00\u0a03\u0001"
                    + "\u0000\u0000\u0000\u0a01\u0a03\u0005P\u0000\u0000\u0a02\u09ee\u0001\u0000"
                    + "\u0000\u0000\u0a02\u09f4\u0001\u0000\u0000\u0000\u0a02\u0a01\u0001\u0000"
                    + "\u0000\u0000\u0a03\u0165\u0001\u0000\u0000\u0000\u0a04\u0a06\u0005P\u0000"
                    + "\u0000\u0a05\u0a07\u0005w\u0000\u0000\u0a06\u0a05\u0001\u0000\u0000\u0000"
                    + "\u0a06\u0a07\u0001\u0000\u0000\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000"
                    + "\u0a08\u0a0a\u0003\u0146\u00a3\u0000\u0a09\u0a0b\u0003\u0168\u00b4\u0000"
                    + "\u0a0a\u0a09\u0001\u0000\u0000\u0000\u0a0a\u0a0b\u0001\u0000\u0000\u0000"
                    + "\u0a0b\u0a0e\u0001\u0000\u0000\u0000\u0a0c\u0a0f\u0003\u0148\u00a4\u0000"
                    + "\u0a0d\u0a0f\u0005\b\u0000\u0000\u0a0e\u0a0c\u0001\u0000\u0000\u0000\u0a0e"
                    + "\u0a0d\u0001\u0000\u0000\u0000\u0a0e\u0a0f\u0001\u0000\u0000\u0000\u0a0f"
                    + "\u0167\u0001\u0000\u0000\u0000\u0a10\u0a12\u0004\u00b4\u0005\u0000\u0a11"
                    + "\u0a13\u0005\u000e\u0000\u0000\u0a12\u0a11\u0001\u0000\u0000\u0000\u0a12"
                    + "\u0a13\u0001\u0000\u0000\u0000\u0a13\u0a14\u0001\u0000\u0000\u0000\u0a14"
                    + "\u0a15\u0003\u01b4\u00da\u0000\u0a15\u0169\u0001\u0000\u0000\u0000\u0a16"
                    + "\u0a18\u0007(\u0000\u0000\u0a17\u0a19\u0005\u011a\u0000\u0000\u0a18\u0a17"
                    + "\u0001\u0000\u0000\u0000\u0a18\u0a19\u0001\u0000\u0000\u0000\u0a19\u0a1a"
                    + "\u0001\u0000\u0000\u0000\u0a1a\u0a1b\u0003\u0146\u00a3\u0000\u0a1b\u016b"
                    + "\u0001\u0000\u0000\u0000\u0a1c\u0a1e\u0006\u00b6\uffff\uffff\u0000\u0a1d"
                    + "\u0a1f\u0005\u00c1\u0000\u0000\u0a1e\u0a1d\u0001\u0000\u0000\u0000\u0a1e"
                    + "\u0a1f\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0001\u0000\u0000\u0000\u0a20"
                    + "\u0a21\u0005\u0167\u0000\u0000\u0a21\u0a22\u0003\u016c\u00b6\u0000\u0a22"
                    + "\u0a23\u0005\u016a\u0000\u0000\u0a23\u0a26\u0001\u0000\u0000\u0000\u0a24"
                    + "\u0a26\u0003\u016e\u00b7\u0000\u0a25\u0a1c\u0001\u0000\u0000\u0000\u0a25"
                    + "\u0a24\u0001\u0000\u0000\u0000\u0a26\u0a2d\u0001\u0000\u0000\u0000\u0a27"
                    + "\u0a28\n\u0002\u0000\u0000\u0a28\u0a29\u0003\u0178\u00bc\u0000\u0a29\u0a2a"
                    + "\u0003\u016c\u00b6\u0003\u0a2a\u0a2c\u0001\u0000\u0000\u0000\u0a2b\u0a27"
                    + "\u0001\u0000\u0000\u0000\u0a2c\u0a2f\u0001\u0000\u0000\u0000\u0a2d\u0a2b"
                    + "\u0001\u0000\u0000\u0000\u0a2d\u0a2e\u0001\u0000\u0000\u0000\u0a2e\u016d"
                    + "\u0001\u0000\u0000\u0000\u0a2f\u0a2d\u0001\u0000\u0000\u0000\u0a30\u0a34"
                    + "\u0003\u0170\u00b8\u0000\u0a31\u0a34\u0003\u0176\u00bb\u0000\u0a32\u0a34"
                    + "\u0003\u017c\u00be\u0000\u0a33\u0a30\u0001\u0000\u0000\u0000\u0a33\u0a31"
                    + "\u0001\u0000\u0000\u0000\u0a33\u0a32\u0001\u0000\u0000\u0000\u0a34\u016f"
                    + "\u0001\u0000\u0000\u0000\u0a35\u0a36\u0003\u017c\u00be\u0000\u0a36\u0a38"
                    + "\u0005\u0099\u0000\u0000\u0a37\u0a39\u0005\u00c1\u0000\u0000\u0a38\u0a37"
                    + "\u0001\u0000\u0000\u0000\u0a38\u0a39\u0001\u0000\u0000\u0000\u0a39\u0a3a"
                    + "\u0001\u0000\u0000\u0000\u0a3a\u0a3b\u0005\u00c3\u0000\u0000\u0a3b\u0a4d"
                    + "\u0001\u0000\u0000\u0000\u0a3c\u0a3d\u0003\u017c\u00be\u0000\u0a3d\u0a3e"
                    + "\u0005\u0016\u0000\u0000\u0a3e\u0a3f\u0003\u017c\u00be\u0000\u0a3f\u0a40"
                    + "\u0005\u000b\u0000\u0000\u0a40\u0a41\u0003\u017c\u00be\u0000\u0a41\u0a4d"
                    + "\u0001\u0000\u0000\u0000\u0a42\u0a44\u0005\u00c1\u0000\u0000\u0a43\u0a42"
                    + "\u0001\u0000\u0000\u0000\u0a43\u0a44\u0001\u0000\u0000\u0000\u0a44\u0a45"
                    + "\u0001\u0000\u0000\u0000\u0a45\u0a46\u0005j\u0000\u0000\u0a46\u0a47\u0005"
                    + "\u0167\u0000\u0000\u0a47\u0a48\u0003\u0116\u008b\u0000\u0a48\u0a49\u0005"
                    + "\u016a\u0000\u0000\u0a49\u0a4d\u0001\u0000\u0000\u0000\u0a4a\u0a4d\u0003"
                    + "\u0172\u00b9\u0000\u0a4b\u0a4d\u0003\u0174\u00ba\u0000\u0a4c\u0a35\u0001"
                    + "\u0000\u0000\u0000\u0a4c\u0a3c\u0001\u0000\u0000\u0000\u0a4c\u0a43\u0001"
                    + "\u0000\u0000\u0000\u0a4c\u0a4a\u0001\u0000\u0000\u0000\u0a4c\u0a4b\u0001"
                    + "\u0000\u0000\u0000\u0a4d\u0171\u0001\u0000\u0000\u0000\u0a4e\u0a50\u0003"
                    + "\u017c\u00be\u0000\u0a4f\u0a51\u0005\u00c1\u0000\u0000\u0a50\u0a4f\u0001"
                    + "\u0000\u0000\u0000\u0a50\u0a51\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001"
                    + "\u0000\u0000\u0000\u0a52\u0a53\u0005\u0089\u0000\u0000\u0a53\u0a5d\u0005"
                    + "\u0167\u0000\u0000\u0a54\u0a59\u0003\u017c\u00be\u0000\u0a55\u0a56\u0005"
                    + "\u0159\u0000\u0000\u0a56\u0a58\u0003\u017c\u00be\u0000\u0a57\u0a55\u0001"
                    + "\u0000\u0000\u0000\u0a58\u0a5b\u0001\u0000\u0000\u0000\u0a59\u0a57\u0001"
                    + "\u0000\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000\u0a5a\u0a5e\u0001"
                    + "\u0000\u0000\u0000\u0a5b\u0a59\u0001\u0000\u0000\u0000\u0a5c\u0a5e\u0003"
                    + "\u0116\u008b\u0000\u0a5d\u0a54\u0001\u0000\u0000\u0000\u0a5d\u0a5c\u0001"
                    + "\u0000\u0000\u0000\u0a5e\u0a5f\u0001\u0000\u0000\u0000\u0a5f\u0a60\u0005"
                    + "\u016a\u0000\u0000\u0a60\u0173\u0001\u0000\u0000\u0000\u0a61\u0a62\u0005"
                    + "\u0167\u0000\u0000\u0a62\u0a67\u0003\u017c\u00be\u0000\u0a63\u0a64\u0005"
                    + "\u0159\u0000\u0000\u0a64\u0a66\u0003\u017c\u00be\u0000\u0a65\u0a63\u0001"
                    + "\u0000\u0000\u0000\u0a66\u0a69\u0001\u0000\u0000\u0000\u0a67\u0a65\u0001"
                    + "\u0000\u0000\u0000\u0a67\u0a68\u0001\u0000\u0000\u0000\u0a68\u0a6a\u0001"
                    + "\u0000\u0000\u0000\u0a69\u0a67\u0001\u0000\u0000\u0000\u0a6a\u0a6c\u0005"
                    + "\u016a\u0000\u0000\u0a6b\u0a6d\u0005\u00c1\u0000\u0000\u0a6c\u0a6b\u0001"
                    + "\u0000\u0000\u0000\u0a6c\u0a6d\u0001\u0000\u0000\u0000\u0a6d\u0a6e\u0001"
                    + "\u0000\u0000\u0000\u0a6e\u0a6f\u0005\u0089\u0000\u0000\u0a6f\u0a70\u0005"
                    + "\u0167\u0000\u0000\u0a70\u0a71\u0003\u0116\u008b\u0000\u0a71\u0a72\u0005"
                    + "\u016a\u0000\u0000\u0a72\u0175\u0001\u0000\u0000\u0000\u0a73\u0a74\u0003"
                    + "\u017c\u00be\u0000\u0a74\u0a75\u0003\u017a\u00bd\u0000\u0a75\u0a76\u0003"
                    + "\u017c\u00be\u0000\u0a76\u0177\u0001\u0000\u0000\u0000\u0a77\u0a78\u0007"
                    + ")\u0000\u0000\u0a78\u0179\u0001\u0000\u0000\u0000\u0a79\u0a86\u0005\u015d"
                    + "\u0000\u0000\u0a7a\u0a86\u0005\u015e\u0000\u0000\u0a7b\u0a86\u0005\u015f"
                    + "\u0000\u0000\u0a7c\u0a86\u0005\u0160\u0000\u0000\u0a7d\u0a86\u0005\u0163"
                    + "\u0000\u0000\u0a7e\u0a86\u0005\u0164\u0000\u0000\u0a7f\u0a86\u0005\u0161"
                    + "\u0000\u0000\u0a80\u0a86\u0005\u0162\u0000\u0000\u0a81\u0a83\u0005\u00c1"
                    + "\u0000\u0000\u0a82\u0a81\u0001\u0000\u0000\u0000\u0a82\u0a83\u0001\u0000"
                    + "\u0000\u0000\u0a83\u0a84\u0001\u0000\u0000\u0000\u0a84\u0a86\u0007*\u0000"
                    + "\u0000\u0a85\u0a79\u0001\u0000\u0000\u0000\u0a85\u0a7a\u0001\u0000\u0000"
                    + "\u0000\u0a85\u0a7b\u0001\u0000\u0000\u0000\u0a85\u0a7c\u0001\u0000\u0000"
                    + "\u0000\u0a85\u0a7d\u0001\u0000\u0000\u0000\u0a85\u0a7e\u0001\u0000\u0000"
                    + "\u0000\u0a85\u0a7f\u0001\u0000\u0000\u0000\u0a85\u0a80\u0001\u0000\u0000"
                    + "\u0000\u0a85\u0a82\u0001\u0000\u0000\u0000\u0a86\u017b\u0001\u0000\u0000"
                    + "\u0000\u0a87\u0a88\u0006\u00be\uffff\uffff\u0000\u0a88\u0a89\u0005\u0167"
                    + "\u0000\u0000\u0a89\u0a8a\u0003\u0116\u008b\u0000\u0a8a\u0a8b\u0005\u016a"
                    + "\u0000\u0000\u0a8b\u0a99\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0005\u0167"
                    + "\u0000\u0000\u0a8d\u0a8e\u0003\u017c\u00be\u0000\u0a8e\u0a8f\u0005\u016a"
                    + "\u0000\u0000\u0a8f\u0a99\u0001\u0000\u0000\u0000\u0a90\u0a99\u0003\u0180"
                    + "\u00c0\u0000\u0a91\u0a99\u0003\u0184\u00c2\u0000\u0a92\u0a99\u0003\u0188"
                    + "\u00c4\u0000\u0a93\u0a99\u0003\u018e\u00c7\u0000\u0a94\u0a99\u0003\u0190"
                    + "\u00c8\u0000\u0a95\u0a99\u0003\u0198\u00cc\u0000\u0a96\u0a99\u0003\u019a"
                    + "\u00cd\u0000\u0a97\u0a99\u0003\u017e\u00bf\u0000\u0a98\u0a87\u0001\u0000"
                    + "\u0000\u0000\u0a98\u0a8c\u0001\u0000\u0000\u0000\u0a98\u0a90\u0001\u0000"
                    + "\u0000\u0000\u0a98\u0a91\u0001\u0000\u0000\u0000\u0a98\u0a92\u0001\u0000"
                    + "\u0000\u0000\u0a98\u0a93\u0001\u0000\u0000\u0000\u0a98\u0a94\u0001\u0000"
                    + "\u0000\u0000\u0a98\u0a95\u0001\u0000\u0000\u0000\u0a98\u0a96\u0001\u0000"
                    + "\u0000\u0000\u0a98\u0a97\u0001\u0000\u0000\u0000\u0a99\u0aaa\u0001\u0000"
                    + "\u0000\u0000\u0a9a\u0a9b\n\u000e\u0000\u0000\u0a9b\u0a9c\u0005\u0165\u0000"
                    + "\u0000\u0a9c\u0aa9\u0003\u017c\u00be\u000f\u0a9d\u0a9e\n\r\u0000\u0000"
                    + "\u0a9e\u0a9f\u0005\u015b\u0000\u0000\u0a9f\u0aa9\u0003\u017c\u00be\u000e"
                    + "\u0aa0\u0aa1\n\f\u0000\u0000\u0aa1\u0aa2\u0005\u0157\u0000\u0000\u0aa2"
                    + "\u0aa9\u0003\u017c\u00be\r\u0aa3\u0aa4\n\u000b\u0000\u0000\u0aa4\u0aa5"
                    + "\u0005\u016d\u0000\u0000\u0aa5\u0aa9\u0003\u017c\u00be\f\u0aa6\u0aa7\n"
                    + "\u000f\u0000\u0000\u0aa7\u0aa9\u0003\u0182\u00c1\u0000\u0aa8\u0a9a\u0001"
                    + "\u0000\u0000\u0000\u0aa8\u0a9d\u0001\u0000\u0000\u0000\u0aa8\u0aa0\u0001"
                    + "\u0000\u0000\u0000\u0aa8\u0aa3\u0001\u0000\u0000\u0000\u0aa8\u0aa6\u0001"
                    + "\u0000\u0000\u0000\u0aa9\u0aac\u0001\u0000\u0000\u0000\u0aaa\u0aa8\u0001"
                    + "\u0000\u0000\u0000\u0aaa\u0aab\u0001\u0000\u0000\u0000\u0aab\u017d\u0001"
                    + "\u0000\u0000\u0000\u0aac\u0aaa\u0001\u0000\u0000\u0000\u0aad\u0ab6\u0003"
                    + "\u01b0\u00d8\u0000\u0aae\u0ab6\u0003\u01b2\u00d9\u0000\u0aaf\u0ab6\u0003"
                    + "\u01bc\u00de\u0000\u0ab0\u0ab6\u0003\u01b4\u00da\u0000\u0ab1\u0ab6\u0003"
                    + "\u01b6\u00db\u0000\u0ab2\u0ab6\u0003\u01ba\u00dd\u0000\u0ab3\u0ab6\u0003"
                    + "\u01b8\u00dc\u0000\u0ab4\u0ab6\u0003\u01be\u00df\u0000\u0ab5\u0aad\u0001"
                    + "\u0000\u0000\u0000\u0ab5\u0aae\u0001\u0000\u0000\u0000\u0ab5\u0aaf\u0001"
                    + "\u0000\u0000\u0000\u0ab5\u0ab0\u0001\u0000\u0000\u0000\u0ab5\u0ab1\u0001"
                    + "\u0000\u0000\u0000\u0ab5\u0ab2\u0001\u0000\u0000\u0000\u0ab5\u0ab3\u0001"
                    + "\u0000\u0000\u0000\u0ab5\u0ab4\u0001\u0000\u0000\u0000\u0ab6\u017f\u0001"
                    + "\u0000\u0000\u0000\u0ab7\u0ab8\u0005\u0096\u0000\u0000\u0ab8\u0ab9\u0003"
                    + "\u017c\u00be\u0000\u0ab9\u0aba\u0003\u0182\u00c1\u0000\u0aba\u0181\u0001"
                    + "\u0000\u0000\u0000\u0abb\u0abc\u0007+\u0000\u0000\u0abc\u0183\u0001\u0000"
                    + "\u0000\u0000\u0abd\u0abe\u0003\u0186\u00c3\u0000\u0abe\u0abf\u0007,\u0000"
                    + "\u0000\u0abf\u0ac4\u0003\u0186\u00c3\u0000\u0ac0\u0ac1\u0007,\u0000\u0000"
                    + "\u0ac1\u0ac3\u0003\u0186\u00c3\u0000\u0ac2\u0ac0\u0001\u0000\u0000\u0000"
                    + "\u0ac3\u0ac6\u0001\u0000\u0000\u0000\u0ac4\u0ac2\u0001\u0000\u0000\u0000"
                    + "\u0ac4\u0ac5\u0001\u0000\u0000\u0000\u0ac5\u0185\u0001\u0000\u0000\u0000"
                    + "\u0ac6\u0ac4\u0001\u0000\u0000\u0000\u0ac7\u0ac8\u0005\u0167\u0000\u0000"
                    + "\u0ac8\u0ac9\u0003\u017c\u00be\u0000\u0ac9\u0aca\u0005\u016a\u0000\u0000"
                    + "\u0aca\u0ad1\u0001\u0000\u0000\u0000\u0acb\u0ad1\u0003\u0188\u00c4\u0000"
                    + "\u0acc\u0ad1\u0003\u0190\u00c8\u0000\u0acd\u0ad1\u0003\u0198\u00cc\u0000"
                    + "\u0ace\u0ad1\u0003\u019a\u00cd\u0000\u0acf\u0ad1\u0003\u017e\u00bf\u0000"
                    + "\u0ad0\u0ac7\u0001\u0000\u0000\u0000\u0ad0\u0acb\u0001\u0000\u0000\u0000"
                    + "\u0ad0\u0acc\u0001\u0000\u0000\u0000\u0ad0\u0acd\u0001\u0000\u0000\u0000"
                    + "\u0ad0\u0ace\u0001\u0000\u0000\u0000\u0ad0\u0acf\u0001\u0000\u0000\u0000"
                    + "\u0ad1\u0187\u0001\u0000\u0000\u0000\u0ad2\u0ad5\u0003\u018a\u00c5\u0000"
                    + "\u0ad3\u0ad5\u0003\u018c\u00c6\u0000\u0ad4\u0ad2\u0001\u0000\u0000\u0000"
                    + "\u0ad4\u0ad3\u0001\u0000\u0000\u0000\u0ad5\u0189\u0001\u0000\u0000\u0000"
                    + "\u0ad6\u0ad7\u0005#\u0000\u0000\u0ad7\u0add\u0003\u017c\u00be\u0000\u0ad8"
                    + "\u0ad9\u0005\u0136\u0000\u0000\u0ad9\u0ada\u0003\u017c\u00be\u0000\u0ada"
                    + "\u0adb\u0005\u011f\u0000\u0000\u0adb\u0adc\u0003\u017c\u00be\u0000\u0adc"
                    + "\u0ade\u0001\u0000\u0000\u0000\u0add\u0ad8\u0001\u0000\u0000\u0000\u0ade"
                    + "\u0adf\u0001\u0000\u0000\u0000\u0adf\u0add\u0001\u0000\u0000\u0000\u0adf"
                    + "\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0ae3\u0001\u0000\u0000\u0000\u0ae1"
                    + "\u0ae2\u0005^\u0000\u0000\u0ae2\u0ae4\u0003\u017c\u00be\u0000\u0ae3\u0ae1"
                    + "\u0001\u0000\u0000\u0000\u0ae3\u0ae4\u0001\u0000\u0000\u0000\u0ae4\u0ae5"
                    + "\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0005b\u0000\u0000\u0ae6\u018b\u0001"
                    + "\u0000\u0000\u0000\u0ae7\u0aed\u0005#\u0000\u0000\u0ae8\u0ae9\u0005\u0136"
                    + "\u0000\u0000\u0ae9\u0aea\u0003\u016c\u00b6\u0000\u0aea\u0aeb\u0005\u011f"
                    + "\u0000\u0000\u0aeb\u0aec\u0003\u017c\u00be\u0000\u0aec\u0aee\u0001\u0000"
                    + "\u0000\u0000\u0aed\u0ae8\u0001\u0000\u0000\u0000\u0aee\u0aef\u0001\u0000"
                    + "\u0000\u0000\u0aef\u0aed\u0001\u0000\u0000\u0000\u0aef\u0af0\u0001\u0000"
                    + "\u0000\u0000\u0af0\u0af3\u0001\u0000\u0000\u0000\u0af1\u0af2\u0005^\u0000"
                    + "\u0000\u0af2\u0af4\u0003\u017c\u00be\u0000\u0af3\u0af1\u0001\u0000\u0000"
                    + "\u0000\u0af3\u0af4\u0001\u0000\u0000\u0000\u0af4\u0af5\u0001\u0000\u0000"
                    + "\u0000\u0af5\u0af6\u0005b\u0000\u0000\u0af6\u018d\u0001\u0000\u0000\u0000"
                    + "\u0af7\u0af8\u0003\u01b4\u00da\u0000\u0af8\u0af9\u0005\u0003\u0000\u0000"
                    + "\u0af9\u0afa\u0007-\u0000\u0000\u0afa\u018f\u0001\u0000\u0000\u0000\u0afb"
                    + "\u0afc\u0005\u0013\u0000\u0000\u0afc\u0afe\u0005\u0167\u0000\u0000\u0afd"
                    + "\u0aff\u0003\u0192\u00c9\u0000\u0afe\u0afd\u0001\u0000\u0000\u0000\u0afe"
                    + "\u0aff\u0001\u0000\u0000\u0000\u0aff\u0b00\u0001\u0000\u0000\u0000\u0b00"
                    + "\u0b01\u0003\u017c\u00be\u0000\u0b01\u0b03\u0005\u016a\u0000\u0000\u0b02"
                    + "\u0b04\u0003\u0194\u00ca\u0000\u0b03\u0b02\u0001\u0000\u0000\u0000\u0b03"
                    + "\u0b04\u0001\u0000\u0000\u0000\u0b04\u0b94\u0001\u0000\u0000\u0000\u0b05"
                    + "\u0b06\u00059\u0000\u0000\u0b06\u0b0c\u0005\u0167\u0000\u0000\u0b07\u0b09"
                    + "\u0003\u0192\u00c9\u0000\u0b08\u0b07\u0001\u0000\u0000\u0000\u0b08\u0b09"
                    + "\u0001\u0000\u0000\u0000\u0b09\u0b0a\u0001\u0000\u0000\u0000\u0b0a\u0b0d"
                    + "\u0003\u017c\u00be\u0000\u0b0b\u0b0d\u0005\u0165\u0000\u0000\u0b0c\u0b08"
                    + "\u0001\u0000\u0000\u0000\u0b0c\u0b0b\u0001\u0000\u0000\u0000\u0b0d\u0b0e"
                    + "\u0001\u0000\u0000\u0000\u0b0e\u0b10\u0005\u016a\u0000\u0000\u0b0f\u0b11"
                    + "\u0003\u0194\u00ca\u0000\u0b10\u0b0f\u0001\u0000\u0000\u0000\u0b10\u0b11"
                    + "\u0001\u0000\u0000\u0000\u0b11\u0b94\u0001\u0000\u0000\u0000\u0b12\u0b13"
                    + "\u0005:\u0000\u0000\u0b13\u0b19\u0005\u0167\u0000\u0000\u0b14\u0b16\u0003"
                    + "\u0192\u00c9\u0000\u0b15\u0b14\u0001\u0000\u0000\u0000\u0b15\u0b16\u0001"
                    + "\u0000\u0000\u0000\u0b16\u0b17\u0001\u0000\u0000\u0000\u0b17\u0b1a\u0003"
                    + "\u017c\u00be\u0000\u0b18\u0b1a\u0005\u0165\u0000\u0000\u0b19\u0b15\u0001"
                    + "\u0000\u0000\u0000\u0b19\u0b18\u0001\u0000\u0000\u0000\u0b1a\u0b1b\u0001"
                    + "\u0000\u0000\u0000\u0b1b\u0b1d\u0005\u016a\u0000\u0000\u0b1c\u0b1e\u0003"
                    + "\u0194\u00ca\u0000\u0b1d\u0b1c\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0001"
                    + "\u0000\u0000\u0000\u0b1e\u0b94\u0001\u0000\u0000\u0000\u0b1f\u0b20\u0005"
                    + "\u0140\u0000\u0000\u0b20\u0b21\u0005\u0167\u0000\u0000\u0b21\u0b22\u0005"
                    + "\u016a\u0000\u0000\u0b22\u0b94\u0003\u0194\u00ca\u0000\u0b23\u0b24\u0005"
                    + "\u0144\u0000\u0000\u0b24\u0b25\u0005\u0167\u0000\u0000\u0b25\u0b26\u0005"
                    + "\u016a\u0000\u0000\u0b26\u0b94\u0003\u0194\u00ca\u0000\u0b27\u0b28\u0005"
                    + "\u0145\u0000\u0000\u0b28\u0b29\u0005\u0167\u0000\u0000\u0b29\u0b2a\u0003"
                    + "\u017c\u00be\u0000\u0b2a\u0b2b\u0005\u016a\u0000\u0000\u0b2b\u0b2c\u0003"
                    + "\u0194\u00ca\u0000\u0b2c\u0b94\u0001\u0000\u0000\u0000\u0b2d\u0b2e\u0005"
                    + "\u0146\u0000\u0000\u0b2e\u0b2f\u0005\u0167\u0000\u0000\u0b2f\u0b36\u0003"
                    + "\u017c\u00be\u0000\u0b30\u0b31\u0005\u0159\u0000\u0000\u0b31\u0b34\u0003"
                    + "\u017c\u00be\u0000\u0b32\u0b33\u0005\u0159\u0000\u0000\u0b33\u0b35\u0003"
                    + "\u017c\u00be\u0000\u0b34\u0b32\u0001\u0000\u0000\u0000\u0b34\u0b35\u0001"
                    + "\u0000\u0000\u0000\u0b35\u0b37\u0001\u0000\u0000\u0000\u0b36\u0b30\u0001"
                    + "\u0000\u0000\u0000\u0b36\u0b37\u0001\u0000\u0000\u0000\u0b37\u0b38\u0001"
                    + "\u0000\u0000\u0000\u0b38\u0b39\u0005\u016a\u0000\u0000\u0b39\u0b3a\u0003"
                    + "\u0194\u00ca\u0000\u0b3a\u0b94\u0001\u0000\u0000\u0000\u0b3b\u0b3c\u0005"
                    + "\u0147\u0000\u0000\u0b3c\u0b3d\u0005\u0167\u0000\u0000\u0b3d\u0b3e\u0003"
                    + "\u017c\u00be\u0000\u0b3e\u0b3f\u0005\u016a\u0000\u0000\u0b3f\u0b40\u0003"
                    + "\u0194\u00ca\u0000\u0b40\u0b94\u0001\u0000\u0000\u0000\u0b41\u0b42\u0005"
                    + "\u0148\u0000\u0000\u0b42\u0b43\u0005\u0167\u0000\u0000\u0b43\u0b4a\u0003"
                    + "\u017c\u00be\u0000\u0b44\u0b45\u0005\u0159\u0000\u0000\u0b45\u0b48\u0003"
                    + "\u017c\u00be\u0000\u0b46\u0b47\u0005\u0159\u0000\u0000\u0b47\u0b49\u0003"
                    + "\u017c\u00be\u0000\u0b48\u0b46\u0001\u0000\u0000\u0000\u0b48\u0b49\u0001"
                    + "\u0000\u0000\u0000\u0b49\u0b4b\u0001\u0000\u0000\u0000\u0b4a\u0b44\u0001"
                    + "\u0000\u0000\u0000\u0b4a\u0b4b\u0001\u0000\u0000\u0000\u0b4b\u0b4c\u0001"
                    + "\u0000\u0000\u0000\u0b4c\u0b4d\u0005\u016a\u0000\u0000\u0b4d\u0b4e\u0003"
                    + "\u0194\u00ca\u0000\u0b4e\u0b94\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0005"
                    + "\u00b1\u0000\u0000\u0b50\u0b52\u0005\u0167\u0000\u0000\u0b51\u0b53\u0003"
                    + "\u0192\u00c9\u0000\u0b52\u0b51\u0001\u0000\u0000\u0000\u0b52\u0b53\u0001"
                    + "\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000\u0000\u0b54\u0b55\u0003"
                    + "\u017c\u00be\u0000\u0b55\u0b57\u0005\u016a\u0000\u0000\u0b56\u0b58\u0003"
                    + "\u0194\u00ca\u0000\u0b57\u0b56\u0001\u0000\u0000\u0000\u0b57\u0b58\u0001"
                    + "\u0000\u0000\u0000\u0b58\u0b94\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0005"
                    + "\u00b7\u0000\u0000\u0b5a\u0b5c\u0005\u0167\u0000\u0000\u0b5b\u0b5d\u0003"
                    + "\u0192\u00c9\u0000\u0b5c\u0b5b\u0001\u0000\u0000\u0000\u0b5c\u0b5d\u0001"
                    + "\u0000\u0000\u0000\u0b5d\u0b5e\u0001\u0000\u0000\u0000\u0b5e\u0b5f\u0003"
                    + "\u017c\u00be\u0000\u0b5f\u0b61\u0005\u016a\u0000\u0000\u0b60\u0b62\u0003"
                    + "\u0194\u00ca\u0000\u0b61\u0b60\u0001\u0000\u0000\u0000\u0b61\u0b62\u0001"
                    + "\u0000\u0000\u0000\u0b62\u0b94\u0001\u0000\u0000\u0000\u0b63\u0b64\u0005"
                    + "\u0151\u0000\u0000\u0b64\u0b65\u0005\u0167\u0000\u0000\u0b65\u0b66\u0005"
                    + "\u016a\u0000\u0000\u0b66\u0b94\u0003\u0194\u00ca\u0000\u0b67\u0b68\u0005"
                    + "\u0152\u0000\u0000\u0b68\u0b69\u0005\u0167\u0000\u0000\u0b69\u0b6a\u0005"
                    + "\u016a\u0000\u0000\u0b6a\u0b94\u0003\u0194\u00ca\u0000\u0b6b\u0b6c\u0005"
                    + "\u0153\u0000\u0000\u0b6c\u0b6e\u0005\u0167\u0000\u0000\u0b6d\u0b6f\u0003"
                    + "\u0192\u00c9\u0000\u0b6e\u0b6d\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001"
                    + "\u0000\u0000\u0000\u0b6f\u0b70\u0001\u0000\u0000\u0000\u0b70\u0b71\u0003"
                    + "\u017c\u00be\u0000\u0b71\u0b73\u0005\u016a\u0000\u0000\u0b72\u0b74\u0003"
                    + "\u0194\u00ca\u0000\u0b73\u0b72\u0001\u0000\u0000\u0000\u0b73\u0b74\u0001"
                    + "\u0000\u0000\u0000\u0b74\u0b94\u0001\u0000\u0000\u0000\u0b75\u0b76\u0005"
                    + "\u0118\u0000\u0000\u0b76\u0b78\u0005\u0167\u0000\u0000\u0b77\u0b79\u0003"
                    + "\u0192\u00c9\u0000\u0b78\u0b77\u0001\u0000\u0000\u0000\u0b78\u0b79\u0001"
                    + "\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000\u0000\u0000\u0b7a\u0b7b\u0003"
                    + "\u017c\u00be\u0000\u0b7b\u0b7d\u0005\u016a\u0000\u0000\u0b7c\u0b7e\u0003"
                    + "\u0194\u00ca\u0000\u0b7d\u0b7c\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0001"
                    + "\u0000\u0000\u0000\u0b7e\u0b94\u0001\u0000\u0000\u0000\u0b7f\u0b80\u0005"
                    + "\u0131\u0000\u0000\u0b80\u0b82\u0005\u0167\u0000\u0000\u0b81\u0b83\u0003"
                    + "\u0192\u00c9\u0000\u0b82\u0b81\u0001\u0000\u0000\u0000\u0b82\u0b83\u0001"
                    + "\u0000\u0000\u0000\u0b83\u0b84\u0001\u0000\u0000\u0000\u0b84\u0b85\u0003"
                    + "\u017c\u00be\u0000\u0b85\u0b87\u0005\u016a\u0000\u0000\u0b86\u0b88\u0003"
                    + "\u0194\u00ca\u0000\u0b87\u0b86\u0001\u0000\u0000\u0000\u0b87\u0b88\u0001"
                    + "\u0000\u0000\u0000\u0b88\u0b94\u0001\u0000\u0000\u0000\u0b89\u0b8a\u0005"
                    + "\u0155\u0000\u0000\u0b8a\u0b8c\u0005\u0167\u0000\u0000\u0b8b\u0b8d\u0003"
                    + "\u0192\u00c9\u0000\u0b8c\u0b8b\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0001"
                    + "\u0000\u0000\u0000\u0b8d\u0b8e\u0001\u0000\u0000\u0000\u0b8e\u0b8f\u0003"
                    + "\u017c\u00be\u0000\u0b8f\u0b91\u0005\u016a\u0000\u0000\u0b90\u0b92\u0003"
                    + "\u0194\u00ca\u0000\u0b91\u0b90\u0001\u0000\u0000\u0000\u0b91\u0b92\u0001"
                    + "\u0000\u0000\u0000\u0b92\u0b94\u0001\u0000\u0000\u0000\u0b93\u0afb\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b05\u0001\u0000\u0000\u0000\u0b93\u0b12\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b1f\u0001\u0000\u0000\u0000\u0b93\u0b23\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b27\u0001\u0000\u0000\u0000\u0b93\u0b2d\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b3b\u0001\u0000\u0000\u0000\u0b93\u0b41\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b4f\u0001\u0000\u0000\u0000\u0b93\u0b59\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b63\u0001\u0000\u0000\u0000\u0b93\u0b67\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b6b\u0001\u0000\u0000\u0000\u0b93\u0b75\u0001"
                    + "\u0000\u0000\u0000\u0b93\u0b7f\u0001\u0000\u0000\u0000\u0b93\u0b89\u0001"
                    + "\u0000\u0000\u0000\u0b94\u0191\u0001\u0000\u0000\u0000\u0b95\u0b96\u0007"
                    + "$\u0000\u0000\u0b96\u0193\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005\u00cf"
                    + "\u0000\u0000\u0b98\u0b9a\u0005\u0167\u0000\u0000\u0b99\u0b9b\u0003\u0196"
                    + "\u00cb\u0000\u0b9a\u0b99\u0001\u0000\u0000\u0000\u0b9a\u0b9b\u0001\u0000"
                    + "\u0000\u0000\u0b9b\u0b9d\u0001\u0000\u0000\u0000\u0b9c\u0b9e\u0003\u0150"
                    + "\u00a8\u0000\u0b9d\u0b9c\u0001\u0000\u0000\u0000\u0b9d\u0b9e\u0001\u0000"
                    + "\u0000\u0000\u0b9e\u0b9f\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0005\u016a"
                    + "\u0000\u0000\u0ba0\u0195\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0005\u00d3"
                    + "\u0000\u0000\u0ba2\u0ba3\u0005\u001e\u0000\u0000\u0ba3\u0ba8\u0003\u017c"
                    + "\u00be\u0000\u0ba4\u0ba5\u0005\u0159\u0000\u0000\u0ba5\u0ba7\u0003\u017c"
                    + "\u00be\u0000\u0ba6\u0ba4\u0001\u0000\u0000\u0000\u0ba7\u0baa\u0001\u0000"
                    + "\u0000\u0000\u0ba8\u0ba6\u0001\u0000\u0000\u0000\u0ba8\u0ba9\u0001\u0000"
                    + "\u0000\u0000\u0ba9\u0197\u0001\u0000\u0000\u0000\u0baa\u0ba8\u0001\u0000"
                    + "\u0000\u0000\u0bab\u0c74\u0005\u013f\u0000\u0000\u0bac\u0bad\u0005%\u0000"
                    + "\u0000\u0bad\u0bae\u0005\u0167\u0000\u0000\u0bae\u0baf\u0003\u017c\u00be"
                    + "\u0000\u0baf\u0bb0\u0005\u000e\u0000\u0000\u0bb0\u0bb2\u0003v;\u0000\u0bb1"
                    + "\u0bb3\u0003x<\u0000\u0bb2\u0bb1\u0001\u0000\u0000\u0000\u0bb2\u0bb3\u0001"
                    + "\u0000\u0000\u0000\u0bb3\u0bb4\u0001\u0000\u0000\u0000\u0bb4\u0bb5\u0005"
                    + "\u016a\u0000\u0000\u0bb5\u0c74\u0001\u0000\u0000\u0000\u0bb6\u0bb7\u0005"
                    + "9\u0000\u0000\u0bb7\u0bba\u0005\u0167\u0000\u0000\u0bb8\u0bbb\u0003\u017c"
                    + "\u00be\u0000\u0bb9\u0bbb\u0005\u0165\u0000\u0000\u0bba\u0bb8\u0001\u0000"
                    + "\u0000\u0000\u0bba\u0bb9\u0001\u0000\u0000\u0000\u0bbb\u0bbc\u0001\u0000"
                    + "\u0000\u0000\u0bbc\u0c74\u0005\u016a\u0000\u0000\u0bbd\u0c74\u0005\u0141"
                    + "\u0000\u0000\u0bbe\u0bbf\u0005?\u0000\u0000\u0bbf\u0c74\u0005D\u0000\u0000"
                    + "\u0bc0\u0bc4\u0005\u0142\u0000\u0000\u0bc1\u0bc2\u0005?\u0000\u0000\u0bc2"
                    + "\u0bc4\u0005\u0120\u0000\u0000\u0bc3\u0bc0\u0001\u0000\u0000\u0000\u0bc3"
                    + "\u0bc1\u0001\u0000\u0000\u0000\u0bc4\u0bc9\u0001\u0000\u0000\u0000\u0bc5"
                    + "\u0bc6\u0005\u0167\u0000\u0000\u0bc6\u0bc7\u0003\u017c\u00be\u0000\u0bc7"
                    + "\u0bc8\u0005\u016a\u0000\u0000\u0bc8\u0bca\u0001\u0000\u0000\u0000\u0bc9"
                    + "\u0bc5\u0001\u0000\u0000\u0000\u0bc9\u0bca\u0001\u0000\u0000\u0000\u0bca"
                    + "\u0c74\u0001\u0000\u0000\u0000\u0bcb\u0c74\u0005\u0143\u0000\u0000\u0bcc"
                    + "\u0bcd\u0005?\u0000\u0000\u0bcd\u0c74\u0005\u0156\u0000\u0000\u0bce\u0bcf"
                    + "\u0005\u0149\u0000\u0000\u0bcf\u0bd0\u0005\u0167\u0000\u0000\u0bd0\u0bdd"
                    + "\u0003\u017c\u00be\u0000\u0bd1\u0bd2\u0005\u0159\u0000\u0000\u0bd2\u0bda"
                    + "\u0003\u017c\u00be\u0000\u0bd3\u0bd4\u0005\u0159\u0000\u0000\u0bd4\u0bd5"
                    + "\u0003\u017c\u00be\u0000\u0bd5\u0bd6\u0005\u015d\u0000\u0000\u0bd6\u0bd7"
                    + "\u0003\u017c\u00be\u0000\u0bd7\u0bd9\u0001\u0000\u0000\u0000\u0bd8\u0bd3"
                    + "\u0001\u0000\u0000\u0000\u0bd9\u0bdc\u0001\u0000\u0000\u0000\u0bda\u0bd8"
                    + "\u0001\u0000\u0000\u0000\u0bda\u0bdb\u0001\u0000\u0000\u0000\u0bdb\u0bde"
                    + "\u0001\u0000\u0000\u0000\u0bdc\u0bda\u0001\u0000\u0000\u0000\u0bdd\u0bd1"
                    + "\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0001\u0000\u0000\u0000\u0bde\u0bdf"
                    + "\u0001\u0000\u0000\u0000\u0bdf\u0be0\u0005\u016a\u0000\u0000\u0be0\u0c74"
                    + "\u0001\u0000\u0000\u0000\u0be1\u0be2\u0005\u014a\u0000\u0000\u0be2\u0be3"
                    + "\u0005\u0167\u0000\u0000\u0be3\u0bf0\u0003\u017c\u00be\u0000\u0be4\u0be5"
                    + "\u0005\u0159\u0000\u0000\u0be5\u0bed\u0003\u017c\u00be\u0000\u0be6\u0be7"
                    + "\u0005\u0159\u0000\u0000\u0be7\u0be8\u0003\u017c\u00be\u0000\u0be8\u0be9"
                    + "\u0005\u015d\u0000\u0000\u0be9\u0bea\u0003\u017c\u00be\u0000\u0bea\u0bec"
                    + "\u0001\u0000\u0000\u0000\u0beb\u0be6\u0001\u0000\u0000\u0000\u0bec\u0bef"
                    + "\u0001\u0000\u0000\u0000\u0bed\u0beb\u0001\u0000\u0000\u0000\u0bed\u0bee"
                    + "\u0001\u0000\u0000\u0000\u0bee\u0bf1\u0001\u0000\u0000\u0000\u0bef\u0bed"
                    + "\u0001\u0000\u0000\u0000\u0bf0\u0be4\u0001\u0000\u0000\u0000\u0bf0\u0bf1"
                    + "\u0001\u0000\u0000\u0000\u0bf1\u0bf2\u0001\u0000\u0000\u0000\u0bf2\u0bf3"
                    + "\u0005\u016a\u0000\u0000\u0bf3\u0c74\u0001\u0000\u0000\u0000\u0bf4\u0bf5"
                    + "\u0005\u014b\u0000\u0000\u0bf5\u0bf6\u0005\u0167\u0000\u0000\u0bf6\u0c03"
                    + "\u0003\u017c\u00be\u0000\u0bf7\u0bf8\u0005\u0159\u0000\u0000\u0bf8\u0c00"
                    + "\u0003\u017c\u00be\u0000\u0bf9\u0bfa\u0005\u0159\u0000\u0000\u0bfa\u0bfb"
                    + "\u0003\u017c\u00be\u0000\u0bfb\u0bfc\u0005\u015d\u0000\u0000\u0bfc\u0bfd"
                    + "\u0003\u017c\u00be\u0000\u0bfd\u0bff\u0001\u0000\u0000\u0000\u0bfe\u0bf9"
                    + "\u0001\u0000\u0000\u0000\u0bff\u0c02\u0001\u0000\u0000\u0000\u0c00\u0bfe"
                    + "\u0001\u0000\u0000\u0000\u0c00\u0c01\u0001\u0000\u0000\u0000\u0c01\u0c04"
                    + "\u0001\u0000\u0000\u0000\u0c02\u0c00\u0001\u0000\u0000\u0000\u0c03\u0bf7"
                    + "\u0001\u0000\u0000\u0000\u0c03\u0c04\u0001\u0000\u0000\u0000\u0c04\u0c05"
                    + "\u0001\u0000\u0000\u0000\u0c05\u0c06\u0005\u016a\u0000\u0000\u0c06\u0c74"
                    + "\u0001\u0000\u0000\u0000\u0c07\u0c08\u0005\u014c\u0000\u0000\u0c08\u0c09"
                    + "\u0005\u0167\u0000\u0000\u0c09\u0c16\u0003\u017c\u00be\u0000\u0c0a\u0c0b"
                    + "\u0005\u0159\u0000\u0000\u0c0b\u0c13\u0003\u017c\u00be\u0000\u0c0c\u0c0d"
                    + "\u0005\u0159\u0000\u0000\u0c0d\u0c0e\u0003\u017c\u00be\u0000\u0c0e\u0c0f"
                    + "\u0005\u015d\u0000\u0000\u0c0f\u0c10\u0003\u017c\u00be\u0000\u0c10\u0c12"
                    + "\u0001\u0000\u0000\u0000\u0c11\u0c0c\u0001\u0000\u0000\u0000\u0c12\u0c15"
                    + "\u0001\u0000\u0000\u0000\u0c13\u0c11\u0001\u0000\u0000\u0000\u0c13\u0c14"
                    + "\u0001\u0000\u0000\u0000\u0c14\u0c17\u0001\u0000\u0000\u0000\u0c15\u0c13"
                    + "\u0001\u0000\u0000\u0000\u0c16\u0c0a\u0001\u0000\u0000\u0000\u0c16\u0c17"
                    + "\u0001\u0000\u0000\u0000\u0c17\u0c18\u0001\u0000\u0000\u0000\u0c18\u0c19"
                    + "\u0005\u016a\u0000\u0000\u0c19\u0c74\u0001\u0000\u0000\u0000\u0c1a\u0c1b"
                    + "\u0005\u014d\u0000\u0000\u0c1b\u0c1c\u0005\u0167\u0000\u0000\u0c1c\u0c29"
                    + "\u0003\u017c\u00be\u0000\u0c1d\u0c1e\u0005\u0159\u0000\u0000\u0c1e\u0c26"
                    + "\u0003\u017c\u00be\u0000\u0c1f\u0c20\u0005\u0159\u0000\u0000\u0c20\u0c21"
                    + "\u0003\u017c\u00be\u0000\u0c21\u0c22\u0005\u015d\u0000\u0000\u0c22\u0c23"
                    + "\u0003\u017c\u00be\u0000\u0c23\u0c25\u0001\u0000\u0000\u0000\u0c24\u0c1f"
                    + "\u0001\u0000\u0000\u0000\u0c25\u0c28\u0001\u0000\u0000\u0000\u0c26\u0c24"
                    + "\u0001\u0000\u0000\u0000\u0c26\u0c27\u0001\u0000\u0000\u0000\u0c27\u0c2a"
                    + "\u0001\u0000\u0000\u0000\u0c28\u0c26\u0001\u0000\u0000\u0000\u0c29\u0c1d"
                    + "\u0001\u0000\u0000\u0000\u0c29\u0c2a\u0001\u0000\u0000\u0000\u0c2a\u0c2b"
                    + "\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0005\u016a\u0000\u0000\u0c2c\u0c74"
                    + "\u0001\u0000\u0000\u0000\u0c2d\u0c2e\u0005\u014e\u0000\u0000\u0c2e\u0c2f"
                    + "\u0005\u0167\u0000\u0000\u0c2f\u0c3c\u0003\u017c\u00be\u0000\u0c30\u0c31"
                    + "\u0005\u0159\u0000\u0000\u0c31\u0c39\u0003\u017c\u00be\u0000\u0c32\u0c33"
                    + "\u0005\u0159\u0000\u0000\u0c33\u0c34\u0003\u017c\u00be\u0000\u0c34\u0c35"
                    + "\u0005\u015d\u0000\u0000\u0c35\u0c36\u0003\u017c\u00be\u0000\u0c36\u0c38"
                    + "\u0001\u0000\u0000\u0000\u0c37\u0c32\u0001\u0000\u0000\u0000\u0c38\u0c3b"
                    + "\u0001\u0000\u0000\u0000\u0c39\u0c37\u0001\u0000\u0000\u0000\u0c39\u0c3a"
                    + "\u0001\u0000\u0000\u0000\u0c3a\u0c3d\u0001\u0000\u0000\u0000\u0c3b\u0c39"
                    + "\u0001\u0000\u0000\u0000\u0c3c\u0c30\u0001\u0000\u0000\u0000\u0c3c\u0c3d"
                    + "\u0001\u0000\u0000\u0000\u0c3d\u0c3e\u0001\u0000\u0000\u0000\u0c3e\u0c3f"
                    + "\u0005\u016a\u0000\u0000\u0c3f\u0c74\u0001\u0000\u0000\u0000\u0c40\u0c41"
                    + "\u0005\u014f\u0000\u0000\u0c41\u0c42\u0005\u0167\u0000\u0000\u0c42\u0c4a"
                    + "\u0003\u017c\u00be\u0000\u0c43\u0c44\u0005\u0159\u0000\u0000\u0c44\u0c45"
                    + "\u0003\u017c\u00be\u0000\u0c45\u0c46\u0005\u015d\u0000\u0000\u0c46\u0c47"
                    + "\u0003\u017c\u00be\u0000\u0c47\u0c49\u0001\u0000\u0000\u0000\u0c48\u0c43"
                    + "\u0001\u0000\u0000\u0000\u0c49\u0c4c\u0001\u0000\u0000\u0000\u0c4a\u0c48"
                    + "\u0001\u0000\u0000\u0000\u0c4a\u0c4b\u0001\u0000\u0000\u0000\u0c4b\u0c4d"
                    + "\u0001\u0000\u0000\u0000\u0c4c\u0c4a\u0001\u0000\u0000\u0000\u0c4d\u0c4e"
                    + "\u0005\u016a\u0000\u0000\u0c4e\u0c74\u0001\u0000\u0000\u0000\u0c4f\u0c50"
                    + "\u0005\u0150\u0000\u0000\u0c50\u0c51\u0005\u0167\u0000\u0000\u0c51\u0c57"
                    + "\u0003\u017c\u00be\u0000\u0c52\u0c53\u0005\u0159\u0000\u0000\u0c53\u0c54"
                    + "\u0003\u017c\u00be\u0000\u0c54\u0c55\u0005\u015d\u0000\u0000\u0c55\u0c56"
                    + "\u0003\u017c\u00be\u0000\u0c56\u0c58\u0001\u0000\u0000\u0000\u0c57\u0c52"
                    + "\u0001\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000\u0000\u0000\u0c59\u0c57"
                    + "\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0001\u0000\u0000\u0000\u0c5a\u0c5d"
                    + "\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0005\u0159\u0000\u0000\u0c5c\u0c5e"
                    + "\u0003\u017c\u00be\u0000\u0c5d\u0c5b\u0001\u0000\u0000\u0000\u0c5d\u0c5e"
                    + "\u0001\u0000\u0000\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c60"
                    + "\u0005\u016a\u0000\u0000\u0c60\u0c74\u0001\u0000\u0000\u0000\u0c61\u0c62"
                    + "\u0005\u00f8\u0000\u0000\u0c62\u0c63\u0005\u0167\u0000\u0000\u0c63\u0c64"
                    + "\u0003\u017c\u00be\u0000\u0c64\u0c65\u0005\u016a\u0000\u0000\u0c65\u0c74"
                    + "\u0001\u0000\u0000\u0000\u0c66\u0c67\u0005\u0117\u0000\u0000\u0c67\u0c68"
                    + "\u0005\u0167\u0000\u0000\u0c68\u0c69\u0003\u017c\u00be\u0000\u0c69\u0c6a"
                    + "\u0005w\u0000\u0000\u0c6a\u0c6d\u0003\u017c\u00be\u0000\u0c6b\u0c6c\u0005"
                    + "s\u0000\u0000\u0c6c\u0c6e\u0003\u017c\u00be\u0000\u0c6d\u0c6b\u0001\u0000"
                    + "\u0000\u0000\u0c6d\u0c6e\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0001\u0000"
                    + "\u0000\u0000\u0c6f\u0c70\u0005\u016a\u0000\u0000\u0c70\u0c74\u0001\u0000"
                    + "\u0000\u0000\u0c71\u0c74\u0005\u0154\u0000\u0000\u0c72\u0c74\u0005\u0156"
                    + "\u0000\u0000\u0c73\u0bab\u0001\u0000\u0000\u0000\u0c73\u0bac\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0bb6\u0001\u0000\u0000\u0000\u0c73\u0bbd\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0bbe\u0001\u0000\u0000\u0000\u0c73\u0bc3\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0bcb\u0001\u0000\u0000\u0000\u0c73\u0bcc\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0bce\u0001\u0000\u0000\u0000\u0c73\u0be1\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0bf4\u0001\u0000\u0000\u0000\u0c73\u0c07\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0c1a\u0001\u0000\u0000\u0000\u0c73\u0c2d\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0c40\u0001\u0000\u0000\u0000\u0c73\u0c4f\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0c61\u0001\u0000\u0000\u0000\u0c73\u0c66\u0001\u0000"
                    + "\u0000\u0000\u0c73\u0c71\u0001\u0000\u0000\u0000\u0c73\u0c72\u0001\u0000"
                    + "\u0000\u0000\u0c74\u0199\u0001\u0000\u0000\u0000\u0c75\u0c76\u0003\u01b4"
                    + "\u00da\u0000\u0c76\u0c78\u0005\u0167\u0000\u0000\u0c77\u0c79\u0003\u019c"
                    + "\u00ce\u0000\u0c78\u0c77\u0001\u0000\u0000\u0000\u0c78\u0c79\u0001\u0000"
                    + "\u0000\u0000\u0c79\u0c7a\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0005\u016a"
                    + "\u0000\u0000\u0c7b\u019b\u0001\u0000\u0000\u0000\u0c7c\u0c81\u0003\u019e"
                    + "\u00cf\u0000\u0c7d\u0c7e\u0005\u0159\u0000\u0000\u0c7e\u0c80\u0003\u019e"
                    + "\u00cf\u0000\u0c7f\u0c7d\u0001\u0000\u0000\u0000\u0c80\u0c83\u0001\u0000"
                    + "\u0000\u0000\u0c81\u0c7f\u0001\u0000\u0000\u0000\u0c81\u0c82\u0001\u0000"
                    + "\u0000\u0000\u0c82\u019d\u0001\u0000\u0000\u0000\u0c83\u0c81\u0001\u0000"
                    + "\u0000\u0000\u0c84\u0c8a\u0004\u00cf\f\u0000\u0c85\u0c86\u0003\u01b4\u00da"
                    + "\u0000\u0c86\u0c88\u0005\u015d\u0000\u0000\u0c87\u0c89\u0005\u0161\u0000"
                    + "\u0000\u0c88\u0c87\u0001\u0000\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000"
                    + "\u0000\u0c89\u0c8b\u0001\u0000\u0000\u0000\u0c8a\u0c85\u0001\u0000\u0000"
                    + "\u0000\u0c8a\u0c8b\u0001\u0000\u0000\u0000\u0c8b\u0c8c\u0001\u0000\u0000"
                    + "\u0000\u0c8c\u0c8d\u0003\u017c\u00be\u0000\u0c8d\u019f\u0001\u0000\u0000"
                    + "\u0000\u0c8e\u0c91\u0003\u0116\u008b\u0000\u0c8f\u0c91\u0003\u017c\u00be"
                    + "\u0000\u0c90\u0c8e\u0001\u0000\u0000\u0000\u0c90\u0c8f\u0001\u0000\u0000"
                    + "\u0000\u0c91\u01a1\u0001\u0000\u0000\u0000\u0c92\u0c95\u0003\u01ae\u00d7"
                    + "\u0000\u0c93\u0c95\u0003\u017c\u00be\u0000\u0c94\u0c92\u0001\u0000\u0000"
                    + "\u0000\u0c94\u0c93\u0001\u0000\u0000\u0000\u0c95\u01a3\u0001\u0000\u0000"
                    + "\u0000\u0c96\u0c9a\u0005\u0083\u0000\u0000\u0c97\u0c99\u0003\u01a6\u00d3"
                    + "\u0000\u0c98\u0c97\u0001\u0000\u0000\u0000\u0c99\u0c9c\u0001\u0000\u0000"
                    + "\u0000\u0c9a\u0c98\u0001\u0000\u0000\u0000\u0c9a\u0c9b\u0001\u0000\u0000"
                    + "\u0000\u0c9b\u01a5\u0001\u0000\u0000\u0000\u0c9c\u0c9a\u0001\u0000\u0000"
                    + "\u0000\u0c9d\u0c9e\u0005\u016d\u0000\u0000\u0c9e\u0c9f\u0003\u01b4\u00da"
                    + "\u0000\u0c9f\u0ca0\u0003\u017c\u00be\u0000\u0ca0\u0caa\u0001\u0000\u0000"
                    + "\u0000\u0ca1\u0ca2\u0005\u016d\u0000\u0000\u0ca2\u0ca3\u0003\u01b4\u00da"
                    + "\u0000\u0ca3\u0ca4\u0005\u016e\u0000\u0000\u0ca4\u0ca5\u0005\u015d\u0000"
                    + "\u0000\u0ca5\u0ca6\u0003\u017c\u00be\u0000\u0ca6\u0caa\u0001\u0000\u0000"
                    + "\u0000\u0ca7\u0ca8\u0005\u016d\u0000\u0000\u0ca8\u0caa\u0003\u01b4\u00da"
                    + "\u0000\u0ca9\u0c9d\u0001\u0000\u0000\u0000\u0ca9\u0ca1\u0001\u0000\u0000"
                    + "\u0000\u0ca9\u0ca7\u0001\u0000\u0000\u0000\u0caa\u01a7\u0001\u0000\u0000"
                    + "\u0000\u0cab\u0cac\u0005\u0005\u0000\u0000\u0cac\u0cad\u0003\u01aa\u00d5"
                    + "\u0000\u0cad\u0cae\u0005\u016c\u0000\u0000\u0cae\u0cb1\u0001\u0000\u0000"
                    + "\u0000\u0caf\u0cb1\u0003\u01ac\u00d6\u0000\u0cb0\u0cab\u0001\u0000\u0000"
                    + "\u0000\u0cb0\u0caf\u0001\u0000\u0000\u0000\u0cb1\u01a9\u0001\u0000\u0000"
                    + "\u0000\u0cb2\u0cb4\t\u0000\u0000\u0000\u0cb3\u0cb2\u0001\u0000\u0000\u0000"
                    + "\u0cb4\u0cb7\u0001\u0000\u0000\u0000\u0cb5\u0cb6\u0001\u0000\u0000\u0000"
                    + "\u0cb5\u0cb3\u0001\u0000\u0000\u0000\u0cb6\u01ab\u0001\u0000\u0000\u0000"
                    + "\u0cb7\u0cb5\u0001\u0000\u0000\u0000\u0cb8\u0cb9\u0005\u0084\u0000\u0000"
                    + "\u0cb9\u0cba\u0003\u017c\u00be\u0000\u0cba\u01ad\u0001\u0000\u0000\u0000"
                    + "\u0cbb\u0cca\u0005\u0176\u0000\u0000\u0cbc\u0cc0\u0005\u015b\u0000\u0000"
                    + "\u0cbd\u0cbe\u0005\u0004\u0000\u0000\u0cbe\u0cc0\u0005\u015b\u0000\u0000"
                    + "\u0cbf\u0cbc\u0001\u0000\u0000\u0000\u0cbf\u0cbd\u0001\u0000\u0000\u0000"
                    + "\u0cbf\u0cc0\u0001\u0000\u0000\u0000\u0cc0\u0cc1\u0001\u0000\u0000\u0000"
                    + "\u0cc1\u0cc6\u0003\u01b4\u00da\u0000\u0cc2\u0cc3\u0005\u015b\u0000\u0000"
                    + "\u0cc3\u0cc5\u0003\u01b4\u00da\u0000\u0cc4\u0cc2\u0001\u0000\u0000\u0000"
                    + "\u0cc5\u0cc8\u0001\u0000\u0000\u0000\u0cc6\u0cc4\u0001\u0000\u0000\u0000"
                    + "\u0cc6\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cca\u0001\u0000\u0000\u0000"
                    + "\u0cc8\u0cc6\u0001\u0000\u0000\u0000\u0cc9\u0cbb\u0001\u0000\u0000\u0000"
                    + "\u0cc9\u0cbf\u0001\u0000\u0000\u0000\u0cca\u01af\u0001\u0000\u0000\u0000"
                    + "\u0ccb\u0ccc\u0005D\u0000\u0000\u0ccc\u0ccd\u0003\u01b6\u00db\u0000\u0ccd"
                    + "\u01b1\u0001\u0000\u0000\u0000\u0cce\u0ccf\u0005\u0120\u0000\u0000\u0ccf"
                    + "\u0cd0\u0003\u01b6\u00db\u0000\u0cd0\u01b3\u0001\u0000\u0000\u0000\u0cd1"
                    + "\u0cd4\u0005\u016e\u0000\u0000\u0cd2\u0cd4\u0003\u01c0\u00e0\u0000\u0cd3"
                    + "\u0cd1\u0001\u0000\u0000\u0000\u0cd3\u0cd2\u0001\u0000\u0000\u0000\u0cd4"
                    + "\u0cdc\u0001\u0000\u0000\u0000\u0cd5\u0cd8\u0005\u0004\u0000\u0000\u0cd6"
                    + "\u0cd9\u0005\u016e\u0000\u0000\u0cd7\u0cd9\u0003\u01c0\u00e0\u0000\u0cd8"
                    + "\u0cd6\u0001\u0000\u0000\u0000\u0cd8\u0cd7\u0001\u0000\u0000\u0000\u0cd9"
                    + "\u0cdb\u0001\u0000\u0000\u0000\u0cda\u0cd5\u0001\u0000\u0000\u0000\u0cdb"
                    + "\u0cde\u0001\u0000\u0000\u0000\u0cdc\u0cda\u0001\u0000\u0000\u0000\u0cdc"
                    + "\u0cdd\u0001\u0000\u0000\u0000\u0cdd\u01b5\u0001\u0000\u0000\u0000\u0cde"
                    + "\u0cdc\u0001\u0000\u0000\u0000\u0cdf\u0ce2\u0005\u016f\u0000\u0000\u0ce0"
                    + "\u0ce2\u0005\u0170\u0000\u0000\u0ce1\u0cdf\u0001\u0000\u0000\u0000\u0ce1"
                    + "\u0ce0\u0001\u0000\u0000\u0000\u0ce2\u01b7\u0001\u0000\u0000\u0000\u0ce3"
                    + "\u0ce5\u0007.\u0000\u0000\u0ce4\u0ce3\u0001\u0000\u0000\u0000\u0ce4\u0ce5"
                    + "\u0001\u0000\u0000\u0000\u0ce5\u0ce6\u0001\u0000\u0000\u0000\u0ce6\u0ce7"
                    + "\u0005\u0171\u0000\u0000\u0ce7\u01b9\u0001\u0000\u0000\u0000\u0ce8\u0cea"
                    + "\u0007.\u0000\u0000\u0ce9\u0ce8\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0001"
                    + "\u0000\u0000\u0000\u0cea\u0ceb\u0001\u0000\u0000\u0000\u0ceb\u0cec\u0005"
                    + "\u0172\u0000\u0000\u0cec\u01bb\u0001\u0000\u0000\u0000\u0ced\u0cee\u0007"
                    + "/\u0000\u0000\u0cee\u01bd\u0001\u0000\u0000\u0000\u0cef\u0cf0\u0005\u00c3"
                    + "\u0000\u0000\u0cf0\u01bf\u0001\u0000\u0000\u0000\u0cf1\u0cf2\u00070\u0000"
                    + "\u0000\u0cf2\u01c1\u0001\u0000\u0000\u0000\u01a3\u01c6\u01c9\u01cd\u01d0"
                    + "\u01d5\u01dc\u01e2\u01e4\u01ed\u01f0\u01f2\u0230\u0238\u0248\u024f\u0252"
                    + "\u0257\u025b\u0264\u0269\u0271\u0276\u027f\u028b\u0290\u0293\u02a1\u02a8"
                    + "\u02b1\u02c2\u02c6\u02ce\u02d9\u02e3\u02eb\u02f2\u02f6\u02fa\u02ff\u0303"
                    + "\u0308\u030c\u0310\u031a\u031e\u0323\u0328\u032c\u0339\u033e\u0344\u034d"
                    + "\u0351\u0359\u035c\u0361\u0366\u036d\u0374\u0377\u037e\u0384\u0389\u038f"
                    + "\u0394\u0397\u039d\u03ab\u03b5\u03bb\u03c0\u03c5\u03ca\u03ce\u03d3\u03d6"
                    + "\u03e0\u03ec\u03f3\u03f6\u0402\u0407\u040c\u040f\u0416\u0422\u042f\u0431"
                    + "\u0436\u0439\u0448\u044e\u0459\u045c\u0466\u046d\u0473\u047b\u0485\u0499"
                    + "\u049f\u04a3\u04a8\u04ac\u04b1\u04b4\u04b9\u04bc\u04c8\u04cf\u04d4\u04d9"
                    + "\u04dd\u04e2\u04e5\u04ef\u04fb\u0502\u050a\u0518\u0537\u0539\u053e\u0542"
                    + "\u0547\u054e\u0551\u0554\u0559\u055d\u055f\u0566\u056c\u0573\u0579\u057c"
                    + "\u0581\u0585\u0588\u058f\u0595\u0598\u05a2\u05ab\u05b2\u05b9\u05bb\u05c1"
                    + "\u05c4\u05cf\u05d8\u05de\u05e4\u05e7\u05ec\u05ef\u05f2\u05f5\u05f8\u05fe"
                    + "\u0608\u0613\u0616\u061d\u0622\u0627\u062b\u0633\u0637\u063c\u0640\u0642"
                    + "\u0647\u064f\u0654\u065a\u0661\u0664\u066b\u0673\u067b\u067e\u0681\u0686"
                    + "\u068f\u0693\u069d\u06b0\u06b7\u06b9\u06bd\u06c1\u06c9\u06d4\u06dd\u06e5"
                    + "\u06ed\u06f1\u06f9\u070b\u0719\u0720\u0724\u072b\u072d\u0731\u073a\u0742"
                    + "\u074b\u075b\u0761\u0765\u076f\u0777\u0780\u0784\u078a\u078f\u0793\u079d"
                    + "\u07a3\u07a7\u07b3\u07ba\u07ca\u07d1\u07db\u07de\u07e2\u07e9\u07f0\u07f2"
                    + "\u07f6\u07fa\u07ff\u0802\u0806\u0809\u0814\u0817\u0821\u082a\u0831\u0835"
                    + "\u0839\u0840\u0844\u084c\u0852\u0856\u0861\u0868\u0875\u087d\u0881\u088b"
                    + "\u0890\u089d\u08a8\u08b0\u08b4\u08b8\u08bc\u08be\u08c3\u08c6\u08c9\u08cc"
                    + "\u08d0\u08d3\u08d6\u08d9\u08dc\u08e3\u08ee\u08f2\u08f5\u08f9\u0900\u0904"
                    + "\u090e\u0916\u091c\u0920\u0926\u092f\u0932\u0937\u093a\u0944\u0949\u0952"
                    + "\u0957\u095b\u0964\u0968\u0976\u0983\u0988\u098c\u0992\u099d\u099f\u09a6"
                    + "\u09a9\u09b0\u09b5\u09bb\u09be\u09c1\u09d0\u09d7\u09da\u09dd\u09e1\u09e6"
                    + "\u09ec\u09f0\u09fb\u09ff\u0a02\u0a06\u0a0a\u0a0e\u0a12\u0a18\u0a1e\u0a25"
                    + "\u0a2d\u0a33\u0a38\u0a43\u0a4c\u0a50\u0a59\u0a5d\u0a67\u0a6c\u0a82\u0a85"
                    + "\u0a98\u0aa8\u0aaa\u0ab5\u0ac4\u0ad0\u0ad4\u0adf\u0ae3\u0aef\u0af3\u0afe"
                    + "\u0b03\u0b08\u0b0c\u0b10\u0b15\u0b19\u0b1d\u0b34\u0b36\u0b48\u0b4a\u0b52"
                    + "\u0b57\u0b5c\u0b61\u0b6e\u0b73\u0b78\u0b7d\u0b82\u0b87\u0b8c\u0b91\u0b93"
                    + "\u0b9a\u0b9d\u0ba8\u0bb2\u0bba\u0bc3\u0bc9\u0bda\u0bdd\u0bed\u0bf0\u0c00"
                    + "\u0c03\u0c13\u0c16\u0c26\u0c29\u0c39\u0c3c\u0c4a\u0c59\u0c5d\u0c6d\u0c73"
                    + "\u0c78\u0c81\u0c88\u0c8a\u0c90\u0c94\u0c9a\u0ca9\u0cb0\u0cb5\u0cbf\u0cc6"
                    + "\u0cc9\u0cd3\u0cd8\u0cdc\u0ce1\u0ce4\u0ce9";
    public static final String _serializedATN =
            Utils.join(new String[] {_serializedATNSegment0, _serializedATNSegment1}, "");
    public static final ATN _ATN = new ATNDeserializer().deserialize(_serializedATN.toCharArray());

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }
}
