plugins {
    id 'maven'
    id 'java'
    id 'idea'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.sherter.google-java-format' version '0.8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

// In this section you declare where to find the dependencies of your project
repositories {
   // mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources  {
            srcDir 'src/main/resources'
        }
    }

    jmh {
        java {
            srcDir 'src/jmh/java'
        }
        resources  {
            srcDir 'src/jmh/resources'
        }

        compileClasspath += sourceSets.main.runtimeClasspath

        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
    all*.exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
}

def versions = [
        'logger': '2.20.0',
        'spring': '5.3.26',
        'springBoot': '2.7.12',
        'mybatis': '3.5.13'
]

List logger = [
        "org.apache.logging.log4j:log4j-api:${versions.logger}",
        "org.apache.logging.log4j:log4j-core:${versions.logger}",
        "org.apache.logging.log4j:log4j-slf4j-impl:${versions.logger}",
]

List spring =[
        "org.springframework:spring-core:${versions.spring}",
        "org.springframework:spring-beans:${versions.spring}",
        "org.springframework:spring-context:${versions.spring}",
        "org.springframework.retry:spring-retry:1.3.4",
]

List spring_boot =[
        "org.springframework.boot:spring-boot-starter-web:${versions.springBoot}",
        "org.springframework.boot:spring-boot-starter-aop:${versions.springBoot}",
        "org.springframework.boot:spring-boot-starter-validation:${versions.springBoot}",
        "org.springframework.boot:spring-boot-starter-data-jpa:${versions.springBoot}",
]

List mybatis = [
        "org.mybatis:mybatis:${versions.mybatis}"
]

dependencies {
    implementation 'com.alibaba:druid:1.2.18'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'org.apache.shardingsphere:shardingsphere-jdbc-core:5.4.0'
    implementation mybatis, logger, spring, spring_boot

    jmhImplementation 'org.openjdk.jmh:jmh-core:1.36'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'

    testImplementation 'junit:junit:4.13.2'
}

clean.doFirst{
    delete "${projectDir}/dist"
    delete "${projectDir}/logs"
    delete "${projectDir}/build"
    delete "${projectDir}/logs"
    delete "${projectDir}/out"
}

googleJavaFormat {
    toolVersion = '1.7'
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
//    exclude '**/*Test.java'
//    exclude '**/Test*.java'
//    exclude '**/Mock*.java'
}

jar {
    with {
        destinationDirectory = file('dist/apps')
        archiveFileName = project.name + "-" + version + ".jar"
    }

    doLast {
        copy {
            from 'src/main/resources'
            into 'dist/conf'
        }
        copy {
            from configurations.runtimeClasspath
            into 'dist/lib'
        }
        copy {
            from 'script'
            include '*.bat', '*.sh', '*.env', '*.py'
            into 'dist'
        }
        copy {
            from '.'
            include '*.bat', '*.sh', '*.env', '*.py'
            into 'dist'
        }
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'jmh.benchmarks.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}